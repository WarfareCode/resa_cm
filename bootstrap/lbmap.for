      SUBROUTINE BBALOC (TBL,JNAME,NSEG,ISLOTS,IENTRY)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER IBB_PAGES_MAPPED
      COMMON / BB_MAP / IBB_PAGES_MAPPED
cpar$ private / BB_Map / ! No FORTRAN global section
      INTEGER PREVTBL / 0 /
      INTEGER TBL,LSTTBL,NSEG,ISLOTS,IENTRY,INAME
      CHARACTER *(*) JNAME
      INTEGER K,KTBLN,IFLAG
      K=0
      INAME ='20202020'X
      CALL SMOVVN (JNAME,INAME,K)
      IF(.NOT.(IBB(183).LT.2049))GOTO 23000
      IBB(183)=2049
23000 CONTINUE
      KTBLN=TBL
      IF(.NOT.(KTBLN.LT.1))GOTO 23002
      RETURN
23002 CONTINUE
      IBBP(5,KTBLN)=IENTRY
      IBBP(2,KTBLN)=ISLOTS *IABS(IENTRY)
      IBBP(4,KTBLN)=INAME
      IBBP(3,KTBLN)=0
      IBBP(6,KTBLN)=0
      IF(.NOT.(PREVTBL.NE.0))GOTO 23004
      KTBLN=PREVTBL
      IBBP(6,KTBLN)=TBL
      KTBLN=TBL
23004 CONTINUE
      PREVTBL =TBL
      IF(.NOT.(IBB(183)+IBBP(2,KTBLN).GT.10240000.OR.IBB(183)+IBBP(2,KTB
     *LN).GT.IBB_PAGES_MAPPED*128))GOTO 23006
      CALL ECHOR
      CALL ECHOV ('Error on Allocating table #')
      CALL ECHOI (KTBLN)
      CALL ECHOV (' (')
      CALL ECHOHN(IBBP(4,KTBLN),5)
      CALL ECHOV (').  ')
      CALL ECHOR
      IF(.NOT.(10240000.EQ.IBB_PAGES_MAPPED*128))GOTO 23008
      CALL ECHOV ('Exceeded maximum of ')
      CALL ECHOI (10240000)
      CALL ECHOV (' words for blackboard.')
      GOTO 23009
23008 CONTINUE
      CALL ECHOV ('Exceeded current maximum of ')
      CALL ECHOI (IBB_PAGES_MAPPED )
      CALL ECHOV (' block blackboard.')
23009 CONTINUE
      CALL ECHOR
      CALL ECHOV ('The ')
      CALL ECHOHN(IBBP(4,KTBLN),5)
      CALL ECHOV (' table requires a total of ')
      CALL ECHOI (IBBP(2,KTBLN))
      CALL ECHOV (' words.')
      CALL ECHOR
      K =(IBB(183)+IBBP(2,KTBLN)+127) / 128
      CALL ECHOV ('An additional ')
      CALL ECHOI (K -IBB_PAGES_MAPPED )
      CALL ECHOV (' blocks are needed for this one table.')
      CALL ECHOR
      CALL ECHOI (IBB(183))
      CALL ECHOV (' words out of ')
      CALL ECHOI (IBB_PAGES_MAPPED *128 )
      CALL ECHOV (' words are already allocated.')
      CALL ECHOR
      IF(.NOT.(IBB_PAGES_MAPPED.LT.80000))GOTO 23010
      CALL ECHOR
      CALL ECHOV ('Note:  Your current BlackBoard is only ')
      CALL ECHOI (IBB_PAGES_MAPPED )
      CALL ECHOV (' pages of the ')
      CALL ECHOI (80000)
      CALL ECHOV (' allowed.')
      CALL ECHOR
      CALL ECHOV ('       You will have to delete the existing ')
      CALL ECHOV ('BlackBoard file, and restart')
      CALL ECHOR
      CALL ECHOV (                                                      
     *'       Game Initialization with a larger (or default) ')
      CALL ECHOV ('size specification.')
      CALL ECHOR
      CALL ECHOR
23010 CONTINUE
      CALL ECHOV ('Initialization is aborted....')
      CALL ECHOR
      STOP 'Blackboard too small'
23006 CONTINUE
      IBBP(1,KTBLN)=IBB(183)
      IBB(183)=IBB(183)+IBBP(2,KTBLN)
      IBB(098)=MAX(IBB(183),IBB(098))
      LSTTBL =KTBLN
      RETURN
      ENTRY BBTRIM (TBL)
      KTBLN=TBL
      IF(.NOT.(IBB(801).EQ.1))GOTO 23012
      RETURN
23012 CONTINUE
      IF(.NOT.(IBBP(3,KTBLN).EQ.0))GOTO 23014
      IFLAG =1
      CALL CDRESS(%REF('Em T'),IBB(IBBP(1,KTBLN)),1,4)
      GOTO 23015
23014 CONTINUE
      IFLAG =0
23015 CONTINUE
      IF(.NOT.(LSTTBL.EQ.KTBLN))GOTO 23016
      IBB(183)=IBB(183)-IBBP(2,KTBLN)+IBBP(3,KTBLN)+IFLAG
      LSTTBL =0
23016 CONTINUE
      IBBP(2,KTBLN)=IBBP(3,KTBLN)+IFLAG
      RETURN
      END
      SUBROUTINE BBZAPT (KTBLN)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KTBLN,ISIZE,IPNT
      IF(.NOT.(IBBP(1,KTBLN).GT.IBB(183).OR.IBBP(4,KTBLN).EQ.0))GOTO 230
     *18
      CALL ECHOR
      CALL ECHOV ('Error on Zapping table #')
      CALL ECHOI (KTBLN)
      CALL ECHOV (' (')
      CALL ECHOHN(IBBP(4,KTBLN),5)
      CALL ECHOV (').  ')
      IF(.NOT.(IBBP(4,KTBLN).EQ.0))GOTO 23020
      CALL ECHOV ('Not Defined.  ')
23020 CONTINUE
      IF(.NOT.(IBBP(1,KTBLN).GT.IBB(183)))GOTO 23022
      CALL ECHOV ('Not Mapped.')
23022 CONTINUE
      STOP
23018 CONTINUE
      IPNT =0
23024 IF(.NOT.(IPNT.LT.IBBP(2,KTBLN)))GOTO 23026
      IBB(IBBP(1,KTBLN)+IPNT) =0
23025 IPNT=IPNT+1
      GOTO 23024
23026 CONTINUE
      RETURN
      END
      SUBROUTINE BBSMAP (WNAME,KPAGES)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER IBB_PAGES_MAPPED
      COMMON / BB_MAP / IBB_PAGES_MAPPED
cpar$ private / BB_Map / ! No FORTRAN global section
      CHARACTER *(*) WNAME
      LOGICAL*1 FNAME(100),SNAME(100),SECTION_NAME(60)
      CHARACTER MSG*100
      INTEGER KPAGES,NPAGES,FOPENM,FPMAP,PAGES_MAPPED,SAVE_ERR
      INTEGER ILEN,I,LENF,LENGTH,SEG$JFN,IERR,KK
      NPAGES =KPAGES
      ILEN =0
      CALL SMOVVN (WNAME,FNAME,ILEN)
      CALL SMOV (0,FNAME,ILEN)
      ILEN =0
      CALL SMOV (0,SECTION_NAME,ILEN)
      IF(.NOT.(NPAGES.LT.0))GOTO 23027
      RETURN
23027 CONTINUE
      NPAGES =MIN (80000,KPAGES)
      IF(.NOT.(NPAGES.LT.4000))GOTO 23029
      PRINT *,                                                          
     *'Sorry, cannot request BB with fewer than 4000 pages, not',NPAGES
      NPAGES =80000
23029 CONTINUE
      IERR =FOPENM (SEG$JFN,FNAME,NPAGES,IERR)
      IF(.NOT.(IERR.EQ.1))GOTO 23031
      STOP 'Error on Opening Blackboard file'
23031 CONTINUE
      PAGES_MAPPED =FPMAP (SEG$JFN,SECTION_NAME,NPAGES,IBB,0,IERR)
      IBB_PAGES_MAPPED =PAGES_MAPPED
      IF(.NOT.(NPAGES.NE.PAGES_MAPPED))GOTO 23033
      IERR =1
23033 CONTINUE
      IF(.NOT.(IERR.EQ.1))GOTO 23035
      STOP 'Error on Mapping Blackboard'
23035 CONTINUE
      RETURN
      END
      INTEGER FUNCTION FOPENM (JFN,FILENAME,PAGES,ISTAT)
      IMPLICIT NONE
      LOGICAL*1 FILENAME(81)
      INTEGER JFN,PAGES,ISTAT,LENGTH
      INTEGER MMAP_FILE_OPEN
      LOGICAL*4 FILE_PRESENT
      INTEGER*4 LFC,KK
      INTEGER*4 IREC
      EXTERNAL LENGTH
      ISTAT =MMAP_FILE_OPEN (JFN,FILENAME,PAGES,ISTAT)
      FOPENM=(ISTAT)
      RETURN
      END
      INTEGER FUNCTION FPMAP (JFN,SECTION_NAME,PAGES,ARRAY,OFFSET,ISTAT)
      IMPLICIT NONE
      INTEGER JFN,PAGES,ARRAY(100),OFFSET,ISTAT
      LOGICAL*1 SECTION_NAME(60)
      INTEGER MMAP_ADDR,C_MMAP
      MMAP_ADDR =C_MMAP(JFN,ARRAY,PAGES*512)
      FPMAP=PAGES
      RETURN
      END
      INTEGER FUNCTION FPMAP_DTED(JFN,NAME,PAGES,ARRAY,OFFSET,OK_TO_WRIT
     *E,ISTAT)
      IMPLICIT NONE
      INTEGER JFN,PAGES,ARRAY(100),OFFSET,OK_TO_WRITE,ISTAT
      LOGICAL*1 NAME(60)
      INTEGER MMAP_ADDR,C_MMAP_DTED
      MMAP_ADDR =C_MMAP_DTED(JFN,ARRAY,PAGES*512)
      FPMAP_DTED=PAGES
      RETURN
      END
