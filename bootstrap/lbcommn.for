      SUBROUTINE CHECK_VERSION (IERR,MSG)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      LOGICAL*1 MSG(100)
      INTEGER IERR,KK
      IERR =0
      MSG(1) =0
      IF(.NOT.(FBB(099).EQ.9.100))GOTO 23000
      RETURN
23000 CONTINUE
      KK =0
      CALL SMOVV ('Database Version ',MSG,KK)
      IF(.NOT.(INT(FBB(099)*100).NE.INT(9.100*100)))GOTO 23002
      CALL SMOVV ('ERROR',MSG,KK)
      IERR =1
      GOTO 23003
23002 CONTINUE
      CALL SMOVV ('WARNING',MSG,KK)
23003 CONTINUE
      CALL SMOVV (' (',MSG,KK)
      CALL SMOVF (FBB(099),3,MSG,KK)
      CALL SMOVV (' DB Vs ',MSG,KK)
      CALL SMOVF (9.100,3,MSG,KK)
      CALL SMOVV (' System) ',MSG,KK)
      CALL SMOV (0,MSG,KK)
      RETURN
      END
      SUBROUTINE CHECK_PASSWORD(ISIDE)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER ISIDE,LCOMP,LENGTH
      LOGICAL*1 LINE(8)
      INTEGER LEN,II,ISTAT
      IF(.NOT.((ISIDE.EQ.1.AND.CBB(059-29).EQ.0).OR.(ISIDE.EQ.2.AND.CBB(
     *057-28).EQ.0).OR.(ISIDE.EQ.7.AND.CBB(061-30).EQ.0).OR.(ISIDE.EQ.0.
     *AND.CBB(055-27).EQ.0)))GOTO 23004
      RETURN
23004 CONTINUE
      CALL ECHOR
      CALL ECHOV('Enter Password: ')
      CALL ECHOP('HOLD')
      CALL GETLNH(LINE,8)
      CALL ECHOP('RELS')
      CALL UPPER(LINE)
      CALL ECHOR
      LEN =LENGTH(LINE)
      II =LEN+1
23006 IF(.NOT.(II.LE.8))GOTO 23008
      LINE(II) =32
23007 II=II+1
      GOTO 23006
23008 CONTINUE
      IF(.NOT.(ISIDE.EQ.1))GOTO 23009
      ISTAT =LCOMP(LINE,CBB(059-29))
      GOTO 23010
23009 CONTINUE
      IF(.NOT.(ISIDE.EQ.0))GOTO 23011
      ISTAT =LCOMP(LINE,CBB(055-27))
      GOTO 23012
23011 CONTINUE
      IF(.NOT.(ISIDE.EQ.7))GOTO 23013
      ISTAT =LCOMP(LINE,CBB(061-30))
      GOTO 23014
23013 CONTINUE
      ISTAT =LCOMP(LINE,CBB(057-28))
23014 CONTINUE
23012 CONTINUE
23010 CONTINUE
      IF(.NOT.(ISTAT.NE.0))GOTO 23015
      CALL ECHOV('Better luck next time!')
      CALL ECHO(7)
      CALL ECHOR
      CALL HLTSLF
23015 CONTINUE
      RETURN
      END
      SUBROUTINE DEQGET(KPOINT_UNT,IDENT,NFOUND,EQLIST)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER NFOUND,EQLIST(5,100)
      INTEGER IDENT
      INTEGER*4  KPOINT_UNT
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  I_DEQ_REMAINING
      INTEGER*4  KPOINT_MC
      INTEGER*4  I_MC_MAXRANGE
      INTEGER*4  I_BOM_DROPRANGE
      INTEGER*4  KPOINT_BOM
      INTEGER*4  KPOINT_CMC
      INTEGER*4  I_CMC_SAMMAXRANGE
      INTEGER*4  KPOINT_TOR
      INTEGER*4  I_TOR_MAXEF
      IF(.NOT.(.NOT.(KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,
     *01)+IBBP(3,01)-1))))GOTO 23017
      RETURN
23017 CONTINUE
      KPOINT_DEQ=IBBP(1,03)-6+(6)*((KPOINT_UNT-IBBP(1,01))/104+1)
      KPOINT_DEQ=IBBP(1,03)-6+(6)*((KPOINT_UNT-IBBP(1,01))/104+1)
23019 IF(.NOT.(KPOINT_DEQ.GE.IBBP(1,03)))GOTO 23021
      IF(.NOT.(NFOUND.GE.100))GOTO 23022
      GOTO 23021
23022 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_DEQ+2),-(0)),'00FF'X)).NE.IDENT))G
     *OTO 23024
      GOTO 23020
23024 CONTINUE
      I_DEQ_REMAINING=(IAND(ISHFT(IBB(KPOINT_DEQ+1),-(13)),'07FFFF'X))
      IF(.NOT.(I_DEQ_REMAINING.EQ.0))GOTO 23026
      GOTO 23020
23026 CONTINUE
      IF(.NOT.(FBB(KPOINT_DEQ+3).GT.FBB(461)))GOTO 23028
      GOTO 23020
23028 CONTINUE
      NFOUND =NFOUND +1
      EQLIST(1,NFOUND) =((KPOINT_DEQ-IBBP(1,03))/6+1)
      EQLIST(2,NFOUND) =(IAND(ISHFT(IBB(KPOINT_DEQ),-(12)),'0FFFFF'X)+IB
     *BP(1,34))
      EQLIST(3,NFOUND) =I_DEQ_REMAINING
      IF(.NOT.(IDENT.EQ.8))GOTO 23030
      KPOINT_MC=EQLIST(2,NFOUND)
      I_MC_MAXRANGE=(IAND(ISHFT(IBB(KPOINT_MC+12),-(24)),'00FF'X)*2)
      EQLIST(4,NFOUND) =MAX (1,I_MC_MAXRANGE)
      EQLIST(5,NFOUND) =(IAND(ISHFT(IBB(KPOINT_MC+9),-(5)),'003F'X))
      GOTO 23031
23030 CONTINUE
      IF(.NOT.(IDENT.EQ.49))GOTO 23032
      KPOINT_CMC=EQLIST(2,NFOUND)
      I_CMC_SAMMAXRANGE=(IAND(ISHFT(IBB(KPOINT_CMC+16),-(16)),'01FF'X))
      EQLIST(4,NFOUND) =MAX (1,I_CMC_SAMMAXRANGE)
      EQLIST(5,NFOUND) =(IAND(ISHFT(IBB(KPOINT_CMC+14),-(21)),'003F'X))
      GOTO 23033
23032 CONTINUE
      IF(.NOT.(IDENT.EQ.7))GOTO 23034
      KPOINT_MC=EQLIST(2,NFOUND)
      I_MC_MAXRANGE=(IAND(ISHFT(IBB(KPOINT_MC+12),-(24)),'00FF'X)*2)
      EQLIST(4,NFOUND) =MAX (1,I_MC_MAXRANGE)
      EQLIST(5,NFOUND) =1
      GOTO 23035
23034 CONTINUE
      IF(.NOT.(IDENT.EQ.6))GOTO 23036
      KPOINT_MC=EQLIST(2,NFOUND)
      I_MC_MAXRANGE=(IAND(ISHFT(IBB(KPOINT_MC+12),-(24)),'00FF'X)*2)
      EQLIST(4,NFOUND) =MAX (1,I_MC_MAXRANGE)
      EQLIST(5,NFOUND) =1
      GOTO 23037
23036 CONTINUE
      IF(.NOT.(IDENT.EQ.12))GOTO 23038
      KPOINT_BOM=EQLIST(2,NFOUND)
      I_BOM_DROPRANGE=(IAND(ISHFT(IBB(KPOINT_BOM+8),-(24)),'00FF'X))
      EQLIST(4,NFOUND) =MAX (1,I_BOM_DROPRANGE)
      EQLIST(5,NFOUND) =1
      GOTO 23039
23038 CONTINUE
      IF(.NOT.(IDENT.EQ.30))GOTO 23040
      KPOINT_TOR=EQLIST(2,NFOUND)
      I_TOR_MAXEF=0.5 +(IAND(ISHFT(IBB(KPOINT_TOR+8),-(0)),'FFFF'X)*10)/
     * 2026
      EQLIST(4,NFOUND) =I_TOR_MAXEF
      EQLIST(5,NFOUND) =1
      GOTO 23041
23040 CONTINUE
      EQLIST(4,NFOUND) =0
      EQLIST(5,NFOUND) =0
23041 CONTINUE
23039 CONTINUE
23037 CONTINUE
23035 CONTINUE
23033 CONTINUE
23031 CONTINUE
23020 KPOINT_DEQ=IBBP(1,03)-6+(6)*(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),  
     *'0FFFFF'X))
      GOTO 23019
23021 CONTINUE
      RETURN
      END
      SUBROUTINE SORT_EQLIST (EQLIST,ITEMS,ICOL)
      IMPLICIT NONE
      INTEGER EQLIST(5,100),ITEMS
      INTEGER N,M,ICOL,ISAVE
      N =1
23042 IF(.NOT.(N.LT.ITEMS))GOTO 23044
      M =N+1
23045 IF(.NOT.(M.LE.ITEMS))GOTO 23047
      IF(.NOT.(EQLIST(ICOL,N).LE.EQLIST(ICOL,M)))GOTO 23048
      GOTO 23046
23048 CONTINUE
      ISAVE=EQLIST(1,N)
      EQLIST(1,N)=EQLIST(1,M)
      EQLIST(1,M)=ISAVE
      ISAVE=EQLIST(2,N)
      EQLIST(2,N)=EQLIST(2,M)
      EQLIST(2,M)=ISAVE
      ISAVE=EQLIST(3,N)
      EQLIST(3,N)=EQLIST(3,M)
      EQLIST(3,M)=ISAVE
      ISAVE=EQLIST(4,N)
      EQLIST(4,N)=EQLIST(4,M)
      EQLIST(4,M)=ISAVE
      ISAVE=EQLIST(5,N)
      EQLIST(5,N)=EQLIST(5,M)
      EQLIST(5,M)=ISAVE
23046 M=M+1
      GOTO 23045
23047 CONTINUE
23043 N=N+1
      GOTO 23042
23044 CONTINUE
      RETURN
      END
      SUBROUTINE DEQ_JAMTST (KPOINT_DEQ,F_RAD_CH_FREQUENCY,NJAM,NJPF)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER NJAM,JAMX,NJPF
      INTEGER*4  KPOINT_JAM
      INTEGER*4  INDEX_JAM_FQ
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  INDEX_DEQ_EM
      REAL*4     F_RAD_CH_FREQUENCY
      IF(.NOT.(NJAM.EQ.0))GOTO 23050
      KPOINT_JAM=(IAND(ISHFT(IBB(KPOINT_DEQ),-(12)),'0FFFFF'X)+IBBP(1,34
     *))
      DO 23052 JAMX =1,10
      INDEX_DEQ_EM=JAMX
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_DEQ+1),-((INDEX_DEQ_EM))),'0001'X)
     *).EQ.1))GOTO 23054
      INDEX_JAM_FQ=INDEX_DEQ_EM
      IF(.NOT.((IAND(ISHFT(IBB((KPOINT_JAM+12+(INDEX_JAM_FQ-1)*3)),-(0))
     *,'FFFF'X)).EQ.NINT(F_RAD_CH_FREQUENCY)))GOTO 23056
      NJAM =1
      NJPF =(IAND(ISHFT(IBB((KPOINT_JAM+12+(INDEX_JAM_FQ-1)*3)),-(16)), 
     *'01FF'X))
      GOTO 23053
23056 CONTINUE
23054 CONTINUE
23052 CONTINUE
23053 CONTINUE
23050 CONTINUE
      RETURN
      END
      SUBROUTINE UNTFND(I_UNT_VIEW,NAME,KPOINT_UNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER IGOT,LITCMP
      REAL*8 CSTRIP8,NAME
      INTEGER*4  KPOINT_UNT
      REAL*8     C_UNT_NAME
      INTEGER*4  I_UNT_VIEW
      INTEGER*4  I_UNT_TYPE
      IGOT =0
      KPOINT_UNT=IBBP(1,01)
23058 IF(.NOT.((KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,01)+I
     *BBP(3,01)-1))))GOTO 23060
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+15),-(16)),'00FF'X)).EQ.0))GOT
     *O 23061
      GOTO 23059
23061 CONTINUE
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X)).EQ.I_UNT_
     *VIEW.OR.I_UNT_VIEW.EQ.IBB(128).OR.I_UNT_TYPE.EQ.7))GOTO 23063
      IF(.NOT.(LITCMP(CSTRIP8(IBB(KPOINT_UNT)),NAME).EQ.0))GOTO 23065
      IGOT =1
      GOTO 23060
23065 CONTINUE
      IF(.NOT.(IBB(278).EQ.1.AND.I_UNT_TYPE.EQ.1.AND.LITCMP(CSTRIP8(IBB(
     *KPOINT_UNT+12)),NAME).EQ.0))GOTO 23067
      IGOT =1
      GOTO 23060
23067 CONTINUE
      IF(.NOT.(IBB(278).EQ.1.AND.(IAND(ISHFT(IBB(KPOINT_UNT+16),-(17)), 
     *'07FF'X)).EQ.(ISHFT(3,3)+1).AND.LITCMP(CSTRIP8(IBB(KPOINT_UNT+12))
     *,NAME).EQ.0))GOTO 23069
      IGOT =1
      GOTO 23060
23069 CONTINUE
      IF(.NOT.(LITCMP(CSTRIP8(IBB(KPOINT_UNT+10)),NAME).EQ.0))GOTO 23071
      IGOT =1
      GOTO 23060
23071 CONTINUE
23070 CONTINUE
23068 CONTINUE
23066 CONTINUE
23063 CONTINUE
23059 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23058
23060 CONTINUE
      IF(.NOT.(IGOT.EQ.0))GOTO 23073
      KPOINT_UNT=0
23073 CONTINUE
      RETURN
      END
      SUBROUTINE UNTGET(NTOFND,NFIND)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER NFOUND,NFIND,NTOFND
      INTEGER*4  KPOINT_UNT
      DIMENSION NFIND(11)
      NFOUND =0
      KPOINT_UNT=IBBP(1,01)
23075 IF(.NOT.((KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LT.(IBBP(1,01)+I
     *BBP(2,01)))))GOTO 23077
      IF(.NOT.(IBB(KPOINT_UNT+16).EQ.0))GOTO 23078
      NFOUND =NFOUND +1
      NFIND(NFOUND+1) =KPOINT_UNT
      IF(.NOT.(KPOINT_UNT.GT.(IBBP(1,01)+IBBP(3,01)-1)))GOTO 23080
      IBBP(3,01)=1-IBBP(1,01)+KPOINT_UNT+104-1
23080 CONTINUE
      IF(.NOT.(NFOUND.EQ.NTOFND.OR.NFOUND.EQ.10))GOTO 23082
      GOTO 23077
23082 CONTINUE
23078 CONTINUE
23076 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23075
23077 CONTINUE
      NFIND(1) =NFOUND
      RETURN
      END
      SUBROUTINE EXPTST(IDENT,ISEXP)
      IMPLICIT NONE
      INTEGER ISEXP,IDENT
      BYTE EXPEND(0:64)
      DATA EXPEND(5) /1/
      DATA EXPEND(6) /1/
      DATA EXPEND(7) /1/
      DATA EXPEND(8) /1/
      DATA EXPEND(9) /1/
      DATA EXPEND(10) /1/
      DATA EXPEND(11) /1/
      DATA EXPEND(12) /1/
      DATA EXPEND(13) /1/
      DATA EXPEND(15) /1/
      DATA EXPEND(16) /1/
      DATA EXPEND(17) /1/
      DATA EXPEND(22) /1/
      DATA EXPEND(30) /1/
      DATA EXPEND(34) /1/
      DATA EXPEND(36) /1/
      DATA EXPEND(37) /1/
      DATA EXPEND(38) /1/
      DATA EXPEND(49) /1/
      ISEXP =EXPEND(IDENT)
      RETURN
      END
      SUBROUTINE FGTASK (ITASK,TASKN)
      IMPLICIT NONE
      REAL*8 TASKN
      INTEGER ITASK
      INTEGER KK
      KK =0
      CALL SMOVV ('0.0.0.0',TASKN,KK)
      IF(.NOT.(ITASK.GT.9999))GOTO 23084
      CALL IPBYTE (TASKN,1,MOD(ITASK/10000,10)+48)
      CALL IPBYTE (TASKN,3,MOD(ITASK/1000,10)+48)
      CALL IPBYTE (TASKN,5,MOD(ITASK/100,10)+48)
      CALL IPBYTE (TASKN,7,MOD(ITASK/10,10)+48)
      CALL IPBYTE (TASKN,8,MOD(ITASK,10)+48)
      GOTO 23085
23084 CONTINUE
      CALL IPBYTE (TASKN,1,MOD(ITASK/1000,10)+48)
      CALL IPBYTE (TASKN,3,MOD(ITASK/100,10)+48)
      CALL IPBYTE (TASKN,5,MOD(ITASK/10,10)+48)
      CALL IPBYTE (TASKN,7,MOD(ITASK,10)+48)
23085 CONTINUE
      RETURN
      END
      SUBROUTINE FGLAT (LAT,LATN)
      IMPLICIT NONE
      REAL*8 LATN
      INTEGER LAT,K,KK
      KK =0
      CALL SMOVV ('00-00N',LATN,KK)
      K =IABS(LAT)
      CALL IPBYTE (LATN,1,MOD(K/1000,10)+48)
      CALL IPBYTE (LATN,2,MOD(K/100,10)+48)
      CALL IPBYTE (LATN,4,MOD(K/10,10)+48)
      CALL IPBYTE (LATN,5,MOD(K,10)+48)
      IF(.NOT.(LAT.LT.0))GOTO 23086
      CALL IPBYTE (LATN,6,83)
23086 CONTINUE
      RETURN
      END
      SUBROUTINE FGLONG (LONG,LONGN)
      IMPLICIT NONE
      REAL*8 LONGN
      INTEGER K,LONG,KK
      KK =0
      CALL SMOVV ('000-00E',LONGN,KK)
      K =IABS(LONG)
      CALL IPBYTE (LONGN,1,MOD(K/10000,10)+48)
      CALL IPBYTE (LONGN,2,MOD(K/1000,10)+48)
      CALL IPBYTE (LONGN,3,MOD(K/100,10)+48)
      CALL IPBYTE (LONGN,5,MOD(K/10,10)+48)
      CALL IPBYTE (LONGN,6,MOD(K,10)+48)
      IF(.NOT.(LONG.LT.0))GOTO 23088
      CALL IPBYTE (LONGN,7,87)
23088 CONTINUE
      RETURN
      END
      SUBROUTINE GETACT (I1,I2,I3,I4,I5,I6,I7)
      IMPLICIT NONE
      INTEGER I1,I2,I3,I4,I5,I6,I7
23090 CONTINUE
      CALL TRACE
      CALL HLTSLF
23091 GOTO 23090
23092 CONTINUE
      RETURN
      END
      SUBROUTINE GETTRK (I1,I2,I3,I4)
      IMPLICIT NONE
      INTEGER I1,I2,I3,I4
23093 CONTINUE
      CALL TRACE
      CALL HLTSLF
23094 GOTO 23093
23095 CONTINUE
      RETURN
      END
      SUBROUTINE GETNAM (KPOINT_NAM)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4  KPOINT_NAM
      KPOINT_NAM=IBBP(1,71)
23096 IF(.NOT.((KPOINT_NAM.GE.IBBP(1,71).AND.KPOINT_NAM.LT.(IBBP(1,71)+I
     *BBP(2,71)))))GOTO 23098
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_NAM+2),-(16)),'000F'X)).EQ.0))GOTO
     * 23099
      RETURN
23099 CONTINUE
23097 KPOINT_NAM=KPOINT_NAM+4
      GOTO 23096
23098 CONTINUE
      KPOINT_NAM=0
      RETURN
      END
      SUBROUTINE ADDNAM_UNIT (KPOINT_UNT,KPOINT_NAM)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 CSTRIP8
      INTEGER INDX,IFREE,INUSE
      INTEGER*4  KPOINT_UNT
      REAL*8     C_UNT_NAME
      INTEGER*4  KPOINT_NAM
      INTEGER*4  I_NAM_TYPE
      REAL*8     C_NAM_NAME
      INDX =((KPOINT_UNT-IBBP(1,01))/104+1)
      C_NAM_NAME=CSTRIP8(IBB(KPOINT_UNT))
      IFREE =0
      KPOINT_NAM=IBBP(1,71)
23101 IF(.NOT.((KPOINT_NAM.GE.IBBP(1,71).AND.KPOINT_NAM.LT.(IBBP(1,71)+I
     *BBP(2,71)))))GOTO 23103
      I_NAM_TYPE=(IAND(ISHFT(IBB(KPOINT_NAM+2),-(16)),'000F'X))
      IF(.NOT.(I_NAM_TYPE.EQ.0.AND.IFREE.EQ.0))GOTO 23104
      IFREE =KPOINT_NAM
23104 CONTINUE
      IF(.NOT.(I_NAM_TYPE.NE.1))GOTO 23106
      GOTO 23102
23106 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_NAM+2),-(0)),'FFFF'X)).NE.INDX))GO
     *TO 23108
      GOTO 23102
23108 CONTINUE
      IF(.NOT.(CSTRIP8(IBB(KPOINT_NAM)).NE.C_NAM_NAME))GOTO 23110
      GOTO 23102
23110 CONTINUE
      RETURN
23102 KPOINT_NAM=KPOINT_NAM+4
      GOTO 23101
23103 CONTINUE
      KPOINT_NAM=IFREE
      IF(.NOT.(KPOINT_NAM.NE.0))GOTO 23112
      CALL CDRESS8(%REF(C_NAM_NAME),IBB(KPOINT_NAM))
      IBB(KPOINT_NAM+2)=IOR(IAND(IBB(KPOINT_NAM+2),NOT(ISHFT('FFFF'X,0))
     *),ISHFT(IAND((INDX),'FFFF'X),0))
      IBB(KPOINT_NAM+2)=IOR(IAND(IBB(KPOINT_NAM+2),NOT(ISHFT('0001'X,20)
     *)),ISHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_NAM+2),-(20)
     *),'0001'X)))),'0001'X),20))
      IBB(114)=1
      IBB(KPOINT_NAM+2)=IOR(IAND(IBB(KPOINT_NAM+2),NOT(ISHFT('000F'X,16)
     *)),ISHFT(IAND((1),'000F'X),16))
      INUSE =((KPOINT_NAM-IBBP(1,71))/4+1)*4
      IF(.NOT.(INUSE.GT.IBBP(3,71)))GOTO 23114
      IBBP(3,71)=INUSE
23114 CONTINUE
23112 CONTINUE
      RETURN
      END
      SUBROUTINE GTACT (I_UNT_VIEW,CTRACK,KPOINT_RMT,IBONLY)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 CTRACK
      INTEGER IBONLY,INDX
      INTEGER*4  KPOINT_RMT
      INTEGER*4  I_UNT_VIEW
      INTEGER*4  KPOINT_RVU
      INTEGER*4  I_RMT_DETECTIONTYPE
      CALL GTTRK(CTRACK,KPOINT_RMT)
      IF(.NOT.(KPOINT_RMT.EQ.0))GOTO 23116
      RETURN
23116 CONTINUE
      IF(.NOT.(I_UNT_VIEW.GT.IBB(128)))GOTO 23118
      INDX =((KPOINT_RMT-IBBP(1,56))/21+1)
      KPOINT_RVU=IBBP(1,67)-2+(2)*I_UNT_VIEW
      IF(.NOT.(INDX.LT.(IAND(ISHFT(IBB(KPOINT_RVU+1),-(0)),'FFFF'X)).OR.
     *INDX.GT.(IAND(ISHFT(IBB(KPOINT_RVU+1),-(16)),'FFFF'X))))GOTO 23120
      KPOINT_RMT=0
      RETURN
23120 CONTINUE
23118 CONTINUE
      I_RMT_DETECTIONTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X))
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.0.OR.I_RMT_DETECTIONTYPE.EQ.1))GOT
     *O 23122
      IBONLY =0
      GOTO 23123
23122 CONTINUE
      IBONLY =1
23123 CONTINUE
      RETURN
      END
      SUBROUTINE GTTRK (CTRACK,KPOINT_RMT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 CTRACK,CLASS,CSTRIP
      INTEGER NUMBER,IGBYTE,IDTYP1,IDTYP2,ICLASS,I,KK,CTOI
      INTEGER*4  KPOINT_RMT
      INTEGER*4  I_RMT_DETECTIONTYPE
      INTEGER*4  KPOINT_RVU
      REAL*8     C_RVU_TRACKCODE
      INTEGER*4  I_RVU_LASTRMTINDX
      C_RVU_TRACKCODE='2020202020202020'X
      CALL IPBYTE (C_RVU_TRACKCODE,1,IGBYTE(CTRACK,1))
      CLASS =IGBYTE(CTRACK,2)
      IF(.NOT.(CLASS.EQ.65))GOTO 23124
      IDTYP1 =0
      IDTYP2 =1
      ICLASS =1
      GOTO 23125
23124 CONTINUE
      IF(.NOT.(CLASS.EQ.83))GOTO 23126
      IDTYP1 =0
      IDTYP2 =1
      ICLASS =3
      GOTO 23127
23126 CONTINUE
      IF(.NOT.(CLASS.EQ.85))GOTO 23128
      IDTYP1 =0
      IDTYP2 =1
      ICLASS =2
      GOTO 23129
23128 CONTINUE
      IF(.NOT.(CLASS.EQ.69))GOTO 23130
      IDTYP1 =3
      IDTYP2 =3
      ICLASS = 0
      GOTO 23131
23130 CONTINUE
      IF(.NOT.(CLASS.EQ.80))GOTO 23132
      IDTYP1 =2
      IDTYP2 =2
      ICLASS = 0
      GOTO 23133
23132 CONTINUE
      IF(.NOT.(CLASS.EQ.79))GOTO 23134
      IDTYP1 =1
      IDTYP2 =1
      ICLASS = 0
      GOTO 23135
23134 CONTINUE
      KPOINT_RMT=0
      RETURN
23135 CONTINUE
23133 CONTINUE
23131 CONTINUE
23129 CONTINUE
23127 CONTINUE
23125 CONTINUE
      KK =3
      NUMBER =CTOI(%REF(CTRACK),KK)
      KPOINT_RVU=IBBP(1,67)
23136 IF(.NOT.((KPOINT_RVU.GE.IBBP(1,67).AND.KPOINT_RVU.LE.(IBBP(1,67)+I
     *BBP(3,67)-1))))GOTO 23138
      IF(.NOT.(CSTRIP(IBB(KPOINT_RVU),4,1).NE.C_RVU_TRACKCODE))GOTO 2313
     *9
      GOTO 23137
23139 CONTINUE
      I_RVU_LASTRMTINDX=(IAND(ISHFT(IBB(KPOINT_RVU+1),-(16)),'FFFF'X))
      IF(.NOT.(KPOINT_RMT.EQ.0))GOTO 23141
      I =(IAND(ISHFT(IBB(KPOINT_RVU+1),-(0)),'FFFF'X))
      GOTO 23142
23141 CONTINUE
      I =((KPOINT_RMT-IBBP(1,56))/21+1)+1
23142 CONTINUE
23143 IF(.NOT.(I.LE.I_RVU_LASTRMTINDX))GOTO 23145
      KPOINT_RMT=IBBP(1,56)-21+(21)*I
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+8),-(0)),'FFFF'X)).NE.NUMBER))
     *GOTO 23146
      GOTO 23144
23146 CONTINUE
      I_RMT_DETECTIONTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X))
      IF(.NOT.(I_RMT_DETECTIONTYPE.NE.IDTYP1.AND.I_RMT_DETECTIONTYPE.NE.
     *IDTYP2))GOTO 23148
      GOTO 23144
23148 CONTINUE
      IF(.NOT.(ICLASS.NE. 0.AND.(IAND(ISHFT(IBB(KPOINT_RMT+13),-(29)),  
     *'0003'X)).NE.ICLASS))GOTO 23150
      GOTO 23144
23150 CONTINUE
      RETURN
23144 I=I+1
      GOTO 23143
23145 CONTINUE
      KPOINT_RMT=0
      GOTO 23138
23137 KPOINT_RVU=KPOINT_RVU+2
      GOTO 23136
23138 CONTINUE
      RETURN
      END
      SUBROUTINE GTTRK_TMA (CTRACK,KPOINT_RMT,IS_OLD)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 CTRACK,CLASS,CSTRIP
      INTEGER IS_OLD,IGBYTE,NUMBER,I,KK,CTOI
      INTEGER*4  KPOINT_RVU
      REAL*8     C_RVU_TRACKCODE
      INTEGER*4  I_RVU_LASTRMTINDX
      INTEGER*4  KPOINT_RMT
      IS_OLD =0
      C_RVU_TRACKCODE='2020202020202020'X
      CALL IPBYTE (C_RVU_TRACKCODE,1,IGBYTE(CTRACK,1))
      CLASS =IGBYTE(CTRACK,2)
      KK =3
      NUMBER =CTOI(%REF(CTRACK),KK)
      KPOINT_RVU=IBBP(1,67)
23152 IF(.NOT.((KPOINT_RVU.GE.IBBP(1,67).AND.KPOINT_RVU.LE.(IBBP(1,67)+I
     *BBP(3,67)-1))))GOTO 23154
      IF(.NOT.(CSTRIP(IBB(KPOINT_RVU),4,1).NE.C_RVU_TRACKCODE))GOTO 2315
     *5
      GOTO 23153
23155 CONTINUE
      I_RVU_LASTRMTINDX=(IAND(ISHFT(IBB(KPOINT_RVU+1),-(16)),'FFFF'X))
      I =((KPOINT_RMT-IBBP(1,56))/21+1)
23157 IF(.NOT.(I.LE.I_RVU_LASTRMTINDX))GOTO 23159
      KPOINT_RMT=IBBP(1,56)-21+(21)*I
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+8),-(0)),'FFFF'X)).NE.NUMBER))
     *GOTO 23160
      GOTO 23158
23160 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+11),-(31)),'0001'X)).NE.1))GOT
     *O 23162
      GOTO 23158
23162 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+8),-(27)),'0001'X)).EQ.0))GOTO
     * 23164
      IS_OLD =1
      GOTO 23158
23164 CONTINUE
      IS_OLD =0
      RETURN
23158 I=I+1
      GOTO 23157
23159 CONTINUE
      KPOINT_RMT=0
      GOTO 23154
23153 KPOINT_RVU=KPOINT_RVU+2
      GOTO 23152
23154 CONTINUE
      RETURN
      END
      SUBROUTINE MAKE_TRACK_NUM (KPOINT_RMT,GTRACK)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 KPOINT_RMT
      REAL*8 GTRACK,A_TRACK
      LOGICAL*1 CLASS
      REAL*8 CSTRIP
      INTEGER IVIEW
      INTEGER*4  KPOINT_RVU
      INTEGER*4  KPOINT_UNT3
      INTEGER*4  I_RMT_CLASS
      INTEGER*4  I_RMT_DETECTIONTYPE
      INTEGER*4  I_RMT_TRACKNUMBER
      I_RMT_TRACKNUMBER=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(0)),'FFFF'X))
      IF(.NOT.(I_RMT_TRACKNUMBER.EQ.0))GOTO 23166
      GTRACK ='?????'
      RETURN
23166 CONTINUE
      GTRACK ='2020202020202020'X
      KPOINT_UNT3=IBBP(1,01)-104+(104)*(IAND(ISHFT(IBB(KPOINT_RMT+12),-(
     *16)),'FFFF'X))
      IVIEW =(IAND(ISHFT(IBB(KPOINT_UNT3+16),-(28)),'000F'X))
      KPOINT_RVU=IBBP(1,67)-2+(2)*IVIEW
      I_RMT_DETECTIONTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X))
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.2))GOTO 23168
      CLASS ='P'
      GOTO 23169
23168 CONTINUE
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.3))GOTO 23170
      CLASS ='E'
      GOTO 23171
23170 CONTINUE
      I_RMT_CLASS=(IAND(ISHFT(IBB(KPOINT_RMT+13),-(29)),'0003'X))
      IF(.NOT.(I_RMT_CLASS.EQ.1))GOTO 23172
      CLASS ='A'
      GOTO 23173
23172 CONTINUE
      IF(.NOT.(I_RMT_CLASS.EQ.2))GOTO 23174
      CLASS ='U'
      GOTO 23175
23174 CONTINUE
      IF(.NOT.(I_RMT_CLASS.EQ.3))GOTO 23176
      CLASS ='S'
      GOTO 23177
23176 CONTINUE
      CLASS ='?'
23177 CONTINUE
23175 CONTINUE
23173 CONTINUE
23171 CONTINUE
23169 CONTINUE
      GTRACK =A_TRACK (CSTRIP(IBB(KPOINT_RVU),4,1),CLASS,I_RMT_TRACKNUMB
     *ER)
      RETURN
      END
      REAL FUNCTION DEGMRA(IDM)
      IMPLICIT NONE
      INTEGER JDEG,IDM,JMIN
      JDEG =IABS(IDM/100)
      JMIN =MOD(IABS(IDM),100)
      IF(.NOT.(JMIN.GE.60))GOTO 23178
      JMIN =JMIN -60
      JDEG =JDEG +1
23178 CONTINUE
      DEGMRA =(JDEG/180. +JMIN/10800.) *3.141592654
      IF(.NOT.(IDM.LT.0))GOTO 23180
      DEGMRA =-DEGMRA
23180 CONTINUE
      RETURN
      END
      REAL FUNCTION DMS2LL (DMS)
      IMPLICIT NONE
      REAL*8 DMS
      REAL*8 SEC
      INTEGER*4 IDMS,JDEG,JMIN
      IDMS =ABS(INT(DMS))
      JDEG =IDMS / 100
      JMIN =IDMS -JDEG *100
      SEC =(ABS(DMS ) -IDMS ) *100.0
      DMS2LL =SIGN(JDEG +(JMIN +(SEC/60.0)) / 60.0,DMS)
      RETURN
      END
      REAL FUNCTION DMS2RAD (DMS)
      IMPLICIT NONE
      REAL*8 DMS
      REAL DMS2LL
      DMS2RAD =DMS2LL(DMS) *0.0174533
      RETURN
      END
      FUNCTION NEWTIM(X)
      IMPLICIT NONE
      INTEGER X,NEWTIM,NOW
      NEWTIM=NOW(0)/1000
      RETURN
      END
      SUBROUTINE TTLINE(ISTRNG,LEN)
      IMPLICIT NONE
      INTEGER LEN
      INTEGER ISTRNG(2)
      CALL ECHO (10)
      CALL ECHO (13)
      CALL ECHOH (ISTRNG,LEN)
      RETURN
      END
      SUBROUTINE FNDWET (F_UNT_TRUELATITUDE,F_UNT_TRUELONGITUDE,KPOINT_W
     *ET)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL F50DEG /0.8726646/
      INTEGER IV,IH,NDEX
      REAL DLAT,DLON
      REAL*4     F_UNT_TRUELATITUDE
      REAL*4     F_UNT_TRUELONGITUDE
      INTEGER*4  KPOINT_WET
      DLAT =F_UNT_TRUELATITUDE-FBB(224)
      DLON =F_UNT_TRUELONGITUDE-FBB(225)
      IF(.NOT.(FBB(225).GE.0..AND.F_UNT_TRUELONGITUDE.LE.0.))GOTO 23182
      DLON =DLON +6.283185307
23182 CONTINUE
      IF(.NOT.(DLAT.GE.0..AND.DLAT.LT.F50DEG.AND.DLON.GE.0..AND.DLON.LT.
     *F50DEG))GOTO 23184
      IV =DLAT*180.0/3.141592654/10.
      IH =DLON*180.0/3.141592654/10.
      NDEX =2 +5 *IV +IH
      KPOINT_WET=IBBP(1,05)-5+(5)*NDEX
      GOTO 23185
23184 CONTINUE
      KPOINT_WET=IBBP(1,05)
23185 CONTINUE
      RETURN
      END
      SUBROUTINE SUNTIM
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL FUDGE /-.0151/
      REAL SCOS,SSIN,FLAT,FLON,FCOS,FSIN,TERM,DELLON
      INTEGER I
      INTEGER*4  KPOINT_WET
      REAL*4     F_WET_SUNRISE
      REAL*4     F_WET_SUNSET
      SCOS =COS(FBB(222))
      SSIN =SIN(FBB(222))
      KPOINT_WET=IBBP(1,05)-5+(5)*2 
23186 IF(.NOT.((KPOINT_WET.GE.IBBP(1,05).AND.KPOINT_WET.LT.(IBBP(1,05)+I
     *BBP(2,05)))))GOTO 23188
      I =((KPOINT_WET-IBBP(1,05))/5+1)-2
      FLAT =FBB(224)+(I / 5) *(3.141592654/18)
      FLON =FBB(225)+MOD(I,5) *(3.141592654/18)
      FCOS =COS(FLAT)
      FSIN =SIN(FLAT)
      TERM =(FUDGE-SSIN*FSIN)/(SCOS*FCOS)
      IF(.NOT.(TERM.LE.-1.0))GOTO 23189
      F_WET_SUNRISE=2001
      F_WET_SUNSET=2001
      GOTO 23190
23189 CONTINUE
      IF(.NOT.(TERM.GE.1.0))GOTO 23191
      F_WET_SUNRISE=1999
      F_WET_SUNSET=1999
      GOTO 23192
23191 CONTINUE
      DELLON =ACOS(TERM)
      F_WET_SUNRISE=4.*(180.-(180./3.141592654)*(FLON+DELLON)) -(IBB(104
     *))
      CALL EARLST(F_WET_SUNRISE)
      F_WET_SUNSET=4.*(180.-(180./3.141592654)*(FLON-DELLON)) -(IBB(104)
     *)
      CALL EARLST(F_WET_SUNSET)
23192 CONTINUE
23190 CONTINUE
      FBB(KPOINT_WET)=(F_WET_SUNRISE)
      IBB(KPOINT_WET+2)=IOR(IAND(IBB(KPOINT_WET+2),NOT(ISHFT('0003'X,30)
     *)),ISHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_WET+2),-(30)
     *),'0003'X)))),'0003'X),30))
      FBB(KPOINT_WET+1)=(F_WET_SUNSET)
      IBB(KPOINT_WET+2)=IOR(IAND(IBB(KPOINT_WET+2),NOT(ISHFT('0003'X,30)
     *)),ISHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_WET+2),-(30)
     *),'0003'X)))),'0003'X),30))
23187 KPOINT_WET=KPOINT_WET+5
      GOTO 23186
23188 CONTINUE
      RETURN
      END
      SUBROUTINE EARLST(ITIME)
      IMPLICIT NONE
      REAL ITIME
23193 IF(.NOT.(ITIME.LT.0))GOTO 23195
23196 IF(.NOT.(ITIME.GE.1440.))GOTO 23198
      RETURN
23197 ITIME=ITIME-1440.
      GOTO 23196
23198 CONTINUE
23194 ITIME=ITIME+1440.
      GOTO 23193
23195 CONTINUE
      END
      SUBROUTINE SATTRK(TIME,FLON0,FINCL,PER,FLAT,FLON)
      IMPLICIT NONE
      REAL*4 TIME,FLON0,FINCL,PER,FLAT,FLON
      REAL*4 TRAVEL,HINIT,CT,ST,CI,SI,DELLON
      REAL*4 AB,X,Y,COLAT,EARTH
      TRAVEL =TIME *(2.*3.141592654) / PER
      HINIT =3.141592654/2. -FINCL
      CT =COS(TRAVEL)
      ST =SIN(TRAVEL)
      CI =COS(HINIT)
      SI =SIN(HINIT)
      DELLON =ATAN2(ST*SI,CT)
23199 IF(.NOT.(DELLON.GT.3.141592654))GOTO 23200
      DELLON =DELLON -6.283185307
      GOTO 23199
23200 CONTINUE
23201 IF(.NOT.(DELLON.LE.-3.141592654))GOTO 23202
      DELLON =DELLON +6.283185307
      GOTO 23201
23202 CONTINUE
      AB =ABS(DELLON)
      IF(.NOT.(AB.LT..001))GOTO 23203
      X =ST *CI 
      Y =CT
      GOTO 23204
23203 CONTINUE
      IF(.NOT.(AB.GT.3.141592654-.001))GOTO 23205
      X =ST *CI 
      Y =-CT
      GOTO 23206
23205 CONTINUE
      X =SIN(DELLON) *CI 
      Y =SI 
23206 CONTINUE
23204 CONTINUE
      IF(.NOT.(Y.LT.0.0))GOTO 23207
      X =-X 
      Y =-Y
23207 CONTINUE
      COLAT =ATAN2(Y,X)
      FLAT =3.141592654/2. -COLAT
      EARTH =AMOD((.25*3.141592654/180.)*TIME,2.*3.141592654)
      FLON =FLON0 +DELLON -EARTH
23209 IF(.NOT.(FLON.GT.3.141592654))GOTO 23210
      FLON =FLON -6.283185307
      GOTO 23209
23210 CONTINUE
23211 IF(.NOT.(FLON.LE.-3.141592654))GOTO 23212
      FLON =FLON +6.283185307
      GOTO 23211
23212 CONTINUE
      RETURN
      END
      SUBROUTINE NAVERR(KPOINT_NAV,KPOINT_UNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL RANDN
      INTEGER*4  KPOINT_NAV
      INTEGER*4  I_NAV_DEVICE
      INTEGER*4  KPOINT_UNT
      REAL*4     F_UNT_HEADINGERROR
      REAL*4     F_UNT_SPEEDERROR
      INTEGER*4  I_UNT_DRINDX
      REAL*4     F_UNT_DRLATITUDEERROR
      REAL*4     F_UNT_DRLONGITUDEERROR
      INTEGER*4  I_UNT_OMEGAINDX
      REAL*4     F_UNT_OMEGALATITUDEERROR
      REAL*4     F_UNT_OMEGALONGITUDEERROR
      INTEGER*4  I_UNT_TRANSITINDX
      REAL*4     F_UNT_TRANSLATITUDEERROR
      REAL*4     F_UNT_TRANSLONGITUDEERROR
      I_NAV_DEVICE=(IAND(ISHFT(IBB(KPOINT_NAV+14),-(0)),'0007'X))
      IF(.NOT.(I_NAV_DEVICE.EQ.1))GOTO 23213
      F_UNT_HEADINGERROR=RANDN(0.,FBB(KPOINT_NAV+8))
      FBB(KPOINT_UNT+17)=(F_UNT_HEADINGERROR)
      GOTO 23214
23213 CONTINUE
      IF(.NOT.(I_NAV_DEVICE.EQ.2))GOTO 23215
      F_UNT_SPEEDERROR=RANDN(0.,FBB(KPOINT_NAV+8))
      FBB(KPOINT_UNT+52)=(F_UNT_SPEEDERROR)
      GOTO 23216
23215 CONTINUE
      IF(.NOT.(I_NAV_DEVICE.EQ.3))GOTO 23217
      I_UNT_DRINDX=((KPOINT_NAV-IBBP(1,47))/16+1)
      IBB(KPOINT_UNT+59)=IOR(IAND(IBB(KPOINT_UNT+59),NOT(ISHFT('003F'X,1
     *6))),ISHFT(IAND((I_UNT_DRINDX),'003F'X),16))
      F_UNT_DRLATITUDEERROR=RANDN(0.,FBB(KPOINT_NAV+8))
      FBB(KPOINT_UNT+33)=(F_UNT_DRLATITUDEERROR)
      F_UNT_DRLONGITUDEERROR=RANDN(0.,FBB(KPOINT_NAV+9))
      FBB(KPOINT_UNT+34)=(F_UNT_DRLONGITUDEERROR)
      GOTO 23218
23217 CONTINUE
      IF(.NOT.(I_NAV_DEVICE.EQ.4))GOTO 23219
      I_UNT_OMEGAINDX=((KPOINT_NAV-IBBP(1,47))/16+1)
      IBB(KPOINT_UNT+59)=IOR(IAND(IBB(KPOINT_UNT+59),NOT(ISHFT('003F'X,2
     *2))),ISHFT(IAND((I_UNT_OMEGAINDX),'003F'X),22))
      F_UNT_OMEGALATITUDEERROR=RANDN(0.,FBB(KPOINT_NAV+8)) +RANDN(FBB(KP
     *OINT_NAV+10),FBB(KPOINT_NAV+12))
      FBB(KPOINT_UNT+35)=(F_UNT_OMEGALATITUDEERROR)
      F_UNT_OMEGALONGITUDEERROR=RANDN(0.,FBB(KPOINT_NAV+9)) +RANDN(FBB(K
     *POINT_NAV+11),FBB(KPOINT_NAV+13))
      FBB(KPOINT_UNT+36)=(F_UNT_OMEGALONGITUDEERROR)
      GOTO 23220
23219 CONTINUE
      IF(.NOT.(I_NAV_DEVICE.EQ.5.OR.(IAND(ISHFT(IBB(KPOINT_NAV+14),-(0))
     *,'0007'X)).EQ.6))GOTO 23221
      I_UNT_TRANSITINDX=((KPOINT_NAV-IBBP(1,47))/16+1)
      IBB(KPOINT_UNT+71)=IOR(IAND(IBB(KPOINT_UNT+71),NOT(ISHFT('003F'X,0
     *))),ISHFT(IAND((I_UNT_TRANSITINDX),'003F'X),0))
      F_UNT_TRANSLATITUDEERROR=RANDN(0.,FBB(KPOINT_NAV+8)) +RANDN(FBB(KP
     *OINT_NAV+10),FBB(KPOINT_NAV+12))
      FBB(KPOINT_UNT+53)=(F_UNT_TRANSLATITUDEERROR)
      F_UNT_TRANSLONGITUDEERROR=RANDN(0.,FBB(KPOINT_NAV+9)) +RANDN(FBB(K
     *POINT_NAV+11),FBB(KPOINT_NAV+13))
      FBB(KPOINT_UNT+54)=(F_UNT_TRANSLONGITUDEERROR)
23221 CONTINUE
23220 CONTINUE
23218 CONTINUE
23216 CONTINUE
23214 CONTINUE
      RETURN
      END
      SUBROUTINE CHKREL(KPOINT_RAD,KPOINT_UNT,IFPRNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 NAMEMT,NAMUNT
      REAL*8 CSTRIP8
      INTEGER IFPRNT,LITCMP
      INTEGER*4  KPOINT_RAD
      INTEGER*4  KPOINT_UNT
      INTEGER*4  KPOINT_REL
      NAMEMT =CSTRIP8(IBB(KPOINT_RAD))
      NAMUNT =CSTRIP8(IBB(KPOINT_UNT))
      IFPRNT =0
      KPOINT_REL=IBBP(1,43)
23223 IF(.NOT.((KPOINT_REL.GE.IBBP(1,43).AND.KPOINT_REL.LE.(IBBP(1,43)+I
     *BBP(3,43)-1))))GOTO 23225
      IF(.NOT.(LITCMP(CSTRIP8(IBB(KPOINT_REL)),NAMEMT).EQ.0.AND.LITCMP(C
     *STRIP8(IBB(KPOINT_REL+2)),NAMUNT).EQ.0))GOTO 23226
      IFPRNT =1
      GOTO 23225
23226 CONTINUE
23224 KPOINT_REL=KPOINT_REL+4
      GOTO 23223
23225 CONTINUE
      RETURN
      END
      SUBROUTINE UNIT_ASPECT_INDEX(KPOINT_UNT,KPOINT_UNT2,INDX)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER INDX
      REAL BEAR,HDG
      REAL RELBRG
      REAL FLAT1,FLON1,CSLAT1,FLAT2,FLON2,CSLAT2,RANGE,TRUBRG,TRUCSE
      INTEGER*4  KPOINT_UNT
      INTEGER*4  KPOINT_UNT2
      FLAT1 =FBB(KPOINT_UNT+19)
      FLON1 =FBB(KPOINT_UNT+20)
      CSLAT1 =COS(FLAT1)
      FLAT2 =FBB(KPOINT_UNT2+19)
      FLON2 =FBB(KPOINT_UNT2+20)
      CSLAT2 =COS(FLAT2)
      CALL RLL2RB(FLAT1,FLON1,CSLAT1,FLAT2,FLON2,CSLAT2,RANGE,BEAR )
      HDG =FBB(KPOINT_UNT+18)
23228 CONTINUE
      GOTO 23230
      ENTRY BRG_ASPECT_INDEX(TRUBRG,TRUCSE,INDX)
      BEAR =TRUBRG
      HDG =TRUCSE
23229 GOTO 23228
23230 CONTINUE
      RELBRG =BEAR -HDG
23231 IF(.NOT.(RELBRG.GT.3.141592654))GOTO 23232
      RELBRG =RELBRG -6.283185307
      GOTO 23231
23232 CONTINUE
23233 IF(.NOT.(RELBRG.LE.-3.141592654))GOTO 23234
      RELBRG =RELBRG +6.283185307
      GOTO 23233
23234 CONTINUE
      IF(.NOT.(RELBRG.LT.0.0))GOTO 23235
      RELBRG =-1.0 *RELBRG
23235 CONTINUE
      INDX =1.5 +(6.*RELBRG/3.141592654)
      INDX =MIN(INDX,7)
      RETURN
      END
      SUBROUTINE DAYTST
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL FUDGE /-.0151/
      REAL SUNLON,SCOS,SSIN,PLAT,PLON,DIFF,PCOS,PSIN,TERM
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_TYPE
      INTEGER*4  I_UNT_SUPERTYPE
      INTEGER*4  I_UNT_TRUEALTDEPTH
      INTEGER*4  I_UNT_INDAYLIGHT
      INTEGER*4  KPOINT_SHC
      INTEGER*4  I_SHC_SCOPEDEPTH
      SUNLON =3.141592654/180. *(180.-(FBB(461)+IBB(104))/4.)
      SUNLON =AMOD(SUNLON,6.283185307)
      IF(.NOT.(SUNLON.GT.3.141592654))GOTO 23237
      SUNLON =SUNLON -6.283185307
23237 CONTINUE
      SCOS =COS(FBB(222))
      SSIN =SIN(FBB(222))
      KPOINT_UNT=IBBP(1,01)
23239 IF(.NOT.((KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,01)+I
     *BBP(3,01)-1))))GOTO 23241
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.EQ. 0))GOTO 23242
      GOTO 23240
23242 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.5))GOTO 23244
      GOTO 23240
23244 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+15),-(16)),'00FF'X)).EQ.0))GOT
     *O 23246
      GOTO 23240
23246 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.2))GOTO 23248
      I_UNT_SUPERTYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(17)),'07FF'X))
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3))))GOTO 23250
      I_UNT_TRUEALTDEPTH=(IAND(ISHFT(IBB(KPOINT_UNT+61),-(0)),'1FFFFF'X)
     *)
      KPOINT_SHC=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *31))
      I_SHC_SCOPEDEPTH=(IAND(ISHFT(IBB(KPOINT_SHC+14),-(19)),'007F'X))
      IF(.NOT.(I_UNT_TRUEALTDEPTH.GT.I_SHC_SCOPEDEPTH.AND.I_UNT_TRUEALTD
     *EPTH.GT.IBB(155)))GOTO 23252
      GOTO 23240
23252 CONTINUE
      GOTO 23251
23250 CONTINUE
      GOTO 23240
23251 CONTINUE
23248 CONTINUE
      PLAT =FBB(KPOINT_UNT+19)
      PLON =FBB(KPOINT_UNT+20)
      DIFF =PLON -SUNLON
23254 IF(.NOT.(DIFF.GT.3.141592654))GOTO 23255
      DIFF =DIFF -6.283185307
      GOTO 23254
23255 CONTINUE
23256 IF(.NOT.(DIFF.LE.-3.141592654))GOTO 23257
      DIFF =DIFF +6.283185307
      GOTO 23256
23257 CONTINUE
      PCOS =COS(PLAT)
      PSIN =SIN(PLAT)
      TERM =(FUDGE-SSIN*PSIN)/(SCOS*PCOS)
      IF(.NOT.(TERM.LE.-1.0))GOTO 23258
      I_UNT_INDAYLIGHT=1
      GOTO 23259
23258 CONTINUE
      IF(.NOT.(TERM.GE.1.0))GOTO 23260
      I_UNT_INDAYLIGHT=0
      GOTO 23261
23260 CONTINUE
      IF(.NOT.(ABS(DIFF).LE.ACOS(TERM)))GOTO 23262
      I_UNT_INDAYLIGHT=1
      GOTO 23263
23262 CONTINUE
      I_UNT_INDAYLIGHT=0
23263 CONTINUE
23261 CONTINUE
23259 CONTINUE
      IBB(KPOINT_UNT+45)=IOR(IAND(IBB(KPOINT_UNT+45),NOT(ISHFT('0001'X,0
     *))),ISHFT(IAND((I_UNT_INDAYLIGHT),'0001'X),0))
23240 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23239
23241 CONTINUE
      RETURN
      END
      SUBROUTINE SETURP(KPOINT_UNT,KPOINT_RPM)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4  KPOINT_RPM
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_MAKEREPORTS
      INTEGER*4  I_UNT_COMMBYPASS
      INTEGER*4  I_UNT_VIOLATEEMCON
      INTEGER*4  I_UNT_OWNINTERVAL
      INTEGER*4  I_UNT_SHIPTRACKINTERVAL
      INTEGER*4  I_UNT_AIRTRACKINTERVAL
      INTEGER*4  I_UNT_ESMTRACKINTERVAL
      INTEGER*4  I_UNT_PATH1PNTR
      INTEGER*4  I_UNT_PATH2PNTR
      IF(.NOT.(KPOINT_RPM.EQ.0))GOTO 23264
      RETURN
23264 CONTINUE
      I_UNT_MAKEREPORTS=1
      IBB(KPOINT_UNT+45)=IOR(IAND(IBB(KPOINT_UNT+45),NOT(ISHFT('0001'X,6
     *))),ISHFT(IAND((I_UNT_MAKEREPORTS),'0001'X),6))
      I_UNT_COMMBYPASS=(IAND(ISHFT(IBB(KPOINT_RPM+6),-(9)),'0001'X))
      IBB(KPOINT_UNT+66)=IOR(IAND(IBB(KPOINT_UNT+66),NOT(ISHFT('0001'X,3
     *0))),ISHFT(IAND((I_UNT_COMMBYPASS),'0001'X),30))
      I_UNT_VIOLATEEMCON=(IAND(ISHFT(IBB(KPOINT_RPM+5),-(31)),'0001'X))
      IBB(KPOINT_UNT+66)=IOR(IAND(IBB(KPOINT_UNT+66),NOT(ISHFT('0001'X,3
     *1))),ISHFT(IAND((I_UNT_VIOLATEEMCON),'0001'X),31))
      I_UNT_OWNINTERVAL=(IAND(ISHFT(IBB(KPOINT_RPM+6),-(0)),'01FF'X))
      IBB(KPOINT_UNT+59)=IOR(IAND(IBB(KPOINT_UNT+59),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((I_UNT_OWNINTERVAL),'FFFF'X),0))
      I_UNT_SHIPTRACKINTERVAL=(IAND(ISHFT(IBB(KPOINT_RPM+5),-(18)),     
     *'01FF'X))
      IBB(KPOINT_UNT+44)=IOR(IAND(IBB(KPOINT_UNT+44),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((I_UNT_SHIPTRACKINTERVAL),'FFFF'X),0))
      I_UNT_AIRTRACKINTERVAL=(IAND(ISHFT(IBB(KPOINT_RPM+5),-(9)),       
     *'01FF'X))
      IBB(KPOINT_UNT+44)=IOR(IAND(IBB(KPOINT_UNT+44),NOT(ISHFT('FFFF'X,1
     *6))),ISHFT(IAND((I_UNT_AIRTRACKINTERVAL),'FFFF'X),16))
      I_UNT_ESMTRACKINTERVAL=(IAND(ISHFT(IBB(KPOINT_RPM+5),-(0)),       
     *'01FF'X))
      IBB(KPOINT_UNT+26)=IOR(IAND(IBB(KPOINT_UNT+26),NOT(ISHFT('FFFF'X,1
     *6))),ISHFT(IAND((I_UNT_ESMTRACKINTERVAL),'FFFF'X),16))
      I_UNT_PATH1PNTR=(IAND(ISHFT(IBB(KPOINT_RPM+4),-(0)),'FFFF'X)+IBBP(
     *1,45))
      IBB(KPOINT_UNT+38)=IOR(IAND(IBB(KPOINT_UNT+38),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((I_UNT_PATH1PNTR-IBBP(1,45)),'FFFF'X),0))
      I_UNT_PATH2PNTR=(IAND(ISHFT(IBB(KPOINT_RPM+4),-(16)),'FFFF'X)+IBBP
     *(1,45))
      IBB(KPOINT_UNT+38)=IOR(IAND(IBB(KPOINT_UNT+38),NOT(ISHFT('FFFF'X,1
     *6))),ISHFT(IAND((I_UNT_PATH2PNTR-IBBP(1,45)),'FFFF'X),16))
      RETURN
      END
      SUBROUTINE GETRPM(KPOINT_UNT,KPOINT_RPM)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 NAMUNT
      REAL*8 CSTRIP8
      INTEGER ISIDE,MISS,ITASK,ITADDR,IDO,LITCMP
      INTEGER*4  KPOINT_UNT
      INTEGER*4  KPOINT_RPM
      REAL*8     C_RPM_ADDRESSEE
      CALL WHSIDE((IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X)),ISIDE)
      NAMUNT =CSTRIP8(IBB(KPOINT_UNT))
      KPOINT_RPM=IBBP(1,60)
23266 IF(.NOT.((KPOINT_RPM.GE.IBBP(1,60).AND.KPOINT_RPM.LE.(IBBP(1,60)+I
     *BBP(3,60)-1))))GOTO 23268
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RPM+5),-(27)),'0003'X)).NE.ISIDE))
     *GOTO 23269
      GOTO 23267
23269 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RPM+5),-(29)),'0003'X)).NE. 1))GOT
     *O 23271
      GOTO 23267
23271 CONTINUE
      C_RPM_ADDRESSEE=CSTRIP8(IBB(KPOINT_RPM+2))
      IF(.NOT.(LITCMP(C_RPM_ADDRESSEE,NAMUNT).EQ.0))GOTO 23273
      RETURN
23273 CONTINUE
23267 KPOINT_RPM=KPOINT_RPM+7
      GOTO 23266
23268 CONTINUE
      MISS =(IAND(ISHFT(IBB(KPOINT_UNT+43),-(19)),'003F'X))
      KPOINT_RPM=IBBP(1,60)
23275 IF(.NOT.((KPOINT_RPM.GE.IBBP(1,60).AND.KPOINT_RPM.LE.(IBBP(1,60)+I
     *BBP(3,60)-1))))GOTO 23277
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RPM+5),-(27)),'0003'X)).NE.ISIDE))
     *GOTO 23278
      GOTO 23276
23278 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RPM+5),-(29)),'0003'X)).NE.1))GOTO
     * 23280
      GOTO 23276
23280 CONTINUE
      IF(.NOT.(IBB(KPOINT_RPM+2).EQ.MISS))GOTO 23282
      RETURN
23282 CONTINUE
23276 KPOINT_RPM=KPOINT_RPM+7
      GOTO 23275
23277 CONTINUE
      ITASK =(IAND(ISHFT(IBB(KPOINT_UNT+16),-(0)),'01FFFF'X))
      KPOINT_RPM=IBBP(1,60)
23284 IF(.NOT.((KPOINT_RPM.GE.IBBP(1,60).AND.KPOINT_RPM.LE.(IBBP(1,60)+I
     *BBP(3,60)-1))))GOTO 23286
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RPM+5),-(27)),'0003'X)).NE.ISIDE))
     *GOTO 23287
      GOTO 23285
23287 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RPM+5),-(29)),'0003'X)).NE. 2))GOT
     *O 23289
      GOTO 23285
23289 CONTINUE
      ITADDR =IBB(KPOINT_RPM+2)
      CALL BELONG(ITASK,ITADDR,IDO)
      IF(.NOT.(IDO.NE.0))GOTO 23291
      RETURN
23291 CONTINUE
23285 KPOINT_RPM=KPOINT_RPM+7
      GOTO 23284
23286 CONTINUE
      KPOINT_RPM=0
      RETURN
      END
      SUBROUTINE BELONG(ITASK,IGROUP,IDO)
      IMPLICIT NONE
      INTEGER ITSK,ITASK,IGRP,IGROUP,IDO
      ITSK =ITASK
      IGRP =IGROUP
23293 IF(.NOT.(MOD(IGRP,10).EQ.0))GOTO 23294
      IGRP =IGRP/10
      ITSK =ITSK/10
      GOTO 23293
23294 CONTINUE
      IF(.NOT.(ITSK.EQ.IGRP))GOTO 23295
      IDO =1
      GOTO 23296
23295 CONTINUE
      IDO =0
23296 CONTINUE
      RETURN
      END
      SUBROUTINE WHSIDE(I_UNT_VIEW,ISIDE)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER I_UNT_VIEW,ISIDE
      IF(.NOT.(I_UNT_VIEW.EQ.IBB(128)))GOTO 23297
      ISIDE =0
      GOTO 23298
23297 CONTINUE
      IF(.NOT.(I_UNT_VIEW.LE.IBB(130)))GOTO 23299
      ISIDE =1
      GOTO 23300
23299 CONTINUE
      ISIDE =2
23300 CONTINUE
23298 CONTINUE
      RETURN
      END
      SUBROUTINE GEN_RVU
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 CSTRIP
      INTEGER IVIEW
      INTEGER*4  KPOINT_VUE
      INTEGER*4  KPOINT_RVU
      IBBP(3,67)=0
      IVIEW =IBB(128)
23301 IF(.NOT.(IVIEW.LE.IBB(132)))GOTO 23303
      KPOINT_VUE=IBBP(1,06)-30+(30)*IVIEW
      KPOINT_RVU=IBBP(1,67)-2+(2)*IVIEW
      IBB(KPOINT_RVU)=IOR(IAND(IBB(KPOINT_RVU),NOT(ISHFT('FFFF'X,0))),IS
     *HFT(IAND(((IAND(ISHFT(IBB(KPOINT_VUE+10),-(0)),'FFFF'X))),'FFFF'X)
     *,0))
      IBB(KPOINT_RVU)=IOR(IAND(IBB(KPOINT_RVU),NOT(ISHFT('007F'X,16))),I
     *SHFT(IAND(((IAND(ISHFT(IBB(KPOINT_VUE+3),-(8)),'007F'X))),'007F'X)
     *,16))
      CALL CDRESS(%REF(CSTRIP(IBB(KPOINT_VUE+9),1,1)),IBB(KPOINT_RVU),4,
     *1)
      IBB(KPOINT_RVU+1)=IOR(IAND(IBB(KPOINT_RVU+1),NOT(ISHFT('FFFF'X,0))
     *),ISHFT(IAND(((IAND(ISHFT(IBB(KPOINT_VUE+1),-(0)),'FFFF'X))),     
     *'FFFF'X),0))
      IBB(KPOINT_RVU+1)=IOR(IAND(IBB(KPOINT_RVU+1),NOT(ISHFT('FFFF'X,16)
     *)),ISHFT(IAND(((IAND(ISHFT(IBB(KPOINT_VUE+1),-(16)),'FFFF'X))),   
     *'FFFF'X),16))
      IBBP(3,67)=IBBP(3,67)+2
23302 IVIEW=IVIEW+1
      GOTO 23301
23303 CONTINUE
      RETURN
      END
      SUBROUTINE UPD_LRT
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*2 UNIT_INDX( 16000),AIRBORNE( 16000),VIEW_INDX( 16000)
      INTEGER IFREE(1600),AIRC_PNTR( 16000),COUNT,N
      COMMON /SCRPAD/ UNIT_INDX,AIRC_PNTR,AIRBORNE,VIEW_INDX,COUNT,IFREE
     *,N
      INTEGER K,IUNIT,ILAST,J,NUSED,M
      INTEGER*4  KPOINT_OWN
      INTEGER*4  I_OWN_UNIT
      INTEGER*4  I_OWN_ACCPNTR
      INTEGER*4  I_OWN_NBRAC
      INTEGER*4  I_OWN_VIEW
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_RECOVERINDX
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  I_DEQ_PNTR
      INTEGER*4  KPOINT_LRT
      INTEGER*4  I_LRT_UNTINDX
      INTEGER*4  I_LRT_ACCPNTR
      INTEGER*4  I_LRT_AIRBORNE
      INTEGER*4  I_LRT_READY1
      INTEGER*4  I_LRT_READY2
      INTEGER*4  I_LRT_READY3
      COUNT =0
      KPOINT_OWN=IBBP(1,57)
23304 IF(.NOT.((KPOINT_OWN.GE.IBBP(1,57).AND.KPOINT_OWN.LT.(IBBP(1,57)+I
     *BBP(2,57)))))GOTO 23306
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_OWN+10),-(11)),'00FF'X)).NE.1))GOT
     *O 23307
      GOTO 23305
23307 CONTINUE
      I_OWN_UNIT=(IAND(ISHFT(IBB(KPOINT_OWN+7),-(0)),'FFFF'X))
      KPOINT_UNT=IBBP(1,01)-104+(104)*(I_OWN_UNIT)
      I_UNT_RECOVERINDX=(IAND(ISHFT(IBB(KPOINT_UNT+67),-(0)),'FFFF'X))
      I_OWN_ACCPNTR=(IAND(ISHFT(IBB(KPOINT_OWN+13),-(15)),'01FFFF'X)+IBB
     *P(1,32))
      I_OWN_NBRAC=(IAND(ISHFT(IBB(KPOINT_OWN+8),-(16)),'00FF'X))
      I_OWN_VIEW=(IAND(ISHFT(IBB(KPOINT_OWN+10),-(0)),'00FF'X))
      K=1
23309 IF(.NOT.(K.LE.COUNT))GOTO 23311
      IF(.NOT.(I_UNT_RECOVERINDX.NE.UNIT_INDX(K).OR.I_OWN_ACCPNTR.NE.AIR
     *C_PNTR(K)))GOTO 23312
      GOTO 23310
23312 CONTINUE
      AIRBORNE(K) =AIRBORNE(K) +I_OWN_NBRAC
      GOTO 23305
23310 K=K+1
      GOTO 23309
23311 CONTINUE
      COUNT =COUNT +1
      UNIT_INDX(COUNT) =I_UNT_RECOVERINDX
      VIEW_INDX(COUNT) =I_OWN_VIEW
      AIRC_PNTR(COUNT) =I_OWN_ACCPNTR
      AIRBORNE(COUNT) =I_OWN_NBRAC
      IF(.NOT.(COUNT.GE. 16000))GOTO 23314
      GOTO 23306
23314 CONTINUE
23305 KPOINT_OWN=KPOINT_OWN+19
      GOTO 23304
23306 CONTINUE
      KPOINT_UNT=IBBP(1,01)
23316 IF(.NOT.((KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,01)+I
     *BBP(3,01)-1))))GOTO 23318
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+22),-(27)),'0001'X)).EQ.0))GOT
     *O 23319
      GOTO 23317
23319 CONTINUE
      IUNIT =((KPOINT_UNT-IBBP(1,01))/104+1)
      KPOINT_DEQ=IBBP(1,03)-6+(6)*IUNIT
23321 IF(.NOT.(KPOINT_DEQ.GE.IBBP(1,03)))GOTO 23323
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_DEQ+2),-(0)),'00FF'X)).NE.20))GOTO
     * 23324
      GOTO 23322
23324 CONTINUE
      I_DEQ_PNTR=(IAND(ISHFT(IBB(KPOINT_DEQ),-(12)),'0FFFFF'X)+IBBP(1,34
     *))
      K=1
23326 IF(.NOT.(K.LE.COUNT))GOTO 23328
      IF(.NOT.(IUNIT.NE.UNIT_INDX(K)))GOTO 23329
      GOTO 23327
23329 CONTINUE
      IF(.NOT.(I_DEQ_PNTR.NE.AIRC_PNTR(K)))GOTO 23331
      GOTO 23327
23331 CONTINUE
      GOTO 23322
23327 K=K+1
      GOTO 23326
23328 CONTINUE
      COUNT =COUNT +1
      UNIT_INDX(COUNT) =IUNIT
      VIEW_INDX(COUNT) =(IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X))
      AIRC_PNTR(COUNT) =I_DEQ_PNTR
      AIRBORNE(COUNT) =0
      IF(.NOT.(COUNT.GE. 16000))GOTO 23333
      GOTO 23318
23333 CONTINUE
23322 KPOINT_DEQ=IBBP(1,03)-6+(6)*(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),  
     *'0FFFFF'X))
      GOTO 23321
23323 CONTINUE
23317 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23316
23318 CONTINUE
      N =0
      ILAST =0
      KPOINT_LRT=IBBP(1,73)
23335 IF(.NOT.((KPOINT_LRT.GE.IBBP(1,73).AND.KPOINT_LRT.LT.(IBBP(1,73)+I
     *BBP(2,73)))))GOTO 23337
      I_LRT_UNTINDX=(IAND(ISHFT(IBB(KPOINT_LRT+10),-(0)),'FFFF'X))
      IF(.NOT.(I_LRT_UNTINDX.EQ.0))GOTO 23338
      N =N +1
      IFREE(N) =KPOINT_LRT
      GOTO 23336
23338 CONTINUE
      ILAST =((KPOINT_LRT-IBBP(1,73))/11+1)
      I_LRT_ACCPNTR=(IAND(ISHFT(IBB(KPOINT_LRT),-(16)),'FFFF'X)+IBBP(1,3
     *2))
      I_LRT_AIRBORNE=(IAND(ISHFT(IBB(KPOINT_LRT+1),-(0)),'00FF'X))
      I_LRT_READY1=(IAND(ISHFT(IBB(KPOINT_LRT+1),-(8)),'00FF'X))
      I_LRT_READY2=(IAND(ISHFT(IBB(KPOINT_LRT+1),-(16)),'00FF'X))
      I_LRT_READY3=(IAND(ISHFT(IBB(KPOINT_LRT+1),-(24)),'00FF'X))
      J=1
23340 IF(.NOT.(J.LE.COUNT))GOTO 23342
      IF(.NOT.(UNIT_INDX(J).EQ.0))GOTO 23343
      GOTO 23341
23343 CONTINUE
      IF(.NOT.(I_LRT_ACCPNTR.EQ.AIRC_PNTR(J).AND.I_LRT_UNTINDX.EQ.UNIT_I
     *NDX(J)))GOTO 23345
      IF(.NOT.(I_LRT_AIRBORNE.NE.AIRBORNE(J)))GOTO 23347
      IBB(KPOINT_LRT+1)=IOR(IAND(IBB(KPOINT_LRT+1),NOT(ISHFT('00FF'X,0))
     *),ISHFT(IAND((AIRBORNE(J)),'00FF'X),0))
      IBB(KPOINT_LRT)=IOR(IAND(IBB(KPOINT_LRT),NOT(ISHFT('0001'X,15))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_LRT),-(15)),    
     *'0001'X)))),'0001'X),15))
23347 CONTINUE
      UNIT_INDX(J) =0
      VIEW_INDX(J) =0
      AIRC_PNTR(J) =0
      GOTO 23336
23345 CONTINUE
23341 J=J+1
      GOTO 23340
23342 CONTINUE
      IF(.NOT.(I_LRT_READY1.EQ.0.AND.I_LRT_READY2.EQ.0.AND.I_LRT_READY3.
     *EQ.0))GOTO 23349
      CALL LIB$MOVC5(0,0,0,11*4,IBB(KPOINT_LRT))
      IBB(KPOINT_LRT)=IOR(IAND(IBB(KPOINT_LRT),NOT(ISHFT('0001'X,15))),I
     *SHFT(IAND((1),'0001'X),15))
      N =N +1
      IFREE(N) =KPOINT_LRT
23349 CONTINUE
23336 KPOINT_LRT=KPOINT_LRT+11
      GOTO 23335
23337 CONTINUE
      NUSED =0
      M=1
23351 IF(.NOT.(M.LE.COUNT))GOTO 23353
      IF(.NOT.(UNIT_INDX(M).EQ.0))GOTO 23354
      GOTO 23352
23354 CONTINUE
      NUSED =NUSED +1
      IF(.NOT.(N.LT.NUSED))GOTO 23356
      CALL ECHOV ('LRT table full. ')
      GOTO 23353
23356 CONTINUE
      KPOINT_LRT=IFREE(NUSED)
      IBB(KPOINT_LRT)=IOR(IAND(IBB(KPOINT_LRT),NOT(ISHFT('FFFF'X,16))),I
     *SHFT(IAND((AIRC_PNTR(M)-IBBP(1,32)),'FFFF'X),16))
      IBB(KPOINT_LRT)=IOR(IAND(IBB(KPOINT_LRT),NOT(ISHFT('000F'X,0))),IS
     *HFT(IAND((VIEW_INDX(M)),'000F'X),0))
      IBB(KPOINT_LRT+10)=IOR(IAND(IBB(KPOINT_LRT+10),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((UNIT_INDX(M)),'FFFF'X),0))
      IBB(KPOINT_LRT)=IOR(IAND(IBB(KPOINT_LRT),NOT(ISHFT('0001'X,15))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_LRT),-(15)),    
     *'0001'X)))),'0001'X),15))
      IBB(KPOINT_LRT+1)=IOR(IAND(IBB(KPOINT_LRT+1),NOT(ISHFT('00FF'X,0))
     *),ISHFT(IAND((AIRBORNE(M)),'00FF'X),0))
      IBB(KPOINT_LRT)=IOR(IAND(IBB(KPOINT_LRT),NOT(ISHFT('0001'X,15))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_LRT),-(15)),    
     *'0001'X)))),'0001'X),15))
      IBB(KPOINT_LRT+1)=IOR(IAND(IBB(KPOINT_LRT+1),NOT(ISHFT('00FF'X,8))
     *),ISHFT(IAND((0),'00FF'X),8))
      IBB(KPOINT_LRT+1)=IOR(IAND(IBB(KPOINT_LRT+1),NOT(ISHFT('00FF'X,16)
     *)),ISHFT(IAND((0),'00FF'X),16))
      IBB(KPOINT_LRT+1)=IOR(IAND(IBB(KPOINT_LRT+1),NOT(ISHFT('00FF'X,24)
     *)),ISHFT(IAND((0),'00FF'X),24))
      CALL CDRESS8(%REF('        '),IBB(KPOINT_LRT+2))
      CALL CDRESS8(%REF('        '),IBB(KPOINT_LRT+4))
      CALL CDRESS8(%REF('        '),IBB(KPOINT_LRT+6))
      CALL CDRESS8(%REF('        '),IBB(KPOINT_LRT+8))
      ILAST =MAX(ILAST,((KPOINT_LRT-IBBP(1,73))/11+1))
23352 M=M+1
      GOTO 23351
23353 CONTINUE
      IBBP(3,73)=ILAST *11
      RETURN
      END
      SUBROUTINE GET_DEQ_ENTRY (KPOINT_UNT,KPOINT_DEQ)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER LTSAVE / -1 /
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_NBREQ
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  I_DEQ_NEXTDEQ
      I_UNT_NBREQ=(IAND(ISHFT(IBB(KPOINT_UNT+63),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_NBREQ.GT.0))GOTO 23358
      IF(.NOT.(IBB(279).EQ.0))GOTO 23360
      KPOINT_DEQ=0
      IF(.NOT.(LTSAVE.EQ.IBB(103)))GOTO 23362
      RETURN
23362 CONTINUE
      LTSAVE =IBB(103)
      CALL ECHOR
      CALL ECHOV ('DEQ Table overflow')
      CALL ECHOR
      RETURN
23360 CONTINUE
      KPOINT_DEQ=IBBP(1,03)-6+(6)*((KPOINT_UNT-IBBP(1,01))/104+1)
23364 IF(.NOT.(KPOINT_DEQ.GE.IBBP(1,03)))GOTO 23366
      I_DEQ_NEXTDEQ=(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),'0FFFFF'X))
      IF(.NOT.(I_DEQ_NEXTDEQ.EQ.0))GOTO 23367
      IBB(KPOINT_DEQ+2)=IOR(IAND(IBB(KPOINT_DEQ+2),NOT(ISHFT('0FFFFF'X,8
     *))),ISHFT(IAND((IBB(279)),'0FFFFF'X),8))
      KPOINT_DEQ=IBBP(1,03)-6+(6)*(IBB(279))
      IBB(279)=(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),'0FFFFF'X))
      IBB(KPOINT_DEQ+2)=IOR(IAND(IBB(KPOINT_DEQ+2),NOT(ISHFT('0FFFFF'X,8
     *))),ISHFT(IAND((0),'0FFFFF'X),8))
      GOTO 23366
23367 CONTINUE
23365 KPOINT_DEQ=IBBP(1,03)-6+(6)*(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),  
     *'0FFFFF'X))
      GOTO 23364
23366 CONTINUE
      GOTO 23359
23358 CONTINUE
      KPOINT_DEQ=IBBP(1,03)-6+(6)*(((KPOINT_UNT-IBBP(1,01))/104+1))
      IBB(KPOINT_DEQ+2)=IOR(IAND(IBB(KPOINT_DEQ+2),NOT(ISHFT('0FFFFF'X,8
     *))),ISHFT(IAND((0),'0FFFFF'X),8))
23359 CONTINUE
      I_UNT_NBREQ=I_UNT_NBREQ+1
      IBB(KPOINT_UNT+63)=IOR(IAND(IBB(KPOINT_UNT+63),NOT(ISHFT('00FF'X,2
     *0))),ISHFT(IAND((I_UNT_NBREQ),'00FF'X),20))
      END
      SUBROUTINE FREE_DEQ_CHAIN (KPOINT_UNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 I_DEQ_SAVE
      INTEGER*4  KPOINT_UNT
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  I_DEQ_NEXTDEQ
      KPOINT_DEQ=IBBP(1,03)-6+(6)*((KPOINT_UNT-IBBP(1,01))/104+1)
23369 IF(.NOT.(KPOINT_DEQ.GE.IBBP(1,03)))GOTO 23371
      I_DEQ_SAVE =(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),'0FFFFF'X))
      CALL LIB$MOVC5(0,0,0,6*4,IBB(KPOINT_DEQ))
      IF(.NOT.(((KPOINT_DEQ-IBBP(1,03))/6+1).NE.((KPOINT_UNT-IBBP(1,01))
     */104+1)))GOTO 23372
      I_DEQ_NEXTDEQ=IBB(279)
      IBB(KPOINT_DEQ+2)=IOR(IAND(IBB(KPOINT_DEQ+2),NOT(ISHFT('0FFFFF'X,8
     *))),ISHFT(IAND((I_DEQ_NEXTDEQ),'0FFFFF'X),8))
      IBB(279)=((KPOINT_DEQ-IBBP(1,03))/6+1)
23372 CONTINUE
23370 KPOINT_DEQ=IBBP(1,03)-6+(6)*I_DEQ_SAVE
      GOTO 23369
23371 CONTINUE
      IBB(KPOINT_UNT+63)=IOR(IAND(IBB(KPOINT_UNT+63),NOT(ISHFT('00FF'X,2
     *0))),ISHFT(IAND((0 ),'00FF'X),20))
      END
      SUBROUTINE SHRINK_DEQ_CHAIN (KPOINT_UNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 FIRST_DEQ_ENTRY,NEXT_DEQ_ENTRY
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_NBREQ
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  I_DEQ_NEXTDEQ
      INTEGER*4  I_DEQ_IDENT
      INTEGER*4  KPOINT_DEQ2
      INTEGER*4  I_DEQ2_IDENT
      INTEGER*4  I_DEQ2_NEXTDEQ
      FIRST_DEQ_ENTRY =((KPOINT_UNT-IBBP(1,01))/104+1)
      KPOINT_DEQ=IBBP(1,03)-6+(6)*FIRST_DEQ_ENTRY
      NEXT_DEQ_ENTRY =(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),'0FFFFF'X))
23374 IF(.NOT.(NEXT_DEQ_ENTRY.NE.0))GOTO 23375
      KPOINT_DEQ2=IBBP(1,03)-6+(6)*NEXT_DEQ_ENTRY
      I_DEQ2_IDENT=(IAND(ISHFT(IBB(KPOINT_DEQ2+2),-(0)),'00FF'X))
      IF(.NOT.(I_DEQ2_IDENT.EQ. 0.OR.(I_DEQ2_IDENT.EQ.34.AND.(IAND(ISHFT
     *(IBB(KPOINT_DEQ2+1),-(13)),'07FFFF'X)).EQ.0)))GOTO 23376
      I_DEQ2_NEXTDEQ=(IAND(ISHFT(IBB(KPOINT_DEQ2+2),-(8)),'0FFFFF'X))
      IBB(KPOINT_DEQ+2)=IOR(IAND(IBB(KPOINT_DEQ+2),NOT(ISHFT('0FFFFF'X,8
     *))),ISHFT(IAND((I_DEQ2_NEXTDEQ),'0FFFFF'X),8))
      CALL LIB$MOVC5(0,0,0,6*4,IBB(KPOINT_DEQ2))
      IBB(KPOINT_DEQ2+2)=IOR(IAND(IBB(KPOINT_DEQ2+2),NOT(ISHFT(         
     *'0FFFFF'X,8))),ISHFT(IAND((IBB(279)),'0FFFFF'X),8))
      IBB(279)=((KPOINT_DEQ2-IBBP(1,03))/6+1)
      I_UNT_NBREQ=(IAND(ISHFT(IBB(KPOINT_UNT+63),-(20)),'00FF'X))-1
      IBB(KPOINT_UNT+63)=IOR(IAND(IBB(KPOINT_UNT+63),NOT(ISHFT('00FF'X,2
     *0))),ISHFT(IAND((I_UNT_NBREQ),'00FF'X),20))
      GOTO 23377
23376 CONTINUE
      KPOINT_DEQ=KPOINT_DEQ2
23377 CONTINUE
      NEXT_DEQ_ENTRY =(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),'0FFFFF'X))
      GOTO 23374
23375 CONTINUE
      KPOINT_DEQ=IBBP(1,03)-6+(6)*((KPOINT_UNT-IBBP(1,01))/104+1)
      I_DEQ_NEXTDEQ=(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),'0FFFFF'X))
      I_DEQ_IDENT=(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(0)),'00FF'X))
      IF(.NOT.(I_DEQ_NEXTDEQ.EQ.0.AND.I_DEQ_IDENT.EQ. 0))GOTO 23378
      IBB(KPOINT_UNT+63)=IOR(IAND(IBB(KPOINT_UNT+63),NOT(ISHFT('00FF'X,2
     *0))),ISHFT(IAND((0 ),'00FF'X),20))
23378 CONTINUE
      RETURN
      END
      SUBROUTINE FIND_ACTIVE_CHANNEL (KPOINT_UNT,IEQUIP_CODE,EQTYPE,ICHA
     *N_INDEX)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*4 MTH$ALOG2,ALLBANDS
      INTEGER*4 ICHAN_INDEX,LITCMP
      INTEGER*4 IEQUIP_CODE
      REAL*8 EQTYPE
      REAL*8 CSTRIP8
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  KPOINT_UNT
      ICHAN_INDEX =1
      KPOINT_DEQ=IBBP(1,03)-6+(6)*((KPOINT_UNT-IBBP(1,01))/104+1)
23380 IF(.NOT.(KPOINT_DEQ.GE.IBBP(1,03)))GOTO 23382
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_DEQ+2),-(0)),'00FF'X)).EQ.IEQUIP_C
     *ODE.AND.LITCMP(CSTRIP8(IBB((IAND(ISHFT(IBB(KPOINT_DEQ),-(12)),    
     *'0FFFFF'X)+IBBP(1,34)))),EQTYPE).EQ.0))GOTO 23383
      ALLBANDS =(IAND(ISHFT(IBB(KPOINT_DEQ+1),-(1)),'03FF'X))
      IF(.NOT.(ALLBANDS.GT.0))GOTO 23385
      ICHAN_INDEX =NINT(MTH$ALOG2(ALLBANDS)) +1
      GOTO 23386
23385 CONTINUE
      ICHAN_INDEX =1
23386 CONTINUE
      GOTO 23382
23383 CONTINUE
23381 KPOINT_DEQ=IBBP(1,03)-6+(6)*(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),  
     *'0FFFFF'X))
      GOTO 23380
23382 CONTINUE
      RETURN
      END
      SUBROUTINE TYPEMODUL (MODULTYPE,MODULSPEC,ITYPE)
      IMPLICIT NONE
      REAL*8 MODULTYPE,MODULSPEC
      INTEGER ITYPE
      IF(.NOT.(MODULTYPE.EQ.'PULSE'))GOTO 23387
      IF(.NOT.(MODULSPEC.EQ.'AM'))GOTO 23389
      ITYPE =1
      GOTO 23390
23389 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'AM2TN'))GOTO 23391
      ITYPE =2
      GOTO 23392
23391 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'FM2TN'))GOTO 23393
      ITYPE =11
      GOTO 23394
23393 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'FSK'))GOTO 23395
      ITYPE =10
      GOTO 23396
23395 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'WIDBN'))GOTO 23397
      ITYPE =17
      GOTO 23398
23397 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'PAM'))GOTO 23399
      ITYPE =18
      GOTO 23400
23399 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'WIDTH'))GOTO 23401
      ITYPE =19
      GOTO 23402
23401 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'POSIT'))GOTO 23403
      ITYPE =20
      GOTO 23404
23403 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'CMPRS'))GOTO 23405
      ITYPE =21
      GOTO 23406
23405 CONTINUE
      ITYPE =0
23406 CONTINUE
23404 CONTINUE
23402 CONTINUE
23400 CONTINUE
23398 CONTINUE
23396 CONTINUE
23394 CONTINUE
23392 CONTINUE
23390 CONTINUE
      GOTO 23388
23387 CONTINUE
      IF(.NOT.(MODULTYPE.EQ.'VOICE'))GOTO 23407
      IF(.NOT.(MODULSPEC.EQ.'AM3'))GOTO 23409
      ITYPE =3
      GOTO 23410
23409 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'AM5'))GOTO 23411
      ITYPE =4
      GOTO 23412
23411 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'FM1'))GOTO 23413
      ITYPE =12
      GOTO 23414
23413 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'FM5'))GOTO 23415
      ITYPE =13
      GOTO 23416
23415 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'ANLGD'))GOTO 23417
      ITYPE =5
      GOTO 23418
23417 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'ANLGS'))GOTO 23419
      ITYPE =6
      GOTO 23420
23419 CONTINUE
      ITYPE =0
23420 CONTINUE
23418 CONTINUE
23416 CONTINUE
23414 CONTINUE
23412 CONTINUE
23410 CONTINUE
      GOTO 23408
23407 CONTINUE
      IF(.NOT.(MODULTYPE.EQ.'ANLOG'))GOTO 23421
      IF(.NOT.(MODULSPEC.EQ.'AM'))GOTO 23423
      ITYPE =9
      GOTO 23424
23423 CONTINUE
      IF(.NOT.(MODULSPEC.EQ.'PM'))GOTO 23425
      ITYPE =16
      GOTO 23426
23425 CONTINUE
      ITYPE =0
23426 CONTINUE
23424 CONTINUE
      GOTO 23422
23421 CONTINUE
      IF(.NOT.(MODULTYPE.EQ.'FAX'))GOTO 23427
      ITYPE =7
      GOTO 23428
23427 CONTINUE
      IF(.NOT.(MODULTYPE.EQ.'MLTPX'))GOTO 23429
      ITYPE =15
      GOTO 23430
23429 CONTINUE
      IF(.NOT.(MODULTYPE.EQ.'FILTR'))GOTO 23431
      ITYPE =22
      GOTO 23432
23431 CONTINUE
      IF(.NOT.(MODULTYPE.EQ.'PHASE'))GOTO 23433
      ITYPE =23
      GOTO 23434
23433 CONTINUE
      IF(.NOT.(MODULTYPE.EQ.'VIDEO'))GOTO 23435
      ITYPE =8
23435 CONTINUE
23434 CONTINUE
23432 CONTINUE
23430 CONTINUE
23428 CONTINUE
23422 CONTINUE
23408 CONTINUE
23388 CONTINUE
      RETURN
      END
      REAL*8 FUNCTION ASTAB_MISSION (MISSION_CODE)
      IMPLICIT NONE
      INTEGER MISSION_CODE
      REAL*8 ALL_MISSIONS(0:46)
      CHARACTER *8 ALL_MISSIONSC(0:46)
      EQUIVALENCE (ALL_MISSIONS,ALL_MISSIONSC)
      DATA ALL_MISSIONSC(0) / '     ' /
      DATA ALL_MISSIONSC(1) / 'STRIK' /
      DATA ALL_MISSIONSC(2) / 'CAP  ' /
      DATA ALL_MISSIONSC(3) / 'SUCAP' /
      DATA ALL_MISSIONSC(4) / 'STCAP' /
      DATA ALL_MISSIONSC(5) / 'AEW  ' /
      DATA ALL_MISSIONSC(6) / 'ASW  ' /
      DATA ALL_MISSIONSC(7) / 'RECON' /
      DATA ALL_MISSIONSC(8) / 'TANKR' /
      DATA ALL_MISSIONSC(9) / 'RESCU' /
      DATA ALL_MISSIONSC(10) / 'DECOY' /
      DATA ALL_MISSIONSC(11) / 'RELAY' /
      DATA ALL_MISSIONSC(12) / 'SURV ' /
      DATA ALL_MISSIONSC(13) / 'JAM  ' /
      DATA ALL_MISSIONSC(14) / 'SRCH ' /
      DATA ALL_MISSIONSC(15) / 'EW   ' /
      DATA ALL_MISSIONSC(16) / 'STTKR' /
      DATA ALL_MISSIONSC(17) / 'AMPHB' /
      DATA ALL_MISSIONSC(30) / 'AD   ' /
      DATA ALL_MISSIONSC(31) / 'AI   ' /
      DATA ALL_MISSIONSC(32) / 'ALFT ' /
      DATA ALL_MISSIONSC(33) / 'BAI  ' /
      DATA ALL_MISSIONSC(34) / 'CAS  ' /
      DATA ALL_MISSIONSC(35) / 'ESCRT' /
      DATA ALL_MISSIONSC(36) / 'FY   ' /
      DATA ALL_MISSIONSC(37) / 'MP   ' /
      DATA ALL_MISSIONSC(38)/ 'OCA  ' /
      DATA ALL_MISSIONSC(39) / 'SM   ' /
      DATA ALL_MISSIONSC(40) / 'SWEEP' /
      DATA ALL_MISSIONSC(41) / 'TASMO' /
      DATA ALL_MISSIONSC(42) / 'TEW  ' /
      DATA ALL_MISSIONSC(43) / 'WW   ' /
      DATA ALL_MISSIONSC(44) / 'COMRC' /
      DATA ALL_MISSIONSC(45) / 'SCTRL' /
      DATA ALL_MISSIONSC(46) / 'SLIFT' /
      ASTAB_MISSION=(ALL_MISSIONS(MISSION_CODE) )
      RETURN
      END
      REAL*8 FUNCTION ASTAB_ROE (ROE_CODE,NUCLEAR_CLEARED)
      IMPLICIT NONE
      INTEGER ROE_CODE,NUCLEAR_CLEARED
      REAL*8 ALL_ROES(0:1,0:16)
      CHARACTER *8 ALL_ROESC(0:1,0:16)
      EQUIVALENCE (ALL_ROES,ALL_ROESC)
      DATA ALL_ROESC(0,0) / 'T   ' /
      DATA ALL_ROESC(0,1) / 'FEX ' /
      DATA ALL_ROESC(0,2) / 'FEA ' /
      DATA ALL_ROESC(0,3) / 'FES ' /
      DATA ALL_ROESC(0,4) / 'FEU ' /
      DATA ALL_ROESC(0,5) / 'F*  ' /
      DATA ALL_ROESC(0,6) / 'FXX ' /
      DATA ALL_ROESC(0,7) / 'FXA ' /
      DATA ALL_ROESC(0,8) / 'FXS ' /
      DATA ALL_ROESC(0,9) / 'FXU ' /
      DATA ALL_ROESC(1,0) / 'T   ' /
      DATA ALL_ROESC(1,1) / 'FNE ' /
      DATA ALL_ROESC(1,2) / 'FNEA' /
      DATA ALL_ROESC(1,3) / 'FNES' /
      DATA ALL_ROESC(1,4) / 'FNEU' /
      DATA ALL_ROESC(1,5) / 'FN* ' /
      DATA ALL_ROESC(1,6) / 'FNU ' /
      DATA ALL_ROESC(1,7) / 'FNUA' /
      DATA ALL_ROESC(1,8) / 'FNUS' /
      DATA ALL_ROESC(1,9) / 'FNUU' /
      ASTAB_ROE=(ALL_ROES(IAND(NUCLEAR_CLEARED,1),ROE_CODE) )
      RETURN
      END
      INTEGER*4 FUNCTION ASTAB_STATUS (I_OWN_STATUS)
      IMPLICIT NONE
      INTEGER*4 I_OWN_STATUS
      INTEGER*4 ALL_STATS (0:24)
      CHARACTER *4 ALL_STATSC (0:24)
      EQUIVALENCE (ALL_STATS,ALL_STATSC)
      DATA ALL_STATSC (1) / 'ENG ' /
      DATA ALL_STATSC (2) / 'ENR ' /
      DATA ALL_STATSC (3) / 'FUEL' /
      DATA ALL_STATSC (4) / 'INT ' /
      DATA ALL_STATSC (5) / 'LNCH' /
      DATA ALL_STATSC (6) / 'SINK' /
      DATA ALL_STATSC (7) / 'STA ' /
      DATA ALL_STATSC (8) / 'FAIL' /
      DATA ALL_STATSC (9) / 'FLT ' /
      DATA ALL_STATSC (11) / 'TOW ' /
      DATA ALL_STATSC (12) / 'UTOW' /
      DATA ALL_STATSC (10) / 'DIW ' /
      DATA ALL_STATSC (13) / 'SRCH' /
      DATA ALL_STATSC (0) / 'BING' /
      DATA ALL_STATSC (14) / 'MSHL' /
      DATA ALL_STATSC (15) / 'HIDE' /
      DATA ALL_STATSC (16) / 'PLN ' /
      DATA ALL_STATSC (17) / 'MOOR' /
      DATA ALL_STATSC (18) / 'IPT ' /
      ASTAB_STATUS=(ALL_STATS (I_OWN_STATUS) )
      RETURN
      END
      SUBROUTINE OWNSTA (I_OWN_STATUS,ISTAT)
      IMPLICIT NONE
      INTEGER*4 ASTAB_STATUS
      EXTERNAL ASTAB_STATUS
      INTEGER*4 I_OWN_STATUS,ISTAT
      ISTAT =ASTAB_STATUS(I_OWN_STATUS)
      RETURN
      END
      SUBROUTINE GET_PERFORMANCE(RX_MODULATION,INTERFERENCE_MODULATION,I
     *_TO_N_RATIO,N,INTERFERENCE )
      IMPLICIT NONE
      LOGICAL*1 RX_MODULATION
      LOGICAL*1 INTERFERENCE_MODULATION
      INTEGER*4 I_TO_N_RATIO
      INTEGER*4 N
      INTEGER*4 INTERFERENCE
      INTEGER*2 THRESHOLD
      INTEGER*2 PERFORMANCE_THRESHOLD (23,23)
      DATA PERFORMANCE_THRESHOLD / 8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,7
     *,8,7,7,7,9,6,0,0,11,7,6,11,11,5,6,6,11,11,11,11,9,6,6,6,9,6,6,-23,
     *-13,-1,-5,4,0,-13,0,2,-23,0,0,2,0,2,2,-23,-13,-13,-13,-23,-13,-13,
     *-19,-10,0,-4,7,3,-10,3,5,-19,3,3,5,3,5,5,-19,-10,-10,-10,-19,-10,-
     *10,-36,-24,-7,-7,-7,-7,-24,3,3,-36,-7,-7,3,-7,3,3,-36,-24,-24,-24,
     *-36,-24,-24,-36,-24,-7,-7,-7,-7,-24,3,3,-36,-7,-7,3,-7,3,3,-36,-24
     *,-24,-24,-36,-24,-24,10,10,5,2,12,8,10,12,10,10,10,10,12,10,12,12,
     *10,10,10,10,10,12,10,41,41,36,32,45,41,41,45,41,41,41,41,45,41,45,
     *45,26,41,41,41,41,45,41,10,10,5,2,12,8,12,8,10,10,8,8,10,8,10,10,1
     *0,10,10,10,10,10,10,6,-6,-12,-16,16,16,-6,16,16,6,-6,-6,16,-6,16,1
     *6,6,-6,-6,-6,6,-6,-6,6,16,16,16,16,16,16,16,16,6,16,16,16,16,16,16
     *,6,16,16,16,6,16,16,0,3,3,3,2,2,3,2,3,0,3,3,2,3,2,2,0,0,0,0,0,0,0,
     *0,0,0,0,-4,-4,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,10,10,10,10
     *,10,10,12,12,12,12,12,12,10,10,0,12,12,12,12,12,12,22,22,22,22,25,
     *25,22,25,25,22,22,22,25,22,25,25,15,15,15,15,15,15,22,10,10,10,10,
     *10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,7,7,4,1
     *0,10,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,5,18,18,18,18,18,18,18,
     *18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
     *18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
     *18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
     *18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,
     *10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,13,
     *13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13/
      THRESHOLD =PERFORMANCE_THRESHOLD (INTERFERENCE_MODULATION,RX_MODUL
     *ATION )
      INTERFERENCE =I_TO_N_RATIO +THRESHOLD
      IF(.NOT.(INTERFERENCE.LT.0))GOTO 23437
      INTERFERENCE =0
23437 CONTINUE
      RETURN
      END
      SUBROUTINE ASSIGN_UNIQUE_UNIT_NAME (KPOINT_UNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 ITYPE
      INTEGER*4 ISIDE
      INTEGER*4 IX_UNT
      INTEGER*4 ILEN
      INTEGER*4 MY_IX
      REAL*8 C_UNT_NAME
      LOGICAL*1 PREFIX (6,0:2 )
      DATA PREFIX (2,0) / 84/
      DATA PREFIX (2,1) / 84/
      DATA PREFIX (2,2) / 84/
      DATA PREFIX (3,0) / 67/
      DATA PREFIX (3,1) / 67/
      DATA PREFIX (3,2) / 67/
      DATA PREFIX (1,0) / 90/
      DATA PREFIX (1,1) / 81/
      DATA PREFIX (1,2) / 80/
      DATA PREFIX (4,0) / 70/
      DATA PREFIX (5,1) / 73/
      DATA PREFIX (5,2) / 72/
      DATA PREFIX (6,1) / 83/
      DATA PREFIX (6,2) / 77/
      INTEGER*4 COUNT_IX (6,0:2 )
      DATA COUNT_IX(3,0) / 316 /
      DATA COUNT_IX(3,1) / 317 /
      DATA COUNT_IX(3,2) / 318 /
      DATA COUNT_IX(2,0) / 316 /
      DATA COUNT_IX(2,1) / 317 /
      DATA COUNT_IX(2,2) / 318 /
      DATA COUNT_IX(1,0) / 319 /
      DATA COUNT_IX(1,1) / 320 /
      DATA COUNT_IX(1,2) / 321 /
      DATA COUNT_IX(4,0) / 338 /
      DATA COUNT_IX(5,1) / 445 /
      DATA COUNT_IX(5,2) / 446 /
      DATA COUNT_IX(6,1) / 504 /
      DATA COUNT_IX(6,2) / 505 /
      INTEGER ICAT
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_VIEW
      INTEGER*4  I_UNT_TYPE
      INTEGER*4  I_UNT_SUPERTYPE
      INTEGER*4  KPOINT_CMC
      I_UNT_VIEW=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X))
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      I_UNT_SUPERTYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(17)),'07FF'X))
      KPOINT_CMC=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *33))
      ICAT =(IAND(ISHFT(IBB(KPOINT_CMC+10),-(29)),'0007'X))
      IF(.NOT.(I_UNT_TYPE.EQ.5))GOTO 23439
      IF(.NOT.(ICAT.EQ.3))GOTO 23441
      ITYPE =5
      GOTO 23442
23441 CONTINUE
      ITYPE =1
23442 CONTINUE
      GOTO 23440
23439 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.32))GOTO 23443
      ITYPE =6
      GOTO 23444
23443 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3)+2)))GOTO 23445
      ITYPE =3
      GOTO 23446
23445 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3)+1)))GOTO 23447
      ITYPE =2
      GOTO 23448
23447 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3)+3)))GOTO 23449
      ITYPE =4
      GOTO 23450
23449 CONTINUE
      C_UNT_NAME='Z'
      IX_UNT =((KPOINT_UNT-IBBP(1,01))/104+1)
      ILEN =1
      CALL SMOVIZ(IX_UNT,4,C_UNT_NAME,ILEN)
      ISNAP_BEFORE_1 =IBB(KPOINT_UNT+0)
      ISNAP_BEFORE_2 =IBB(KPOINT_UNT+1)
      CALL CDRESS8(%REF(C_UNT_NAME),IBB(KPOINT_UNT))
      ISNAP_AFTER_1 =IBB(KPOINT_UNT+0)
      ISNAP_AFTER_2 =IBB(KPOINT_UNT+1)
      ISNAP_D =0
      if (ISNAP_BEFORE_1 .NE.ISNAP_AFTER_1) ISNAP_D =1
      if (ISNAP_BEFORE_2 .NE. ISNAP_AFTER_2) ISNAP_D =1
      IF(.NOT.(ISNAP_D.NE.0))GOTO 23451
      IBB(KPOINT_UNT+87)=IOR(IAND(IBB(KPOINT_UNT+87),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(K
     *POINT_UNT+87),-(0)),'FFFF'X)))),'FFFF'X),0))
23451 CONTINUE
      RETURN
23450 CONTINUE
23448 CONTINUE
23446 CONTINUE
23444 CONTINUE
23440 CONTINUE
      CALL WHSIDE (I_UNT_VIEW,ISIDE)
      MY_IX =MAX (1,COUNT_IX (ITYPE ,ISIDE ) )
      IBB (MY_IX ) =IBB (MY_IX ) +1
      ILEN =0
      C_UNT_NAME='2020202020202020'X
      CALL SMOV (PREFIX (ITYPE,ISIDE ),C_UNT_NAME,ILEN)
      IX_UNT =MOD (IBB (MY_IX ),1000 )
      CALL SMOVI (ISIDE,C_UNT_NAME,ILEN)
      CALL SMOVIZ(IX_UNT,3,C_UNT_NAME,ILEN)
      ISNAP_BEFORE_1 =IBB(KPOINT_UNT+0)
      ISNAP_BEFORE_2 =IBB(KPOINT_UNT+1)
      CALL CDRESS8(%REF(C_UNT_NAME),IBB(KPOINT_UNT))
      ISNAP_AFTER_1 =IBB(KPOINT_UNT+0)
      ISNAP_AFTER_2 =IBB(KPOINT_UNT+1)
      ISNAP_D =0
      if (ISNAP_BEFORE_1 .NE.ISNAP_AFTER_1) ISNAP_D =1
      if (ISNAP_BEFORE_2 .NE. ISNAP_AFTER_2) ISNAP_D =1
      IF(.NOT.(ISNAP_D.NE.0))GOTO 23453
      IBB(KPOINT_UNT+87)=IOR(IAND(IBB(KPOINT_UNT+87),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(K
     *POINT_UNT+87),-(0)),'FFFF'X)))),'FFFF'X),0))
23453 CONTINUE
      RETURN
      END
      SUBROUTINE ASSIGN_UNIQUE_BOY_NAME (KPOINT_BOY)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 ITYPE
      INTEGER*4 ISIDE
      INTEGER*4 IX_UNT
      INTEGER*4 ILEN
      INTEGER*4 MY_IX
      REAL*8 C_BOY_NAME
      LOGICAL*1 PREFIX (6,0:2 )
      DATA PREFIX (1,0) / 66/
      DATA PREFIX (1,1) / 66/
      DATA PREFIX (1,2) / 66/
      DATA PREFIX (2,0) / 67/
      DATA PREFIX (2,1) / 67/
      DATA PREFIX (2,2) / 67/
      DATA PREFIX (3,0) / 68/
      DATA PREFIX (3,1) / 68/
      DATA PREFIX (3,2) / 68/
      DATA PREFIX (4,0) / 71/
      DATA PREFIX (4,1) / 71/
      DATA PREFIX (4,2) / 71/
      DATA PREFIX (5,0) / 72/
      DATA PREFIX (5,1) / 72/
      DATA PREFIX (5,2) / 72/
      DATA PREFIX (6,0) / 74/
      DATA PREFIX (6,1) / 74/
      DATA PREFIX (6,2) / 74/
      INTEGER*4 COUNT_IX (6,0:2 )
      DATA COUNT_IX(1,0) / 542 /
      DATA COUNT_IX(1,1) / 543 /
      DATA COUNT_IX(1,2) / 544 /
      DATA COUNT_IX(2,0) / 545 /
      DATA COUNT_IX(2,1) / 546 /
      DATA COUNT_IX(2,2) / 547 /
      DATA COUNT_IX(3,0) / 548 /
      DATA COUNT_IX(3,1) / 549 /
      DATA COUNT_IX(3,2) / 550 /
      DATA COUNT_IX(4,0) / 551 /
      DATA COUNT_IX(4,1) / 552 /
      DATA COUNT_IX(4,2) / 553 /
      DATA COUNT_IX(5,0) / 554 /
      DATA COUNT_IX(5,1) / 555 /
      DATA COUNT_IX(5,2) / 556 /
      DATA COUNT_IX(6,0) / 557 /
      DATA COUNT_IX(6,1) / 558 /
      DATA COUNT_IX(6,2) / 559 /
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_VIEW
      INTEGER*4  I_BOY_TYPE
      INTEGER*4  KPOINT_BOY
      KPOINT_UNT=IBBP(1,01)-104+(104)*(IAND(ISHFT(IBB(KPOINT_BOY+2),-(0)
     *),'0FFF'X))
      I_UNT_VIEW=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X))
      I_BOY_TYPE=(IAND(ISHFT(IBB(KPOINT_BOY+14),-(16)),'003F'X))
      IF(.NOT.(I_BOY_TYPE.EQ.9))GOTO 23455
      ITYPE =2
      GOTO 23456
23455 CONTINUE
      IF(.NOT.(I_BOY_TYPE.EQ.27))GOTO 23457
      ITYPE =1
      GOTO 23458
23457 CONTINUE
      IF(.NOT.(I_BOY_TYPE.EQ.28))GOTO 23459
      ITYPE =4
      GOTO 23460
23459 CONTINUE
      IF(.NOT.(I_BOY_TYPE.EQ.26))GOTO 23461
      ITYPE =6
      GOTO 23462
23461 CONTINUE
      IF(.NOT.(I_BOY_TYPE.EQ.25))GOTO 23463
      ITYPE =5
      GOTO 23464
23463 CONTINUE
      IF(.NOT.(I_BOY_TYPE.EQ.38))GOTO 23465
      ITYPE =3
      GOTO 23466
23465 CONTINUE
      RETURN
23466 CONTINUE
23464 CONTINUE
23462 CONTINUE
23460 CONTINUE
23458 CONTINUE
23456 CONTINUE
      CALL WHSIDE (I_UNT_VIEW,ISIDE)
      MY_IX =MAX (1,COUNT_IX (ITYPE ,ISIDE ) )
      IBB (MY_IX ) =IBB (MY_IX ) +1
      ILEN =0
      C_BOY_NAME='2020202020202020'X
      CALL SMOV (PREFIX (ITYPE,ISIDE ),C_BOY_NAME,ILEN)
      IX_UNT =MOD (IBB (MY_IX ),100000 )
      CALL SMOVI (ISIDE,C_BOY_NAME,ILEN)
      CALL SMOVIZ(IX_UNT,5,C_BOY_NAME,ILEN)
      CALL CDRESS8(%REF(C_BOY_NAME),IBB(KPOINT_BOY))
      RETURN
      END
      SUBROUTINE DAY_NITE_TIME (LATITUDE,LONGITUDE,BUF)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*4 LATITUDE,LONGITUDE
      LOGICAL*1 BUF(30)
      INTEGER GAME_TIME
      REAL SUNSET,SUNRISE
      REAL FUDGE /-.0151/
      REAL SUNLON,SCOS,SSIN,PLAT,PLON,DIFF,PCOS,PSIN,TERM,DELLON,TIL
      INTEGER ILEN
      SUNSET =00
      SUNRISE =00
      SUNLON =3.141592654/180. *(180.-(FBB(461)+IBB(104))/4.)
      SUNLON =AMOD(SUNLON,6.283185307)
      IF(.NOT.(SUNLON.GT.3.141592654))GOTO 23467
      SUNLON =SUNLON -6.283185307
23467 CONTINUE
      SCOS =COS(FBB(222))
      SSIN =SIN(FBB(222))
      PLAT =LATITUDE
      PLON =LONGITUDE
      DIFF =PLON -SUNLON
23469 IF(.NOT.(DIFF.GT.3.141592654))GOTO 23470
      DIFF =DIFF -6.283185307
      GOTO 23469
23470 CONTINUE
23471 IF(.NOT.(DIFF.LE.-3.141592654))GOTO 23472
      DIFF =DIFF +6.283185307
      GOTO 23471
23472 CONTINUE
      PCOS =COS(PLAT)
      PSIN =SIN(PLAT)
      TERM =(FUDGE-SSIN*PSIN)/(SCOS*PCOS)
      ILEN =0
      IF(.NOT.(TERM.LE.-1.0))GOTO 23473
      CALL SMOVV ('DAY',BUF,ILEN)
      GOTO 23474
23473 CONTINUE
      IF(.NOT.(TERM.GE.1.0))GOTO 23475
      CALL SMOVV ('NITE',BUF,ILEN)
      GOTO 23476
23475 CONTINUE
      DELLON =ACOS(TERM)
      SUNSET =4.*(180.-(180./3.141592654)*(PLON-DELLON)) -(IBB(104))
      CALL EARLST(SUNSET)
      SUNRISE =4.*(180.-(180./3.141592654)*(PLON+DELLON)) -(IBB(104))
      CALL EARLST(SUNRISE)
23477 IF(.NOT.(SUNRISE.LT.FBB(461).AND.SUNSET.LT.FBB(461)))GOTO 23478
      IF(.NOT.(SUNRISE.LT.SUNSET))GOTO 23479
      SUNRISE =SUNRISE +1440.
      GOTO 23480
23479 CONTINUE
      SUNSET =SUNSET +1440.
23480 CONTINUE
      GOTO 23477
23478 CONTINUE
      TIL =FBB(461)+IBB(104)
      CALL EARLST(TIL)
      IF(.NOT.(ABS(DIFF).LE.ACOS(TERM)))GOTO 23481
      CALL SMOVV ('DAY/',BUF,ILEN)
      CALL SMOVIZ(GAME_TIME(SUNSET-TIL),4,BUF,ILEN)
      GOTO 23482
23481 CONTINUE
      CALL SMOVV ('NITE/',BUF,ILEN)
      CALL SMOVIZ(GAME_TIME(SUNRISE-TIL),4,BUF,ILEN)
23482 CONTINUE
23476 CONTINUE
23474 CONTINUE
      CALL SMOVV (' ',BUF,ILEN)
      CALL SMOV (0,BUF,ILEN)
      RETURN
      END
      SUBROUTINE SUN_SET_RISE (LATITUDE,LONGITUDE,SUNSET,SUNRISE)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*4 LATITUDE,LONGITUDE
      REAL*4 SUNSET,SUNRISE
      REAL FUDGE /-.0151/
      REAL SCOS,SSIN,FCOS,FSIN,TERM,DELLON
      SCOS =COS(FBB(222))
      SSIN =SIN(FBB(222))
      FCOS =COS(LATITUDE)
      FSIN =SIN(LATITUDE)
      TERM =(FUDGE-SSIN*FSIN)/(SCOS*FCOS)
      IF(.NOT.(TERM.LE.-1.0))GOTO 23483
      SUNRISE =2001
      SUNSET =2001
      GOTO 23484
23483 CONTINUE
      IF(.NOT.(TERM.GE.1.0))GOTO 23485
      SUNRISE =1999
      SUNSET =1999
      GOTO 23486
23485 CONTINUE
      DELLON =ACOS(TERM)
      SUNRISE =720.*(1.-(LONGITUDE+DELLON)/3.141592654) -IBB(104)
      CALL EARLST(SUNRISE)
      SUNSET =720.*(1.-(LONGITUDE-DELLON)/3.141592654) -IBB(104)
      CALL EARLST(SUNSET)
23486 CONTINUE
23484 CONTINUE
      IF(.NOT.(SUNRISE.NE.2001.OR.SUNRISE.NE.1999))GOTO 23487
23489 IF(.NOT.(SUNRISE.LT.FBB(461).AND.SUNSET.LT.FBB(461)))GOTO 23490
      IF(.NOT.(SUNRISE.LT.SUNSET))GOTO 23491
      SUNRISE =SUNRISE +1440.
      GOTO 23492
23491 CONTINUE
      SUNSET =SUNSET +1440.
23492 CONTINUE
      GOTO 23489
23490 CONTINUE
23487 CONTINUE
      RETURN
      END
      SUBROUTINE INOUT(XP,YP,N,X ,Y ,INSIDE)
      IMPLICIT NONE
      REAL*4 XP,YP,X0,Y0,X1,X2,Y1,Y2
      INTEGER*4 N,INSIDE,NEWTRY,NINTER,J,I
      REAL*4 YNUMER,YDENOM
      REAL*4 X(N),Y(N)
      X0 =XP
      Y0 =YP
23493 CONTINUE
      NEWTRY =0
      NINTER =0
      X2 =X(1) -X0
23496 IF(.NOT.(X2.GT.3.141592654))GOTO 23497
      X2 =X2 -6.283185307
      GOTO 23496
23497 CONTINUE
23498 IF(.NOT.(X2.LE.-3.141592654))GOTO 23499
      X2 =X2 +6.283185307
      GOTO 23498
23499 CONTINUE
      I=1
23500 IF(.NOT.(I.LE.N))GOTO 23502
      IF(.NOT.(I.EQ.N))GOTO 23503
      J =1
      GOTO 23504
23503 CONTINUE
      J =I +1
23504 CONTINUE
      X1 =X2
      X2 =X(J) -X0
23505 IF(.NOT.(X2.GT.3.141592654))GOTO 23506
      X2 =X2 -6.283185307
      GOTO 23505
23506 CONTINUE
23507 IF(.NOT.(X2.LE.-3.141592654))GOTO 23508
      X2 =X2 +6.283185307
      GOTO 23507
23508 CONTINUE
      IF(.NOT.(X1.EQ.0.0.OR.X2.EQ.0.0))GOTO 23509
      X0 =X0 +.0001
23511 IF(.NOT.(X0.GT.3.141592654))GOTO 23512
      X0 =X0 -6.283185307
      GOTO 23511
23512 CONTINUE
23513 IF(.NOT.(X0.LE.-3.141592654))GOTO 23514
      X0 =X0 +6.283185307
      GOTO 23513
23514 CONTINUE
      NEWTRY =1
      GOTO 23502
23509 CONTINUE
      IF(.NOT.((X1.GT.0.0.AND.X2.LT.0.0).OR.(X1.LT.0.0.AND.X2.GT.0.0)))G
     *OTO 23515
      Y1 =Y(I) -Y0
23517 IF(.NOT.(Y1.GT.3.141592654))GOTO 23518
      Y1 =Y1 -6.283185307
      GOTO 23517
23518 CONTINUE
23519 IF(.NOT.(Y1.LE.-3.141592654))GOTO 23520
      Y1 =Y1 +6.283185307
      GOTO 23519
23520 CONTINUE
      Y2 =Y(J) -Y0
23521 IF(.NOT.(Y2.GT.3.141592654))GOTO 23522
      Y2 =Y2 -6.283185307
      GOTO 23521
23522 CONTINUE
23523 IF(.NOT.(Y2.LE.-3.141592654))GOTO 23524
      Y2 =Y2 +6.283185307
      GOTO 23523
23524 CONTINUE
      IF(.NOT.(Y1.GT.0.0.AND.Y2.GT.0.0))GOTO 23525
      NINTER =NINTER +1
      GOTO 23526
23525 CONTINUE
      IF(.NOT.(Y1.LT.0.0.AND.Y2.LT.0.0))GOTO 23527
      GOTO 23501
23527 CONTINUE
      YNUMER =X1 *Y2 -X2 *Y1
      YDENOM =X1 -X2
      IF(.NOT.((YNUMER.GT.0.0.AND.YDENOM.GT.0.0).OR.(YNUMER.LT.0.0.AND.Y
     *DENOM.LT.0.0)))GOTO 23529
      NINTER =NINTER +1
      GOTO 23530
23529 CONTINUE
      IF(.NOT.(YNUMER.EQ.0.0))GOTO 23531
      INSIDE =1
      RETURN
23531 CONTINUE
23530 CONTINUE
23528 CONTINUE
23526 CONTINUE
23515 CONTINUE
23501 I=I+1
      GOTO 23500
23502 CONTINUE
23494 IF(.NOT.(NEWTRY.EQ.0))GOTO 23493
23495 CONTINUE
      IF(.NOT.(MOD(NINTER,2).EQ.1))GOTO 23533
      INSIDE =1
      GOTO 23534
23533 CONTINUE
      INSIDE =0
23534 CONTINUE
      RETURN
      END
      SUBROUTINE GET_COMMSUITE_CHANNEL (KPOINT_SUI,KPOINT_PAI,CHANNEL,IS
     *TAT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 KPOINT_SUI
      INTEGER*4 KPOINT_PAI
      INTEGER*4 CHANNEL
      INTEGER*4 ISTAT
      INTEGER*4 INDEX_SUI_CH
      INTEGER*4  I_SUI_DEVICETYPE
      ISTAT =0
      CHANNEL =1
      I_SUI_DEVICETYPE=(IAND(ISHFT(IBB(KPOINT_SUI+9),-(12)),'0007'X))
      IF(.NOT.(I_SUI_DEVICETYPE.EQ.2))GOTO 23535
      INDEX_SUI_CH=1
23537 IF(.NOT.((INDEX_SUI_CH.GT.0.AND.INDEX_SUI_CH.LE.10)))GOTO 23539
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_PAI+7),-(0)),'3FFFFF'X))/1000.0.EQ
     *.FBB((KPOINT_SUI+21+(INDEX_SUI_CH-1)*6)+1).AND.(IAND(ISHFT(IBB((KP
     *OINT_SUI+21+(INDEX_SUI_CH-1)*6)+4),-(17)),'00FF'X)-160).NE.0))GOTO
     * 23540
      CHANNEL =INDEX_SUI_CH
      ISTAT =1
      GOTO 23539
23540 CONTINUE
23538 INDEX_SUI_CH=INDEX_SUI_CH+1
      GOTO 23537
23539 CONTINUE
      GOTO 23536
23535 CONTINUE
      IF(.NOT.(I_SUI_DEVICETYPE.EQ.1))GOTO 23542
      ISTAT =1
23542 CONTINUE
23536 CONTINUE
      RETURN
      END
      SUBROUTINE INV_WORSE(ENV_DET,ENV_TGT,ENV_NUM )
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER ENV_NUM,ENV_TGT,ENV_DET
      INTEGER MINV
      INTEGER DEFLT
      DEFLT =4
      IF(.NOT.(ENV_TGT.LT.1.OR.ENV_DET.LT.1))GOTO 23544
      ENV_NUM =MAX(ENV_DET,ENV_TGT,1)
      ENV_NUM =MIN(ENV_NUM,DEFLT)
      RETURN
23544 CONTINUE
      IF(.NOT.(ENV_TGT.GT.DEFLT.OR.ENV_DET.GT.DEFLT))GOTO 23546
      ENV_NUM =MIN(ENV_DET,ENV_TGT,DEFLT)
      ENV_NUM =MAX(ENV_NUM,1)
      RETURN
23546 CONTINUE
      IF(.NOT.(ENV_TGT.EQ.ENV_DET))GOTO 23548
      ENV_NUM =ENV_TGT
      RETURN
23548 CONTINUE
      IF(.NOT.(ENV_TGT.EQ.DEFLT.OR.ENV_DET.EQ.DEFLT))GOTO 23550
      MINV =MIN(ENV_TGT,ENV_DET)
      IF(.NOT.(IBB(330).GT.2))GOTO 23552
      ENV_NUM =DEFLT
      GOTO 23553
23552 CONTINUE
      IF(.NOT.(IBB(330).GT.1))GOTO 23554
      IF(.NOT.(MINV.GT.2))GOTO 23556
      ENV_NUM =MINV
      GOTO 23557
23556 CONTINUE
      ENV_NUM =DEFLT
23557 CONTINUE
      GOTO 23555
23554 CONTINUE
      IF(.NOT.(IBB(330).GT.0))GOTO 23558
      IF(.NOT.(MINV.GT.1))GOTO 23560
      ENV_NUM =MINV
      GOTO 23561
23560 CONTINUE
      ENV_NUM =DEFLT
23561 CONTINUE
      GOTO 23559
23558 CONTINUE
      ENV_NUM =MINV
23559 CONTINUE
23555 CONTINUE
23553 CONTINUE
      GOTO 23551
23550 CONTINUE
      ENV_NUM =MAX(ENV_TGT,ENV_DET)
23551 CONTINUE
      RETURN
      END
      SUBROUTINE GET_TBL_POINTER (KTBLN,KTBL)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 KTBLN
      INTEGER*4 KTBL
      INTEGER*2 LAST_CYCLE (156)
      INTEGER*2 ERROR_CYCLE (156)
CPAR$ PRIVATE_ALL
      IF(.NOT.(KTBLN.LT.1.OR.KTBLN.GT.156))GOTO 23562
      KTBL=0
      RETURN
23562 CONTINUE
      IF(.NOT.(IBB(103).NE.LAST_CYCLE(KTBLN)))GOTO 23564
      IBBP(3,KTBLN)=0
      LAST_CYCLE(KTBLN) =IBB(103)
23564 CONTINUE
      KTBL=IBBP(1,KTBLN)+IBBP(3,KTBLN)
      IF(.NOT.(.NOT.(KTBL.GE.IBBP(1,KTBLN).AND.KTBL.LT.(IBBP(1,KTBLN)+IB
     *BP(2,KTBLN)))))GOTO 23566
      KTBL=0
      IF(.NOT.(ERROR_CYCLE(KTBLN).NE.IBB(103)))GOTO 23568
      ERROR_CYCLE(KTBLN) =IBB(103)
      CALL ECHOV ('  Overflow of ')
      CALL ECHOHN(IBBP(4,KTBLN),3)
      CALL ECHOV (' table.')
23568 CONTINUE
      GOTO 23567
23566 CONTINUE
      IBBP(3,KTBLN)=IBBP(3,KTBLN)+IBBP(5,KTBLN)
23567 CONTINUE
      RETURN
      END
      SUBROUTINE LOAD_SHC_EQUIPMENT(NAME,KPOINT_SHC,KPOINT_UNT,SUCCESSFU
     *L_LOAD)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 NAME
      INTEGER KPOINT_UNT,KPOINT_SHC,SUCCESSFUL_LOAD
      INTEGER*4 I_UNT_TYPE
      INTEGER E_INDX
      INTEGER*4  INDEX_SHC_EQ
      INTEGER*4  I_SHC_EQ_IDENT
      INTEGER*4  INDEX_UNT_TNK
      REAL*4     F_UNT_TNK_FUELREMAINING
      INTEGER*4  KPOINT_NAV
      INTEGER*4  KPOINT_SON
      INTEGER*4  KPOINT_DEQ
      INTEGER*4  I_DEQ_PNTR
      INTEGER*4  I_DEQ_LIMIT
      INTEGER*4  I_DEQ_REMAINING
      INTEGER*4  I_DEQ_IDENT
      INTEGER*4  I_DEQ_OKTOSEND
      INTEGER*4  I_DEQ_ANTENNABLOCKAGE
      INTEGER*4  I_DEQ_ON
      INTEGER*4  INDEX_DEQ_EM
      INTEGER*4  KPOINT_IFF
      SUCCESSFUL_LOAD =0
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      E_INDX =1
      INDEX_SHC_EQ=1
23570 IF(.NOT.((INDEX_SHC_EQ.GT.0.AND.INDEX_SHC_EQ.LE.(IAND(ISHFT(IBB(KP
     *OINT_SHC+11),-(0)),'00FF'X)))))GOTO 23572
      I_SHC_EQ_IDENT=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2))
     *,-(0)),'003F'X))
      IF(.NOT.((I_SHC_EQ_IDENT.EQ.32).AND.(I_UNT_TYPE.EQ.7)))GOTO 23573
      INDEX_UNT_TNK=1
      F_UNT_TNK_FUELREMAINING=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_
     *EQ-1)*2)+1),-(0)),'0FFFFF'X))
      FBB((KPOINT_UNT+102+(INDEX_UNT_TNK-1)*1))=(F_UNT_TNK_FUELREMAINING
     *)
      GOTO 23571
23573 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.21))GOTO 23575
      KPOINT_NAV=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2)),-(1
     *2)),'0FFFFF'X)+IBBP(1,34))
      CALL NAVERR(KPOINT_NAV,KPOINT_UNT)
      GOTO 23571
23575 CONTINUE
23574 CONTINUE
      CALL GET_DEQ_ENTRY (KPOINT_UNT,KPOINT_DEQ)
      IF(.NOT.(KPOINT_DEQ.EQ.0))GOTO 23577
      SUCCESSFUL_LOAD =0
      RETURN
23577 CONTINUE
      I_DEQ_PNTR=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2)),-(1
     *2)),'0FFFFF'X)+IBBP(1,34))
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('0FFFFF'X,12)))
     *,ISHFT(IAND((I_DEQ_PNTR-IBBP(1,34)),'0FFFFF'X),12))
      I_DEQ_LIMIT=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2)),-(
     *6)),'003F'X))
      IBB(KPOINT_DEQ+5)=IOR(IAND(IBB(KPOINT_DEQ+5),NOT(ISHFT('000F'X,28)
     *)),ISHFT(IAND((I_DEQ_LIMIT),'000F'X),28))
      I_DEQ_REMAINING=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2)
     *+1),-(0)),'0FFFFF'X))
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('07FFFF'X,1
     *3))),ISHFT(IAND((I_DEQ_REMAINING),'07FFFF'X),13))
      I_DEQ_IDENT=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2)),-(
     *0)),'003F'X))
      IBB(KPOINT_DEQ+2)=IOR(IAND(IBB(KPOINT_DEQ+2),NOT(ISHFT('00FF'X,0))
     *),ISHFT(IAND((I_DEQ_IDENT),'00FF'X),0))
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.14.OR.I_SHC_EQ_IDENT.EQ.23))GOTO 23579
      I_DEQ_OKTOSEND=1
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0001'X,0))
     *),ISHFT(IAND((I_DEQ_OKTOSEND),'0001'X),0))
      GOTO 23580
23579 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.1))GOTO 23581
      IF(.NOT.((IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2)+1),-(2
     *0)),'07FF'X)).NE.0))GOTO 23583
      I_DEQ_ANTENNABLOCKAGE=1
      IBB((KPOINT_DEQ+4+(1-1)*1))=IOR(IAND(IBB((KPOINT_DEQ+4+(1-1)*1)),N
     *OT(ISHFT('0001'X,7))),ISHFT(IAND((I_DEQ_ANTENNABLOCKAGE),'0001'X),
     *7))
23583 CONTINUE
      GOTO 23582
23581 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.3))GOTO 23585
      I_DEQ_ON=1
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0003'X,11)
     *)),ISHFT(IAND((I_DEQ_ON),'0003'X),11))
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('001F'X,0))),IS
     *HFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(KPOINT_
     *DEQ),-(0)),'001F'X)))),'001F'X),0))
      GOTO 23586
23585 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.24))GOTO 23587
      KPOINT_SON=(IAND(ISHFT(IBB(KPOINT_DEQ),-(12)),'0FFFFF'X)+IBBP(1,34
     *))
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SON+11),-(28)),'0001'X)).EQ.1))GOT
     *O 23589
      I_DEQ_ON=0
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0003'X,11)
     *)),ISHFT(IAND((I_DEQ_ON),'0003'X),11))
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('001F'X,0))),IS
     *HFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(KPOINT_
     *DEQ),-(0)),'001F'X)))),'001F'X),0))
      GOTO 23590
23589 CONTINUE
      I_DEQ_ON=1
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0003'X,11)
     *)),ISHFT(IAND((I_DEQ_ON),'0003'X),11))
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('001F'X,0))),IS
     *HFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(KPOINT_
     *DEQ),-(0)),'001F'X)))),'001F'X),0))
23590 CONTINUE
      GOTO 23588
23587 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.29))GOTO 23591
      I_DEQ_ON=1
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0003'X,11)
     *)),ISHFT(IAND((I_DEQ_ON),'0003'X),11))
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('001F'X,0))),IS
     *HFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(KPOINT_
     *DEQ),-(0)),'001F'X)))),'001F'X),0))
      I_DEQ_REMAINING=1
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('07FFFF'X,1
     *3))),ISHFT(IAND((I_DEQ_REMAINING),'07FFFF'X),13))
      GOTO 23592
23591 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.41))GOTO 23593
      KPOINT_IFF=I_DEQ_PNTR
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_IFF+8),-(0)),'0001'X)).EQ.0))GOTO 
     *23595
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0003'X,11)
     *)),ISHFT(IAND((1),'0003'X),11))
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('001F'X,0))),IS
     *HFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(KPOINT_
     *DEQ),-(0)),'001F'X)))),'001F'X),0))
      GOTO 23596
23595 CONTINUE
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0003'X,11)
     *)),ISHFT(IAND((0),'0003'X),11))
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('001F'X,0))),IS
     *HFT(IAND((IOR(IOR('00000002'X,'00000001'X),(IAND(ISHFT(IBB(KPOINT_
     *DEQ),-(0)),'001F'X)))),'001F'X),0))
23596 CONTINUE
23593 CONTINUE
23592 CONTINUE
23588 CONTINUE
23586 CONTINUE
23582 CONTINUE
23580 CONTINUE
      IF(.NOT.((I_SHC_EQ_IDENT.EQ.8).OR.(I_SHC_EQ_IDENT.EQ.49)))GOTO 235
     *97
      IBB(KPOINT_UNT+46)=IOR(IAND(IBB(KPOINT_UNT+46),NOT(ISHFT('0001'X,1
     *5))),ISHFT(IAND((1),'0001'X),15))
      GOTO 23598
23597 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.20))GOTO 23599
      IBB(KPOINT_UNT+22)=IOR(IAND(IBB(KPOINT_UNT+22),NOT(ISHFT('0001'X,2
     *7))),ISHFT(IAND((1),'0001'X),27))
23599 CONTINUE
23598 CONTINUE
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.14.OR.I_SHC_EQ_IDENT.EQ.1.OR.I_SHC_EQ_I
     *DENT.EQ.3))GOTO 23601
      INDEX_DEQ_EM=1
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('0001'X,(IN
     *DEX_DEQ_EM)))),ISHFT(IAND((I_DEQ_ON),'0001'X),(INDEX_DEQ_EM)))
23601 CONTINUE
      IF(.NOT.(I_DEQ_IDENT.EQ.31.OR.I_DEQ_IDENT.EQ.1.OR.I_DEQ_IDENT.EQ.5
     *1.OR.I_DEQ_IDENT.EQ.50.OR.I_DEQ_IDENT.EQ.4))GOTO 23603
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('007F'X,5))),IS
     *HFT(IAND((E_INDX),'007F'X),5))
      E_INDX =MIN(E_INDX +1,10)
23603 CONTINUE
23571 INDEX_SHC_EQ=INDEX_SHC_EQ+1
      GOTO 23570
23572 CONTINUE
      SUCCESSFUL_LOAD =1
      RETURN
      END
      SUBROUTINE SET_UNT_ANTENNAHEIGHT(KPOINT_SHC,KPOINT_UNT,SUCCESSFUL_
     *SET)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KPOINT_UNT,KPOINT_SHC,SUCCESSFUL_SET
      INTEGER MAXHGT
      INTEGER*4 I_UNT_TYPE
      INTEGER*4  INDEX_SHC_EQ
      INTEGER*4  I_SHC_EQ_IDENT
      SUCCESSFUL_SET =0
      MAXHGT =(IAND(ISHFT(IBB(KPOINT_UNT+60),-(17)),'3FFF'X))
      INDEX_SHC_EQ=1
23605 IF(.NOT.((INDEX_SHC_EQ.GT.0.AND.INDEX_SHC_EQ.LE.(IAND(ISHFT(IBB(KP
     *OINT_SHC+11),-(0)),'00FF'X)))))GOTO 23607
      I_SHC_EQ_IDENT=(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)*2))
     *,-(0)),'003F'X))
      IF(.NOT.(I_SHC_EQ_IDENT.EQ.14.OR.I_SHC_EQ_IDENT.EQ.4.OR.I_SHC_EQ_I
     *DENT.EQ.31.OR.I_SHC_EQ_IDENT.EQ.1.OR.I_SHC_EQ_IDENT.EQ.3.OR.I_SHC_
     *EQ_IDENT.EQ.41))GOTO 23608
      MAXHGT =MAX(MAXHGT,(IAND(ISHFT(IBB((KPOINT_SHC+35+(INDEX_SHC_EQ-1)
     **2)+1),-(0)),'07FFFF'X)))
      SUCCESSFUL_SET =1
23608 CONTINUE
23606 INDEX_SHC_EQ=INDEX_SHC_EQ+1
      GOTO 23605
23607 CONTINUE
      MAXHGT =MAX(MAXHGT,30)
      IBB(KPOINT_UNT+60)=IOR(IAND(IBB(KPOINT_UNT+60),NOT(ISHFT('3FFF'X,1
     *7))),ISHFT(IAND((MAXHGT),'3FFF'X),17))
      RETURN
      END
      SUBROUTINE TBLFIND(KTBLN,NAME,KTBL)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 CNAME
      INTEGER CFLG
      LOGICAL*1 CFILE(11)
      CHARACTER *11 V_CFILE
      EQUIVALENCE (CFILE,V_CFILE)
      COMMON /EQERR/ CNAME,CFLG,CFILE
      REAL*8 NAME
      INTEGER*4  KTBLN
      INTEGER*4  KTBLE
      INTEGER*4  KTBL
      KTBLE=MAX(0,IBBP(5,KTBLN))
      CFLG =0
      CALL EQFIND (KTBLN,KTBLE,NAME,KTBL)
      RETURN
      END
      SUBROUTINE EQFIND(KTBLN,KTBLE,NAME,KTBL)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 CNAME
      INTEGER CFLG
      LOGICAL*1 CFILE(11)
      CHARACTER *11 V_CFILE
      EQUIVALENCE (CFILE,V_CFILE)
      COMMON /EQERR/ CNAME,CFLG,CFILE
      REAL*8 NAME
      REAL*8 CSTRIP8
      INTEGER LCOMP,LITCMP
      INTEGER*4  KTBLN
      INTEGER*4  KTBLE
      INTEGER*4  KTBL
      INTEGER*4  KPOINT_ACC
      INTEGER*4  KPOINT_SHC
      IF(.NOT.(KTBLE.GT.0))GOTO 23610
      KTBL=IBBP(1,KTBLN)
23612 IF(.NOT.(KTBL.LT.(IBBP(1,KTBLN)+IBBP(3,KTBLN)-1)))GOTO 23614
      IF(.NOT.(LCOMP(IBB(KTBL),NAME).EQ.0))GOTO 23615
      RETURN
23615 CONTINUE
23613 KTBL=KTBL+KTBLE
      GOTO 23612
23614 CONTINUE
      GOTO 23611
23610 CONTINUE
      IF(.NOT.(KTBLN.EQ.32))GOTO 23617
      KPOINT_ACC=IBBP(1,32)
23619 IF(.NOT.((KPOINT_ACC.GE.IBBP(1,32).AND.KPOINT_ACC.LE.(IBBP(1,32)+I
     *BBP(3,32)-1))))GOTO 23621
      KTBL=KPOINT_ACC
      IF(.NOT.(LITCMP(CSTRIP8(IBB(KPOINT_ACC)),NAME).EQ.0))GOTO 23622
      RETURN
23622 CONTINUE
23620 KPOINT_ACC=KPOINT_ACC+(27+(IAND(ISHFT(IBB(KPOINT_ACC+10),-(22)),  
     *'003F'X))*2)
      GOTO 23619
23621 CONTINUE
      GOTO 23618
23617 CONTINUE
      IF(.NOT.(KTBLN.EQ.31))GOTO 23624
      KPOINT_SHC=IBBP(1,31)
23626 IF(.NOT.((KPOINT_SHC.GE.IBBP(1,31).AND.KPOINT_SHC.LE.(IBBP(1,31)+I
     *BBP(3,31)-1))))GOTO 23628
      KTBL=KPOINT_SHC
      IF(.NOT.(LITCMP(CSTRIP8(IBB(KPOINT_SHC)),NAME).EQ.0))GOTO 23629
      RETURN
23629 CONTINUE
23627 KPOINT_SHC=KPOINT_SHC+(35+(IAND(ISHFT(IBB(KPOINT_SHC+11),-(0)),   
     *'00FF'X))*2)
      GOTO 23626
23628 CONTINUE
23624 CONTINUE
23618 CONTINUE
23611 CONTINUE
      KTBL=0
      IF(.NOT.(CFLG.NE.0))GOTO 23631
      CALL ECHOV ('File: ')
      CALL ECHOH (CFILE,10)
      CALL ECHOV ('  Record: ')
      CALL ECHOH (CNAME,5)
      CALL ECHOV ('  ')
      CALL ECHOH (IBBP(4,KTBLN),5)
      CALL ECHOV (' device ')
      CALL ECHOHN (NAME,8)
      CALL ECHOV (' was not found')
      CALL ECHOR
23631 CONTINUE
      CFLG =1
      RETURN
      END
      SUBROUTINE FIND_ACTIVE_RMT (TARGET_UNT_INDEX,KPOINT_RMT,IVIEW,IFOU
     *ND,TRACK_NAME)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER IVIEW,LASTRMT,IFOUND,TARGET_UNT_INDEX
      REAL*8 TRACK_NAME
      REAL*8 CSTRIP,A_TRACK
      LOGICAL*1 CLASS / 65/
      INTEGER*4  KPOINT_RVU
      INTEGER*4  KPOINT_RMT
      REAL*4     F_RMT_LASTDETTIME
      INTEGER*4  I_RMT_DETECTIONTYPE
      TRACK_NAME ='2020202020202020'X
      KPOINT_RVU=IBBP(1,67)-2+(2)*IVIEW
      KPOINT_RMT=IBBP(1,56)-21+(21)*(IAND(ISHFT(IBB(KPOINT_RVU+1),-(16))
     *,'FFFF'X))
      LASTRMT =KPOINT_RMT
      IFOUND =0
      KPOINT_RMT=IBBP(1,56)-21+(21)*(IAND(ISHFT(IBB(KPOINT_RVU+1),-(0)),
     * 'FFFF'X))
23633 IF(.NOT.(KPOINT_RMT.LE.LASTRMT))GOTO 23635
      IF(.NOT.(IBB(KPOINT_RMT+8).EQ.0))GOTO 23636
      GOTO 23634
23636 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+12),-(0)),'FFFF'X)).NE.TARGET_
     *UNT_INDEX))GOTO 23638
      GOTO 23634
23638 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+8),-(31)),'0001'X)).EQ.1))GOTO
     * 23640
      GOTO 23634
23640 CONTINUE
      F_RMT_LASTDETTIME=FBB(KPOINT_RMT+2)
      IF(.NOT.(F_RMT_LASTDETTIME+MAX(1.,FBB(463)).LT.FBB(461)))GOTO 2364
     *2
      GOTO 23634
23642 CONTINUE
      I_RMT_DETECTIONTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X))
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.0.OR.I_RMT_DETECTIONTYPE.EQ.1))GOT
     *O 23644
      IFOUND =1
      GOTO 23635
23644 CONTINUE
23634 KPOINT_RMT=KPOINT_RMT+21
      GOTO 23633
23635 CONTINUE
      IF(.NOT.(IFOUND.EQ.0))GOTO 23646
      KPOINT_RMT=0
      GOTO 23647
23646 CONTINUE
      TRACK_NAME =A_TRACK(CSTRIP(IBB(KPOINT_RVU),4,1),CLASS,(IAND(ISHFT(
     *IBB(KPOINT_RMT+8),-(0)),'FFFF'X)))
23647 CONTINUE
      RETURN
      END
      REAL*8 FUNCTION ASTAB_EOIR_CLASS (KPOINT_IRD)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 D_TYPE
      INTEGER*4 KPOINT_IRD,I_IRD_TARGETTYPE
      INTEGER*4 KPOINT_ACC
      INTEGER*4 KPOINT_SHC
      INTEGER*4 KPOINT_UNT,I_UNT_TYPE
      INTEGER I_SWITCH_1
      REAL*8 CSTRIP8
      LOGICAL TARGET_IDENTIFIED,TARGET_RECOGNIZED,TARGET_DETECTED
      IF(.NOT.(IBB(453).EQ.0))GOTO 23648
      I_IRD_TARGETTYPE=(IAND(ISHFT(IBB(KPOINT_IRD+1),-(11)),'000F'X))
      IF(.NOT.(I_IRD_TARGETTYPE.EQ.1))GOTO 23650
      KPOINT_ACC=((IBB(KPOINT_IRD)+IBBP(1,32)))
      GOTO 23651
23650 CONTINUE
      KPOINT_SHC=((IBB(KPOINT_IRD)+IBBP(1,31)))
23651 CONTINUE
      D_TYPE =CSTRIP8(IBB(KPOINT_IRD+5))
      TARGET_DETECTED =((IAND(ISHFT(IBB(KPOINT_IRD+1),-(4)),'0001'X)).EQ
     *. 0)
      TARGET_RECOGNIZED =(((IAND(ISHFT(IBB(KPOINT_IRD+1),-(4)),'0001'X))
     *.EQ. 1) .AND.((IAND(ISHFT(IBB(KPOINT_IRD+1),-(5)),'0001'X)).EQ. 0)
     * )
      TARGET_IDENTIFIED =((IAND(ISHFT(IBB(KPOINT_IRD+1),-(5)),'0001'X)).
     *EQ. 1)
      IF(.NOT.(TARGET_IDENTIFIED))GOTO 23652
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_IRD+1),-(6)),'0003'X)).EQ.1))GOTO 
     *23654
      D_TYPE =CSTRIP8(IBB(KPOINT_IRD+5))
      GOTO 23655
23654 CONTINUE
      IF(.NOT.(I_IRD_TARGETTYPE.EQ.1))GOTO 23656
      D_TYPE =CSTRIP8(IBB(KPOINT_ACC))
      GOTO 23657
23656 CONTINUE
      D_TYPE =CSTRIP8(IBB(KPOINT_SHC))
23657 CONTINUE
23655 CONTINUE
      GOTO 23653
23652 CONTINUE
      IF(.NOT.(TARGET_RECOGNIZED))GOTO 23658
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_IRD+1),-(6)),'0003'X)).EQ.1))GOTO 
     *23660
      D_TYPE =CSTRIP8(IBB(KPOINT_IRD+5))
      GOTO 23661
23660 CONTINUE
      IF(.NOT.(I_IRD_TARGETTYPE.EQ.1))GOTO 23662
      I_SWITCH_1=((IAND(ISHFT(IBB(KPOINT_ACC+21),-(28)),'0003'X)))
      GOTO 23664
23666 CONTINUE
      D_TYPE ='JET'
      GOTO 23665
23667 CONTINUE
      D_TYPE ='PROP'
      GOTO 23665
23668 CONTINUE
      D_TYPE ='HELO'
      GOTO 23665
23664 CONTINUE
      IF(I_SWITCH_1.EQ.0)GOTO 23666
      IF(I_SWITCH_1.EQ.1)GOTO 23667
      GOTO 23668
23665 CONTINUE
      GOTO 23663
23662 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SHC+13),-(31)),'0001'X)).EQ.1))GOT
     *O 23669
      D_TYPE ='BOAT'
      GOTO 23670
23669 CONTINUE
      D_TYPE ='SHIP'
23670 CONTINUE
23663 CONTINUE
23661 CONTINUE
      GOTO 23659
23658 CONTINUE
      D_TYPE ='UNKNOWN'
23659 CONTINUE
23653 CONTINUE
      GOTO 23649
23648 CONTINUE
      KPOINT_UNT=IBBP(1,01)-104+(104)*((IAND(ISHFT(IBB(KPOINT_IRD+9),-(0
     *)),'FFFF'X)))
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.EQ.1))GOTO 23671
      KPOINT_ACC=((IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1
     *,32)))
      GOTO 23672
23671 CONTINUE
      KPOINT_SHC=((IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1
     *,31)))
23672 CONTINUE
      D_TYPE =CSTRIP8(IBB(KPOINT_UNT))
      TARGET_DETECTED =((IAND(ISHFT(IBB(KPOINT_IRD+1),-(4)),'0001'X)).EQ
     *. 0)
      TARGET_RECOGNIZED =(((IAND(ISHFT(IBB(KPOINT_IRD+1),-(4)),'0001'X))
     *.EQ. 1) .AND.((IAND(ISHFT(IBB(KPOINT_IRD+1),-(5)),'0001'X)).EQ. 0)
     * )
      TARGET_IDENTIFIED =((IAND(ISHFT(IBB(KPOINT_IRD+1),-(5)),'0001'X)).
     *EQ. 1)
      IF(.NOT.(TARGET_IDENTIFIED))GOTO 23673
      D_TYPE =CSTRIP8(IBB(KPOINT_UNT))
      GOTO 23674
23673 CONTINUE
      IF(.NOT.(TARGET_RECOGNIZED))GOTO 23675
      IF(.NOT.(I_UNT_TYPE.EQ.1))GOTO 23677
      D_TYPE =CSTRIP8(IBB(KPOINT_ACC))
      GOTO 23678
23677 CONTINUE
      D_TYPE =CSTRIP8(IBB(KPOINT_SHC))
23678 CONTINUE
      GOTO 23676
23675 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.1))GOTO 23679
      I_SWITCH_1=((IAND(ISHFT(IBB(KPOINT_ACC+21),-(28)),'0003'X)))
      GOTO 23681
23683 CONTINUE
      D_TYPE ='JET'
      GOTO 23682
23684 CONTINUE
      D_TYPE ='PROP'
      GOTO 23682
23685 CONTINUE
      D_TYPE ='HELO'
      GOTO 23682
23681 CONTINUE
      IF(I_SWITCH_1.EQ.0)GOTO 23683
      IF(I_SWITCH_1.EQ.1)GOTO 23684
      GOTO 23685
23682 CONTINUE
      GOTO 23680
23679 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SHC+13),-(31)),'0001'X)).EQ.1))GOT
     *O 23686
      D_TYPE ='BOAT'
      GOTO 23687
23686 CONTINUE
      D_TYPE ='SHIP'
23687 CONTINUE
23680 CONTINUE
23676 CONTINUE
23674 CONTINUE
23649 CONTINUE
      ASTAB_EOIR_CLASS=(D_TYPE )
      RETURN
      END
      SUBROUTINE EXPORD (IVIEW,IADDR,CNTA,STKA,FLGA,NORD)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER STKA(4000),CNTA,FLGA,LITCMP
      INTEGER MATCH_WILDCARD
      LOGICAL MANEUVER_ORDER
      REAL*8 IADDR
      REAL*8 CSTRIP8
      INTEGER MSNCOD,ISNUMBER,IVIEW,ILO,IHI,K,NORD,KPOINT_UNT,I_UNT_TYPE
     *,I_UNT_MISSION,I_UNT_HIERARCHYID,I_UNT_STATUS
      CNTA =0
      STKA(1) =0
      FLGA =0
      MSNCOD =0
      IF(.NOT.(IADDR.EQ.0))GOTO 23688
      CONTINUE
      GOTO 23689
23688 CONTINUE
      IF(.NOT.( (IADDR.EQ.AINT(IADDR).AND.ISNUMBER(IADDR).EQ.1)))GOTO 23
     *690
      IF(.NOT.(IADDR.EQ.-20563))GOTO 23692
      MSNCOD =1
      GOTO 23693
23692 CONTINUE
      IF(.NOT.(IADDR.EQ.-20085))GOTO 23694
      MSNCOD =2
      GOTO 23695
23694 CONTINUE
      IF(.NOT.(IADDR.EQ.-20562))GOTO 23696
      MSNCOD =4
      GOTO 23697
23696 CONTINUE
      IF(.NOT.(IADDR.EQ.-20010))GOTO 23698
      MSNCOD =5
      GOTO 23699
23698 CONTINUE
      IF(.NOT.(IADDR.EQ.-20039))GOTO 23700
      MSNCOD =6
      GOTO 23701
23700 CONTINUE
      IF(.NOT.(IADDR.EQ.-20462))GOTO 23702
      MSNCOD =7
      GOTO 23703
23702 CONTINUE
      IF(.NOT.(IADDR.EQ.-20584))GOTO 23704
      MSNCOD =8
      GOTO 23705
23704 CONTINUE
      IF(.NOT.(IADDR.EQ.-20477))GOTO 23706
      MSNCOD =11
      GOTO 23707
23706 CONTINUE
      IF(.NOT.(IADDR.EQ.-20571))GOTO 23708
      MSNCOD =12
      GOTO 23709
23708 CONTINUE
      IF(.NOT.(IADDR.EQ.-20299))GOTO 23710
      MSNCOD =13
      GOTO 23711
23710 CONTINUE
      IF(.NOT.(IADDR.EQ.-20209))GOTO 23712
      MSNCOD =15
      GOTO 23713
23712 CONTINUE
      IF(.NOT.(IADDR.EQ.-20564))GOTO 23714
      MSNCOD=16
      GOTO 23715
23714 CONTINUE
      IF(.NOT.(IADDR.EQ.-20569))GOTO 23716
      MSNCOD =3
      GOTO 23717
23716 CONTINUE
      IF(.NOT.(IADDR.EQ.-20486))GOTO 23718
      MSNCOD =9
      GOTO 23719
23718 CONTINUE
      IF(.NOT.(IADDR.EQ.-20148))GOTO 23720
      MSNCOD =10
      GOTO 23721
23720 CONTINUE
      IF(.NOT.(IADDR.EQ.-20514))GOTO 23722
      MSNCOD =14
      GOTO 23723
23722 CONTINUE
      IF(.NOT.(IADDR.EQ.-20007))GOTO 23724
      MSNCOD =30
      GOTO 23725
23724 CONTINUE
      IF(.NOT.(IADDR.EQ.-20013))GOTO 23726
      MSNCOD =31
      GOTO 23727
23726 CONTINUE
      IF(.NOT.(IADDR.EQ.-20020))GOTO 23728
      MSNCOD =32
      GOTO 23729
23728 CONTINUE
      IF(.NOT.(IADDR.EQ.-20050))GOTO 23730
      MSNCOD=33
      GOTO 23731
23730 CONTINUE
      IF(.NOT.(IADDR.EQ.-20087))GOTO 23732
      MSNCOD=34
      GOTO 23733
23732 CONTINUE
      IF(.NOT.(IADDR.EQ.-20206))GOTO 23734
      MSNCOD =35
      GOTO 23735
23734 CONTINUE
      IF(.NOT.(IADDR.EQ.-20249))GOTO 23736
      MSNCOD =36
      GOTO 23737
23736 CONTINUE
      IF(.NOT.(IADDR.EQ.-20360))GOTO 23738
      MSNCOD =37
      GOTO 23739
23738 CONTINUE
      IF(.NOT.(IADDR.EQ.-20400))GOTO 23740
      MSNCOD=38
      GOTO 23741
23740 CONTINUE
      IF(.NOT.(IADDR.EQ.-20544))GOTO 23742
      MSNCOD=39
      GOTO 23743
23742 CONTINUE
      IF(.NOT.(IADDR.EQ.-20574))GOTO 23744
      MSNCOD=40
      GOTO 23745
23744 CONTINUE
      IF(.NOT.(IADDR.EQ.-20588))GOTO 23746
      MSNCOD=41
      GOTO 23747
23746 CONTINUE
      IF(.NOT.(IADDR.EQ.-20595))GOTO 23748
      MSNCOD=42
      GOTO 23749
23748 CONTINUE
      IF(.NOT.(IADDR.EQ.-20656))GOTO 23750
      MSNCOD =43
23750 CONTINUE
23749 CONTINUE
23747 CONTINUE
23745 CONTINUE
23743 CONTINUE
23741 CONTINUE
23739 CONTINUE
23737 CONTINUE
23735 CONTINUE
23733 CONTINUE
23731 CONTINUE
23729 CONTINUE
23727 CONTINUE
23725 CONTINUE
23723 CONTINUE
23721 CONTINUE
23719 CONTINUE
23717 CONTINUE
23715 CONTINUE
23713 CONTINUE
23711 CONTINUE
23709 CONTINUE
23707 CONTINUE
23705 CONTINUE
23703 CONTINUE
23701 CONTINUE
23699 CONTINUE
23697 CONTINUE
23695 CONTINUE
23693 CONTINUE
      IF(.NOT.(MSNCOD.NE.0))GOTO 23752
      KPOINT_UNT=IBBP(1,01)
23754 IF(.NOT.(KPOINT_UNT.LE.(IBBP(1,01)+IBBP(3,01)-1)))GOTO 23756
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.NE.1.OR.(IAND(ISHFT(IBB(KPOINT_UNT+15),-(16)),
     * '00FF'X)).EQ.0))GOTO 23757
      GOTO 23755
23757 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X)).NE.IVIEW.
     *AND.0.NE.IVIEW))GOTO 23759
      GOTO 23755
23759 CONTINUE
      I_UNT_MISSION=(IAND(ISHFT(IBB(KPOINT_UNT+43),-(19)),'003F'X))
      IF(.NOT.(I_UNT_MISSION.EQ.MSNCOD))GOTO 23761
      IF(.NOT.(CNTA.GE.4000))GOTO 23763
      GOTO 23755
23763 CONTINUE
      FLGA =MSNCOD +8
      CNTA =CNTA +1
      STKA(CNTA) =KPOINT_UNT
23761 CONTINUE
23755 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23754
23756 CONTINUE
      GOTO 23753
23752 CONTINUE
      ILO =IADDR
      IF(.NOT.(ILO.LE.9999))GOTO 23765
      ILO =ILO *10
23765 CONTINUE
      IHI =ILO
      K =1
23767 CONTINUE
      IF(.NOT.(MOD(ILO,K*10).NE.0))GOTO 23770
      GOTO 23769
23770 CONTINUE
      K =K *10
23768 GOTO 23767
23769 CONTINUE
      IHI =IHI +K -1
      KPOINT_UNT=IBBP(1,01)
23772 IF(.NOT.(KPOINT_UNT.LE.(IBBP(1,01)+IBBP(3,01)-1)))GOTO 23774
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.NE.3.AND.I_UNT_TYPE.NE.1.AND.I_UNT_TYPE.NE.2.A
     *ND.I_UNT_TYPE.NE.7))GOTO 23775
      GOTO 23773
23775 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+15),-(16)),'00FF'X)).EQ.0))GOT
     *O 23777
      GOTO 23773
23777 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X)).NE.IVIEW.
     *AND.0.NE.IVIEW))GOTO 23779
      GOTO 23773
23779 CONTINUE
      I_UNT_HIERARCHYID=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(0)),'01FFFF'X))
      IF(.NOT.(I_UNT_HIERARCHYID.GE.ILO.AND.I_UNT_HIERARCHYID.LE.IHI))GO
     *TO 23781
      IF(.NOT.(CNTA.GE.4000))GOTO 23783
      GOTO 23773
23783 CONTINUE
      CNTA =CNTA +1
      STKA(CNTA) =KPOINT_UNT
23781 CONTINUE
23773 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23772
23774 CONTINUE
23753 CONTINUE
      GOTO 23691
23690 CONTINUE
      KPOINT_UNT=IBBP(1,01)
23785 IF(.NOT.(KPOINT_UNT.LE.(IBBP(1,01)+IBBP(3,01)-1)))GOTO 23787
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X)).NE.IVIEW.
     *AND.0.NE.IVIEW))GOTO 23788
      GOTO 23786
23788 CONTINUE
      I_UNT_STATUS=(IAND(ISHFT(IBB(KPOINT_UNT+15),-(16)),'00FF'X))
      IF(.NOT.(I_UNT_STATUS.EQ.0))GOTO 23790
      GOTO 23786
23790 CONTINUE
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.NE.3.AND.I_UNT_TYPE.NE.1.AND.I_UNT_TYPE.NE.2.A
     *ND.I_UNT_TYPE.NE.5.AND.I_UNT_TYPE.NE.7))GOTO 23792
      GOTO 23786
23792 CONTINUE
      IF(.NOT.(MATCH_WILDCARD(CSTRIP8(IBB(KPOINT_UNT)),IADDR).EQ.1))GOTO
     * 23794
      IF(.NOT.(CNTA.GE.4000))GOTO 23796
      GOTO 23786
23796 CONTINUE
      IF(.NOT.(FLGA.NE.0))GOTO 23798
      GOTO 23786
23798 CONTINUE
      CNTA =CNTA +1
      STKA(CNTA) =KPOINT_UNT
      GOTO 23795
23794 CONTINUE
      IF(.NOT.(IBB(278).EQ.1.AND.I_UNT_TYPE.EQ.1.AND.LITCMP(CSTRIP8(IBB(
     *KPOINT_UNT+12)),IADDR).EQ.0))GOTO 23800
      IVIEW =(IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X))
      IF(.NOT.(CNTA.GE.4000))GOTO 23802
      GOTO 23786
23802 CONTINUE
      CNTA =CNTA +1
      STKA(CNTA) =KPOINT_UNT
      GOTO 23801
23800 CONTINUE
      IF(.NOT.(IBB(278).EQ.1.AND.(IAND(ISHFT(IBB(KPOINT_UNT+16),-(17)), 
     *'07FF'X)).EQ.(ISHFT(3,3)+1).AND.LITCMP(CSTRIP8(IBB(KPOINT_UNT+12))
     *,IADDR).EQ.0))GOTO 23804
      IVIEW =(IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X))
      IF(.NOT.(CNTA.GE.4000))GOTO 23806
      GOTO 23786
23806 CONTINUE
      CNTA =CNTA +1
      STKA(CNTA) =KPOINT_UNT
      GOTO 23805
23804 CONTINUE
      IF(.NOT.(LITCMP(CSTRIP8(IBB(KPOINT_UNT+10)),IADDR).EQ.0))GOTO 2380
     *8
      IVIEW =(IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X))
      IF(.NOT.(CNTA.GE.4000))GOTO 23810
      GOTO 23786
23810 CONTINUE
      IF(.NOT.(CNTA.NE.0.AND.FLGA.EQ.0))GOTO 23812
      GOTO 23786
23812 CONTINUE
      FLGA =1
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+39),-(29)),'0001'X)).EQ.0))GOT
     *O 23814
      IF(.NOT.(NORD.EQ.102.OR.NORD.EQ.112.OR.NORD.EQ.130.OR.NORD.EQ.132.
     *OR.MANEUVER_ORDER(NORD)))GOTO 23816
      GOTO 23786
23816 CONTINUE
23814 CONTINUE
      CNTA =CNTA +1
      STKA(CNTA) =KPOINT_UNT
23808 CONTINUE
23805 CONTINUE
23801 CONTINUE
23795 CONTINUE
23786 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23785
23787 CONTINUE
23691 CONTINUE
23689 CONTINUE
      IF(.NOT.(NORD.EQ.106.OR.NORD.EQ.903))GOTO 23818
      IF(.NOT.(CNTA.LT.1))GOTO 23820
      CNTA =1
23820 CONTINUE
23818 CONTINUE
      RETURN
      END
      SUBROUTINE EQ_IDENTIFY (KTBLN,NAME,KTBL,IDENT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KTBLN,KTBL,IDENT
      REAL*8 NAME
      REAL*8 CSTRIP8
      INTEGER I_MATCH,KTBLE,I_SWITCH_1
      INTEGER KPOINT_SON,KPOINT_BOM,KPOINT_TOR,KPOINT_MC
      INTEGER KPOINT_JAM
      KTBL=0
      IDENT =0
      I_MATCH =0
      IF(.NOT.(IBBP(5,KTBLN).GT.0))GOTO 23822
      KTBLE=IBBP(5,KTBLN)
      KTBL=IBBP(1,KTBLN)
23824 IF(.NOT.(KTBL.LT.(IBBP(1,KTBLN)+IBBP(3,KTBLN)-1)))GOTO 23826
      IF(.NOT.(CSTRIP8(IBB(KTBL)).NE.NAME))GOTO 23827
      GOTO 23825
23827 CONTINUE
      I_MATCH =KTBL
      GOTO 23826
23825 KTBL=KTBL+KTBLE
      GOTO 23824
23826 CONTINUE
23822 CONTINUE
      IF(.NOT.(I_MATCH.NE.0))GOTO 23829
      KTBL=I_MATCH
      I_SWITCH_1=(KTBLN)
      GOTO 23831
23833 CONTINUE
      IDENT =1
      GOTO 23832
23834 CONTINUE
      IDENT =3
      GOTO 23832
23835 CONTINUE
      IDENT =4
      IF(.NOT.(IBB(456).EQ.1))GOTO 23836
      KPOINT_JAM=KTBL
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_JAM+11),-(0)),'003F'X)).EQ.51))GOT
     *O 23838
      IDENT =51
23838 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_JAM+11),-(0)),'003F'X)).EQ.50))GOT
     *O 23840
      IDENT =50
23840 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_JAM+11),-(0)),'003F'X)).EQ.31))GOT
     *O 23842
      IDENT =31
23842 CONTINUE
23836 CONTINUE
      GOTO 23832
23844 CONTINUE
      IDENT =31
      GOTO 23832
23845 CONTINUE
      IDENT =14
      GOTO 23832
23846 CONTINUE
      KPOINT_SON=KTBL
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SON+10),-(30)),'0001'X)).EQ.1))GOT
     *O 23847
      IDENT =2
      GOTO 23848
23847 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SON+10),-(29)),'0001'X)).EQ.1))GOT
     *O 23849
      IDENT =23
      GOTO 23850
23849 CONTINUE
      IDENT =24
23850 CONTINUE
23848 CONTINUE
      GOTO 23832
23851 CONTINUE
      IDENT =41
      GOTO 23832
23852 CONTINUE
      KPOINT_BOM=KTBL
      IDENT =(IAND(ISHFT(IBB(KPOINT_BOM+8),-(16)),'00FF'X))
      GOTO 23832
23853 CONTINUE
      IDENT =5
      GOTO 23832
23854 CONTINUE
      IDENT =36
      GOTO 23832
23855 CONTINUE
      KPOINT_TOR=KTBL
      IDENT =(IAND(ISHFT(IBB(KPOINT_TOR+9),-(0)),'001F'X))
      GOTO 23832
23856 CONTINUE
      IDENT =9
      GOTO 23832
23857 CONTINUE
      IDENT =10
      GOTO 23832
23858 CONTINUE
      IDENT =34
      GOTO 23832
23859 CONTINUE
      IDENT =37
      GOTO 23832
23860 CONTINUE
      KPOINT_MC=KTBL
      IDENT =(IAND(ISHFT(IBB(KPOINT_MC+9),-(0)),'001F'X))
      GOTO 23832
23831 CONTINUE
      IF(I_SWITCH_1.EQ.30)GOTO 23845
      IF(I_SWITCH_1.EQ.33)GOTO 23853
      IF(I_SWITCH_1.EQ.34)GOTO 23833
      IF(I_SWITCH_1.EQ.35)GOTO 23834
      IF(I_SWITCH_1.EQ.36)GOTO 23835
      IF(I_SWITCH_1.EQ.37)GOTO 23846
      IF(I_SWITCH_1.EQ.38)GOTO 23857
      IF(I_SWITCH_1.EQ.39)GOTO 23856
      IF(I_SWITCH_1.EQ.40)GOTO 23860
      IF(I_SWITCH_1.EQ.41)GOTO 23855
      IF(I_SWITCH_1.EQ.42)GOTO 23852
      IF(I_SWITCH_1.EQ.66)GOTO 23858
      IF(I_SWITCH_1.EQ.84)GOTO 23844
      IF(I_SWITCH_1.EQ.96)GOTO 23854
      IF(I_SWITCH_1.EQ.97)GOTO 23859
      IF(I_SWITCH_1.EQ.108)GOTO 23851
23832 CONTINUE
23829 CONTINUE
      IF(.NOT.(IDENT.EQ.0))GOTO 23861
      KTBL=0
23861 CONTINUE
      RETURN
      END
      SUBROUTINE LEX_TO_MISSION_CODE (LEX_VALUE,MISSION_CODE)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 LEX_VALUE
      INTEGER MISSION_CODE
      IF(.NOT.(LEX_VALUE.EQ.-20007))GOTO 23863
      MISSION_CODE =30
      GOTO 23864
23863 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20013))GOTO 23865
      MISSION_CODE =31
      GOTO 23866
23865 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20010))GOTO 23867
      MISSION_CODE =5
      GOTO 23868
23867 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20584))GOTO 23869
      MISSION_CODE =8
      GOTO 23870
23869 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20020))GOTO 23871
      MISSION_CODE =32
      GOTO 23872
23871 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20026))GOTO 23873
      MISSION_CODE =17
      GOTO 23874
23873 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20039))GOTO 23875
      MISSION_CODE =6
      GOTO 23876
23875 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20050))GOTO 23877
      MISSION_CODE =33
      GOTO 23878
23877 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20085))GOTO 23879
      MISSION_CODE =2
      GOTO 23880
23879 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20087))GOTO 23881
      MISSION_CODE =34
      GOTO 23882
23881 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20112))GOTO 23883
      MISSION_CODE =44
      GOTO 23884
23883 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20148))GOTO 23885
      MISSION_CODE =10
      GOTO 23886
23885 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20206))GOTO 23887
      MISSION_CODE =35
      GOTO 23888
23887 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20209))GOTO 23889
      MISSION_CODE =15
      GOTO 23890
23889 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20249))GOTO 23891
      MISSION_CODE =36
      GOTO 23892
23891 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20299))GOTO 23893
      MISSION_CODE =13
      GOTO 23894
23893 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20360))GOTO 23895
      MISSION_CODE =37
      GOTO 23896
23895 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20391))GOTO 23897
      MISSION_CODE =0
      GOTO 23898
23897 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20400))GOTO 23899
      MISSION_CODE =38
      GOTO 23900
23899 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20423))GOTO 23901
      MISSION_CODE =37
      GOTO 23902
23901 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20462))GOTO 23903
      MISSION_CODE =7
      GOTO 23904
23903 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20477))GOTO 23905
      MISSION_CODE =11
      GOTO 23906
23905 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20486))GOTO 23907
      MISSION_CODE =9
      GOTO 23908
23907 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20512))GOTO 23909
      MISSION_CODE =45
      GOTO 23910
23909 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20513))GOTO 23911
      MISSION_CODE =46
      GOTO 23912
23911 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20514))GOTO 23913
      MISSION_CODE =14
      GOTO 23914
23913 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20544))GOTO 23915
      MISSION_CODE =39
      GOTO 23916
23915 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20562))GOTO 23917
      MISSION_CODE =4
      GOTO 23918
23917 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20563))GOTO 23919
      MISSION_CODE =1
      GOTO 23920
23919 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20564))GOTO 23921
      MISSION_CODE =16
      GOTO 23922
23921 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20569))GOTO 23923
      MISSION_CODE =3
      GOTO 23924
23923 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20571))GOTO 23925
      MISSION_CODE =12
      GOTO 23926
23925 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20574))GOTO 23927
      MISSION_CODE =40
      GOTO 23928
23927 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20588))GOTO 23929
      MISSION_CODE =41
      GOTO 23930
23929 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20595))GOTO 23931
      MISSION_CODE =42
      GOTO 23932
23931 CONTINUE
      IF(.NOT.(LEX_VALUE.EQ.-20656))GOTO 23933
      MISSION_CODE =43
      GOTO 23934
23933 CONTINUE
      MISSION_CODE =-1
23934 CONTINUE
23932 CONTINUE
23930 CONTINUE
23928 CONTINUE
23926 CONTINUE
23924 CONTINUE
23922 CONTINUE
23920 CONTINUE
23918 CONTINUE
23916 CONTINUE
23914 CONTINUE
23912 CONTINUE
23910 CONTINUE
23908 CONTINUE
23906 CONTINUE
23904 CONTINUE
23902 CONTINUE
23900 CONTINUE
23898 CONTINUE
23896 CONTINUE
23894 CONTINUE
23892 CONTINUE
23890 CONTINUE
23888 CONTINUE
23886 CONTINUE
23884 CONTINUE
23882 CONTINUE
23880 CONTINUE
23878 CONTINUE
23876 CONTINUE
23874 CONTINUE
23872 CONTINUE
23870 CONTINUE
23868 CONTINUE
23866 CONTINUE
23864 CONTINUE
      RETURN
      END
      SUBROUTINE UPDATE_NAM_UNT_INDEX (PLATFORM_NAME,NEW_UNT_INDEX,STATU
     *S)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 PLATFORM_NAME
      INTEGER NEW_UNT_INDEX,STATUS
      REAL*8 CSTRIP8
      INTEGER KPOINT_NAM,I_NAM_UNTINDX,LITCMP
      REAL*8 C_NAM_NAME
      STATUS =-1
      KPOINT_NAM=IBBP(1,71)
23935 IF(.NOT.((KPOINT_NAM.GE.IBBP(1,71).AND.KPOINT_NAM.LE.(IBBP(1,71)+I
     *BBP(3,71)-1))))GOTO 23937
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_NAM+2),-(16)),'000F'X)).EQ.1))GOTO
     * 23938
      C_NAM_NAME=CSTRIP8(IBB(KPOINT_NAM))
      IF(.NOT.(LITCMP(C_NAM_NAME,PLATFORM_NAME).EQ.0))GOTO 23940
      I_NAM_UNTINDX=NEW_UNT_INDEX
      IBB(KPOINT_NAM+2)=IOR(IAND(IBB(KPOINT_NAM+2),NOT(ISHFT('FFFF'X,0))
     *),ISHFT(IAND((I_NAM_UNTINDX),'FFFF'X),0))
      IBB(KPOINT_NAM+2)=IOR(IAND(IBB(KPOINT_NAM+2),NOT(ISHFT('0001'X,20)
     *)),ISHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_NAM+2),-(20)
     *),'0001'X)))),'0001'X),20))
      IBB(114)=1
      STATUS =0
      GOTO 23937
23940 CONTINUE
23938 CONTINUE
23936 KPOINT_NAM=KPOINT_NAM+4
      GOTO 23935
23937 CONTINUE
      RETURN
      END
      SUBROUTINE CKDIG (TDIG,ICKDIG)
      IMPLICIT NONE
      INTEGER MOD,TDIG
      INTEGER ICKDIG,ITOT,IDIG,IPOS,IREM
      ITOT =0
      IDIG =TDIG
      IPOS =1
23942 IF(.NOT.(IPOS.LE.6))GOTO 23944
      IREM =MOD(IDIG,10)
      ITOT =ITOT +IREM
      IDIG =IDIG/10
23943 IPOS=IPOS+1
      GOTO 23942
23944 CONTINUE
      ICKDIG =MOD(ITOT,10)
      RETURN
      END
      SUBROUTINE GET_CHARACTERISTIC_POINTER (KPOINT_UNT,KTBL)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KPOINT_UNT,KTBL
      INTEGER I_UNT_TYPE,I_UNT_SUBTYPE
      KTBL= 0
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.EQ.1))GOTO 23945
      KTBL=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,32))
      GOTO 23946
23945 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.5.OR.I_UNT_TYPE.EQ.32))GOTO 23947
      KTBL=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,33))
      GOTO 23948
23947 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.3.OR.I_UNT_TYPE.EQ.7))GOTO 23949
      KTBL=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,31))
      GOTO 23950
23949 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.2))GOTO 23951
      I_UNT_SUBTYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(17)),'0007'X))
      IF(.NOT.(I_UNT_SUBTYPE.EQ.1))GOTO 23953
      KTBL=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,96))
      GOTO 23954
23953 CONTINUE
      IF(.NOT.(I_UNT_SUBTYPE.EQ.2))GOTO 23955
      KTBL=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,97))
      GOTO 23956
23955 CONTINUE
      KTBL=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,31))
23956 CONTINUE
23954 CONTINUE
      GOTO 23952
23951 CONTINUE
      KTBL=0
23952 CONTINUE
23950 CONTINUE
23948 CONTINUE
23946 CONTINUE
      RETURN
      END
      SUBROUTINE PARSE_FIELD (STR,CHAR,N_FIELD,FIELD,FIELD_LEN,STR_POS)
      IMPLICIT NONE
      CHARACTER *(*) STR
      CHARACTER *(1) CHAR
      INTEGER*4 N_FIELD
      CHARACTER *(*) FIELD
      INTEGER*4 FIELD_LEN
      INTEGER*4 STR_POS
      LOGICAL*1 BEGIN_FIELD
      INTEGER*4 COUNT
      LOGICAL*1 DELIMETER_FOUND
      INTEGER*4 FIELD_COUNT
      INTEGER*4 LENGTH
      INTEGER*4 PFIELD_LENGTH
      STR_POS =0
      FIELD_LEN =0
      LENGTH =LEN(STR)
      PFIELD_LENGTH =LEN(FIELD)
      BEGIN_FIELD =1
      FIELD_COUNT =0
      DELIMETER_FOUND =0
      COUNT =1
23957 IF(.NOT.(COUNT.LE.LENGTH.AND.FIELD_LEN.LT.PFIELD_LENGTH))GOTO 2395
     *9
      IF(.NOT.(STR(COUNT:COUNT).NE.CHAR.AND.BEGIN_FIELD.EQ.1))GOTO 23960
      FIELD_COUNT =FIELD_COUNT +1
      IF(.NOT.(FIELD_COUNT.GT.N_FIELD))GOTO 23962
      RETURN
23962 CONTINUE
      BEGIN_FIELD =0
      IF(.NOT.(FIELD_COUNT.EQ.N_FIELD))GOTO 23964
      STR_POS =COUNT
23964 CONTINUE
      GOTO 23961
23960 CONTINUE
      IF(.NOT.(STR(COUNT:COUNT).EQ.CHAR))GOTO 23966
      DELIMETER_FOUND =1
      BEGIN_FIELD =1
23966 CONTINUE
23961 CONTINUE
      IF(.NOT.(FIELD_COUNT.EQ.N_FIELD.AND.STR(COUNT:COUNT).NE.CHAR))GOTO
     * 23968
      FIELD_LEN =FIELD_LEN +1
      FIELD(FIELD_LEN:FIELD_LEN) =STR (COUNT:COUNT)
23968 CONTINUE
23958 COUNT=COUNT+1
      GOTO 23957
23959 CONTINUE
      IF(.NOT.(DELIMETER_FOUND.NE.1))GOTO 23970
      FIELD_LEN =0
23970 CONTINUE
      RETURN
      END
      SUBROUTINE ADD_NAM_ROUTE_RETASKING (RETASKING_ID,NAM_INDEX)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 RETASKING_ID
      INTEGER NAM_INDEX
      INTEGER KPOINT_NAM,I_NAM_TYPE
      REAL*8 C_NAM_NAME
      NAM_INDEX =0
      CALL GETNAM (KPOINT_NAM)
      IF(.NOT.((KPOINT_NAM.GE.IBBP(1,71).AND.KPOINT_NAM.LT.(IBBP(1,71)+I
     *BBP(2,71)))))GOTO 23972
      I_NAM_TYPE=9
      IBB(KPOINT_NAM+2)=IOR(IAND(IBB(KPOINT_NAM+2),NOT(ISHFT('000F'X,16)
     *)),ISHFT(IAND((I_NAM_TYPE),'000F'X),16))
      C_NAM_NAME=RETASKING_ID
      CALL CDRESS8(%REF(C_NAM_NAME),IBB(KPOINT_NAM))
      NAM_INDEX =((KPOINT_NAM-IBBP(1,71))/4+1)
      IF(.NOT.(IBBP(3,71).LT.(NAM_INDEX*4)))GOTO 23974
      IBBP(3,71)=NAM_INDEX *4
23974 CONTINUE
23972 CONTINUE
      RETURN
      END
      INTEGER FUNCTION MATCH_WILDCARD (WESNAM,WESPAT)
      IMPLICIT NONE
      REAL*8 WESNAM,WESPAT
      LOGICAL*1 NAME1(16),NAME2(16),NAME3(16),CHAR
      INTEGER LEN1,LEN2,DIF
      REAL*8 NAME1LIT,NAME2LIT,NAME3LIT
      EQUIVALENCE (NAME1,NAME1LIT)
      EQUIVALENCE (NAME2,NAME2LIT)
      EQUIVALENCE (NAME3,NAME3LIT)
      INTEGER LOC,ISPCT,I,LEN3
      LOC =0
      ISPCT =0
      NAME1LIT =WESPAT
      I =1
23976 IF(.NOT.(I.LE.8))GOTO 23978
      CHAR =NAME1(I)
      IF(.NOT.(CHAR.EQ.32))GOTO 23979
      GOTO 23978
23979 CONTINUE
      IF(.NOT.(CHAR.EQ.42))GOTO 23981
      LOC =I
23981 CONTINUE
      IF(.NOT.(CHAR.EQ.37))GOTO 23983
      ISPCT =1
23983 CONTINUE
23977 I=I+1
      GOTO 23976
23978 CONTINUE
      IF(.NOT.(LOC.EQ.0))GOTO 23985
      IF(.NOT.(ISPCT.EQ.0))GOTO 23987
      IF(.NOT.(WESNAM.NE.WESPAT))GOTO 23989
      MATCH_WILDCARD=(0)
      RETURN
23989 CONTINUE
      MATCH_WILDCARD=(1)
      RETURN
23990 CONTINUE
23987 CONTINUE
23985 CONTINUE
      LEN1 =I -1
      NAME2LIT =WESNAM
      I =1
23991 IF(.NOT.(I.LE.8))GOTO 23993
      IF(.NOT.(NAME2(I).EQ.32))GOTO 23994
      GOTO 23993
23994 CONTINUE
23992 I=I+1
      GOTO 23991
23993 CONTINUE
      LEN2 =I -1
      MATCH_WILDCARD =0
      IF(.NOT.(LOC.EQ.0))GOTO 23996
      IF(.NOT.(LEN1.NE.LEN2))GOTO 23998
      RETURN
23998 CONTINUE
      NAME3LIT =NAME1LIT
      LEN3 =LEN2
      GOTO 23997
23996 CONTINUE
      IF(.NOT.(LOC.EQ.LEN1))GOTO 24000
      NAME3LIT =NAME1LIT
      LEN3 =LEN1 -1
      GOTO 24001
24000 CONTINUE
      DIF =LEN2 -LEN1
      I =1
24002 IF(.NOT.(I.LE.LOC-1))GOTO 24004
      NAME3(I) =NAME1(I)
24003 I=I+1
      GOTO 24002
24004 CONTINUE
      I =LOC
24005 IF(.NOT.(I.LE.LOC+DIF))GOTO 24007
      NAME3(I) =37
24006 I=I+1
      GOTO 24005
24007 CONTINUE
      I =LOC +DIF +1
24008 IF(.NOT.(I.LE.LEN2))GOTO 24010
      NAME3(I) =NAME1(I -DIF)
24009 I=I+1
      GOTO 24008
24010 CONTINUE
      LEN3 =LEN2
24001 CONTINUE
23997 CONTINUE
      I =1
24011 IF(.NOT.(I.LE.LEN3))GOTO 24013
      IF(.NOT.(NAME3(I).EQ.37))GOTO 24014
      GOTO 24012
24014 CONTINUE
      IF(.NOT.(NAME3(I).NE.NAME2(I)))GOTO 24016
      RETURN
24016 CONTINUE
24012 I=I+1
      GOTO 24011
24013 CONTINUE
      MATCH_WILDCARD =1
      RETURN
      END
      REAL FUNCTION RADTODMS (RADIANS)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL RADIANS
      INTEGER IDEG,IMIN,ISEC
      REAL RDEG,RMIN,RSEC
      REAL DMS
      RDEG =ABS (RADIANS *57.29577951)
      IDEG =INT (RDEG)
      RMIN =60.*(RDEG -FLOAT (IDEG))
      IMIN =INT (RMIN)
      RSEC =60.*(RMIN -FLOAT (IMIN))
      ISEC =INT (RSEC +.5)
      IF(.NOT.(ISEC.GE.60))GOTO 24018
      IMIN =IMIN +1
      ISEC =0
24018 CONTINUE
      IF(.NOT.(IMIN.GE.60))GOTO 24020
      IDEG =IDEG +1
      IMIN =0
24020 CONTINUE
      DMS =(IDEG *100) +IMIN +(ISEC *0.01)
      RADTODMS =SIGN (DMS,RADIANS)
      RETURN
      END
      LOGICAL FUNCTION MANEUVER_ORDER (NORD)
      IMPLICIT NONE
      INTEGER NORD
      IF(.NOT.(NORD.EQ.173.OR.NORD.EQ.103.OR.NORD.EQ.104.OR.NORD.EQ.167.
     *OR.NORD.EQ.109.OR.NORD.EQ.181.OR.NORD.EQ.110.OR.NORD.EQ.136.OR.NOR
     *D.EQ.206.OR.NORD.EQ.192.OR.NORD.EQ.163.OR.NORD.EQ.158.OR.NORD.EQ.1
     *54.OR.NORD.EQ.149.OR.NORD.EQ.165.OR.NORD.EQ.159.OR.NORD.EQ.123.OR.
     *NORD.EQ.126.OR.NORD.EQ.125.OR.NORD.EQ.138.OR.NORD.EQ.142.OR.NORD.E
     *Q.127.OR.NORD.EQ.185.OR.NORD.EQ.168.OR.NORD.EQ.135.OR.NORD.EQ.131.
     *OR.NORD.EQ.194.OR.NORD.EQ.133.OR.NORD.EQ.155))GOTO 24022
      MANEUVER_ORDER =.TRUE.
      GOTO 24023
24022 CONTINUE
      MANEUVER_ORDER =.FALSE.
24023 CONTINUE
      RETURN
      END
      SUBROUTINE INOUTXY(XP,YP,N,X ,Y ,INSIDE)
      IMPLICIT NONE
      REAL*4 XP,YP,X0,Y0,X1,Y1,X2,Y2
      REAL*4 YNUMER,YDENOM
      INTEGER*4 N,INSIDE,I,J,NEWTRY,NINTER
      REAL X(N),Y(N)
      X0 =XP
      Y0 =YP
24024 CONTINUE
      NEWTRY =0
      NINTER =0
      X2 =X(1) -X0
      I=1
24027 IF(.NOT.(I.LE.N))GOTO 24029
      IF(.NOT.(I.EQ.N))GOTO 24030
      J =1
      GOTO 24031
24030 CONTINUE
      J =I +1
24031 CONTINUE
      X1 =X2
      X2 =X(J) -X0
      IF(.NOT.(X1.EQ.0.0.OR.X2.EQ.0.0))GOTO 24032
      X0 =X0 +0.1
      NEWTRY =1
      GOTO 24029
24032 CONTINUE
      IF(.NOT.((X1.GT.0.0.AND.X2.LT.0.0).OR.(X1.LT.0.0.AND.X2.GT.0.0)))G
     *OTO 24034
      Y1 =Y(I) -Y0
      Y2 =Y(J) -Y0
      IF(.NOT.(Y1.GT.0.0.AND.Y2.GT.0.0))GOTO 24036
      NINTER =NINTER +1
      GOTO 24037
24036 CONTINUE
      IF(.NOT.(Y1.LT.0.0.AND.Y2.LT.0.0))GOTO 24038
      GOTO 24028
24038 CONTINUE
      YNUMER =X1 *Y2 -X2 *Y1
      YDENOM =X1 -X2
      IF(.NOT.((YNUMER.GT.0.0.AND.YDENOM.GT.0.0).OR.(YNUMER.LT.0.0.AND.Y
     *DENOM.LT.0.0)))GOTO 24040
      NINTER =NINTER +1
      GOTO 24041
24040 CONTINUE
      IF(.NOT.(YNUMER.EQ.0.0))GOTO 24042
      INSIDE =1
      RETURN
24042 CONTINUE
24041 CONTINUE
24039 CONTINUE
24037 CONTINUE
24034 CONTINUE
24028 I=I+1
      GOTO 24027
24029 CONTINUE
24025 IF(.NOT.(NEWTRY.EQ.0))GOTO 24024
24026 CONTINUE
      IF(.NOT.(MOD(NINTER,2).EQ.1))GOTO 24044
      INSIDE =1
      GOTO 24045
24044 CONTINUE
      INSIDE =0
24045 CONTINUE
      RETURN
      END
      INTEGER FUNCTION VUE_TK_INDEX (DETECTION_TYPE,UNIT_CLASS)
      IMPLICIT NONE
      INTEGER DETECTION_TYPE,UNIT_CLASS
      IF(.NOT.(DETECTION_TYPE.EQ.3))GOTO 24046
      VUE_TK_INDEX =5
      GOTO 24047
24046 CONTINUE
      IF(.NOT.(DETECTION_TYPE.EQ.2))GOTO 24048
      VUE_TK_INDEX =4
      GOTO 24049
24048 CONTINUE
      IF(.NOT.(DETECTION_TYPE.EQ.35))GOTO 24050
      VUE_TK_INDEX =6
      GOTO 24051
24050 CONTINUE
      IF(.NOT.(DETECTION_TYPE.EQ. 5))GOTO 24052
      VUE_TK_INDEX =7
      GOTO 24053
24052 CONTINUE
      IF(.NOT.(UNIT_CLASS.EQ.1))GOTO 24054
      VUE_TK_INDEX =1
      GOTO 24055
24054 CONTINUE
      IF(.NOT.(UNIT_CLASS.EQ.2))GOTO 24056
      VUE_TK_INDEX =3
      GOTO 24057
24056 CONTINUE
      IF(.NOT.(UNIT_CLASS.EQ.3))GOTO 24058
      VUE_TK_INDEX =2
      GOTO 24059
24058 CONTINUE
      VUE_TK_INDEX =0
24059 CONTINUE
24057 CONTINUE
24055 CONTINUE
24053 CONTINUE
24051 CONTINUE
24049 CONTINUE
24047 CONTINUE
      RETURN
      END
      REAL*8 FUNCTION A_TRACK (CODE_C,CLASS_C,SEQUENCE)
      IMPLICIT NONE
      REAL*8 CODE_C
      LOGICAL*1 CLASS_C
      INTEGER SEQUENCE,KK
      INTEGER WID / 3 /
      REAL*8 A_TRACK_HC,A_TRACK_WIDE
24060 CONTINUE
      GOTO 24062
      ENTRY A_TRACK_HC (CODE_C,CLASS_C,SEQUENCE)
      GOTO 24062
      ENTRY A_TRACK_WIDE (CODE_C,CLASS_C,SEQUENCE)
      WID =5
24061 GOTO 24060
24062 CONTINUE
      IF(.NOT.(SEQUENCE.GT.9999))GOTO 24063
      WID =MAX(WID,5)
      GOTO 24064
24063 CONTINUE
      IF(.NOT.(SEQUENCE.GT.999))GOTO 24065
      WID =MAX(WID,4)
24065 CONTINUE
24064 CONTINUE
      KK =0
      A_TRACK ='2020202020202020'X
      CALL SMOV (CODE_C,A_TRACK,KK)
      CALL SMOV (CLASS_C,A_TRACK,KK)
      CALL SMOVIZ (SEQUENCE,WID,A_TRACK,KK)
      WID =3
      RETURN
      END
      SUBROUTINE TRKNUM(IVCHAR,IDTYPE,ICLASS,ISNMBR,ITRACK)
      IMPLICIT NONE
      INTEGER IDTYPE,ICLASS,ISNMBR,ICHAR2
      REAL*8 ITRACK,IVCHAR,A_TRACK
      ITRACK ='2020202020202020'X
      IF(.NOT.(IVCHAR.EQ.0))GOTO 24067
      RETURN
24067 CONTINUE
      IF(.NOT.(ISNMBR.EQ.0))GOTO 24069
      RETURN
24069 CONTINUE
      IF(.NOT.(IDTYPE.EQ.2))GOTO 24071
      ICHAR2 =80
      GOTO 24072
24071 CONTINUE
      IF(.NOT.(IDTYPE.EQ.3))GOTO 24073
      ICHAR2 =69
      GOTO 24074
24073 CONTINUE
      IF(.NOT.(ICLASS.EQ.1))GOTO 24075
      ICHAR2 =65
      GOTO 24076
24075 CONTINUE
      IF(.NOT.(ICLASS.EQ.5))GOTO 24077
      ICHAR2 =65
      GOTO 24078
24077 CONTINUE
      IF(.NOT.(ICLASS.EQ.3))GOTO 24079
      ICHAR2 =83
      GOTO 24080
24079 CONTINUE
      IF(.NOT.(ICLASS.EQ.2))GOTO 24081
      ICHAR2 =85
      GOTO 24082
24081 CONTINUE
      ICHAR2 =88
24082 CONTINUE
24080 CONTINUE
24078 CONTINUE
24076 CONTINUE
24074 CONTINUE
24072 CONTINUE
      ITRACK =A_TRACK(IVCHAR,ICHAR2,ISNMBR)
      RETURN
      END
      CHARACTER *9 FUNCTION ASTAB_CLASS (KPOINT_RMT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4  KPOINT_RMT
      INTEGER*4  I_RMT_DETECTIONTYPE
      INTEGER*4  I_RMT_CLASSSCORE
      INTEGER*4  I_RMT_DETECTEE
      INTEGER*4  I_RMT_LASTDETTYPE
      INTEGER*4  I_RMT_CLASS
      INTEGER*4  KPOINT_UNT2
      INTEGER*4  I_UNT2_RTLINDX
      INTEGER*4  KPOINT_RTL
      CHARACTER MY_CLASS*9,USER_FLAG*1
      REAL*8 CLASS,CSTRIP8
      INTEGER KK
      I_RMT_DETECTIONTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X))
      KK =0
      USER_FLAG =''
      CLASS ='2020202020202020'X
      CALL SMOVHN (CSTRIP8(IBB(KPOINT_RMT)),8,CLASS,KK)
      IF(.NOT.(KK.NE.0))GOTO 24083
      USER_FLAG ='-'
      GOTO 24084
24083 CONTINUE
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.2))GOTO 24085
      I_RMT_CLASSSCORE=(IAND(ISHFT(IBB(KPOINT_RMT+10),-(29)),'0007'X))
      I_RMT_DETECTEE=(IAND(ISHFT(IBB(KPOINT_RMT+12),-(0)),'FFFF'X))
      KPOINT_UNT2=IBBP(1,01)-104+(104)*I_RMT_DETECTEE
      I_RMT_LASTDETTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+7),-(28)),'0007'X))
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.6))GOTO 24087
      CLASS ='BSTAT'
      GOTO 24088
24087 CONTINUE
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.7))GOTO 24089
      CLASS ='STEAL'
      GOTO 24090
24089 CONTINUE
      I_UNT2_RTLINDX=(IAND(ISHFT(IBB(KPOINT_UNT2+61),-(21)),'03FF'X))
      KPOINT_RTL=IBBP(1,76)-32+(32)*I_UNT2_RTLINDX
      IF(.NOT.((KPOINT_RTL.GE.IBBP(1,76).AND.KPOINT_RTL.LT.(IBBP(1,76)+I
     *BBP(2,76)))))GOTO 24091
      IF(.NOT.(I_RMT_CLASSSCORE.EQ.3))GOTO 24093
      CLASS =CSTRIP8(IBB(KPOINT_RTL))
      GOTO 24094
24093 CONTINUE
      IF(.NOT.(I_RMT_CLASSSCORE.EQ.4))GOTO 24095
      CLASS =CSTRIP8(IBB(KPOINT_RTL+2))
      GOTO 24096
24095 CONTINUE
      IF(.NOT.(I_RMT_CLASSSCORE.EQ.5))GOTO 24097
      CLASS =CSTRIP8(IBB(KPOINT_RTL+4))
      GOTO 24098
24097 CONTINUE
      IF(.NOT.(I_RMT_CLASSSCORE.EQ.6))GOTO 24099
      CLASS =CSTRIP8(IBB(KPOINT_RTL+6))
24099 CONTINUE
24098 CONTINUE
24096 CONTINUE
24094 CONTINUE
24091 CONTINUE
24090 CONTINUE
24088 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT2+16),-(17)),'07FF'X)).EQ.(ISHF
     *T(2,3)+1).AND.FBB(KPOINT_UNT2+21).GE.30.0))GOTO 24101
      CLASS ='TORP'
24101 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT2+16),-(20)),'00FF'X)).EQ.1))GO
     *TO 24103
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+11),-(0)),'7FFF'X)).EQ.0))GOTO
     * 24105
      CLASS ='ACFT'
      GOTO 24106
24105 CONTINUE
      CLASS ='BUOY'
24106 CONTINUE
24103 CONTINUE
      GOTO 24086
24085 CONTINUE
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.0.OR.I_RMT_DETECTIONTYPE.EQ.1))GOT
     *O 24107
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+13),-(31)),'0001'X)).NE.0))GOT
     *O 24109
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+13),-(29)),'0003'X)).EQ.1))GOT
     *O 24111
      CLASS =CSTRIP8(IBB((IAND(ISHFT(IBB(KPOINT_RMT+3),-(0)),'0FFFFF'X)+
     *IBBP(1,32))))
      GOTO 24112
24111 CONTINUE
      CLASS =CSTRIP8(IBB((IAND(ISHFT(IBB(KPOINT_RMT+3),-(0)),'0FFFFF'X)+
     *IBBP(1,31))))
24112 CONTINUE
      GOTO 24110
24109 CONTINUE
      I_RMT_LASTDETTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+7),-(28)),'0007'X))
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.3))GOTO 24113
      CLASS ='MAD'
      GOTO 24114
24113 CONTINUE
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.5))GOTO 24115
      CLASS ='LIDAR'
      GOTO 24116
24115 CONTINUE
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.6))GOTO 24117
      CLASS ='2020202020202020'X
      GOTO 24118
24117 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+7),-(31)),'0001'X)).EQ.1))GOTO
     * 24119
      I_RMT_CLASS=(IAND(ISHFT(IBB(KPOINT_RMT+13),-(29)),'0003'X))
      IF(.NOT.(I_RMT_CLASS.EQ.1))GOTO 24121
      CLASS ='AIR'
      GOTO 24122
24121 CONTINUE
      IF(.NOT.(I_RMT_CLASS.EQ.2))GOTO 24123
      CLASS ='SUB'
      GOTO 24124
24123 CONTINUE
      CLASS ='SHIP'
24124 CONTINUE
24122 CONTINUE
24119 CONTINUE
24118 CONTINUE
24116 CONTINUE
24114 CONTINUE
24110 CONTINUE
24107 CONTINUE
24086 CONTINUE
24084 CONTINUE
      MY_CLASS =''
      KK =0
      CALL VMOVV (USER_FLAG,MY_CLASS,KK)
      CALL VMOVHN (CLASS,8,MY_CLASS,KK)
      ASTAB_CLASS=(MY_CLASS)
      RETURN
      END
      SUBROUTINE GETTGT(ITARGT,NAMTGT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 NMVUE
      REAL*8 LKEY,LKEY2
      REAL*8 NKEY,NKEY2
      REAL*8 IKEY,IKEY2
      REAL IGMIN
      INTEGER IPAGE(20,400)
      INTEGER LIMIT,LINCNT,LIN1CNT,LIN42CNT,IBYTE,LINLEN(400),LIN1LEN(40
     *0),LIN42LEN(400),KPAGE,IVIEW,LVIEW,MVIEW,ISIDE,MSIDE,INMBR
      INTEGER ISMIN
      INTEGER NBLUE,NORNG,LSECT
      INTEGER NSECT
      INTEGER ISECT
      INTEGER IOVFLO,LINSAV,LIN1SAV,LIN42SAV,IBRDRQ,ISIDRQ,INBRRQ,ICNTRQ
     *,IBOARD,ISECT2,LSECT2,NSECT2,RX_COUNT,ASB_REFRESH
      COMMON /STATUS_A/NMVUE,LKEY,LKEY2,NKEY,NKEY2,IKEY,IKEY2,IGMIN,IPAG
     *E,LIMIT,LINCNT,LIN1CNT,LIN42CNT,IBYTE,LINLEN,LIN1LEN,LIN42LEN,KPAG
     *E,IVIEW,LVIEW,MVIEW,ISIDE,MSIDE,INMBR,ISMIN,NBLUE,NORNG,LSECT,NSEC
     *T,ISECT,IOVFLO,LINSAV,LIN1SAV,LIN42SAV,IBRDRQ,ISIDRQ,INBRRQ,ICNTRQ
     *,IBOARD,ISECT2,LSECT2,NSECT2,RX_COUNT,ASB_REFRESH
      REAL*8 NAMTGT,C_RVU_TRACKCODE,CSTRIP,CSTRIP8
      REAL LTSTTMATIME
      REAL LATEST,F_RMT_LASTDETTIME
      INTEGER ITARGT,I_CODE,IFIRST,ILAST,LATEPT,KPOINT_RMT,I_RMT_CLASS,I
     *_RMT_TRACKNUMBER,I_RMT_TMAQUALITY,I_RMT_DETECTIONTYPE,KPOINT_UNT,K
     *POINT_RVU
      INTEGER I_BESTTMA
      INTEGER I_BESTQUAL
      I_BESTTMA =0
      I_BESTQUAL =0
      LTSTTMATIME =0.0
      NAMTGT ='2020202020202020'X
      IF(.NOT.(IVIEW.EQ.IBB(128)))GOTO 24125
      RETURN
24125 CONTINUE
      KPOINT_UNT=IBBP(1,01)-104+(104)*ITARGT
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X)).EQ.7))GOT
     *O 24127
      NAMTGT =CSTRIP8(IBB(KPOINT_UNT))
      RETURN
24127 CONTINUE
      KPOINT_RVU=IBBP(1,67)-2+(2)*IVIEW
      KPOINT_RMT=IBBP(1,56)-21+(21)*(IAND(ISHFT(IBB(KPOINT_RVU+1),-(0)),
     * 'FFFF'X))
      IFIRST =KPOINT_RMT
      KPOINT_RMT=IBBP(1,56)-21+(21)*(IAND(ISHFT(IBB(KPOINT_RVU+1),-(16))
     *,'FFFF'X))
      ILAST =KPOINT_RMT
      LATEST =0.0
      LATEPT =0
      KPOINT_RMT=IFIRST
24129 IF(.NOT.(KPOINT_RMT.LE.ILAST))GOTO 24131
      IF(.NOT.(IBB(KPOINT_RMT+8).EQ.0))GOTO 24132
      GOTO 24130
24132 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+12),-(16)),'FFFF'X)).EQ.0))GOT
     *O 24134
      GOTO 24130
24134 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+12),-(0)),'FFFF'X)).NE.ITARGT)
     *)GOTO 24136
      GOTO 24130
24136 CONTINUE
      I_RMT_DETECTIONTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X))
      F_RMT_LASTDETTIME=FBB(KPOINT_RMT+2)
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.2))GOTO 24138
      I_RMT_TMAQUALITY=(IAND(ISHFT(IBB(KPOINT_RMT+4),-(28)),'0003'X))
      IF(.NOT.(I_RMT_TMAQUALITY.GT.I_BESTQUAL.AND.F_RMT_LASTDETTIME.GE.L
     *TSTTMATIME))GOTO 24140
      I_BESTTMA =KPOINT_RMT
      I_BESTQUAL =I_RMT_TMAQUALITY
      LTSTTMATIME =F_RMT_LASTDETTIME
24140 CONTINUE
      GOTO 24130
24138 CONTINUE
      IF(.NOT.(F_RMT_LASTDETTIME.LE.LATEST))GOTO 24142
      GOTO 24130
24142 CONTINUE
      LATEST =F_RMT_LASTDETTIME
      LATEPT =KPOINT_RMT
24130 KPOINT_RMT=KPOINT_RMT+21
      GOTO 24129
24131 CONTINUE
      IF(.NOT.(LATEPT.EQ.0))GOTO 24144
      LATEPT =I_BESTTMA
24144 CONTINUE
      IF(.NOT.(LATEPT.EQ.0))GOTO 24146
      NAMTGT =0
      RETURN
24146 CONTINUE
      KPOINT_RMT=LATEPT
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+11),-(31)),'0001'X)).EQ.1.AND.
     *(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X)).EQ.2))GOTO 24148
      I_CODE =2
      GOTO 24149
24148 CONTINUE
      I_CODE =1
24149 CONTINUE
      C_RVU_TRACKCODE=CSTRIP(IBB(KPOINT_RVU),4,1)
      I_RMT_CLASS=(IAND(ISHFT(IBB(KPOINT_RMT+13),-(29)),'0003'X))
      I_RMT_TRACKNUMBER=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(0)),'FFFF'X))
      CALL TRKNUM(C_RVU_TRACKCODE,I_CODE,I_RMT_CLASS,I_RMT_TRACKNUMBER,N
     *AMTGT)
      RETURN
      END
      INTEGER FUNCTION FIND_AGD_SLOT (KEY,STOP_AT_ZERO)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KEY
      LOGICAL STOP_AT_ZERO
      INTEGER I,K
      INTEGER*4  KPOINT_AGD
      INTEGER*4  I_AGD_ALSPID
      I =1 +MOD(KEY,99991)
      K =I
24150 CONTINUE
      KPOINT_AGD=IBBP(1,144)-7+(7)*I
      I_AGD_ALSPID=(IAND(ISHFT(IBB(KPOINT_AGD+2),-(0)),'03FFFFFF'X))
      IF(.NOT.((STOP_AT_ZERO.EQ.1.AND.I_AGD_ALSPID.EQ.0).OR.I_AGD_ALSPID
     *.EQ.KEY))GOTO 24153
      GOTO 24152
24153 CONTINUE
      I =I +1
      IF(.NOT.(I.GT.100000))GOTO 24155
      I =1
24155 CONTINUE
      IF(.NOT.(I.EQ.K))GOTO 24157
      I =0
      GOTO 24152
24157 CONTINUE
24151 GOTO 24150
24152 CONTINUE
      FIND_AGD_SLOT=(I)
      RETURN
      END
      SUBROUTINE POLYGON_OVERLAP(N1,X1,Y1,N2,X2,Y2,OVERLAP)
      IMPLICIT NONE
      INTEGER*4 N1,N2,OVERLAP
      REAL*4 X1(N1),Y1(N1)
      REAL*4 X2(N2),Y2(N2)
      INTEGER INSIDE,I,J
      INTEGER INTERSECT,SUPERIMPOSED
      OVERLAP =0
      INSIDE =0
      I=1
24159 IF(.NOT.(I.LE.N1))GOTO 24161
      CALL INOUT (X1(I),Y1(I),N2,X2,Y2,INSIDE)
      IF(.NOT.(INSIDE.EQ.1))GOTO 24162
      GOTO 24161
24162 CONTINUE
24160 I=I+1
      GOTO 24159
24161 CONTINUE
      IF(.NOT.(INSIDE.EQ.1))GOTO 24164
      OVERLAP =1
      RETURN
24164 CONTINUE
      I=1
24166 IF(.NOT.(I.LE.N2))GOTO 24168
      CALL INOUT (X2(I),Y2(I),N1,X1,Y1,INSIDE)
      IF(.NOT.(INSIDE.EQ.1))GOTO 24169
      GOTO 24168
24169 CONTINUE
24167 I=I+1
      GOTO 24166
24168 CONTINUE
      IF(.NOT.(INSIDE.EQ.1))GOTO 24171
      OVERLAP =1
      RETURN
24171 CONTINUE
      INTERSECT =0
      I=1
24173 IF(.NOT.(I.LT.N1))GOTO 24175
      J=1
24176 IF(.NOT.(J.LT.N2))GOTO 24178
      CALL VECTOR_INTERSECT(X1(I),Y1(I),X2(J),Y2(J),INTERSECT)
      IF(.NOT.(INTERSECT.EQ.1))GOTO 24179
      GOTO 24175
24179 CONTINUE
      CALL VECTOR_SUPERIMPOSED(X1(I),Y1(I),X2(J),Y2(J),SUPERIMPOSED)
      IF(.NOT.(SUPERIMPOSED.EQ.1))GOTO 24181
      GOTO 24175
24181 CONTINUE
24177 J=J+1
      GOTO 24176
24178 CONTINUE
24174 I=I+1
      GOTO 24173
24175 CONTINUE
      IF(.NOT.(INTERSECT.EQ.1))GOTO 24183
      OVERLAP =1
24183 CONTINUE
      IF(.NOT.(SUPERIMPOSED.EQ.1))GOTO 24185
      OVERLAP =1
24185 CONTINUE
      RETURN
      END
      SUBROUTINE VECTOR_INTERSECT(X1,Y1,X2,Y2,INTERSECT)
      IMPLICIT NONE
      INTEGER*4 INTERSECT
      REAL*4 X1(10),Y1(10)
      REAL*4 X2(10),Y2(10)
      REAL A,B,C,D,DET,T0,P0
      INTERSECT =0
      A =X1(2) -X1(1)
      B =X2(1) -X2(2)
      C =Y1(2) -Y1(1)
      D =Y2(1) -Y2(2)
      DET =(A *D) -(C *B)
      IF(.NOT.(DET.NE.0.0))GOTO 24187
      T0 =((Y2(1)-Y2(2)) *(X2(1)-X1(1)) -((X2(1)-X2(2)) *(Y2(1)-Y1(1))))
     * / DET
      P0 =((X1(2)-X1(1)) *(Y2(1)-Y1(1)) -((Y1(2)-Y1(2)) *(X2(1)-X1(1))))
     * / DET
24187 CONTINUE
      IF(.NOT.(DET.NE.0.0))GOTO 24189
      IF(.NOT.(0.0.LT.T0.AND.T0.LT.1.0))GOTO 24191
      IF(.NOT.(0.0.LT.P0.AND.P0.LT.1.0))GOTO 24193
      INTERSECT =1
24193 CONTINUE
24191 CONTINUE
24189 CONTINUE
      RETURN
      END
      SUBROUTINE VECTOR_SUPERIMPOSED(X1,Y1,X2,Y2,SUPERIMPOSED)
      IMPLICIT NONE
      INTEGER*4 SUPERIMPOSED,COLINEAR
      REAL*4 X1(10),Y1(10)
      REAL*4 X2(10),Y2(10)
      REAL VCP,P1,P2
      SUPERIMPOSED =0
      COLINEAR =0
      VCP =(Y1(1) -Y2(1)) *(X2(2) -X2(1)) -(X1(1) -X2(1)) *(Y2(2) -Y2(1)
     *)
      IF(.NOT.(VCP.EQ.0.0))GOTO 24195
      COLINEAR =1
24195 CONTINUE
      IF(.NOT.(COLINEAR.EQ.1))GOTO 24197
      IF(.NOT.(X2(1).EQ.X2(2)))GOTO 24199
      IF(.NOT.(Y2(1).EQ.Y2(2)))GOTO 24201
      RETURN
24201 CONTINUE
      P1 =(Y1(1) -Y2(2)) / (Y2(1) -Y2(2))
      P2 =(Y1(2) -Y2(2)) / (Y2(1) -Y2(2))
      GOTO 24200
24199 CONTINUE
      IF(.NOT.(X2(1).EQ.X2(2)))GOTO 24203
      RETURN
24203 CONTINUE
      P1 =(X1(1) -X2(2)) / (X2(1) -X2(2))
      P2 =(X1(2) -X2(2)) / (X2(1) -X2(2))
24200 CONTINUE
      IF(.NOT.(0.0.LT.P1.AND.P2.LT.1.0))GOTO 24205
      SUPERIMPOSED =1
24205 CONTINUE
24197 CONTINUE
      RETURN
      END
