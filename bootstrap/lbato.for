      INTEGER FUNCTION GETATOWRD (ATO_RCD,IPOS,KEYWORD)
      IMPLICIT NONE
      LOGICAL*1 ATO_RCD(100)
      CHARACTER *400 A_LINE
      INTEGER IPOS,I,J,LENLINE
      LOGICAL*1 KEYWORD(100)
      IF(.NOT.(IPOS.GT.0.AND.ATO_RCD(IPOS).EQ.47.AND.ATO_RCD(IPOS+1).EQ.
     *47))GOTO 23000
      KEYWORD(1) =0
      GETATOWRD=(0)
      RETURN
23000 CONTINUE
      I =IPOS +1
      J =0
23002 IF(.NOT.(ATO_RCD(I).NE.47))GOTO 23003
      IF(.NOT.(ATO_RCD(I).EQ.0))GOTO 23004
      READ (10,9001,END=8000) A_LINE
      LENLINE =LEN_TRIM(A_LINE)
9001  FORMAT(A)
      CALL FS2RS(A_LINE,ATO_RCD)
      CALL UPPER (ATO_RCD)
      I =1
      GOTO 23002
23004 CONTINUE
      CALL SMOV(ATO_RCD(I),KEYWORD,J)
      I =I +1
      GOTO 23002
23003 CONTINUE
23006 IF(.NOT.(KEYWORD(J).EQ.32.AND.J.GT.0))GOTO 23007
      J =J -1
      GOTO 23006
23007 CONTINUE
      KEYWORD(J+1) =0
      IPOS =I
      GETATOWRD=(J)
      RETURN
8000  CLOSE(10)
      GETATOWRD=(0)
      RETURN
      END
      SUBROUTINE TIMESHIFT(INTIME,TS_DAYS,TS_HOURS,TS_MINUTES,OUTTIME)
      IMPLICIT NONE
      LOGICAL*1 INTIME(100),OUTTIME(100)
      INTEGER TS_DAYS,TS_HOURS,TS_MINUTES
      INTEGER CTOI
      INTEGER KK
      LOGICAL*1 CDAY(3)
      LOGICAL*1 CHOUR(3)
      LOGICAL*1 CMIN(3)
      INTEGER IDAY,IHR,IMIN
      KK =0
      CALL SMOVH (INTIME,2,CDAY,KK)
      CALL SMOV (0,CDAY,KK)
      KK =1
      IDAY =CTOI (CDAY,KK)
      KK =0
      CALL SMOVH (INTIME(3),2,CHOUR,KK)
      CALL SMOV (0,CHOUR,KK)
      KK =1
      IHR =CTOI (CHOUR,KK)
      KK =0
      CALL SMOVH (INTIME(5),2,CMIN,KK)
      CALL SMOV (0,CMIN,KK)
      KK =1
      IMIN =CTOI (CMIN,KK)
      IMIN =IMIN +TS_MINUTES
23008 IF(.NOT.(IMIN.LT.0.OR.IMIN.GE.60))GOTO 23009
      IF(.NOT.(IMIN.LT.0))GOTO 23010
      IMIN =IMIN +60
      IHR =IHR -1
      IF(.NOT.(IHR.LT.0))GOTO 23012
      IHR =23
      IDAY =IDAY -1
      IF(.NOT.(IDAY.LT.1))GOTO 23014
      IDAY =31
23014 CONTINUE
23012 CONTINUE
      GOTO 23011
23010 CONTINUE
      IMIN =IMIN -60
      IHR =IHR +1
      IF(.NOT.(IHR.GE.24))GOTO 23016
      IHR =0
      IDAY =IDAY +1
      IF(.NOT.(IDAY.GT.31))GOTO 23018
      IDAY =1
23018 CONTINUE
23016 CONTINUE
23011 CONTINUE
      GOTO 23008
23009 CONTINUE
      IHR =IHR +TS_HOURS
23020 IF(.NOT.(IHR.LT.0.OR.IHR.GE.24))GOTO 23021
      IF(.NOT.(IHR.LT.0))GOTO 23022
      IHR =IHR +24
      IDAY =IDAY -1
      IF(.NOT.(IDAY.LT.1))GOTO 23024
      IDAY =31
23024 CONTINUE
      GOTO 23023
23022 CONTINUE
      IHR =IHR -24
      IDAY =IDAY +1
      IF(.NOT.(IDAY.GT.31))GOTO 23026
      IDAY =1
23026 CONTINUE
23023 CONTINUE
      GOTO 23020
23021 CONTINUE
      IDAY =IDAY +TS_DAYS
23028 IF(.NOT.(IDAY.LT.0.OR.IDAY.GT.31))GOTO 23029
      IF(.NOT.(IDAY.LT.0))GOTO 23030
      IDAY =IDAY +31
      GOTO 23031
23030 CONTINUE
      IDAY =IDAY -31
23031 CONTINUE
      GOTO 23028
23029 CONTINUE
      KK =0
      CALL SMOVIZ (IDAY,2,OUTTIME,KK)
      CALL SMOVIZ (IHR,2,OUTTIME,KK)
      CALL SMOVIZ (IMIN,2,OUTTIME,KK)
      CALL SMOV (0,OUTTIME,KK)
      RETURN
      END
      SUBROUTINE LEGIT_NAME(ACO_NAME,LEGAL_NAME)
      IMPLICIT NONE
      LOGICAL*1 ACO_NAME(100)
      CHARACTER LEGAL_NAME*24
      LOGICAL*1 CHR
      INTEGER JJ,KK
      INTEGER LENGTH
      KK =0
      LEGAL_NAME =' '
      JJ=1
23032 IF(.NOT.(JJ.LE.LENGTH(ACO_NAME)))GOTO 23034
      CHR =ACO_NAME(JJ)
      IF(.NOT.(CHR.EQ.45.OR.CHR.EQ.61.OR.CHR.EQ.58.OR.CHR.EQ.44.OR.CHR.E
     *Q.32))GOTO 23035
      GOTO 23033
23035 CONTINUE
      CALL VMOV (CHR,LEGAL_NAME,KK)
      IF(.NOT.(KK.GT.24))GOTO 23037
      GOTO 23034
23037 CONTINUE
23033 JJ=JJ+1
      GOTO 23032
23034 CONTINUE
      RETURN
      END
      SUBROUTINE SHORTEN_NAME(ACO_NAME1,MANGLE_NAME)
      IMPLICIT NONE
      LOGICAL*1 ACO_NAME(100)
      LOGICAL*1 ACO_NAME1(100)
      LOGICAL*1 MANGLE_NAME(100)
      LOGICAL*1 CHR
      LOGICAL*1 NUMSTR(100)
      LOGICAL*1 NUMBERS(11)
      INTEGER I,J,JJ,KK
      INTEGER NAMELEN
      INTEGER INDEXX,LENGTH
      INTEGER NUMSTRLEN
      DATA NUMBERS/48,49,50,51,52,53,54,55,56,57,0/
      KK =0
      CALL SMOVHN (ACO_NAME1,100,ACO_NAME,KK)
      CALL SMOV (0,ACO_NAME,KK)
      IF(.NOT.(LENGTH(ACO_NAME).LE.8))GOTO 23039
      KK =0
      CALL SMOVHN (ACO_NAME,8,MANGLE_NAME,KK)
      CALL SMOV (0,MANGLE_NAME,KK)
      RETURN
23039 CONTINUE
      NAMELEN =LENGTH(ACO_NAME)
      I =1
23041 IF(.NOT.(I.LT.NAMELEN))GOTO 23042
      CHR =ACO_NAME(I)
      IF(.NOT.(CHR.EQ.65.OR.CHR.EQ.69.OR.CHR.EQ.73.OR.CHR.EQ.79.OR.CHR.E
     *Q.85))GOTO 23043
      J =I
23045 IF(.NOT.(J.LT.NAMELEN))GOTO 23047
      ACO_NAME(J) =ACO_NAME(J+1)
23046 J=J+1
      GOTO 23045
23047 CONTINUE
      NAMELEN =NAMELEN -1
      GOTO 23044
23043 CONTINUE
      I =I +1
23044 CONTINUE
      GOTO 23041
23042 CONTINUE
      CALL SMOV (0,ACO_NAME,NAMELEN+1)
      IF(.NOT.(LENGTH(ACO_NAME).LE.8))GOTO 23048
      KK =0
      CALL SMOVHN (ACO_NAME,8,MANGLE_NAME,KK)
      CALL SMOV (0,MANGLE_NAME,KK)
      RETURN
23048 CONTINUE
      KK =0
      I =NAMELEN
23050 IF(.NOT.(I.GT.0))GOTO 23051
      CHR =ACO_NAME(I)
      IF(.NOT.(INDEXX(NUMBERS,CHR).EQ.0))GOTO 23052
      GOTO 23051
23052 CONTINUE
      I =I -1
      GOTO 23050
23051 CONTINUE
      NUMSTRLEN =NAMELEN -I
      IF(.NOT.(NUMSTRLEN.GT.0))GOTO 23054
      KK =0
      CALL SMOVHN (ACO_NAME(I+1),NUMSTRLEN,NUMSTR,KK)
      CALL SMOV (0,NUMSTR,KK+1)
23054 CONTINUE
      KK =0
      CALL SMOVHN(ACO_NAME,8-NUMSTRLEN,MANGLE_NAME,KK)
      IF(.NOT.(NUMSTRLEN.GT.0))GOTO 23056
      CALL SMOVHN(NUMSTR,NUMSTRLEN,MANGLE_NAME,KK)
23056 CONTINUE
      CALL SMOV (0,MANGLE_NAME,KK+1)
      RETURN
      END
      SUBROUTINE GET_AIRSPACE (ATO_ROOT,ATOID,ATOID_POS)
      IMPLICIT NONE
      INTEGER*4 IAS(256000)
      INTEGER*2 IASW(2,256000)
      BYTE IASB(4,256000)
      REAL*8 CAS(128000)
      REAL FAS(256000)
      INTEGER IASP(6,1)
      EQUIVALENCE (IAS,FAS,CAS,IASW,IASB)
      EQUIVALENCE (IAS(7),IASP)
      COMMON /ASBOARD/ IAS
cpar$ private / ASBoard / ! keep FORTRAN from assigning a global section
      LOGICAL*1 ATO_ROOT(100)
      CHARACTER VSTRIP*100
      CHARACTER  V_SHP_NAME*24
      CHARACTER LEGAL_NAME*24
      LOGICAL*1 LEGAL_NAME_C(24)
      EQUIVALENCE(LEGAL_NAME,LEGAL_NAME_C)
      REAL*8 CSTRIP8,CSTRIP
      REAL*8 ATOID
      REAL*8 MY_MISN
      INTEGER AIRSPACE_FIND
      INTEGER KPOINT_SHP
      INTEGER I_SHP_SHAPECODE
      INTEGER INDEX_SHP_POS
      INTEGER I_SHP_RADIUS
      INTEGER I_SHP_INNERRADIUS
      INTEGER I_SHP_OUTERRADIUS
      INTEGER I_SHP_BEGINBEARING
      INTEGER I_SHP_ENDBEARING
      INTEGER I_SHP_BOTTOMALTITUDE
      INTEGER I_SHP_TOPALTITUDE
      REAL*4 F_SHP_POS_LATITUDE
      REAL*4 F_SHP_POS_LONGITUDE
      INTEGER ATOID_POS
      INTEGER K,KK,I,KR,KL,KH,CI
      INTEGER MSG_LEN
      INTEGER NL
      INTEGER GETATOWRD,EQUAL,EQUAL_HV,CTOI,INDEXX,LENGTH,TYPE
      INTEGER SHAPETEXT2CODE
      INTEGER NAME_LEN
      INTEGER RETURN_VAL
      INTEGER IPOS
      INTEGER ISIZE
      INTEGER NF
      INTEGER LENLINE
      INTEGER IERR
      INTEGER HIALT,ICOLON,IHYPHEN
      LOGICAL INAIRSPACE
      LOGICAL INPOLYGON
      LOGICAL INPOLYARC
      LOGICAL INRADARC
      LOGICAL INCORRIDOR
      LOGICAL*1 ATOID_CHAR
      LOGICAL*1 FILE_NAME(50)
      CHARACTER *50 FILE_NAME_V
      EQUIVALENCE(FILE_NAME,FILE_NAME_V)
      LOGICAL*1 A_LINE(80)
      CHARACTER *80 A_LINE_V
      EQUIVALENCE (A_LINE,A_LINE_V)
      LOGICAL*1 ATO_RCD(80)
      CHARACTER *80 ATO_RCD_V
      EQUIVALENCE (ATO_RCD,ATO_RCD_V)
      LOGICAL*1 KEYWORD(80000)
      LOGICAL*1 MSG(80)
      CHARACTER *80 V_MSG
      EQUIVALENCE (MSG,V_MSG)
      LOGICAL*1 ATOIDC(8)
      REAL*8 ATOIDL
      EQUIVALENCE (ATOIDL,ATOIDC)
      LOGICAL*1 MISN(80)
      LOGICAL*1 TOKEN(80000)
      LOGICAL*1 ACO_NAME(80)
      LOGICAL*1 ACO_NAMET(80)
      LOGICAL*1 ACO_SHAPE(80)
      LOGICAL*1 ACO_RADIUS(80)
      LOGICAL*1 ACO_INRADIUS(80)
      LOGICAL*1 ACO_OUTRADIUS(80)
      LOGICAL*1 ACO_BEGBRG(80)
      LOGICAL*1 ACO_ENDBRG(80)
      LOGICAL*1 ACO_WIDTH(80)
      LOGICAL*1 ACO_POS1(80)
      LOGICAL*1 ACO_POS2(80)
      LOGICAL*1 ACO_POS3(80)
      LOGICAL*1 ACO_EFFLEVEL(80)
      LOGICAL*1 EFFLEVEL_REF(80)
      LOGICAL*1 EFFLEVEL_LOALT(80)
      LOGICAL*1 EFFLEVEL_HIALT(80)
      LOGICAL*1 FMT_RADIUS(80)
      LOGICAL*1 FMT_BEARING(80)
      LOGICAL*1 FORMAT_WIDTH(80)
      LOGICAL*1 FORMAT_POS1_LAT(80)
      LOGICAL*1 FORMAT_POS1_LON(80)
      LOGICAL*1 FORMAT_POS2_LAT(80)
      LOGICAL*1 FORMAT_POS2_LON(80)
      LOGICAL*1 FORMAT_POS3_LAT(80)
      LOGICAL*1 FORMAT_POS3_LON(80)
      LOGICAL*1 FORMAT_POS2(80)
      LOGICAL*1 FORMAT_POS3(80)
      INTEGER NORBIT,NPOLYGON,NCORRIDOR,NPOINT,NPOLYARC,NRADARC
      INTEGER NLINE,NTRACK,NCIRCLE
      INTEGER NUNKNOWNSHAPE
      INTEGER LAST_ACO_UPDATE
      INTEGER FIND_FILE,FIND_RESULT
      DATA NORBIT,NPOLYGON,NCORRIDOR,NPOINT,NPOLYARC,NRADARC/6*0/
      DATA NLINE,NTRACK,NCIRCLE,NUNKNOWNSHAPE/4*0/
      DATA INCORRIDOR/.FALSE./
      DATA INPOLYGON/.FALSE./
      REAL AVG_RADIUS
      CALL ASALOC (01,'SHP',1,2000,134)
      NL =0
      ATOIDL =ATOID
      LAST_ACO_UPDATE =ATOID_POS
23058 IF(.NOT.(LAST_ACO_UPDATE.GE.0))GOTO 23059
      NAME_LEN =0
      CALL SMOVHN (ATO_ROOT,100,FILE_NAME,NAME_LEN)
      CALL SMOVV ('/',FILE_NAME,NAME_LEN)
      CALL SMOVHN (ATOID,8,FILE_NAME,NAME_LEN)
      CALL SMOVV ('/',FILE_NAME,NAME_LEN)
      CALL SMOVI (LAST_ACO_UPDATE,FILE_NAME,NAME_LEN)
      CALL SMOVV ('/ACO.',FILE_NAME,NAME_LEN)
      CALL SMOVHN (ATOID,8,FILE_NAME,NAME_LEN)
      CALL SMOVV ('.',FILE_NAME,NAME_LEN)
      CALL SMOVI (LAST_ACO_UPDATE,FILE_NAME,NAME_LEN)
      CALL SMOV (0,FILE_NAME,NAME_LEN)
      FIND_RESULT =FIND_FILE(FILE_NAME_V)
      IF(.NOT.(FIND_RESULT.EQ.0))GOTO 23060
      GOTO 23059
23060 CONTINUE
      LAST_ACO_UPDATE =LAST_ACO_UPDATE -1
      GOTO 23058
23059 CONTINUE
      OPEN(UNIT =10,FILE =FILE_NAME_V,STATUS ='old',ACCESS =            
     *'sequential',RECL =120,IOSTAT =RETURN_VAL)
      IF(.NOT.(RETURN_VAL.NE.0))GOTO 23062
      PRINT 9005,FILE_NAME
9005  FORMAT(1X,'Unable to open airspace file = ',50A1)
      RETURN
23062 CONTINUE
23064 CONTINUE
      READ (10,9001,END=8000) ATO_RCD_V
      LENLINE =LEN_TRIM(ATO_RCD_V)
9001  FORMAT(A)
      K =LENLINE +1
      CALL SMOV (0,ATO_RCD,K)
      CALL UPPER (ATO_RCD)
      IPOS =0
      ISIZE =GETATOWRD (ATO_RCD,IPOS,KEYWORD)
      IF(.NOT.(INAIRSPACE.EQ..FALSE.))GOTO 23067
      IF(.NOT.(EQUAL_HV(KEYWORD,'ACMID').EQ.1))GOTO 23069
      INAIRSPACE =.TRUE.
      GOTO 23070
23069 CONTINUE
      GOTO 23065
23070 CONTINUE
23067 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'ACMID').EQ.1))GOTO 23071
      ISIZE =GETATOWRD (ATO_RCD,IPOS,TOKEN)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_NAMET)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_SHAPE)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,TOKEN)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,TOKEN)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,TOKEN)
23073 IF(.NOT.(GETATOWRD(ATO_RCD,IPOS,TOKEN).GT.0))GOTO 23074
      CONTINUE
      GOTO 23073
23074 CONTINUE
      KK =0
      CALL SMOVH (ACO_NAMET(6),100,ACO_NAME,KK)
      CALL SMOV (0,ACO_NAME,KK)
      CALL LEGIT_NAME (ACO_NAME,LEGAL_NAME)
      KPOINT_SHP=AIRSPACE_FIND(LEGAL_NAME_C)
      IF(.NOT.(KPOINT_SHP.EQ.0))GOTO 23075
      KPOINT_SHP=IASP(1,01)+IASP(3,01)
      IF(.NOT.(((KPOINT_SHP-IASP(1,01))/134+1).GT.2000))GOTO 23077
      PRINT *,'Airspace Shape table capacity exceeded'
      KPOINT_SHP=KPOINT_SHP-134
23077 CONTINUE
      CALL LIB$MOVC5(0,0,0,134*4,IAS(KPOINT_SHP))
      IASP(3,01)=IASP(3,01)+134
23075 CONTINUE
      CALL VDRESS(LEGAL_NAME,IAS(KPOINT_SHP),1,24)
      I_SHP_SHAPECODE=SHAPETEXT2CODE(ACO_SHAPE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('000F'X,0))
     *),ISHFT(IAND((I_SHP_SHAPECODE),'000F'X),0))
      IF(.NOT.(I_SHP_SHAPECODE.EQ.10))GOTO 23079
      NUNKNOWNSHAPE =NUNKNOWNSHAPE +1
      KK =0
      CALL SMOVV('Unknown shape ',MSG,KK)
      CALL SMOVH(ACO_SHAPE,100,MSG,KK)
      CALL SMOVV(' in airspace ',MSG,KK)
      CALL SMOVH(ACO_NAME,100,MSG,KK)
      PRINT 9006,(MSG(KK),KK=1,LENGTH(MSG))
9006  FORMAT(1X,100A1)
23079 CONTINUE
      GOTO 23065
23071 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'POLYARC').EQ.1))GOTO 23081
      NPOLYARC =NPOLYARC +1
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_POS1)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_BEGBRG)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_RADIUS)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_ENDBRG)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_POS2)
      CALL FORMAT_POS_LAT (ACO_POS1,FORMAT_POS1_LAT)
      CALL FORMAT_POS_LON (ACO_POS1,FORMAT_POS1_LON)
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=1
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      CALL FORMAT_BEARING (ACO_BEGBRG,FMT_BEARING)
      KK =1
      I_SHP_BEGINBEARING=CTOI (FMT_BEARING,KK)
      IAS(KPOINT_SHP+7)=IOR(IAND(IAS(KPOINT_SHP+7),NOT(ISHFT('01FF'X,0))
     *),ISHFT(IAND((I_SHP_BEGINBEARING),'01FF'X),0))
      CALL FORMAT_RADIUS (ACO_RADIUS,FMT_RADIUS)
      KK =1
      I_SHP_RADIUS=CTOI (FMT_RADIUS,KK)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('00FF'X,11)
     *)),ISHFT(IAND((I_SHP_RADIUS),'00FF'X),11))
      CALL FORMAT_BEARING (ACO_ENDBRG,FMT_BEARING)
      KK =1
      I_SHP_ENDBEARING=CTOI (FMT_BEARING,KK)
      IAS(KPOINT_SHP+7)=IOR(IAND(IAS(KPOINT_SHP+7),NOT(ISHFT('01FF'X,9))
     *),ISHFT(IAND((I_SHP_ENDBEARING),'01FF'X),9))
      CALL RRB2LL(F_SHP_POS_LATITUDE,F_SHP_POS_LONGITUDE,FLOAT(I_SHP_RAD
     *IUS),0.0,I_SHP_BEGINBEARING*0.0174533,COS(F_SHP_POS_LATITUDE))
      INDEX_SHP_POS=2
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      CALL FORMAT_POS_LAT (ACO_POS2,FORMAT_POS2_LAT)
      CALL FORMAT_POS_LON (ACO_POS2,FORMAT_POS2_LON)
      CALL CVT_DMS_RAD(FORMAT_POS2_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS2_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=3
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((3),'001F'X),19))
23083 IF(.NOT.(GETATOWRD(ATO_RCD,IPOS,ACO_POS1).GT.0))GOTO 23084
      CALL FORMAT_POS_LAT (ACO_POS1,FORMAT_POS1_LAT)
      CALL FORMAT_POS_LON (ACO_POS1,FORMAT_POS1_LON)
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=INDEX_SHP_POS+1
      IF(.NOT.((INDEX_SHP_POS.GT.0.AND.INDEX_SHP_POS.LE.60)))GOTO 23085
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((INDEX_SHP_POS),'001F'X),19))
23085 CONTINUE
      GOTO 23083
23084 CONTINUE
      INDEX_SHP_POS=1
      F_SHP_POS_LATITUDE=FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))
      F_SHP_POS_LONGITUDE=FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)
      CALL RRB2LL(F_SHP_POS_LATITUDE,F_SHP_POS_LONGITUDE,FLOAT((IAND(ISH
     *FT(IAS(KPOINT_SHP+6),-(11)),'00FF'X))),0.0,(IAND(ISHFT(IAS(KPOINT_
     *SHP+7),-(9)),'01FF'X))*0.0174533,COS(F_SHP_POS_LATITUDE))
      INDEX_SHP_POS=(IAND(ISHFT(IAS(KPOINT_SHP+6),-(19)),'001F'X))+1
      IF(.NOT.((INDEX_SHP_POS.GT.0.AND.INDEX_SHP_POS.LE.60)))GOTO 23087
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((INDEX_SHP_POS),'001F'X),19))
23087 CONTINUE
      GOTO 23082
23081 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'RADARC').EQ.1))GOTO 23089
      NRADARC =NRADARC +1
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_POS1)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_BEGBRG)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_ENDBRG)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_INRADIUS)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_OUTRADIUS)
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=1
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      CALL FORMAT_BEARING (ACO_BEGBRG,FMT_BEARING)
      KK =1
      I_SHP_BEGINBEARING=CTOI (FMT_BEARING,KK)
      IAS(KPOINT_SHP+7)=IOR(IAND(IAS(KPOINT_SHP+7),NOT(ISHFT('01FF'X,0))
     *),ISHFT(IAND((I_SHP_BEGINBEARING),'01FF'X),0))
      CALL FORMAT_BEARING (ACO_ENDBRG,FMT_BEARING)
      KK =1
      I_SHP_ENDBEARING=CTOI (FMT_BEARING,KK)
      IAS(KPOINT_SHP+7)=IOR(IAND(IAS(KPOINT_SHP+7),NOT(ISHFT('01FF'X,9))
     *),ISHFT(IAND((I_SHP_ENDBEARING),'01FF'X),9))
      CALL FORMAT_RADIUS (ACO_INRADIUS,FMT_RADIUS)
      KK =1
      I_SHP_INNERRADIUS=CTOI (FMT_RADIUS,KK)
      IAS(KPOINT_SHP+7)=IOR(IAND(IAS(KPOINT_SHP+7),NOT(ISHFT('00FF'X,18)
     *)),ISHFT(IAND((I_SHP_INNERRADIUS),'00FF'X),18))
      CALL FORMAT_RADIUS (ACO_OUTRADIUS,FMT_RADIUS)
      KK =1
      I_SHP_OUTERRADIUS=CTOI (FMT_RADIUS,KK)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('00FF'X,11)
     *)),ISHFT(IAND((I_SHP_OUTERRADIUS),'00FF'X),11))
      AVG_RADIUS =(I_SHP_INNERRADIUS+I_SHP_OUTERRADIUS) / 2
      CALL RRB2LL(F_SHP_POS_LATITUDE,F_SHP_POS_LONGITUDE,AVG_RADIUS,0.0,
     *I_SHP_BEGINBEARING*0.0174533,COS(F_SHP_POS_LATITUDE))
      INDEX_SHP_POS=2
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      INDEX_SHP_POS=1
      F_SHP_POS_LATITUDE=FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))
      F_SHP_POS_LONGITUDE=FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)
      CALL RRB2LL(F_SHP_POS_LATITUDE,F_SHP_POS_LONGITUDE,AVG_RADIUS,0.0,
     *(IAND(ISHFT(IAS(KPOINT_SHP+7),-(9)),'01FF'X))*0.0174533,COS(F_SHP_
     *POS_LATITUDE))
      INDEX_SHP_POS=(IAND(ISHFT(IAS(KPOINT_SHP+6),-(19)),'001F'X))+1
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((INDEX_SHP_POS),'001F'X),19))
      GOTO 23090
23089 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'AORBIT').EQ.1))GOTO 23091
      NORBIT =NORBIT +1
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_POS1)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_POS2)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_RADIUS)
      CALL FORMAT_POS_LAT (ACO_POS1,FORMAT_POS1_LAT)
      CALL FORMAT_POS_LON (ACO_POS1,FORMAT_POS1_LON)
      CALL FORMAT_POS_LAT (ACO_POS2,FORMAT_POS2_LAT)
      CALL FORMAT_POS_LON (ACO_POS2,FORMAT_POS2_LON)
      CALL FORMAT_RADIUS (ACO_RADIUS,FMT_RADIUS)
      KK =1
      I_SHP_RADIUS=CTOI (FMT_RADIUS,KK)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('00FF'X,11)
     *)),ISHFT(IAND((I_SHP_RADIUS),'00FF'X),11))
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=1
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      CALL CVT_DMS_RAD(FORMAT_POS2_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS2_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=2
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((2),'001F'X),19))
      GOTO 23092
23091 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'CIRCLE').EQ.1))GOTO 23093
      NCIRCLE =NCIRCLE +1
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_POS1)
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_RADIUS)
      CALL FORMAT_POS_LAT (ACO_POS1,FORMAT_POS1_LAT)
      CALL FORMAT_POS_LON (ACO_POS1,FORMAT_POS1_LON)
      CALL FORMAT_RADIUS (ACO_RADIUS,FMT_RADIUS)
      KK =1
      I_SHP_RADIUS=CTOI (FMT_RADIUS,KK)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('00FF'X,11)
     *)),ISHFT(IAND((I_SHP_RADIUS),'00FF'X),11))
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=1
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((1),'001F'X),19))
      GOTO 23094
23093 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'APOINT').EQ.1))GOTO 23095
      NPOINT =NPOINT +1
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_POS1)
      CALL FORMAT_POS_LAT (ACO_POS1,FORMAT_POS1_LAT)
      CALL FORMAT_POS_LON (ACO_POS1,FORMAT_POS1_LON)
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=1
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((1),'001F'X),19))
      GOTO 23096
23095 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'POLYGON').EQ.1.OR.EQUAL_HV(KEYWORD,    
     *'GEOLINE').EQ.1))GOTO 23097
      IF(.NOT.(EQUAL_HV(KEYWORD,'GEOLINE').EQ.1))GOTO 23099
      NLINE =NLINE +1
      GOTO 23100
23099 CONTINUE
      NPOLYGON =NPOLYGON +1
23100 CONTINUE
      INDEX_SHP_POS=0
23101 IF(.NOT.(GETATOWRD(ATO_RCD,IPOS,ACO_POS1).GT.0))GOTO 23102
      CALL FORMAT_POS_LAT (ACO_POS1,FORMAT_POS1_LAT)
      CALL FORMAT_POS_LON (ACO_POS1,FORMAT_POS1_LON)
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=INDEX_SHP_POS+1
      IF(.NOT.((INDEX_SHP_POS.GT.0.AND.INDEX_SHP_POS.LE.60)))GOTO 23103
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((INDEX_SHP_POS),'001F'X),19))
23103 CONTINUE
      GOTO 23101
23102 CONTINUE
      GOTO 23098
23097 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'CORRIDOR').EQ.1))GOTO 23105
      NCORRIDOR =NCORRIDOR +1
      INDEX_SHP_POS=0
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_WIDTH)
      CALL FORMAT_RADIUS (ACO_WIDTH,FORMAT_WIDTH)
      KK =1
      I_SHP_RADIUS=CTOI (FORMAT_WIDTH,KK)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('00FF'X,11)
     *)),ISHFT(IAND((I_SHP_RADIUS),'00FF'X),11))
23107 IF(.NOT.(GETATOWRD(ATO_RCD,IPOS,ACO_POS1).GT.0))GOTO 23108
      CALL FORMAT_POS_LAT (ACO_POS1,FORMAT_POS1_LAT)
      CALL FORMAT_POS_LON (ACO_POS1,FORMAT_POS1_LON)
      CALL CVT_DMS_RAD(FORMAT_POS1_LAT,F_SHP_POS_LATITUDE,IERR)
      CALL CVT_DMS_RAD(FORMAT_POS1_LON,F_SHP_POS_LONGITUDE,IERR)
      INDEX_SHP_POS=INDEX_SHP_POS+1
      IF(.NOT.((INDEX_SHP_POS.GT.0.AND.INDEX_SHP_POS.LE.60)))GOTO 23109
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2))=(F_SHP_POS_LATITUDE)
      FAS((KPOINT_SHP+14+(INDEX_SHP_POS-1)*2)+1)=(F_SHP_POS_LONGITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('001F'X,19)
     *)),ISHFT(IAND((INDEX_SHP_POS),'001F'X),19))
23109 CONTINUE
      GOTO 23107
23108 CONTINUE
      GOTO 23106
23105 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'EFFLEVEL').EQ.1))GOTO 23111
      ISIZE =GETATOWRD (ATO_RCD,IPOS,ACO_EFFLEVEL)
      IF(.NOT.(ISIZE.GT.0))GOTO 23113
      ICOLON =INDEXX(ACO_EFFLEVEL,58)
      IHYPHEN =INDEXX(ACO_EFFLEVEL,45)
      KR =0
      CALL SMOVHN (ACO_EFFLEVEL,ICOLON-1,EFFLEVEL_REF,KR)
      CALL SMOV (0,EFFLEVEL_REF,KR)
      KL =0
      CALL SMOVHN (ACO_EFFLEVEL(ICOLON+1),IHYPHEN-ICOLON-1,EFFLEVEL_LOAL
     *T,KL)
      CALL SMOV (0,EFFLEVEL_LOALT,KL)
      CI =1
23115 IF(.NOT.(TYPE(EFFLEVEL_LOALT(CI)).NE.2.AND.CI.LT.KL))GOTO 23116
      CI =CI +1
      GOTO 23115
23116 CONTINUE
      I_SHP_BOTTOMALTITUDE=CTOI(EFFLEVEL_LOALT,CI) *100
      IAS(KPOINT_SHP+10)=(I_SHP_BOTTOMALTITUDE)
      KH =0
      CALL SMOVHN (ACO_EFFLEVEL(IHYPHEN+1),ISIZE-ICOLON,EFFLEVEL_HIALT,K
     *H)
      CALL SMOV (0,EFFLEVEL_HIALT,KH)
      CI =1
23117 IF(.NOT.(TYPE(EFFLEVEL_HIALT(CI)).NE.2.AND.CI.LT.KL))GOTO 23118
      CI =CI +1
      GOTO 23117
23118 CONTINUE
      IF(.NOT.(EFFLEVEL_HIALT(KH-1).EQ.76))GOTO 23119
      I_SHP_TOPALTITUDE=CTOI(EFFLEVEL_HIALT,CI) *100
      IAS(KPOINT_SHP+11)=(I_SHP_TOPALTITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('0003'X,7))
     *),ISHFT(IAND((1),'0003'X),7))
      GOTO 23120
23119 CONTINUE
      I_SHP_TOPALTITUDE=CTOI(EFFLEVEL_HIALT,CI) *100
      IAS(KPOINT_SHP+11)=(I_SHP_TOPALTITUDE)
      IAS(KPOINT_SHP+6)=IOR(IAND(IAS(KPOINT_SHP+6),NOT(ISHFT('0003'X,7))
     *),ISHFT(IAND((2),'0003'X),7))
23120 CONTINUE
23113 CONTINUE
      GOTO 23112
23111 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'APERIOD').EQ.1.OR.EQUAL_HV(KEYWORD,'').
     *EQ.1.OR.EQUAL_HV(KEYWORD,'AMPN').EQ.1))GOTO 23121
      INAIRSPACE =.FALSE.
      GOTO 23065
23121 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'GEODATUM').EQ.1))GOTO 23123
      GOTO 23065
23123 CONTINUE
      IF(.NOT.(EQUAL_HV(KEYWORD,'1TRACK').EQ.1))GOTO 23125
23127 IF(.NOT.(GETATOWRD(ATO_RCD,IPOS,KEYWORD).GT.0))GOTO 23128
      GOTO 23127
23128 CONTINUE
      GOTO 23126
23125 CONTINUE
      PRINT 9009,ATO_RCD
9009  FORMAT (' Unrecognized ACO line = ',80A1)
      INAIRSPACE =.FALSE.
      GOTO 23065
23126 CONTINUE
23124 CONTINUE
23122 CONTINUE
23112 CONTINUE
23106 CONTINUE
23098 CONTINUE
23096 CONTINUE
23094 CONTINUE
23092 CONTINUE
23090 CONTINUE
23082 CONTINUE
23065 GOTO 23064
23066 CONTINUE
8000  CLOSE(10)
      IF(.NOT.(NUNKNOWNSHAPE.GT.0))GOTO 23129
      PRINT *,'Unknown Shapes = ',NUNKNOWNSHAPE
23129 CONTINUE
      RETURN
      END
      INTEGER FUNCTION AIRSPACE_FIND(SHP$NAME)
      IMPLICIT NONE
      INTEGER*4 IAS(256000)
      INTEGER*2 IASW(2,256000)
      BYTE IASB(4,256000)
      REAL*8 CAS(128000)
      REAL FAS(256000)
      INTEGER IASP(6,1)
      EQUIVALENCE (IAS,FAS,CAS,IASW,IASB)
      EQUIVALENCE (IAS(7),IASP)
      COMMON /ASBOARD/ IAS
cpar$ private / ASBoard / ! keep FORTRAN from assigning a global section
      LOGICAL*1 SHP$NAME(100)
      CHARACTER *100VSTRIP
      CHARACTER *24 SHAPENAMEC
      LOGICAL*1 SHAPENAME(24)
      EQUIVALENCE (SHAPENAMEC,SHAPENAME)
      INTEGER EQUAL_VV,LENGTH
      INTEGER KPOINT_SHP
      CALL RS2FS(SHP$NAME,SHAPENAMEC)
      KPOINT_SHP=IASP(1,01)
23131 IF(.NOT.((KPOINT_SHP.GE.IASP(1,01).AND.KPOINT_SHP.LE.(IASP(1,01)+I
     *ASP(3,01)-1))))GOTO 23133
      IF(.NOT.(SHAPENAMEC(1:LENGTH(SHAPENAME)).EQ.VSTRIP(IAS(KPOINT_SHP)
     *,1,24)))GOTO 23134
      GOTO 23133
23134 CONTINUE
23132 KPOINT_SHP=KPOINT_SHP+134
      GOTO 23131
23133 CONTINUE
      IF(.NOT.(.NOT.(KPOINT_SHP.GE.IASP(1,01).AND.KPOINT_SHP.LE.(IASP(1,
     *01)+IASP(3,01)-1))))GOTO 23136
      KPOINT_SHP=0
23136 CONTINUE
      AIRSPACE_FIND =KPOINT_SHP
      RETURN
      END
      SUBROUTINE FORMAT_POS_LAT (ACO_POS,FMT_POS)
      IMPLICIT NONE
      LOGICAL*1 ACO_POS(100)
      LOGICAL*1 FMT_POS(100)
      INTEGER KK
      INTEGER INDEXX
      INTEGER LON_POS,HEMI_POS
      HEMI_POS =INDEXX(ACO_POS(6),78)
      IF(.NOT.(HEMI_POS.EQ.0))GOTO 23138
      HEMI_POS =INDEXX(ACO_POS(6),83)
23138 CONTINUE
      KK =0
      IF(.NOT.(HEMI_POS.EQ.5))GOTO 23140
      CALL SMOVH (ACO_POS(6),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(8),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(10),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
      LON_POS =11
      GOTO 23141
23140 CONTINUE
      CALL SMOVH (ACO_POS(6),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(8),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(10),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(12),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
23141 CONTINUE
      RETURN
      END
      SUBROUTINE FORMAT_POS_LON (ACO_POS,FMT_POS)
      IMPLICIT NONE
      LOGICAL*1 ACO_POS(100)
      LOGICAL*1 FMT_POS(100)
      INTEGER KK
      INTEGER INDEXX
      INTEGER LON_POS,HEMI_POS
      HEMI_POS =INDEXX(ACO_POS(6),78)
      IF(.NOT.(HEMI_POS.EQ.0))GOTO 23142
      HEMI_POS =INDEXX(ACO_POS(6),83)
23142 CONTINUE
      KK =0
      IF(.NOT.(HEMI_POS.EQ.5))GOTO 23144
      LON_POS =11
      GOTO 23145
23144 CONTINUE
      LON_POS =13
23145 CONTINUE
      HEMI_POS =INDEXX(ACO_POS(LON_POS),69)
      IF(.NOT.(HEMI_POS.EQ.0))GOTO 23146
      HEMI_POS =INDEXX(ACO_POS(LON_POS),87)
23146 CONTINUE
      IF(.NOT.(HEMI_POS.EQ.6))GOTO 23148
      CALL SMOVH (ACO_POS(LON_POS),3,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(LON_POS+3),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(LON_POS+5),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
      GOTO 23149
23148 CONTINUE
      CALL SMOVH (ACO_POS(LON_POS),3,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(LON_POS+3),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(LON_POS+5),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(LON_POS+7),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
23149 CONTINUE
      RETURN
      END
      SUBROUTINE FORMAT_RADIUS (ACO_RADIUS,FMT_RADIUS)
      IMPLICIT NONE
      LOGICAL*1 ACO_RADIUS(100)
      LOGICAL*1 FMT_RADIUS(100)
      INTEGER KK
      INTEGER CTOF
      REAL RADIUS
      INTEGER IRADIUS
      KK =1
      RADIUS =CTOF(ACO_RADIUS,KK)
      IF(.NOT.(ACO_RADIUS(KK).EQ.77))GOTO 23150
      RADIUS =RADIUS / 1852
23150 CONTINUE
      IRADIUS =RADIUS +0.5
      IRADIUS =MAX(1,IRADIUS)
      KK =0
      CALL SMOVI (IRADIUS,FMT_RADIUS,KK)
      CALL SMOV (0,FMT_RADIUS,KK)
      RETURN
      END
      SUBROUTINE FORMAT_BEARING (ACO_BEARING,FMT_BEARING)
      IMPLICIT NONE
      LOGICAL*1 ACO_BEARING(100)
      LOGICAL*1 FMT_BEARING(100)
      INTEGER KK
      INTEGER CTOI
      INTEGER IBRG
      KK =1
      IBRG =CTOI(ACO_BEARING,KK)
23152 IF(.NOT.(IBRG.GT.360))GOTO 23153
      IBRG =IBRG -360
      GOTO 23152
23153 CONTINUE
23154 IF(.NOT.(IBRG.LT.0))GOTO 23155
      IBRG =IBRG +360
      GOTO 23154
23155 CONTINUE
      KK =0
      CALL SMOVI (IBRG,FMT_BEARING,KK)
      CALL SMOV (0,FMT_BEARING,KK)
      RETURN
      END
      INTEGER FUNCTION SHAPETEXT2CODE (ACO_SHAPE)
      IMPLICIT NONE
      INTEGER EQUAL_HV
      INTEGER SHAPECODE
      LOGICAL*1 ACO_SHAPE(80)
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'POINT').EQ.1))GOTO 23156
      SHAPECODE =2
      GOTO 23157
23156 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'CIRCLE').EQ.1))GOTO 23158
      SHAPECODE =3
      GOTO 23159
23158 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'POLYARC').EQ.1))GOTO 23160
      SHAPECODE =6
      GOTO 23161
23160 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'POLYGON').EQ.1))GOTO 23162
      SHAPECODE =7
      GOTO 23163
23162 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'RADARC').EQ.1))GOTO 23164
      SHAPECODE =8
      GOTO 23165
23164 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'ORBIT').EQ.1))GOTO 23166
      SHAPECODE =5
      GOTO 23167
23166 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'LINE').EQ.1))GOTO 23168
      SHAPECODE =1
      GOTO 23169
23168 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'TRACK').EQ.1))GOTO 23170
      SHAPECODE =9
      GOTO 23171
23170 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'CORRIDOR').EQ.1))GOTO 23172
      SHAPECODE =4
      GOTO 23173
23172 CONTINUE
      SHAPECODE =10
23173 CONTINUE
23171 CONTINUE
23169 CONTINUE
23167 CONTINUE
23165 CONTINUE
23163 CONTINUE
23161 CONTINUE
23159 CONTINUE
23157 CONTINUE
      SHAPETEXT2CODE=(SHAPECODE)
      RETURN
      END
      SUBROUTINE ASALOC (TBL,JNAME,NSEG,ISLOTS,IENTRY)
      IMPLICIT NONE
      INTEGER*4 IAS(256000)
      INTEGER*2 IASW(2,256000)
      BYTE IASB(4,256000)
      REAL*8 CAS(128000)
      REAL FAS(256000)
      INTEGER IASP(6,1)
      EQUIVALENCE (IAS,FAS,CAS,IASW,IASB)
      EQUIVALENCE (IAS(7),IASP)
      COMMON /ASBOARD/ IAS
cpar$ private / ASBoard / ! keep FORTRAN from assigning a global section
      INTEGER TBL,NSEG,ISLOTS,IENTRY,INAME
      CHARACTER *(*) JNAME
      INTEGER K,KTBLN,IFLAG
      K=0
      INAME ='20202020'X
      CALL SMOVVN (JNAME,INAME,K)
      IF(.NOT.(TBL.LT.1))GOTO 23174
      RETURN
23174 CONTINUE
      IASP(1,TBL) =13
      IASP(2,TBL) =ISLOTS *IABS(IENTRY)
      IASP(3,TBL) =0
      IASP(4,TBL) =INAME
      IASP(5,TBL) =IENTRY
      IASP(6,TBL) =0
      RETURN
      END
      SUBROUTINE ATOID_LOAD
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      INTEGER NAME_LEN
      INTEGER RETURN_VAL
      INTEGER K,KK
      INTEGER LENLINE
      LOGICAL*1 FILE_NAME(50)
      CHARACTER *50 FILE_NAME_V
      EQUIVALENCE(FILE_NAME,FILE_NAME_V)
      LOGICAL*1 A_LINE(400)
      LOGICAL*1 AI_RCD(400)
      CHARACTER *400 AI_RCD_V
      EQUIVALENCE(AI_RCD,AI_RCD_V)
      INTEGER IPOS,ISIZE
      INTEGER GETWRD,EQUAL
      LOGICAL*1 KEYWORD(80)
      INTEGER  AI_INDX
      INTEGER I
      NAME_LEN =0
      CALL SMOVV ('atoid.dat',FILE_NAME,NAME_LEN)
      CALL SMOV (0,FILE_NAME,NAME_LEN)
      OPEN(UNIT =10,FILE =FILE_NAME_V,STATUS ='unknown',ACCESS =        
     *'sequential',RECL =120,IOSTAT =RETURN_VAL)
      IF(.NOT.(RETURN_VAL.NE.0))GOTO 23176
      PRINT *,'unable to open atoid.dat'
      RETURN
23176 CONTINUE
      AI_INDX=0
23178 CONTINUE
      READ (10,9001,END=8000) AI_RCD_V
      LENLINE =LEN_TRIM(AI_RCD_V)
9001  FORMAT(A)
      K =LENLINE
      CALL SMOV (0,AI_RCD,K)
      CALL UPPER (AI_RCD)
      IPOS =1
      CALL SKIPBL (AI_RCD,IPOS)
      IF(.NOT.(AI_RCD(IPOS).EQ.33.OR.AI_RCD(IPOS).EQ.35))GOTO 23181
      GOTO 23179
23181 CONTINUE
      ISIZE =GETWRD (AI_RCD,IPOS, C_AI_NAME)
      ISIZE =GETWRD (AI_RCD,IPOS, C_AI_UNIQUECHAR)
      AI_INDX =AI_INDX +1
      KK_AI =0
      CALL SMOVH( C_AI_NAME,100,AI_NAME(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_NAME(1,AI_INDX),KK_AI)
      KK_AI =0
      CALL SMOVH( C_AI_UNIQUECHAR,100,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
23179 GOTO 23178
23180 CONTINUE
8000  CLOSE(10)
      AI_USED = AI_INDX
      RETURN
      END
      SUBROUTINE ATOID_ADD (ATOIDC)
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      LOGICAL*1 ATOIDC(8)
      LOGICAL*1 ATOID_UPPERC(8)
      INTEGER EQUAL
      INTEGER  AI_INDX
      INTEGER KK
      AI_INDX= AI_USED
      KK_AI =0
      CALL SMOVH(AI_NAME(1,AI_INDX),100, C_AI_NAME,KK_AI)
      CALL SMOV (0, C_AI_NAME,KK_AI)
      KK =0
      CALL SMOVHN(ATOIDC,100,ATOID_UPPERC,KK)
      CALL SMOV(0,ATOID_UPPERC,KK)
      CALL UPPER(ATOID_UPPERC)
      IF(.NOT.(EQUAL( C_AI_NAME,ATOID_UPPERC).EQ.0))GOTO 23183
       AI_INDX =AI_INDX +1
      IF(.NOT.( AI_INDX.GT. 20))GOTO 23185
      PRINT *,'ATOID History table out of space. Clearing Table'
      AI_INDX=1
23185 CONTINUE
      KK =0
      CALL SMOVH (ATOID_UPPERC,8, C_AI_NAME,KK)
      CALL SMOV (0, C_AI_NAME,KK)
      KK_AI =0
      CALL SMOVH( C_AI_NAME,100,AI_NAME(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_NAME(1,AI_INDX),KK_AI)
      C_AI_UNIQUECHAR(1) =65-1 + AI_INDX
      C_AI_UNIQUECHAR(2) =0
      KK_AI =0
      CALL SMOVH( C_AI_UNIQUECHAR,100,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
      AI_USED = AI_INDX
      CALL ATOID_STORE
23183 CONTINUE
      AI_USED = AI_INDX
      RETURN
      END
      SUBROUTINE ATOID_STORE
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      INTEGER NAME_LEN
      INTEGER RETURN_VAL
      INTEGER K,KK
      INTEGER LENLINE
      LOGICAL*1 FILE_NAME(50)
      CHARACTER *50 FILE_NAME_V
      EQUIVALENCE(FILE_NAME,FILE_NAME_V)
      LOGICAL*1 AI_RCD(400)
      CHARACTER *400 AI_RCD_V
      EQUIVALENCE (AI_RCD,AI_RCD_V)
      INTEGER IPOS,ISIZE
      INTEGER GETWRD,EQUAL
      LOGICAL*1 KEYWORD(80)
      INTEGER  AI_INDX
      INTEGER I
      NAME_LEN =0
      CALL SMOVV ('atoid.dat',FILE_NAME,NAME_LEN)
      CALL SMOV (0,FILE_NAME,NAME_LEN)
      OPEN(UNIT =10,FILE =FILE_NAME_V,STATUS ='unknown',ACCESS =        
     *'sequential',RECL =120,IOSTAT =RETURN_VAL)
      IF(.NOT.(RETURN_VAL.NE.0))GOTO 23187
      PRINT *,'unable to write atoid.dat'
      RETURN
23187 CONTINUE
       AI_INDX =1
23189 IF(.NOT.(AI_INDX.LE. AI_USED))GOTO 23191
      KK_AI =0
      CALL SMOVH(AI_NAME(1,AI_INDX),100, C_AI_NAME,KK_AI)
      CALL SMOV (0, C_AI_NAME,KK_AI)
      KK_AI =0
      CALL SMOVH(AI_UNIQUECHAR(1,AI_INDX),100, C_AI_UNIQUECHAR,KK_AI)
      CALL SMOV (0, C_AI_UNIQUECHAR,KK_AI)
      KK =0
      CALL SMOVH ( C_AI_NAME,100,AI_RCD,KK)
      CALL SMOV (32,AI_RCD,KK)
      CALL SMOVH ( C_AI_UNIQUECHAR,100,AI_RCD,KK)
      CALL SMOV (0,AI_RCD,KK)
      WRITE (10,9001) (AI_RCD_V(1:KK-1))
9001  FORMAT(A)
23190 AI_INDX=AI_INDX+1
      GOTO 23189
23191 CONTINUE
8000  CLOSE(10)
      RETURN
      END
      SUBROUTINE ATOID_FIND (ATOID,ATOID_SUFFIX)
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      LOGICAL*1 ATOID(8)
      LOGICAL*1 ATOID_UPPER(8)
      LOGICAL*1 ATOID_SUFFIX(2)
      INTEGER  AI_INDX
      INTEGER KK
      INTEGER EQUAL
      KK =0
      CALL SMOVHN(ATOID,100,ATOID_UPPER,KK)
      CALL SMOV(0,ATOID_UPPER,KK)
      CALL UPPER(ATOID_UPPER)
       AI_INDX =1
23192 IF(.NOT.(AI_INDX.LE. AI_USED))GOTO 23194
      KK_AI =0
      CALL SMOVH(AI_NAME(1,AI_INDX),100, C_AI_NAME,KK_AI)
      CALL SMOV (0, C_AI_NAME,KK_AI)
      IF(.NOT.(EQUAL( C_AI_NAME,ATOID_UPPER).EQ.1))GOTO 23195
      GOTO 23194
23195 CONTINUE
23193 AI_INDX=AI_INDX+1
      GOTO 23192
23194 CONTINUE
      IF(.NOT.( AI_INDX.LE. AI_USED))GOTO 23197
      KK_AI =0
      CALL SMOVH(AI_UNIQUECHAR(1,AI_INDX),100, C_AI_UNIQUECHAR,KK_AI)
      CALL SMOV (0, C_AI_UNIQUECHAR,KK_AI)
      GOTO 23198
23197 CONTINUE
      KK =0
      CALL SMOV (0, C_AI_UNIQUECHAR,KK)
23198 CONTINUE
      KK =0
      CALL SMOVHN ( C_AI_UNIQUECHAR,100,ATOID_SUFFIX,KK)
      CALL SMOV (0,ATOID_SUFFIX,KK)
      RETURN
      END
      INTEGER FUNCTION CTOIM(IN,I)
      LOGICAL*1 IN(100)
      INTEGER INDEXX
      INTEGER D,I,ISM,CTOI
      LOGICAL*1 DIGITS(11)
      DATA DIGITS(1) /48/
      DATA DIGITS(2) /49/
      DATA DIGITS(3) /50/
      DATA DIGITS(4) /51/
      DATA DIGITS(5) /52/
      DATA DIGITS(6) /53/
      DATA DIGITS(7) /54/
      DATA DIGITS(8) /55/
      DATA DIGITS(9) /56/
      DATA DIGITS(10) /57/
      DATA DIGITS(11) /0/
23199 IF(.NOT.(IN(I).EQ.32.OR.IN(I).EQ.9))GOTO 23200
      I =I +1
      GOTO 23199
23200 CONTINUE
      ISM =1
      IF(.NOT.(IN(I).EQ.45))GOTO 23201
      ISM =-1
      I =I +1
      GOTO 23202
23201 CONTINUE
      IF(.NOT.(IN(I).EQ.43))GOTO 23203
      ISM =1
      I =I +1
23203 CONTINUE
23202 CONTINUE
      CTOI =0
23205 IF(.NOT.(IN(I).NE.0))GOTO 23207
      D =INDEXX(DIGITS,IN(I))
      IF(.NOT.(D.EQ.0))GOTO 23208
      GOTO 23207
23208 CONTINUE
      CTOI =10 *CTOI +D -1
23206 I=I+1
      GOTO 23205
23207 CONTINUE
      CTOIM =CTOI *ISM
      RETURN
      END
      SUBROUTINE CVT_DMS_RAD (INPUT,RADIANS,ERROR)
      IMPLICIT NONE
      LOGICAL*1 INPUT(100)
      CHARACTER *100INPUT_V
      CHARACTER *4 DEG_V
      CHARACTER *4 MIN_V
      CHARACTER *4 SEC_V
      LOGICAL*1 VHEM
      INTEGER*4 ERROR,IDEG,IMIN,ISEC,IHEM,IDEG_MAX,N
      REAL*4 RADIANS
      INTEGER CUPPER,LENGTH,CTOI
      RADIANS =0.0
      ERROR =0
      CALL RS2FS(INPUT,INPUT_V)
      CALL STR_ELEMENT (DEG_V,0,'-',INPUT_V)
      CALL STR_ELEMENT (MIN_V,1,'-',INPUT_V)
      CALL STR_ELEMENT (SEC_V,2,'-',INPUT_V)
      VHEM =CUPPER(INPUT(LENGTH(INPUT)))
      N =1
      IDEG =CTOI (%REF(DEG_V),N)
      N =1
      IMIN =CTOI (%REF(MIN_V),N)
      N =1
      ISEC =CTOI (%REF(SEC_V),N)
      IF(.NOT.(VHEM.EQ.78))GOTO 23210
      IHEM =1
      GOTO 23211
23210 CONTINUE
      IF(.NOT.(VHEM.EQ.83))GOTO 23212
      IHEM =-1
      GOTO 23213
23212 CONTINUE
      IF(.NOT.(VHEM.EQ.69))GOTO 23214
      IHEM =1
      GOTO 23215
23214 CONTINUE
      IF(.NOT.(VHEM.EQ.87))GOTO 23216
      IHEM =-1
      GOTO 23217
23216 CONTINUE
      IHEM =0
23217 CONTINUE
23215 CONTINUE
23213 CONTINUE
23211 CONTINUE
      IF(.NOT.(VHEM.EQ.78.OR.VHEM.EQ.115))GOTO 23218
      IDEG_MAX =90
      GOTO 23219
23218 CONTINUE
      IDEG_MAX =180
23219 CONTINUE
      IF(.NOT.(IDEG.LT.0))GOTO 23220
      ERROR =ERROR +1
23220 CONTINUE
      IF(.NOT.(IDEG.GT.IDEG_MAX))GOTO 23222
      ERROR =ERROR +1
23222 CONTINUE
      IF(.NOT.(IMIN.LT.0))GOTO 23224
      ERROR =ERROR +1
23224 CONTINUE
      IF(.NOT.(IMIN.GT.59))GOTO 23226
      ERROR =ERROR +1
23226 CONTINUE
      IF(.NOT.(ISEC.LT.0))GOTO 23228
      ERROR =ERROR +1
23228 CONTINUE
      IF(.NOT.(ISEC.GT.59))GOTO 23230
      ERROR =ERROR +1
23230 CONTINUE
      IF(.NOT.(IHEM.EQ.0))GOTO 23232
      ERROR =ERROR +1
23232 CONTINUE
      IF(.NOT.(IDEG.EQ.IDEG_MAX.AND.IMIN.GT.0))GOTO 23234
      ERROR =ERROR +1
23234 CONTINUE
      IF(.NOT.(IDEG.EQ.IDEG_MAX.AND.ISEC.GT.0))GOTO 23236
      ERROR =ERROR +1
23236 CONTINUE
      IF(.NOT.(ERROR.EQ.0))GOTO 23238
      RADIANS =3.141592654/180.0 *((IDEG +IMIN/60.0 +ISEC/3600.0 ) *IHEM
     *)
23238 CONTINUE
      END
