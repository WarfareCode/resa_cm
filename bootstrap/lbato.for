      INTEGER FUNCTION GETATOWRD (ATO_RCD,IPOS,KEYWORD)
      IMPLICIT NONE
      LOGICAL*1 ATO_RCD(100)
      CHARACTER *400 A_LINE
      INTEGER IPOS,I,J,LENLINE
      LOGICAL*1 KEYWORD(100)
      IF(.NOT.(IPOS.GT.0.AND.ATO_RCD(IPOS).EQ.47.AND.ATO_RCD(IPOS+1).EQ.
     *47))GOTO 23000
      KEYWORD(1) =0
      GETATOWRD=(0)
      RETURN
23000 CONTINUE
      I =IPOS +1
      J =0
23002 IF(.NOT.(ATO_RCD(I).NE.47))GOTO 23003
      IF(.NOT.(ATO_RCD(I).EQ.0))GOTO 23004
      READ (10,9001,END=8000) A_LINE
      LENLINE =LEN_TRIM(A_LINE)
9001  FORMAT(A)
      CALL FS2RS(A_LINE,ATO_RCD)
      CALL UPPER (ATO_RCD)
      I =1
      GOTO 23002
23004 CONTINUE
      CALL SMOV(ATO_RCD(I),KEYWORD,J)
      I =I +1
      GOTO 23002
23003 CONTINUE
23006 IF(.NOT.(KEYWORD(J).EQ.32.AND.J.GT.0))GOTO 23007
      J =J -1
      GOTO 23006
23007 CONTINUE
      KEYWORD(J+1) =0
      IPOS =I
      GETATOWRD=(J)
      RETURN
8000  CLOSE(10)
      GETATOWRD=(0)
      RETURN
      END
      SUBROUTINE TIMESHIFT(INTIME,TS_DAYS,TS_HOURS,TS_MINUTES,OUTTIME)
      IMPLICIT NONE
      LOGICAL*1 INTIME(100),OUTTIME(100)
      INTEGER TS_DAYS,TS_HOURS,TS_MINUTES
      INTEGER CTOI
      INTEGER KK
      LOGICAL*1 CDAY(3)
      LOGICAL*1 CHOUR(3)
      LOGICAL*1 CMIN(3)
      INTEGER IDAY,IHR,IMIN
      KK =0
      CALL SMOVH (INTIME,2,CDAY,KK)
      CALL SMOV (0,CDAY,KK)
      KK =1
      IDAY =CTOI (CDAY,KK)
      KK =0
      CALL SMOVH (INTIME(3),2,CHOUR,KK)
      CALL SMOV (0,CHOUR,KK)
      KK =1
      IHR =CTOI (CHOUR,KK)
      KK =0
      CALL SMOVH (INTIME(5),2,CMIN,KK)
      CALL SMOV (0,CMIN,KK)
      KK =1
      IMIN =CTOI (CMIN,KK)
      IMIN =IMIN +TS_MINUTES
23008 IF(.NOT.(IMIN.LT.0.OR.IMIN.GE.60))GOTO 23009
      IF(.NOT.(IMIN.LT.0))GOTO 23010
      IMIN =IMIN +60
      IHR =IHR -1
      IF(.NOT.(IHR.LT.0))GOTO 23012
      IHR =23
      IDAY =IDAY -1
      IF(.NOT.(IDAY.LT.1))GOTO 23014
      IDAY =31
23014 CONTINUE
23012 CONTINUE
      GOTO 23011
23010 CONTINUE
      IMIN =IMIN -60
      IHR =IHR +1
      IF(.NOT.(IHR.GE.24))GOTO 23016
      IHR =0
      IDAY =IDAY +1
      IF(.NOT.(IDAY.GT.31))GOTO 23018
      IDAY =1
23018 CONTINUE
23016 CONTINUE
23011 CONTINUE
      GOTO 23008
23009 CONTINUE
      IHR =IHR +TS_HOURS
23020 IF(.NOT.(IHR.LT.0.OR.IHR.GE.24))GOTO 23021
      IF(.NOT.(IHR.LT.0))GOTO 23022
      IHR =IHR +24
      IDAY =IDAY -1
      IF(.NOT.(IDAY.LT.1))GOTO 23024
      IDAY =31
23024 CONTINUE
      GOTO 23023
23022 CONTINUE
      IHR =IHR -24
      IDAY =IDAY +1
      IF(.NOT.(IDAY.GT.31))GOTO 23026
      IDAY =1
23026 CONTINUE
23023 CONTINUE
      GOTO 23020
23021 CONTINUE
      IDAY =IDAY +TS_DAYS
23028 IF(.NOT.(IDAY.LT.0.OR.IDAY.GT.31))GOTO 23029
      IF(.NOT.(IDAY.LT.0))GOTO 23030
      IDAY =IDAY +31
      GOTO 23031
23030 CONTINUE
      IDAY =IDAY -31
23031 CONTINUE
      GOTO 23028
23029 CONTINUE
      KK =0
      CALL SMOVIZ (IDAY,2,OUTTIME,KK)
      CALL SMOVIZ (IHR,2,OUTTIME,KK)
      CALL SMOVIZ (IMIN,2,OUTTIME,KK)
      CALL SMOV (0,OUTTIME,KK)
      RETURN
      END
      SUBROUTINE LEGIT_NAME(ACO_NAME,LEGAL_NAME)
      IMPLICIT NONE
      LOGICAL*1 ACO_NAME(100)
      CHARACTER LEGAL_NAME*24
      LOGICAL*1 CHR
      INTEGER JJ,KK
      INTEGER LENGTH
      KK =0
      LEGAL_NAME =' '
      JJ=1
23032 IF(.NOT.(JJ.LE.LENGTH(ACO_NAME)))GOTO 23034
      CHR =ACO_NAME(JJ)
      IF(.NOT.(CHR.EQ.45.OR.CHR.EQ.61.OR.CHR.EQ.58.OR.CHR.EQ.44.OR.CHR.E
     *Q.32))GOTO 23035
      GOTO 23033
23035 CONTINUE
      CALL VMOV (CHR,LEGAL_NAME,KK)
      IF(.NOT.(KK.GT.24))GOTO 23037
      GOTO 23034
23037 CONTINUE
23033 JJ=JJ+1
      GOTO 23032
23034 CONTINUE
      RETURN
      END
      SUBROUTINE SHORTEN_NAME(ACO_NAME1,MANGLE_NAME)
      IMPLICIT NONE
      LOGICAL*1 ACO_NAME(100)
      LOGICAL*1 ACO_NAME1(100)
      LOGICAL*1 MANGLE_NAME(100)
      LOGICAL*1 CHR
      LOGICAL*1 NUMSTR(100)
      LOGICAL*1 NUMBERS(11)
      INTEGER I,J,JJ,KK
      INTEGER NAMELEN
      INTEGER INDEXX,LENGTH
      INTEGER NUMSTRLEN
      DATA NUMBERS/48,49,50,51,52,53,54,55,56,57,0/
      NAMELEN =LENGTH(ACO_NAME1)
      KK =0
      I=1
23039 IF(.NOT.(I.LE.NAMELEN))GOTO 23041
      IF(.NOT.(ACO_NAME1(I).EQ.32))GOTO 23042
      GOTO 23041
23042 CONTINUE
      IF(.NOT.(ACO_NAME1(I).EQ.40.OR.ACO_NAME1(I).EQ.41))GOTO 23044
      GOTO 23040
23044 CONTINUE
      KK =KK +1
      ACO_NAME(KK) =ACO_NAME1(I)
23040 I=I+1
      GOTO 23039
23041 CONTINUE
      CALL SMOV (0,ACO_NAME,KK)
      NAMELEN =LENGTH(ACO_NAME)
      IF(.NOT.(NAMELEN.LE.8))GOTO 23046
      KK =0
      CALL SMOVHN (ACO_NAME,8,MANGLE_NAME,KK)
      CALL SMOV (0,MANGLE_NAME,KK)
      RETURN
23046 CONTINUE
      I =1
23048 IF(.NOT.(I.LT.NAMELEN))GOTO 23049
      CHR =ACO_NAME(I)
      IF(.NOT.(CHR.EQ.65.OR.CHR.EQ.69.OR.CHR.EQ.73.OR.CHR.EQ.79.OR.CHR.E
     *Q.85))GOTO 23050
      J =I
23052 IF(.NOT.(J.LT.NAMELEN))GOTO 23054
      ACO_NAME(J) =ACO_NAME(J+1)
23053 J=J+1
      GOTO 23052
23054 CONTINUE
      NAMELEN =NAMELEN -1
      GOTO 23051
23050 CONTINUE
      I =I +1
23051 CONTINUE
      GOTO 23048
23049 CONTINUE
      CALL SMOV (0,ACO_NAME,NAMELEN)
      NAMELEN =LENGTH(ACO_NAME)
      IF(.NOT.(NAMELEN.LE.8))GOTO 23055
      KK =0
      CALL SMOVHN (ACO_NAME,8,MANGLE_NAME,KK)
      CALL SMOV (0,MANGLE_NAME,KK)
      RETURN
23055 CONTINUE
      KK =0
      I =NAMELEN
23057 IF(.NOT.(I.GT.0))GOTO 23058
      CHR =ACO_NAME(I)
      IF(.NOT.(INDEXX(NUMBERS,CHR).EQ.0))GOTO 23059
      GOTO 23058
23059 CONTINUE
      I =I -1
      GOTO 23057
23058 CONTINUE
      NUMSTRLEN =NAMELEN -I
      IF(.NOT.(NUMSTRLEN.GT.0))GOTO 23061
      KK =0
      CALL SMOVHN (ACO_NAME(I+1),NUMSTRLEN,NUMSTR,KK)
      CALL SMOV (0,NUMSTR,KK)
23061 CONTINUE
      KK =0
      CALL SMOVHN(ACO_NAME,8-NUMSTRLEN,MANGLE_NAME,KK)
      IF(.NOT.(NUMSTRLEN.GT.0))GOTO 23063
      CALL SMOVHN(NUMSTR,NUMSTRLEN,MANGLE_NAME,KK)
23063 CONTINUE
      CALL SMOV (0,MANGLE_NAME,KK)
      RETURN
      END
      SUBROUTINE FORMAT_POS_LAT (ACO_POS,FMT_POS)
      IMPLICIT NONE
      LOGICAL*1 ACO_POS(100)
      LOGICAL*1 FMT_POS(100)
      INTEGER KK
      INTEGER INDEXX
      INTEGER LON_POS,HEMI_POS
      HEMI_POS =INDEXX(ACO_POS(6),78)
      IF(.NOT.(HEMI_POS.EQ.0))GOTO 23065
      HEMI_POS =INDEXX(ACO_POS(6),83)
23065 CONTINUE
      KK =0
      IF(.NOT.(HEMI_POS.EQ.5))GOTO 23067
      CALL SMOVH (ACO_POS(6),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(8),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(10),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
      LON_POS =11
      GOTO 23068
23067 CONTINUE
      CALL SMOVH (ACO_POS(6),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(8),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(10),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(12),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
23068 CONTINUE
      RETURN
      END
      SUBROUTINE FORMAT_POS_LON (ACO_POS,FMT_POS)
      IMPLICIT NONE
      LOGICAL*1 ACO_POS(100)
      LOGICAL*1 FMT_POS(100)
      INTEGER KK
      INTEGER INDEXX
      INTEGER LON_POS,HEMI_POS
      HEMI_POS =INDEXX(ACO_POS(6),78)
      IF(.NOT.(HEMI_POS.EQ.0))GOTO 23069
      HEMI_POS =INDEXX(ACO_POS(6),83)
23069 CONTINUE
      KK =0
      IF(.NOT.(HEMI_POS.EQ.5))GOTO 23071
      LON_POS =11
      GOTO 23072
23071 CONTINUE
      LON_POS =13
23072 CONTINUE
      HEMI_POS =INDEXX(ACO_POS(LON_POS),69)
      IF(.NOT.(HEMI_POS.EQ.0))GOTO 23073
      HEMI_POS =INDEXX(ACO_POS(LON_POS),87)
23073 CONTINUE
      IF(.NOT.(HEMI_POS.EQ.6))GOTO 23075
      CALL SMOVH (ACO_POS(LON_POS),3,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(LON_POS+3),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(LON_POS+5),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
      GOTO 23076
23075 CONTINUE
      CALL SMOVH (ACO_POS(LON_POS),3,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(LON_POS+3),2,FMT_POS,KK)
      CALL SMOVV ('-',FMT_POS,KK)
      CALL SMOVH (ACO_POS(LON_POS+5),2,FMT_POS,KK)
      CALL SMOV (ACO_POS(LON_POS+7),FMT_POS,KK)
      CALL SMOV (0,FMT_POS,KK)
23076 CONTINUE
      RETURN
      END
      SUBROUTINE FORMAT_RADIUS (ACO_RADIUS,FMT_RADIUS)
      IMPLICIT NONE
      LOGICAL*1 ACO_RADIUS(100)
      LOGICAL*1 FMT_RADIUS(100)
      INTEGER KK
      INTEGER CTOF
      REAL RADIUS
      INTEGER IRADIUS
      KK =1
      RADIUS =CTOF(ACO_RADIUS,KK)
      IF(.NOT.(ACO_RADIUS(KK).EQ.77))GOTO 23077
      RADIUS =RADIUS / 1852
23077 CONTINUE
      IRADIUS =RADIUS +0.5
      IRADIUS =MAX(1,IRADIUS)
      KK =0
      CALL SMOVI (IRADIUS,FMT_RADIUS,KK)
      CALL SMOV (0,FMT_RADIUS,KK)
      RETURN
      END
      SUBROUTINE FORMAT_BEARING (ACO_BEARING,FMT_BEARING)
      IMPLICIT NONE
      LOGICAL*1 ACO_BEARING(100)
      LOGICAL*1 FMT_BEARING(100)
      INTEGER KK
      INTEGER CTOI
      INTEGER IBRG
      KK =1
      IBRG =CTOI(ACO_BEARING,KK)
23079 IF(.NOT.(IBRG.GT.360))GOTO 23080
      IBRG =IBRG -360
      GOTO 23079
23080 CONTINUE
23081 IF(.NOT.(IBRG.LT.0))GOTO 23082
      IBRG =IBRG +360
      GOTO 23081
23082 CONTINUE
      KK =0
      CALL SMOVI (IBRG,FMT_BEARING,KK)
      CALL SMOV (0,FMT_BEARING,KK)
      RETURN
      END
      INTEGER FUNCTION SHAPETEXT2CODE (ACO_SHAPE)
      IMPLICIT NONE
      INTEGER EQUAL_HV
      INTEGER SHAPECODE
      LOGICAL*1 ACO_SHAPE(80)
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'POINT').EQ.1))GOTO 23083
      SHAPECODE =2
      GOTO 23084
23083 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'CIRCLE').EQ.1))GOTO 23085
      SHAPECODE =3
      GOTO 23086
23085 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'POLYARC').EQ.1))GOTO 23087
      SHAPECODE =6
      GOTO 23088
23087 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'POLYGON').EQ.1))GOTO 23089
      SHAPECODE =7
      GOTO 23090
23089 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'RADARC').EQ.1))GOTO 23091
      SHAPECODE =8
      GOTO 23092
23091 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'ORBIT').EQ.1))GOTO 23093
      SHAPECODE =5
      GOTO 23094
23093 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'LINE').EQ.1))GOTO 23095
      SHAPECODE =1
      GOTO 23096
23095 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'TRACK').EQ.1))GOTO 23097
      SHAPECODE =9
      GOTO 23098
23097 CONTINUE
      IF(.NOT.(EQUAL_HV(ACO_SHAPE,'CORRIDOR').EQ.1))GOTO 23099
      SHAPECODE =4
      GOTO 23100
23099 CONTINUE
      SHAPECODE =10
23100 CONTINUE
23098 CONTINUE
23096 CONTINUE
23094 CONTINUE
23092 CONTINUE
23090 CONTINUE
23088 CONTINUE
23086 CONTINUE
23084 CONTINUE
      SHAPETEXT2CODE=(SHAPECODE)
      RETURN
      END
      SUBROUTINE ASALOC (TBL,JNAME,NSEG,ISLOTS,IENTRY)
      IMPLICIT NONE
      INTEGER*4 IAS(256000)
      INTEGER*2 IASW(2,256000)
      BYTE IASB(4,256000)
      REAL*8 CAS(128000)
      REAL FAS(256000)
      INTEGER IASP(6,1)
      EQUIVALENCE (IAS,FAS,CAS,IASW,IASB)
      EQUIVALENCE (IAS(7),IASP)
      COMMON /ASBOARD/ IAS
cpar$ private / ASBoard / ! keep FORTRAN from assigning a global section
      INTEGER TBL,NSEG,ISLOTS,IENTRY,INAME
      CHARACTER *(*) JNAME
      INTEGER K,KTBLN,IFLAG
      K=0
      INAME ='20202020'X
      CALL SMOVVN (JNAME,INAME,K)
      IF(.NOT.(TBL.LT.1))GOTO 23101
      RETURN
23101 CONTINUE
      IASP(1,TBL) =13
      IASP(2,TBL) =ISLOTS *IABS(IENTRY)
      IASP(3,TBL) =0
      IASP(4,TBL) =INAME
      IASP(5,TBL) =IENTRY
      IASP(6,TBL) =0
      RETURN
      END
      SUBROUTINE ATOID_LOAD
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      INTEGER NAME_LEN
      INTEGER RETURN_VAL
      INTEGER K,KK
      INTEGER LENLINE
      LOGICAL*1 FILE_NAME(50)
      CHARACTER *50 FILE_NAME_V
      EQUIVALENCE(FILE_NAME,FILE_NAME_V)
      LOGICAL*1 A_LINE(400)
      LOGICAL*1 AI_RCD(400)
      CHARACTER *400 AI_RCD_V
      EQUIVALENCE(AI_RCD,AI_RCD_V)
      INTEGER IPOS,ISIZE
      INTEGER GETWRD,EQUAL
      LOGICAL*1 KEYWORD(80)
      INTEGER  AI_INDX
      INTEGER I
      NAME_LEN =0
      CALL SMOVV ('atoid.dat',FILE_NAME,NAME_LEN)
      CALL SMOV (0,FILE_NAME,NAME_LEN)
      OPEN(UNIT =10,FILE =FILE_NAME_V,STATUS ='unknown',ACCESS =        
     *'sequential',RECL =120,IOSTAT =RETURN_VAL)
      IF(.NOT.(RETURN_VAL.NE.0))GOTO 23103
      PRINT *,'unable to open atoid.dat'
      RETURN
23103 CONTINUE
      AI_INDX=0
23105 CONTINUE
      READ (10,9001,END=8000) AI_RCD_V
      LENLINE =LEN_TRIM(AI_RCD_V)
9001  FORMAT(A)
      K =LENLINE
      CALL SMOV (0,AI_RCD,K)
      CALL UPPER (AI_RCD)
      IPOS =1
      CALL SKIPBL (AI_RCD,IPOS)
      IF(.NOT.(AI_RCD(IPOS).EQ.33.OR.AI_RCD(IPOS).EQ.35))GOTO 23108
      GOTO 23106
23108 CONTINUE
      ISIZE =GETWRD (AI_RCD,IPOS, C_AI_NAME)
      ISIZE =GETWRD (AI_RCD,IPOS, C_AI_UNIQUECHAR)
      AI_INDX =AI_INDX +1
      KK_AI =0
      CALL SMOVH( C_AI_NAME,100,AI_NAME(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_NAME(1,AI_INDX),KK_AI)
      KK_AI =0
      CALL SMOVH( C_AI_UNIQUECHAR,100,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
23106 GOTO 23105
23107 CONTINUE
8000  CLOSE(10)
      AI_USED = AI_INDX
      RETURN
      END
      SUBROUTINE ATOID_ADD (ATOIDC)
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      LOGICAL*1 ATOIDC(8)
      LOGICAL*1 ATOID_UPPERC(8)
      INTEGER EQUAL
      INTEGER  AI_INDX
      INTEGER KK
      AI_INDX= AI_USED
      KK_AI =0
      CALL SMOVH(AI_NAME(1,AI_INDX),100, C_AI_NAME,KK_AI)
      CALL SMOV (0, C_AI_NAME,KK_AI)
      KK =0
      CALL SMOVHN(ATOIDC,100,ATOID_UPPERC,KK)
      CALL SMOV(0,ATOID_UPPERC,KK)
      CALL UPPER(ATOID_UPPERC)
      IF(.NOT.(EQUAL( C_AI_NAME,ATOID_UPPERC).EQ.0))GOTO 23110
       AI_INDX =AI_INDX +1
      IF(.NOT.( AI_INDX.GT. 20))GOTO 23112
      PRINT *,'ATOID History table out of space. Clearing Table'
      AI_INDX=1
23112 CONTINUE
      KK =0
      CALL SMOVH (ATOID_UPPERC,8, C_AI_NAME,KK)
      CALL SMOV (0, C_AI_NAME,KK)
      KK_AI =0
      CALL SMOVH( C_AI_NAME,100,AI_NAME(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_NAME(1,AI_INDX),KK_AI)
      C_AI_UNIQUECHAR(1) =65-1 + AI_INDX
      C_AI_UNIQUECHAR(2) =0
      KK_AI =0
      CALL SMOVH( C_AI_UNIQUECHAR,100,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
      CALL SMOV (0,AI_UNIQUECHAR(1,AI_INDX),KK_AI)
      AI_USED = AI_INDX
      CALL ATOID_STORE
23110 CONTINUE
      AI_USED = AI_INDX
      RETURN
      END
      SUBROUTINE ATOID_STORE
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      INTEGER NAME_LEN
      INTEGER RETURN_VAL
      INTEGER K,KK
      INTEGER LENLINE
      LOGICAL*1 FILE_NAME(50)
      CHARACTER *50 FILE_NAME_V
      EQUIVALENCE(FILE_NAME,FILE_NAME_V)
      LOGICAL*1 AI_RCD(400)
      CHARACTER *400 AI_RCD_V
      EQUIVALENCE (AI_RCD,AI_RCD_V)
      INTEGER IPOS,ISIZE
      INTEGER GETWRD,EQUAL
      LOGICAL*1 KEYWORD(80)
      INTEGER  AI_INDX
      INTEGER I
      NAME_LEN =0
      CALL SMOVV ('atoid.dat',FILE_NAME,NAME_LEN)
      CALL SMOV (0,FILE_NAME,NAME_LEN)
      OPEN(UNIT =10,FILE =FILE_NAME_V,STATUS ='unknown',ACCESS =        
     *'sequential',RECL =120,IOSTAT =RETURN_VAL)
      IF(.NOT.(RETURN_VAL.NE.0))GOTO 23114
      PRINT *,'unable to write atoid.dat'
      RETURN
23114 CONTINUE
       AI_INDX =1
23116 IF(.NOT.(AI_INDX.LE. AI_USED))GOTO 23118
      KK_AI =0
      CALL SMOVH(AI_NAME(1,AI_INDX),100, C_AI_NAME,KK_AI)
      CALL SMOV (0, C_AI_NAME,KK_AI)
      KK_AI =0
      CALL SMOVH(AI_UNIQUECHAR(1,AI_INDX),100, C_AI_UNIQUECHAR,KK_AI)
      CALL SMOV (0, C_AI_UNIQUECHAR,KK_AI)
      KK =0
      CALL SMOVH ( C_AI_NAME,100,AI_RCD,KK)
      CALL SMOV (32,AI_RCD,KK)
      CALL SMOVH ( C_AI_UNIQUECHAR,100,AI_RCD,KK)
      CALL SMOV (0,AI_RCD,KK)
      WRITE (10,9001) (AI_RCD_V(1:KK-1))
9001  FORMAT(A)
23117 AI_INDX=AI_INDX+1
      GOTO 23116
23118 CONTINUE
8000  CLOSE(10)
      RETURN
      END
      SUBROUTINE ATOID_FIND (ATOID,ATOID_SUFFIX)
      IMPLICIT NONE
      LOGICAL*1 AI_NAME(80, 20),C_AI_NAME(80)
      LOGICAL*1 AI_UNIQUECHAR(80, 20),C_AI_UNIQUECHAR(80)
      INTEGER AI_USED,KK_AI
      COMMON/AICOMMON/AI_USED,KK_AI,AI_NAME,C_AI_NAME,AI_UNIQUECHAR,C_AI
     *_UNIQUECHAR
      LOGICAL*1 ATOID(8)
      LOGICAL*1 ATOID_UPPER(8)
      LOGICAL*1 ATOID_SUFFIX(2)
      INTEGER  AI_INDX
      INTEGER KK
      INTEGER EQUAL
      KK =0
      CALL SMOVHN(ATOID,100,ATOID_UPPER,KK)
      CALL SMOV(0,ATOID_UPPER,KK)
      CALL UPPER(ATOID_UPPER)
       AI_INDX =1
23119 IF(.NOT.(AI_INDX.LE. AI_USED))GOTO 23121
      KK_AI =0
      CALL SMOVH(AI_NAME(1,AI_INDX),100, C_AI_NAME,KK_AI)
      CALL SMOV (0, C_AI_NAME,KK_AI)
      IF(.NOT.(EQUAL( C_AI_NAME,ATOID_UPPER).EQ.1))GOTO 23122
      GOTO 23121
23122 CONTINUE
23120 AI_INDX=AI_INDX+1
      GOTO 23119
23121 CONTINUE
      IF(.NOT.( AI_INDX.LE. AI_USED))GOTO 23124
      KK_AI =0
      CALL SMOVH(AI_UNIQUECHAR(1,AI_INDX),100, C_AI_UNIQUECHAR,KK_AI)
      CALL SMOV (0, C_AI_UNIQUECHAR,KK_AI)
      GOTO 23125
23124 CONTINUE
      KK =0
      CALL SMOV (0, C_AI_UNIQUECHAR,KK)
23125 CONTINUE
      KK =0
      CALL SMOVHN ( C_AI_UNIQUECHAR,100,ATOID_SUFFIX,KK)
      CALL SMOV (0,ATOID_SUFFIX,KK)
      RETURN
      END
      INTEGER FUNCTION CTOIM(IN,I)
      LOGICAL*1 IN(100)
      INTEGER INDEXX
      INTEGER D,I,ISM,CTOI
      LOGICAL*1 DIGITS(11)
      DATA DIGITS(1) /48/
      DATA DIGITS(2) /49/
      DATA DIGITS(3) /50/
      DATA DIGITS(4) /51/
      DATA DIGITS(5) /52/
      DATA DIGITS(6) /53/
      DATA DIGITS(7) /54/
      DATA DIGITS(8) /55/
      DATA DIGITS(9) /56/
      DATA DIGITS(10) /57/
      DATA DIGITS(11) /0/
23126 IF(.NOT.(IN(I).EQ.32.OR.IN(I).EQ.9))GOTO 23127
      I =I +1
      GOTO 23126
23127 CONTINUE
      ISM =1
      IF(.NOT.(IN(I).EQ.45))GOTO 23128
      ISM =-1
      I =I +1
      GOTO 23129
23128 CONTINUE
      IF(.NOT.(IN(I).EQ.43))GOTO 23130
      ISM =1
      I =I +1
23130 CONTINUE
23129 CONTINUE
      CTOI =0
23132 IF(.NOT.(IN(I).NE.0))GOTO 23134
      D =INDEXX(DIGITS,IN(I))
      IF(.NOT.(D.EQ.0))GOTO 23135
      GOTO 23134
23135 CONTINUE
      CTOI =10 *CTOI +D -1
23133 I=I+1
      GOTO 23132
23134 CONTINUE
      CTOIM =CTOI *ISM
      RETURN
      END
      SUBROUTINE CVT_DMS_RAD (INPUT,RADIANS,ERROR)
      IMPLICIT NONE
      LOGICAL*1 INPUT(100)
      CHARACTER *100INPUT_V
      CHARACTER *4 DEG_V
      CHARACTER *4 MIN_V
      CHARACTER *4 SEC_V
      LOGICAL*1 VHEM
      INTEGER*4 ERROR,IDEG,IMIN,ISEC,IHEM,IDEG_MAX,N
      REAL*4 RADIANS
      INTEGER CUPPER,LENGTH,CTOI
      RADIANS =0.0
      ERROR =0
      CALL RS2FS(INPUT,INPUT_V)
      CALL STR_ELEMENT (DEG_V,0,'-',INPUT_V)
      CALL STR_ELEMENT (MIN_V,1,'-',INPUT_V)
      CALL STR_ELEMENT (SEC_V,2,'-',INPUT_V)
      VHEM =CUPPER(INPUT(LENGTH(INPUT)))
      N =1
      IDEG =CTOI (%REF(DEG_V),N)
      N =1
      IMIN =CTOI (%REF(MIN_V),N)
      N =1
      ISEC =CTOI (%REF(SEC_V),N)
      IF(.NOT.(VHEM.EQ.78))GOTO 23137
      IHEM =1
      GOTO 23138
23137 CONTINUE
      IF(.NOT.(VHEM.EQ.83))GOTO 23139
      IHEM =-1
      GOTO 23140
23139 CONTINUE
      IF(.NOT.(VHEM.EQ.69))GOTO 23141
      IHEM =1
      GOTO 23142
23141 CONTINUE
      IF(.NOT.(VHEM.EQ.87))GOTO 23143
      IHEM =-1
      GOTO 23144
23143 CONTINUE
      IHEM =0
23144 CONTINUE
23142 CONTINUE
23140 CONTINUE
23138 CONTINUE
      IF(.NOT.(VHEM.EQ.78.OR.VHEM.EQ.115))GOTO 23145
      IDEG_MAX =90
      GOTO 23146
23145 CONTINUE
      IDEG_MAX =180
23146 CONTINUE
      IF(.NOT.(IDEG.LT.0))GOTO 23147
      ERROR =ERROR +1
23147 CONTINUE
      IF(.NOT.(IDEG.GT.IDEG_MAX))GOTO 23149
      ERROR =ERROR +1
23149 CONTINUE
      IF(.NOT.(IMIN.LT.0))GOTO 23151
      ERROR =ERROR +1
23151 CONTINUE
      IF(.NOT.(IMIN.GT.59))GOTO 23153
      ERROR =ERROR +1
23153 CONTINUE
      IF(.NOT.(ISEC.LT.0))GOTO 23155
      ERROR =ERROR +1
23155 CONTINUE
      IF(.NOT.(ISEC.GT.59))GOTO 23157
      ERROR =ERROR +1
23157 CONTINUE
      IF(.NOT.(IHEM.EQ.0))GOTO 23159
      ERROR =ERROR +1
23159 CONTINUE
      IF(.NOT.(IDEG.EQ.IDEG_MAX.AND.IMIN.GT.0))GOTO 23161
      ERROR =ERROR +1
23161 CONTINUE
      IF(.NOT.(IDEG.EQ.IDEG_MAX.AND.ISEC.GT.0))GOTO 23163
      ERROR =ERROR +1
23163 CONTINUE
      IF(.NOT.(ERROR.EQ.0))GOTO 23165
      RADIANS =3.141592654/180.0 *((IDEG +IMIN/60.0 +ISEC/3600.0 ) *IHEM
     *)
23165 CONTINUE
      END
      SUBROUTINE COPY_TO_STA_PRESCRIPT_BUF (STATION_NBR,LINE2)
      IMPLICIT REAL*8 (A,C)
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER STATION_NBR
      LOGICAL*1 LINE2(800)
      INTEGER*4  KPOINT_STA
      INTEGER*4  INDEX_STA_PRE
      INTEGER*4  I_STA_PRE_CHAR
      INTEGER KK,IAVAIL
      KPOINT_STA=IBBP(1,65)-20771+(20771)*STATION_NBR
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_STA+19),-(1)),'0001'X)).EQ.0))GOTO
     * 23167
      PRINT *,'Station ',STATION_NBR,                                   
     *' is not active.  Skipping order to station.'
23167 CONTINUE
23169 IF(.NOT.((IAND(ISHFT(IBB(KPOINT_STA+49),-(7)),'03FF'X)).GT.0))GOTO
     * 23170
      CALL DELAY(30)
      GOTO 23169
23170 CONTINUE
      INDEX_STA_PRE=0
      KK=1
23171 IF(.NOT.(KK.LE.800))GOTO 23173
      IF(.NOT.(LINE2(KK).EQ.0))GOTO 23174
      GOTO 23173
23174 CONTINUE
      I_STA_PRE_CHAR=LINE2(KK)
      INDEX_STA_PRE=INDEX_STA_PRE+1
      IBB((KPOINT_STA+19851+(INDEX_STA_PRE-1)/4))=IOR(IAND(IBB((KPOINT_S
     *TA+19851+(INDEX_STA_PRE-1)/4)),NOT(ISHFT('00FF'X,(MOD(INDEX_STA_PR
     *E*8-8,32))))),ISHFT(IAND((I_STA_PRE_CHAR),'00FF'X),(MOD(INDEX_STA_
     *PRE*8-8,32))))
23172 KK=KK+1
      GOTO 23171
23173 CONTINUE
      IF(.NOT.(IBB(533).EQ.0))GOTO 23176
      IAVAIL =(IAND(ISHFT(IBB(KPOINT_STA+50),-(0)),'FFFF'X))-(IAND(ISHFT
     *(IBB(KPOINT_STA+50),-(16)),'FFFF'X))
      IF(.NOT.(IAVAIL.LE.0))GOTO 23178
      IAVAIL =9900+IAVAIL
23178 CONTINUE
23180 IF(.NOT.(KK.GE.IAVAIL))GOTO 23181
      CALL DELAY(100)
      IAVAIL =(IAND(ISHFT(IBB(KPOINT_STA+50),-(0)),'FFFF'X))-(IAND(ISHFT
     *(IBB(KPOINT_STA+50),-(16)),'FFFF'X))
      IF(.NOT.(IAVAIL.LE.0))GOTO 23182
      IAVAIL =9900+IAVAIL
23182 CONTINUE
      GOTO 23180
23181 CONTINUE
23176 CONTINUE
      IF(.NOT.(KK.GT.800))GOTO 23184
      PRINT *,'Input line exceeds max line length'
23184 CONTINUE
      IBB(KPOINT_STA+49)=IOR(IAND(IBB(KPOINT_STA+49),NOT(ISHFT('03FF'X,7
     *))),ISHFT(IAND((KK-1),'03FF'X),7))
      RETURN
      END
