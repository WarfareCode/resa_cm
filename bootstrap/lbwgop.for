      SUBROUTINE ODEFINE_FUEL (NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER NARGS
      REAL*8 ARGS(20)
      INTEGER IERROR
      INTEGER STATE_ARG
      INTEGER STATE
      IF(.NOT.(NARGS.EQ.3))GOTO 23000
      STATE_ARG =3
      GOTO 23001
23000 CONTINUE
      STATE_ARG =4
23001 CONTINUE
      IF(.NOT.(ARGS(STATE_ARG).EQ.-20403))GOTO 23002
      STATE =1
      GOTO 23003
23002 CONTINUE
      STATE =0
23003 CONTINUE
      IF(.NOT.(NARGS.EQ.3))GOTO 23004
      IBB(525)=STATE
      IBB(526)=STATE
      IBB(527)=STATE
      GOTO 23005
23004 CONTINUE
      IF(.NOT.(ARGS(3).EQ.-20528))GOTO 23006
      IBB(525)=STATE
      GOTO 23007
23006 CONTINUE
      IF(.NOT.(ARGS(3).EQ.-20015))GOTO 23008
      IBB(526)=STATE
      GOTO 23009
23008 CONTINUE
      IF(.NOT.(ARGS(3).EQ.-20072))GOTO 23010
      IBB(527)=STATE
23010 CONTINUE
23009 CONTINUE
23007 CONTINUE
23005 CONTINUE
      IERROR =0
      RETURN
      END
      SUBROUTINE ODEFINE_WAVE_FACTOR (NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER NARGS
      REAL*8 ARGS(20)
      INTEGER IERROR
      INTEGER I
      INTEGER KPOINT_WVF
      REAL F_WVF_WAVEFUELFACTOR
      I =1
23012 IF(.NOT.(I.LE.NARGS-4))GOTO 23014
      KPOINT_WVF=IBBP(1,146)-1+(1)*(I)
      F_WVF_WAVEFUELFACTOR=ARGS(I+4)
      FBB(KPOINT_WVF)=(F_WVF_WAVEFUELFACTOR)
23013 I=I+1
      GOTO 23012
23014 CONTINUE
      IERROR =0
      RETURN
      END
      SUBROUTINE ODEFINE_HEADING_FACTOR (NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER NARGS
      REAL*8 ARGS(20)
      INTEGER IERROR
      INTEGER I
      INTEGER KPOINT_HWF
      REAL F_HWF_HDG_FUELFACTOR
      INTEGER INDEX_HWF_HDG
      I =5
      KPOINT_HWF=IBBP(1,147)
23015 IF(.NOT.((KPOINT_HWF.GE.IBBP(1,147).AND.KPOINT_HWF.LE.(IBBP(1,147)
     *+IBBP(3,147)-1))))GOTO 23017
      INDEX_HWF_HDG=3
      F_HWF_HDG_FUELFACTOR=ARGS(I)
      FBB((KPOINT_HWF+(INDEX_HWF_HDG-1)*1))=(F_HWF_HDG_FUELFACTOR)
      I =I +1
      INDEX_HWF_HDG=2
      F_HWF_HDG_FUELFACTOR=ARGS(I)
      FBB((KPOINT_HWF+(INDEX_HWF_HDG-1)*1))=(F_HWF_HDG_FUELFACTOR)
      I =I +1
      INDEX_HWF_HDG=1
      F_HWF_HDG_FUELFACTOR=ARGS(I)
      FBB((KPOINT_HWF+(INDEX_HWF_HDG-1)*1))=(F_HWF_HDG_FUELFACTOR)
      I =I +1
23016 KPOINT_HWF=KPOINT_HWF+3
      GOTO 23015
23017 CONTINUE
      I =NARGS
      IERROR =0
      RETURN
      END
      SUBROUTINE INITUNTFUEL (KPOINT_UNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KPOINT_UNT
      INTEGER KPOINT_SHC
      INTEGER INDEX_SHC_TNK
      INTEGER INDEX_UNT_TNK
      KPOINT_SHC=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *31))
      IBB(KPOINT_UNT+79)=IOR(IAND(IBB(KPOINT_UNT+79),NOT(ISHFT('001F'X,1
     *6))),ISHFT(IAND(((IAND(ISHFT(IBB(KPOINT_SHC+18),-(27)),'001F'X))),
     * '001F'X),16))
      IBB(KPOINT_UNT+66)=IOR(IAND(IBB(KPOINT_UNT+66),NOT(ISHFT('007F'X,2
     *1))),ISHFT(IAND(INT(0.5+(0.0 )/0.01),'007F'X),21))
      IBB(KPOINT_UNT+97)=IOR(IAND(IBB(KPOINT_UNT+97),NOT(ISHFT('007F'X,1
     *5))),ISHFT(IAND(INT(0.5+(0.0 )/0.01),'007F'X),15))
      FBB(KPOINT_UNT+99)=( 0.0 )
      FBB(KPOINT_UNT+100)=( 0.0 )
      IBB(KPOINT_UNT+97)=IOR(IAND(IBB(KPOINT_UNT+97),NOT(ISHFT('001F'X,0
     *))),ISHFT(IAND((0 ),'001F'X),0))
      IBB(KPOINT_UNT+97)=IOR(IAND(IBB(KPOINT_UNT+97),NOT(ISHFT('001F'X,5
     *))),ISHFT(IAND((0 ),'001F'X),5))
      IBB(KPOINT_UNT+97)=IOR(IAND(IBB(KPOINT_UNT+97),NOT(ISHFT('0003'X,1
     *0))),ISHFT(IAND((0 ),'0003'X),10))
      IBB(KPOINT_UNT+97)=IOR(IAND(IBB(KPOINT_UNT+97),NOT(ISHFT('0003'X,1
     *2))),ISHFT(IAND((0 ),'0003'X),12))
      IBB(KPOINT_UNT+97)=IOR(IAND(IBB(KPOINT_UNT+97),NOT(ISHFT('0001'X,1
     *4))),ISHFT(IAND((0),'0001'X),14))
      IBB(KPOINT_UNT+79)=IOR(IAND(IBB(KPOINT_UNT+79),NOT(ISHFT('0001'X,3
     *1))),ISHFT(IAND((1),'0001'X),31))
      INDEX_SHC_TNK=1
      INDEX_UNT_TNK=1
      FBB((KPOINT_UNT+102+(INDEX_UNT_TNK-1)*1))=( FBB((KPOINT_SHC+23+(IN
     *DEX_SHC_TNK-1)*2)+1))
      INDEX_SHC_TNK=2
      INDEX_UNT_TNK=2
      FBB((KPOINT_UNT+102+(INDEX_UNT_TNK-1)*1))=( FBB((KPOINT_SHC+23+(IN
     *DEX_SHC_TNK-1)*2)+1))
      RETURN
      END
      SUBROUTINE CHECK_AC_DEQ (KPOINT_UNT,KPOINT_ACC)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 KPOINT_UNT
      INTEGER*4 KPOINT_ACC
      INTEGER*4 KPOINT_DEQ
      INTEGER I_DEQ_IDENT,I_DEQ_PNTR,I_DEQ_REMAINING
      REAL*8 CSTRIP8
      KPOINT_DEQ=IBBP(1,03)-6+(6)*((KPOINT_UNT-IBBP(1,01))/104+1)
23018 IF(.NOT.(KPOINT_DEQ.GE.IBBP(1,03)))GOTO 23020
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_DEQ+2),-(0)),'00FF'X)).NE.20))GOTO
     * 23021
      GOTO 23019
23021 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_DEQ),-(12)),'0FFFFF'X)+IBBP(1,34))
     *.NE.KPOINT_ACC))GOTO 23023
      GOTO 23019
23023 CONTINUE
      RETURN
23019 KPOINT_DEQ=IBBP(1,03)-6+(6)*(IAND(ISHFT(IBB(KPOINT_DEQ+2),-(8)),  
     *'0FFFFF'X))
      GOTO 23018
23020 CONTINUE
      CALL GET_DEQ_ENTRY (KPOINT_UNT,KPOINT_DEQ)
      IF(.NOT.(KPOINT_DEQ.NE.0))GOTO 23025
      CALL ECHOV ('Adding ')
      CALL ECHOHN (CSTRIP8(IBB(KPOINT_ACC)),8)
      CALL ECHOV (' type aircraft to ')
      CALL ECHOHN (CSTRIP8(IBB(KPOINT_UNT)),8)
      CALL ECHOV (' equipment list.')
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+22),-(27)),'0001'X)).EQ.0))GOT
     *O 23027
      IBB(KPOINT_UNT+22)=IOR(IAND(IBB(KPOINT_UNT+22),NOT(ISHFT('0001'X,2
     *7))),ISHFT(IAND((1),'0001'X),27))
      CALL ECHOV (' *')
23027 CONTINUE
      CALL ECHOR
      I_DEQ_IDENT=20
      IBB(KPOINT_DEQ+2)=IOR(IAND(IBB(KPOINT_DEQ+2),NOT(ISHFT('00FF'X,0))
     *),ISHFT(IAND((I_DEQ_IDENT),'00FF'X),0))
      I_DEQ_PNTR=KPOINT_ACC
      IBB(KPOINT_DEQ)=IOR(IAND(IBB(KPOINT_DEQ),NOT(ISHFT('0FFFFF'X,12)))
     *,ISHFT(IAND((I_DEQ_PNTR-IBBP(1,34)),'0FFFFF'X),12))
      I_DEQ_REMAINING=100
      IBB(KPOINT_DEQ+1)=IOR(IAND(IBB(KPOINT_DEQ+1),NOT(ISHFT('07FFFF'X,1
     *3))),ISHFT(IAND((I_DEQ_REMAINING),'07FFFF'X),13))
23025 CONTINUE
      RETURN
      END
      SUBROUTINE ADDORD (IVIEW,ISTA,IADDR,KPOINT_UNT,I_ORD_CIRCUIT,I_ORD
     *_ORIGINATORINDX,ID,ILEN,IINP)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 IINP(47),IADDR,IALFA,C_ORD_ADDRESSEE,C_ORD_WRD_,CSTRIP8
      INTEGER ISTA,KPOINT_UNT,I_ORD_STAINDX,LOOK_BACK,DELTA_MINUTES
      INTEGER DROP /-1/
      INTEGER IVIEW,ILEN,KLEN,ID,INEED,IAVAIL,NARGS,KPOINT_ORD,I_ORD_CIR
     *CUIT,I_ORD_ORIGINATORINDX,I_ORD_NBRARGS,I_ORD_START,I_ORD_ADDINDX,
     *I_ORD_COMINDX,I_ORD_ID,I_ORD_UNIT,I_ORD_CODE,I_ORD_VIEW,I_ORD_PHAS
     *E,I_ORD_SEQUENCE,I_ORD_UP,I_ORD_STATUS,I_ORD_COUNT,INDEX_ORD_WRD
      INTEGER*4  I_ORD_PAT
      INTEGER*4  I_ORD_DTGSTART
      LOGICAL*1 NOROOM(37)
      DATA NOROOM(1)/79/,NOROOM(2)/82/,NOROOM(3)/68/,NOROOM(4)/32/,NOROO
     *M(5)/116/,NOROOM(6)/97/,NOROOM(7)/98/,NOROOM(8)/108/,NOROOM(9)/101
     */,NOROOM(10)/32/,NOROOM(11)/79/,NOROOM(12)/118/,NOROOM(13)/101/,NO
     *ROOM(14)/114/,NOROOM(15)/102/,NOROOM(16)/108/,NOROOM(17)/111/,NORO
     *OM(18)/119/,NOROOM(19)/44/,NOROOM(20)/32/,NOROOM(21)/76/,NOROOM(22
     *)/111/,NOROOM(23)/115/,NOROOM(24)/105/,NOROOM(25)/110/,NOROOM(26)/
     *103/,NOROOM(27)/32/,NOROOM(28)/73/,NOROOM(29)/100/,NOROOM(30)/32/,
     *NOROOM(31)/35/,NOROOM(32)/32/,NOROOM(33)/32/,NOROOM(34)/32/,NOROOM
     *(35)/32/,NOROOM(36)/32/,NOROOM(37)/0/
      INEED =89
      IAVAIL =IBBP(2,07)-((IBBP(1,07)+IBBP(3,07)-1)-IBBP(1,07)+1)
      IF(.NOT.(INEED.GT.IAVAIL.OR.ID.LE.DROP))GOTO 23029
      KLEN =31
      CALL SMOVHN(IALFA(ID),5,NOROOM,KLEN)
      CALL SEND_ (IVIEW,0,36,NOROOM)
      DROP =ID +IINP(7) -IINP(6)
      IF(.NOT.(DROP.EQ.ID))GOTO 23031
      DROP =-1
23031 CONTINUE
      RETURN
23029 CONTINUE
      KPOINT_ORD=(IBBP(1,07)+IBBP(3,07)-1)+1
      I_ORD_NBRARGS=ILEN -6
      IBB(KPOINT_ORD)=IOR(IAND(IBB(KPOINT_ORD),NOT(ISHFT('007F'X,15))),I
     *SHFT(IAND((I_ORD_NBRARGS),'007F'X),15))
      IBBP(3,07)=IBBP(3,07)+(9+(IAND(ISHFT(IBB(KPOINT_ORD),-(15)),      
     *'007F'X))*2)
      I_ORD_PAT=0
      I_ORD_DTGSTART=0
      I_ORD_START=IINP(4)
      IF(.NOT.(I_ORD_START.LT.0))GOTO 23033
      I_ORD_PAT=1
      I_ORD_DTGSTART=1
      I_ORD_START=ABS(I_ORD_START)
23033 CONTINUE
      IF(.NOT.(I_ORD_START.GT.9999))GOTO 23035
      I_ORD_DTGSTART=1
      LOOK_BACK =24 *60
      CALL DTG_TO_DELTA_MIN (I_ORD_START,LOOK_BACK,DELTA_MINUTES)
      I_ORD_START=DELTA_MINUTES +IBB(103)
23035 CONTINUE
      IF(.NOT.(IINP(6).EQ.1.AND.I_ORD_DTGSTART.EQ.0))GOTO 23037
      I_ORD_START=I_ORD_START+IBB(103)
23037 CONTINUE
      IF(.NOT.(I_ORD_START.LT.IBB(184).AND.IINP(6).EQ.1))GOTO 23039
      I_ORD_START=IBB(184)
23039 CONTINUE
      IBB(KPOINT_ORD+8)=(I_ORD_START)
      IBB(KPOINT_ORD+2)=IOR(IAND(IBB(KPOINT_ORD+2),NOT(ISHFT('0001'X,30)
     *)),ISHFT(IAND((I_ORD_PAT),'0001'X),30))
      IBB(KPOINT_ORD+2)=IOR(IAND(IBB(KPOINT_ORD+2),NOT(ISHFT('0001'X,29)
     *)),ISHFT(IAND((I_ORD_DTGSTART),'0001'X),29))
      IBB(KPOINT_ORD+2)=IOR(IAND(IBB(KPOINT_ORD+2),NOT(ISHFT('0001'X,28)
     *)),ISHFT(IAND((0),'0001'X),28))
      C_ORD_ADDRESSEE=IINP(5)
      IF(.NOT.(IINP(5).EQ.-1.0))GOTO 23041
      IF(.NOT.(KPOINT_UNT.NE.0))GOTO 23043
      C_ORD_ADDRESSEE=CSTRIP8(IBB(KPOINT_UNT))
23043 CONTINUE
23041 CONTINUE
      CALL CDRESS8(%REF(C_ORD_ADDRESSEE),IBB(KPOINT_ORD+5))
      IF(.NOT.(KPOINT_UNT.EQ.0))GOTO 23045
      I_ORD_ADDINDX=0
      GOTO 23046
23045 CONTINUE
      I_ORD_ADDINDX=((KPOINT_UNT-IBBP(1,01))/104+1)
23046 CONTINUE
      IBB(KPOINT_ORD+4)=IOR(IAND(IBB(KPOINT_ORD+4),NOT(ISHFT('FFFF'X,0))
     *),ISHFT(IAND((I_ORD_ADDINDX),'FFFF'X),0))
      I_ORD_COMINDX=0
      IBB(KPOINT_ORD+3)=IOR(IAND(IBB(KPOINT_ORD+3),NOT(ISHFT('FFFF'X,16)
     *)),ISHFT(IAND((I_ORD_COMINDX),'FFFF'X),16))
      IBB(KPOINT_ORD+1)=IOR(IAND(IBB(KPOINT_ORD+1),NOT(ISHFT('007F'X,18)
     *)),ISHFT(IAND((I_ORD_CIRCUIT),'007F'X),18))
      IBB(KPOINT_ORD+4)=IOR(IAND(IBB(KPOINT_ORD+4),NOT(ISHFT('FFFF'X,16)
     *)),ISHFT(IAND((I_ORD_ORIGINATORINDX),'FFFF'X),16))
      IF(.NOT.(I_ORD_CIRCUIT.EQ.0.OR.I_ORD_ORIGINATORINDX.EQ.0.OR.I_ORD_
     *ADDINDX.EQ.0.OR.I_ORD_ORIGINATORINDX.EQ.I_ORD_ADDINDX))GOTO 23047
      I_ORD_STATUS=4
      GOTO 23048
23047 CONTINUE
      I_ORD_STATUS=3
23048 CONTINUE
      IBB(KPOINT_ORD+1)=IOR(IAND(IBB(KPOINT_ORD+1),NOT(ISHFT('0007'X,25)
     *)),ISHFT(IAND((I_ORD_STATUS),'0007'X),25))
      I_ORD_ID=ID
      IBB(KPOINT_ORD+1)=IOR(IAND(IBB(KPOINT_ORD+1),NOT(ISHFT('03FFFF'X,0
     *))),ISHFT(IAND((I_ORD_ID),'03FFFF'X),0))
      I_ORD_UNIT=0
      IBB(KPOINT_ORD+2)=IOR(IAND(IBB(KPOINT_ORD+2),NOT(ISHFT('FFFF'X,0))
     *),ISHFT(IAND((I_ORD_UNIT),'FFFF'X),0))
      I_ORD_CODE=IINP(3)
      IBB(KPOINT_ORD)=IOR(IAND(IBB(KPOINT_ORD),NOT(ISHFT('03FF'X,22))),I
     *SHFT(IAND((I_ORD_CODE),'03FF'X),22))
      I_ORD_VIEW=IVIEW
      IBB(KPOINT_ORD+1)=IOR(IAND(IBB(KPOINT_ORD+1),NOT(ISHFT('000F'X,28)
     *)),ISHFT(IAND((I_ORD_VIEW),'000F'X),28))
      I_ORD_STAINDX=ISTA
      IBB(KPOINT_ORD)=IOR(IAND(IBB(KPOINT_ORD),NOT(ISHFT('007F'X,0))),IS
     *HFT(IAND((I_ORD_STAINDX),'007F'X),0))
      I_ORD_PHASE=0
      IBB(KPOINT_ORD+3)=IOR(IAND(IBB(KPOINT_ORD+3),NOT(ISHFT('000F'X,12)
     *)),ISHFT(IAND((I_ORD_PHASE),'000F'X),12))
      I_ORD_SEQUENCE=IINP(6)
      IBB(KPOINT_ORD+3)=IOR(IAND(IBB(KPOINT_ORD+3),NOT(ISHFT('003F'X,0))
     *),ISHFT(IAND((I_ORD_SEQUENCE),'003F'X),0))
      I_ORD_COUNT=IINP(7)
      IBB(KPOINT_ORD+3)=IOR(IAND(IBB(KPOINT_ORD+3),NOT(ISHFT('003F'X,6))
     *),ISHFT(IAND((I_ORD_COUNT),'003F'X),6))
      I_ORD_UP=0
      IBB(KPOINT_ORD+2)=IOR(IAND(IBB(KPOINT_ORD+2),NOT(ISHFT('0001'X,31)
     *)),ISHFT(IAND((I_ORD_UP),'0001'X),31))
      NARGS =ILEN -6
      INDEX_ORD_WRD=1
23049 IF(.NOT.(INDEX_ORD_WRD.LE.NARGS))GOTO 23051
      C_ORD_WRD_=IINP(INDEX_ORD_WRD+7)
      CALL CDRESS8(%REF(C_ORD_WRD_),IBB((KPOINT_ORD+9+(INDEX_ORD_WRD-1)*
     *2)))
23050 INDEX_ORD_WRD=INDEX_ORD_WRD+1
      GOTO 23049
23051 CONTINUE
      RETURN
      END
      SUBROUTINE LOCATE_FIRE_KEYWORDS (IWORD,ILEX)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 NUMSENT,NORD,NARGS,ID_ORD
      INTEGER PLAN_INDEX,FIRE_INDEX,NUCLEAR_INDEX,CRUISE_INDEX,BOL_INDEX
     *,DELAY_INDEX,RANGE_INDEX,SEEKER_INDEX,RBL_INDEX,RBL_SIZE,TRACK_IND
     *EX,POSITION_INDEX,MISSION_INDEX,WAYPOINTS_INDEX,AT_INDEX,TARGET_IN
     *DEX,BRIDGE_INDEX,BE_INDEX,TIN_INDEX,BASE_INDEX,TORPEDO_INDEX,BEARI
     *NG_INDEX,ALTITUDE_INDEX,ENABLERANGE_INDEX,TORPEDOES_INDEX,DEPTH_IN
     *DEX,EXECUTE_INDEX,BALLISTIC_INDEX
      REAL*8 WEAPON_NAME,CNAMES(10)
      COMMON/RTCOMMON_X/ WEAPON_NAME,CNAMES,NUMSENT,NORD,NARGS,ID_ORD,PL
     *AN_INDEX,FIRE_INDEX,NUCLEAR_INDEX,CRUISE_INDEX,BOL_INDEX,DELAY_IND
     *EX,RANGE_INDEX,SEEKER_INDEX,RBL_INDEX,RBL_SIZE,TRACK_INDEX,POSITIO
     *N_INDEX,MISSION_INDEX,WAYPOINTS_INDEX,AT_INDEX,TARGET_INDEX,BRIDGE
     *_INDEX,BE_INDEX,TIN_INDEX,BASE_INDEX,TORPEDO_INDEX,BEARING_INDEX,A
     *LTITUDE_INDEX,ENABLERANGE_INDEX,TORPEDOES_INDEX,DEPTH_INDEX,EXECUT
     *E_INDEX,BALLISTIC_INDEX
      INTEGER IWORD
      REAL*8 ILEX(IWORD)
      INTEGER I
      NARGS =IWORD
      PLAN_INDEX =0
      FIRE_INDEX =0
      NUCLEAR_INDEX =0
      CRUISE_INDEX =0
      BOL_INDEX =0
      DELAY_INDEX =0
      RANGE_INDEX =0
      SEEKER_INDEX =0
      RBL_INDEX =0
      RBL_SIZE =0
      TRACK_INDEX =0
      POSITION_INDEX =0
      MISSION_INDEX =0
      WAYPOINTS_INDEX =0
      AT_INDEX =0
      TARGET_INDEX =0
      BRIDGE_INDEX =0
      BE_INDEX =0
      TIN_INDEX =0
      BASE_INDEX =0
      TORPEDOES_INDEX =0
      BEARING_INDEX =0
      ALTITUDE_INDEX =0
      ENABLERANGE_INDEX =0
      DEPTH_INDEX =0
      BALLISTIC_INDEX =0
      EXECUTE_INDEX =0
      TORPEDO_INDEX =0
      I=1
23052 IF(.NOT.(I.LE.NARGS))GOTO 23054
      IF(.NOT.(ILEX(I).EQ.-20433))GOTO 23055
      PLAN_INDEX =I
      GOTO 23056
23055 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20228))GOTO 23057
      FIRE_INDEX =I
      I =I +2
      GOTO 23058
23057 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20397))GOTO 23059
      NUCLEAR_INDEX =I
      GOTO 23060
23059 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20135))GOTO 23061
      CRUISE_INDEX =I
      GOTO 23062
23061 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20074))GOTO 23063
      BOL_INDEX =I
      I =I +1
      GOTO 23064
23063 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20155))GOTO 23065
      DELAY_INDEX =I
      I =I +1
      GOTO 23066
23065 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20456))GOTO 23067
      RANGE_INDEX =I
      I =I +1
      GOTO 23068
23067 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20519))GOTO 23069
      SEEKER_INDEX =I
      I =I +1
      GOTO 23070
23069 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20458))GOTO 23071
      RBL_INDEX =I
      RBL_SIZE =-20313
      IF(.NOT.(ILEX(I+1).EQ.-20545.OR.ILEX(I+1).EQ.-20344.OR.ILEX(I+1).E
     *Q.-20313))GOTO 23073
      RBL_SIZE =ILEX(I+1)
      I =I +1
23073 CONTINUE
      GOTO 23072
23071 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20611))GOTO 23075
      TRACK_INDEX =I
      I =I +1
      GOTO 23076
23075 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20440))GOTO 23077
      POSITION_INDEX =I
      I =I +2
      GOTO 23078
23077 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20354))GOTO 23079
      MISSION_INDEX =I
      I =I +1
      GOTO 23080
23079 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20646))GOTO 23081
      WAYPOINTS_INDEX =I
      I =I +2
      GOTO 23082
23081 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20041))GOTO 23083
      IF(.NOT.(TORPEDO_INDEX.NE.0))GOTO 23085
      I =I +1
23085 CONTINUE
      AT_INDEX =I
      GOTO 23084
23083 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20585))GOTO 23087
      TARGET_INDEX =I
      IF(.NOT.(ILEX(I+1).EQ.-20076))GOTO 23089
      BRIDGE_INDEX =I +1
      I =I +1
23089 CONTINUE
      I =I +1
      GOTO 23088
23087 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20061))GOTO 23091
      BE_INDEX =I
      I =I +1
      GOTO 23092
23091 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20602))GOTO 23093
      TIN_INDEX =I
      I =I +1
      GOTO 23094
23093 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20053))GOTO 23095
      AT_INDEX =0
      BASE_INDEX =I
      I =I +1
      GOTO 23096
23095 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20608))GOTO 23097
      TORPEDOES_INDEX =I
      I =I +1
      IF(.NOT.(ILEX(I).EQ.-20063))GOTO 23099
      BEARING_INDEX =I
      I =I +1
      GOTO 23100
23099 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20041))GOTO 23101
      AT_INDEX =I
      I =I +1
      TRACK_INDEX =I
23101 CONTINUE
23100 CONTINUE
      IF(.NOT.(I.LT.NARGS))GOTO 23103
      I =I +1
      ENABLERANGE_INDEX =I
      I =I +1
      DEPTH_INDEX =I
23103 CONTINUE
      GOTO 23098
23097 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20051))GOTO 23105
      BALLISTIC_INDEX =I
      GOTO 23106
23105 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20025))GOTO 23107
      ALTITUDE_INDEX =I
      I =I +1
      GOTO 23108
23107 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20063))GOTO 23109
      BEARING_INDEX =I
      I =I +1
      GOTO 23110
23109 CONTINUE
      IF(.NOT.(ILEX(I).EQ.-20211))GOTO 23111
      EXECUTE_INDEX =I
23111 CONTINUE
23110 CONTINUE
23108 CONTINUE
23106 CONTINUE
23098 CONTINUE
23096 CONTINUE
23094 CONTINUE
23092 CONTINUE
23088 CONTINUE
23084 CONTINUE
23082 CONTINUE
23080 CONTINUE
23078 CONTINUE
23076 CONTINUE
23072 CONTINUE
23070 CONTINUE
23068 CONTINUE
23066 CONTINUE
23064 CONTINUE
23062 CONTINUE
23060 CONTINUE
23058 CONTINUE
23056 CONTINUE
23053 I=I+1
      GOTO 23052
23054 CONTINUE
      RETURN
      END
      SUBROUTINE GTUNT(ITYPE,INAME,KPOINT_UNT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 INAME
      INTEGER KPOINT_UNT,ITYPE
      REAL*8 CSTRIP8
      KPOINT_UNT=IBBP(1,01)
23113 IF(.NOT.((KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,01)+I
     *BBP(3,01)-1))))GOTO 23115
      IF(.NOT.(CSTRIP8(IBB(KPOINT_UNT)).NE.INAME))GOTO 23116
      GOTO 23114
23116 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X)).NE.ITYPE)
     *)GOTO 23118
      GOTO 23114
23118 CONTINUE
      RETURN
23114 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23113
23115 CONTINUE
      KPOINT_UNT=0
      RETURN
      END
      SUBROUTINE BLDCMPIM (KPOINT_UNT2,ISPEED,PIMLAT,PIMLON,NPOINTS,PIMI
     *NDX)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KPOINT_UNT2
      REAL PIMLAT(9)
      REAL PIMLON(9)
      INTEGER NPOINTS
      INTEGER PIMINDX
      INTEGER KPOINT_PIM,INDEX_PIM_PTS
      INTEGER ISPEED
      PIMINDX =0
      KPOINT_PIM=IBBP(1,77)
23120 IF(.NOT.((KPOINT_PIM.GE.IBBP(1,77).AND.KPOINT_PIM.LT.(IBBP(1,77)+I
     *BBP(2,77)))))GOTO 23122
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_PIM),-(0)),'FFFF'X)).EQ.0))GOTO 23
     *123
      PIMINDX =((KPOINT_PIM-IBBP(1,77))/29+1)
      GOTO 23122
23123 CONTINUE
23121 KPOINT_PIM=KPOINT_PIM+29
      GOTO 23120
23122 CONTINUE
      IF(.NOT.(PIMINDX.LT.1))GOTO 23125
      RETURN
23125 CONTINUE
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('FFFF'X,0))),IS
     *HFT(IAND((((KPOINT_UNT2-IBBP(1,01))/104+1)),'FFFF'X),0))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('0001'X,21))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_PIM),-(21)),    
     *'0001'X)))),'0001'X),21))
      IBB(115)=1
      IBB(KPOINT_UNT2+77)=IOR(IAND(IBB(KPOINT_UNT2+77),NOT(ISHFT(       
     *'0FFF'X,18))),ISHFT(IAND((PIMINDX),'0FFF'X),18))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('000F'X,16))),I
     *SHFT(IAND((NPOINTS-1),'000F'X),16))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('0001'X,21))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_PIM),-(21)),    
     *'0001'X)))),'0001'X),21))
      IBB(115)=1
      IBB(KPOINT_PIM+1)=IOR(IAND(IBB(KPOINT_PIM+1),NOT(ISHFT('0FFFFF'X,1
     *2))),ISHFT(IAND(INT(0.5+(FBB(461)+FBB(458))/1.0),'0FFFFF'X),12))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('0001'X,20))),I
     *SHFT(IAND((0),'0001'X),20))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('000F'X,22))),I
     *SHFT(IAND((1),'000F'X),22))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('0001'X,21))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_PIM),-(21)),    
     *'0001'X)))),'0001'X),21))
      IBB(115)=1
      INDEX_PIM_PTS=1
23127 IF(.NOT.(INDEX_PIM_PTS.LE.NPOINTS))GOTO 23129
      IBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3))=IOR(IAND(IBB((KPOINT_PIM+2
     *+(INDEX_PIM_PTS-1)*3)),NOT(ISHFT('1FFF'X,18))),ISHFT(IAND((ISPEED)
     *,'1FFF'X),18))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('0001'X,21))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_PIM),-(21)),    
     *'0001'X)))),'0001'X),21))
      IBB(115)=1
      IBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3))=IOR(IAND(IBB((KPOINT_PIM+2
     *+(INDEX_PIM_PTS-1)*3)),NOT(ISHFT('03FFFF'X,0))),ISHFT(IAND((0 ),  
     *'03FFFF'X),0))
      IBB(KPOINT_PIM)=IOR(IAND(IBB(KPOINT_PIM),NOT(ISHFT('0001'X,21))),I
     *SHFT(IAND((IOR('00000001'X,(IAND(ISHFT(IBB(KPOINT_PIM),-(21)),    
     *'0001'X)))),'0001'X),21))
      IBB(115)=1
      FBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3)+1)=( PIMLAT(INDEX_PIM_PTS) 
     *)
      FBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3)+2)=( PIMLON(INDEX_PIM_PTS) 
     *)
23128 INDEX_PIM_PTS=INDEX_PIM_PTS+1
      GOTO 23127
23129 CONTINUE
      IF(.NOT.((IBBP(1,77)+IBBP(3,77)-1).LT.KPOINT_PIM))GOTO 23130
      IBBP(3,77)=((KPOINT_PIM-IBBP(1,77))/29+1)*29
23130 CONTINUE
      RETURN
      END
      INTEGER FUNCTION LAND_TARGET (KPOINT_UNT,KPOINT_CMC)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KPOINT_UNT,KPOINT_CMC
      INTEGER SWATH_OVER_LAND,LAND_IN_CIRCLE
      INTEGER KPOINT_PIM,INDEX_PIM_PTS
      INTEGER INDEX_CMC_RBL,I_CMC_RBL_TARGETRADIUS
      REAL F_PIM_PTS_LATITUDE,F_PIM_PTS_LONGITUDE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_CMC+15),-(31)),'0001'X)).EQ.0))GOT
     *O 23132
      LAND_TARGET=(0)
      RETURN
23132 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+76),-(27)),'0007'X)).EQ. 2))GO
     *TO 23134
      KPOINT_PIM=IBBP(1,77)-29+(29)*(IAND(ISHFT(IBB(KPOINT_UNT+77),-(18)
     *),'0FFF'X))
      INDEX_PIM_PTS=(IAND(ISHFT(IBB(KPOINT_PIM),-(16)),'000F'X))+1
      F_PIM_PTS_LATITUDE=FBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3)+1)
      F_PIM_PTS_LONGITUDE=FBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3)+2)
      INDEX_CMC_RBL=(IAND(ISHFT(IBB(KPOINT_UNT+65),-(22)),'0003'X))
      I_CMC_RBL_TARGETRADIUS=(IAND(ISHFT(IBB((KPOINT_CMC+29+(INDEX_CMC_R
     *BL-1)*1)),-(0)),'007F'X))
      LAND_TARGET =LAND_IN_CIRCLE(F_PIM_PTS_LATITUDE,F_PIM_PTS_LONGITUDE
     *,FLOAT(I_CMC_RBL_TARGETRADIUS))
      GOTO 23135
23134 CONTINUE
      LAND_TARGET =SWATH_OVER_LAND(KPOINT_UNT,KPOINT_CMC)
23135 CONTINUE
      RETURN
      END
      SUBROUTINE PIMTIM (PIMINDX,TIME_TO_COMPLETE_PIM)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER PIMINDX
      REAL TIME_TO_COMPLETE_PIM,CUM_PIM_TIME
      INTEGER KPOINT_PIM
      INTEGER KPOINT_UNT
      REAL FLATS,FLONS,CSLATS
      REAL FLATF,FLONF,CSLATF
      INTEGER I_PIM_LEGNUMBER
      INTEGER I_PIM_NLEGS,NPOINTS
      INTEGER INDEX_PIM_PTS
      REAL RNGSF,BRNGSF
      KPOINT_PIM=IBBP(1,77)-29+(29)*PIMINDX
      KPOINT_UNT=IBBP(1,01)-104+(104)*(IAND(ISHFT(IBB(KPOINT_PIM),-(0)),
     * 'FFFF'X))
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X)).EQ.8))GOT
     *O 23136
      FLATS =FBB(KPOINT_UNT+19)
      FLONS =FBB(KPOINT_UNT+20)
      CSLATS =FBB(KPOINT_UNT+50)
      GOTO 23137
23136 CONTINUE
      FLATS =FBB(KPOINT_UNT+68)
      FLONS =FBB(KPOINT_UNT+69)
      CSLATS =COS(FLATS)
23137 CONTINUE
      I_PIM_LEGNUMBER=(IAND(ISHFT(IBB(KPOINT_PIM),-(22)),'000F'X))
      I_PIM_NLEGS=(IAND(ISHFT(IBB(KPOINT_PIM),-(16)),'000F'X))
      NPOINTS =I_PIM_NLEGS+1
      CUM_PIM_TIME =MAX(0.0,((IAND(ISHFT(IBB(KPOINT_PIM+1),-(12)),      
     *'0FFFFF'X)*1.0*1.0)-FBB(461)-FBB(458)))
      INDEX_PIM_PTS=I_PIM_LEGNUMBER+1
23138 IF(.NOT.(INDEX_PIM_PTS.LE.NPOINTS))GOTO 23140
      FLATF =FBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3)+1)
      FLONF =FBB((KPOINT_PIM+2+(INDEX_PIM_PTS-1)*3)+2)
      CSLATF =COS(FLATF)
      CALL RLL2RB(FLATS,FLONS,CSLATS,FLATF,FLONF,CSLATF,RNGSF,BRNGSF)
      CUM_PIM_TIME =CUM_PIM_TIME +(IAND(ISHFT(IBB((KPOINT_PIM+2+(INDEX_P
     *IM_PTS-1)*3)),-(0)),'03FFFF'X))
      CUM_PIM_TIME =CUM_PIM_TIME +RNGSF/ (IAND(ISHFT(IBB((KPOINT_PIM+2+(
     *INDEX_PIM_PTS-1)*3)),-(18)),'1FFF'X))*60.
      FLATS =FLATF
      FLONS =FLONF
      CSLATS =CSLATF
23139 INDEX_PIM_PTS=INDEX_PIM_PTS+1
      GOTO 23138
23140 CONTINUE
      TIME_TO_COMPLETE_PIM =CUM_PIM_TIME
      RETURN
      END
      INTEGER FUNCTION SWATH_OVER_LAND (KPOINT_UNT,KPOINT_CMC)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KPOINT_UNT,KPOINT_CMC
      INTEGER THE_ELEVATION
      INTEGER UNT_ELEVATION,END_SWATH_ELEVATION
      REAL NTIME,RNGMAX,RANGE
      REAL XLAT,XLON,TRAVEL_PER_MIN
      UNT_ELEVATION =THE_ELEVATION (FBB(KPOINT_UNT+19)*57.29577951,FBB(K
     *POINT_UNT+20)*57.29577951)
      IF(.NOT.(UNT_ELEVATION.GT.0))GOTO 23141
      SWATH_OVER_LAND=(1)
      RETURN
23141 CONTINUE
      XLAT =FBB(KPOINT_UNT+19)
      XLON =FBB(KPOINT_UNT+20)
      NTIME =(IAND(ISHFT(IBB(KPOINT_UNT+40),-(0)),'07FFFFFF'X)*1.0*0.001
     *)-FBB(461)
      TRAVEL_PER_MIN =(IAND(ISHFT(IBB(KPOINT_CMC+10),-(0)),'3FFF'X))*(1.
     */60.)
      RNGMAX =NTIME *TRAVEL_PER_MIN
      RANGE =(IAND(ISHFT(IBB(KPOINT_CMC+11),-(17)),'00FF'X))
      IF(.NOT.(RANGE.GT.RNGMAX))GOTO 23143
      RANGE =RNGMAX
23143 CONTINUE
      CALL RRB2LL (XLAT,XLON,RANGE,0.0,FBB(KPOINT_UNT+18),FBB(KPOINT_UNT
     *+50))
      END_SWATH_ELEVATION =THE_ELEVATION (XLAT*57.29577951,XLON*57.29577
     *951)
      IF(.NOT.(END_SWATH_ELEVATION.GT.0))GOTO 23145
      SWATH_OVER_LAND=(1)
      RETURN
23145 CONTINUE
      SWATH_OVER_LAND=(0)
      RETURN
      END
