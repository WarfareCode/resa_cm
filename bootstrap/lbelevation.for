      SUBROUTINE ODEFINE_TERRAIN_MASKING_STATE(NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      REAL*8 ARGS(46)
      INTEGER NARGS,IERROR
      IF(.NOT.(ARGS(4).EQ.-20407))GOTO 23000
      IBB(514)=1
      GOTO 23001
23000 CONTINUE
      IBB(514)=0
23001 CONTINUE
      RETURN
      END
      SUBROUTINE ODEFINE_TERRAIN_WORLDWIDE(NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      REAL*8 ARGS(46)
      INTEGER NARGS,IERROR
      IF(.NOT.(ARGS(4).EQ.-20407))GOTO 23002
      IBB(116)=1
      GOTO 23003
23002 CONTINUE
      IBB(116)=0
23003 CONTINUE
      RETURN
      END
      SUBROUTINE ODEFINE_SHORELINE_CROSSING(NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      REAL*8 ARGS(46)
      INTEGER NARGS,IERROR
      IF(.NOT.(ARGS(4).EQ.-20407))GOTO 23004
      IBB(515)=1
      GOTO 23005
23004 CONTINUE
      IBB(515)=0
23005 CONTINUE
      RETURN
      END
      SUBROUTINE ODEFINE_TERRAIN(NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      LOGICAL*1 MSG_LIB_MSG(400)
      LOGICAL*1 MSG_LIB_MSGARG(400)
      INTEGER MSG_LIB_MSGLEN
      INTEGER USERORDID
      COMMON /MESSAGE/MSG_LIB_MSG,MSG_LIB_MSGARG,MSG_LIB_MSGLEN,USERORDI
     *D
      REAL*8 ARGS(46)
      INTEGER NARGS,IERROR
      INTEGER SELECTED_POINTS
      INTEGER OK_TO_WRITE
      INTEGER IRC,C_MSYNC_DTED
      INTEGER IFIRST
      DATA OK_TO_WRITE/1/
      DATA IFIRST/1/
      INTEGER IVIEW,MIS_LIB_MSGLEN,LAT_POINTS,LON_POINTS
      REAL DMS2RAD
      IERROR =0
      IVIEW =0
      IF(.NOT.(ARGS(3).LT.1.OR.ARGS(3).GT.10))GOTO 23006
      MIS_LIB_MSGLEN=0
      CALL SMOVV ('Data resolution must be between 1 and 10',MSG_LIB_MSG
     *,MSG_LIB_MSGLEN)
      USERORDID =-1
      IERROR =15
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
23006 CONTINUE
      SELECTED_POINTS =ARGS(6)*ARGS(7)*1200*1200/(ARGS(3)*ARGS(3))/2
      IF(.NOT.(SELECTED_POINTS.GT.((4080+1)*(4080+1))/2.OR.ARGS(6).LT.1.
     *OR.ARGS(6).GT.17.OR.ARGS(7).LT.1.OR.ARGS(7).GT.17))GOTO 23008
      MSG_LIB_MSGLEN =0
      CALL SMOVV ('Selected DTED area exceeds number of points',MSG_LIB_
     *MSG,MSG_LIB_MSGLEN)
      CALL SMOVV (' in 17 by 17 degree area with 500 meter',MSG_LIB_MSG,
     *MSG_LIB_MSGLEN)
      CALL SMOVV (' resolution. Neither dimension may exceed 17.',MSG_LI
     *B_MSG,MSG_LIB_MSGLEN)
      USERORDID =-1
      IERROR =15
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
23008 CONTINUE
      LAT_POINTS =1200/ ARGS(3) *ARGS(7)
      IF(.NOT.(LAT_POINTS.GT.4080))GOTO 23010
      MSG_LIB_MSGLEN =0
      CALL SMOVV ('Selected DTED latitude height and',MSG_LIB_MSG,MSG_LI
     *B_MSGLEN)
      CALL SMOVV (' resolution combination exeeds',MSG_LIB_MSG,MSG_LIB_M
     *SGLEN)
      CALL SMOVV (                                                      
     *' array dimension.  Reduce height and/or resolution.',MSG_LIB_MSG,
     *MSG_LIB_MSGLEN)
      USERORDID =-1
      IERROR =15
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
23010 CONTINUE
      LON_POINTS =1200/ ARGS(3) *ARGS(6)
      IF(.NOT.(LON_POINTS.GT.4080.OR.LAT_POINTS.GT.4080))GOTO 23012
      MSG_LIB_MSGLEN =0
      CALL SMOVV ('Selected DTED longitude width and',MSG_LIB_MSG,MSG_LI
     *B_MSGLEN)
      CALL SMOVV (' resolution combination exeeds',MSG_LIB_MSG,MSG_LIB_M
     *SGLEN)
      CALL SMOVV (' array dimension.  Reduce width and/or resolution.',M
     *SG_LIB_MSG,MSG_LIB_MSGLEN)
      USERORDID =-1
      IERROR =15
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
23012 CONTINUE
      IF(.NOT.(IERROR.GT.0))GOTO 23014
      RETURN
23014 CONTINUE
      IF(.NOT.(IFIRST.EQ.1))GOTO 23016
      IFIRST =0
      CALL MAP_DTED (OK_TO_WRITE)
      N_ELEV_REGIONS =1
      IBB(514)=1
      IBB(515)=1
23016 CONTINUE
      IF(.NOT.(ELEVATION_REGION_RESOLUTION(N_ELEV_REGIONS).EQ.ARGS(3).AN
     *D.ELEVATION_REGION_SWLAT(N_ELEV_REGIONS).EQ.DMS2RAD(AINT(ARGS(4)))
     *.AND.ELEVATION_REGION_SWLON(N_ELEV_REGIONS).EQ.DMS2RAD(AINT(ARGS(5
     *))).AND.ELEVATION_REGION_HEIGHT(N_ELEV_REGIONS).EQ.ARGS(7).AND.ELE
     *VATION_REGION_WIDTH(N_ELEV_REGIONS).EQ.ARGS(6)))GOTO 23018
      RETURN
23018 CONTINUE
      ELEVATION_REGION_RESOLUTION(N_ELEV_REGIONS) =ARGS(3)
      ELEVATION_REGION_SWLAT(N_ELEV_REGIONS) =DMS2RAD(AINT(ARGS(4)))
      ELEVATION_REGION_SWLON(N_ELEV_REGIONS) =DMS2RAD(AINT(ARGS(5)))
      ELEVATION_REGION_HEIGHT(N_ELEV_REGIONS) =ARGS(7)
      ELEVATION_REGION_WIDTH(N_ELEV_REGIONS) =ARGS(6)
      ELEVATION_REGION_ELEVATION_SUB1(N_ELEV_REGIONS) =0
      ELEVATION_REGION_ELEVATION_SUB2(N_ELEV_REGIONS) =0
      CALL LOAD_ELEVATION_STRUCTURE
      IRC =C_MSYNC_DTED((((8 +17 *(17+1) *(17+1))+(1 +26)+((4080+1)*(408
     *0+1))/2)/128) +100*512)
      RETURN
      END
      SUBROUTINE LOAD_ELEVATION_STRUCTURE
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      LOGICAL*1 MSG_LIB_MSG(400)
      LOGICAL*1 MSG_LIB_MSGARG(400)
      INTEGER MSG_LIB_MSGLEN
      INTEGER USERORDID
      COMMON /MESSAGE/MSG_LIB_MSG,MSG_LIB_MSGARG,MSG_LIB_MSGLEN,USERORDI
     *D
      REAL FLON,FLAT
      INTEGER*2 CELL_AREA(16)
      INTEGER*2 RCDFILL(1200)
      INTEGER SW_LAT,SW_LON,DEG_LAT,DEG_LON
      INTEGER*2 SLAT_DEG,WLON_DEG,FIRST_ELEVATION,MAXIMUM_ELEVATION
      INTEGER START_LAT_INDEX,START_LON_INDEX
      INTEGER KK,KKK
      INTEGER IVIEW
      DATA IVIEW/0/
      INTEGER J,K,M,N,IOS,LENGTH,LAT_SIGN,LON_SIGN
      N=1
23020 IF(.NOT.(N.LE.N_ELEV_REGIONS))GOTO 23022
      ELEVATION_REGION_MAX_REGION_ELEVATION(N) =0
      SW_LON =NINT(ELEVATION_REGION_SWLON(N) *57.29577951)
      J =0
23023 IF(.NOT.(J.LT.ELEVATION_REGION_WIDTH(N)))GOTO 23025
      DEG_LON =SW_LON +J
      IF(.NOT.(DEG_LON.GT.180))GOTO 23026
      DEG_LON =DEG_LON -360
23026 CONTINUE
      IF(.NOT.(DEG_LON.GE.0))GOTO 23028
      LON_SIGN =1
      GOTO 23029
23028 CONTINUE
      LON_SIGN =0
23029 CONTINUE
      DEG_LON =ABS(DEG_LON)
      FLON =ELEVATION_REGION_SWLON(N) +J *0.0174533
23030 IF(.NOT.(FLON.GT.3.141592654))GOTO 23031
      FLON =FLON -6.283185307
      GOTO 23030
23031 CONTINUE
23032 IF(.NOT.(FLON.LE.-3.141592654))GOTO 23033
      FLON =FLON +6.283185307
      GOTO 23032
23033 CONTINUE
      SW_LAT =NINT(ELEVATION_REGION_SWLAT(N) *57.29577951)
      K=0
23034 IF(.NOT.(K.LT.ELEVATION_REGION_HEIGHT(N)))GOTO 23036
      DEG_LAT =SW_LAT +K
      IF(.NOT.(DEG_LAT.GE.0))GOTO 23037
      LAT_SIGN =1
      GOTO 23038
23037 CONTINUE
      LAT_SIGN =0
23038 CONTINUE
      DEG_LAT =ABS(DEG_LAT)
      FLAT =ELEVATION_REGION_SWLAT(N) +K *0.0174533
      START_LAT_INDEX =ELEVATION_REGION_ELEVATION_SUB1(N)
      START_LON_INDEX =ELEVATION_REGION_ELEVATION_SUB2(N)
      CALL OPEN_ELEV_CELL(DEG_LAT,DEG_LON,LAT_SIGN,LON_SIGN,IOS)
      MSG_LIB_MSGLEN =0
      IF(.NOT.(IOS.NE.0))GOTO 23039
      CALL SMOVV ('Missing DTED ',MSG_LIB_MSG,MSG_LIB_MSGLEN)
      GOTO 23040
23039 CONTINUE
      CALL SMOVV ('Loading DTED ',MSG_LIB_MSG,MSG_LIB_MSGLEN)
23040 CONTINUE
      CALL SMOVV ('Cell ',MSG_LIB_MSG,MSG_LIB_MSGLEN)
      CALL SMOVI (DEG_LAT,MSG_LIB_MSG,MSG_LIB_MSGLEN)
      IF(.NOT.(LAT_SIGN.EQ.1))GOTO 23041
      CALL SMOVV ('N',MSG_LIB_MSG,MSG_LIB_MSGLEN)
      GOTO 23042
23041 CONTINUE
      CALL SMOVV ('S',MSG_LIB_MSG,MSG_LIB_MSGLEN)
23042 CONTINUE
      CALL SMOVV (' ',MSG_LIB_MSG,MSG_LIB_MSGLEN)
      CALL SMOVI (DEG_LON,MSG_LIB_MSG,MSG_LIB_MSGLEN)
      IF(.NOT.(LON_SIGN.EQ.1))GOTO 23043
      CALL SMOVV ('E',MSG_LIB_MSG,MSG_LIB_MSGLEN)
      GOTO 23044
23043 CONTINUE
      CALL SMOVV ('W',MSG_LIB_MSG,MSG_LIB_MSGLEN)
23044 CONTINUE
      CALL SMOV (0,MSG_LIB_MSG,MSG_LIB_MSGLEN)
      USERORDID =-1
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
      IF(.NOT.(IOS.NE.0))GOTO 23045
      ELEVATION_REGION_MAX_ELEVATION_CELL(K,J,N) =0
      CALL ZERO_ELEVATION_CELL (DEG_LAT,DEG_LON,ELEVATION_POINTS(START_L
     *AT_INDEX,START_LON_INDEX),SW_LAT,SW_LON,ELEVATION_REGION_RESOLUTIO
     *N(N))
      GOTO 23035
23045 CONTINUE
      READ( 71) SLAT_DEG,WLON_DEG,FIRST_ELEVATION,MAXIMUM_ELEVATION,(CEL
     *L_AREA(KK),KK=1,16),(RCDFILL(KKK),KKK=1,1180)
      ELEVATION_REGION_MAX_ELEVATION_CELL(K,J,N) =MAXIMUM_ELEVATION *3.2
     *808
      IF(.NOT.(ELEVATION_REGION_MAX_ELEVATION_CELL(K,J,N).GT.ELEVATION_R
     *EGION_MAX_REGION_ELEVATION(N)))GOTO 23047
      ELEVATION_REGION_MAX_REGION_ELEVATION(N) =ELEVATION_REGION_MAX_ELE
     *VATION_CELL(K,J,N)
23047 CONTINUE
      M=1
23049 IF(.NOT.(M.LE.16))GOTO 23051
      ELEVATION_REGION_MAX_ELEVATION_AREA(M,K,J,N) =CELL_AREA(M) *3.2808
23050 M=M+1
      GOTO 23049
23051 CONTINUE
      IF(.NOT.(ELEVATION_REGION_MAX_ELEVATION_CELL(K,J,N).EQ.0))GOTO 230
     *52
      CALL ZERO_ELEVATION_CELL (DEG_LAT,DEG_LON,ELEVATION_POINTS(START_L
     *AT_INDEX,START_LON_INDEX),SW_LAT,SW_LON,ELEVATION_REGION_RESOLUTIO
     *N(N))
      GOTO 23035
23052 CONTINUE
      CALL LOAD_ELEVATION_CELL (DEG_LAT,DEG_LON,ELEVATION_POINTS(START_L
     *AT_INDEX,START_LON_INDEX),SW_LAT,SW_LON,FIRST_ELEVATION,CELL_AREA,
     *ELEVATION_REGION_RESOLUTION(N))
      CLOSE (UNIT= 71)
23035 K=K+1
      GOTO 23034
23036 CONTINUE
23024 J=J+1
      GOTO 23023
23025 CONTINUE
23021 N=N+1
      GOTO 23020
23022 CONTINUE
      RETURN
      END
      SUBROUTINE LOAD_ELEVATION_CELL (CELL_LAT,CELL_LON,ELEV_GRID,SWLAT,
     *SWLON,FIRST_ELEVATION,CELL_AREA,RESOLUTION)
      IMPLICIT NONE
      INTEGER FIRST_EMPTY
      REAL CELLPNTS
      INTEGER CELL_LAT,CELL_LON
      REAL R_CELL_LON_OFFSET
      INTEGER SWLAT,SWLON
      INTEGER DEG_SWLAT,DEG_SWLON
      REAL TMP_RESOLUTION
      INTEGER*4 RESOLUTION,I_LON,I_LAT
      INTEGER*4 CELL_LON_OFFSET,CELL_LAT_OFFSET
      INTEGER*4 TMP_LON_INDEX,TMP_LAT_INDEX
      INTEGER*4 K_AREA,OFFSET,POINT_COUNTER,I_LAT_COUNT,I_LON_COUNT
      INTEGER*2 ELEV_GRID(0:4080,0:4080)
      INTEGER*2 FIRST_ELEVATION
      INTEGER*2 ACTUAL_ELEVATION
      INTEGER*2 CELL_AREA(16)
      INTEGER*2 INBUF(1200)
      INTEGER INBUF_INDEX
      DATA CELLPNTS/1200/
      CELL_LAT_OFFSET =(CELL_LAT -SWLAT) *CELLPNTS / RESOLUTION
      CELL_LON_OFFSET =(CELL_LON -SWLON)
      IF(.NOT.(CELL_LON_OFFSET.LT.0))GOTO 23054
      CELL_LON_OFFSET =360 -CELL_LON_OFFSET
23054 CONTINUE
      CELL_LON_OFFSET =CELL_LON_OFFSET *CELLPNTS / RESOLUTION
      POINT_COUNTER =0
      TMP_LAT_INDEX =0
      I_LON=0
23056 IF(.NOT.(I_LON.LT.1200))GOTO 23058
      CALL READ_ELV_RECORD(INBUF)
      IF(.NOT.(MOD(I_LON,RESOLUTION).NE.0))GOTO 23059
      GOTO 23057
23059 CONTINUE
      TMP_LON_INDEX =CELL_LON_OFFSET+(I_LON/RESOLUTION)
      I_LAT=0
23061 IF(.NOT.(I_LAT.LT.1200))GOTO 23063
      ACTUAL_ELEVATION =INBUF(I_LAT+1)*3.2808+.5
      ELEV_GRID((CELL_LAT_OFFSET+(I_LAT/RESOLUTION)),TMP_LON_INDEX) =ACT
     *UAL_ELEVATION
23062 I_LAT=I_LAT+RESOLUTION
      GOTO 23061
23063 CONTINUE
23057 I_LON=I_LON+1
      GOTO 23056
23058 CONTINUE
      RETURN
      END
      SUBROUTINE ZERO_ELEVATION_CELL (CELL_LAT,CELL_LON,ELEV_GRID,SWLAT,
     *SWLON,RESOLUTION)
      IMPLICIT NONE
      INTEGER CELL_LAT,CELL_LON
      REAL R_CELL_LON_OFFSET
      INTEGER SWLAT,SWLON
      INTEGER DEG_SWLAT,DEG_SWLON
      REAL TMP_RESOLUTION
      INTEGER RESOLUTION,I_LON,I_LAT
      INTEGER*2 ELEV_GRID(0:4080,0:4080)
      INTEGER*4 CELL_LON_OFFSET,CELL_LAT_OFFSET
      INTEGER*4 LAT_POINTS,LON_POINTS
      INTEGER*4 TMP_LON_INDEX
      CELL_LAT_OFFSET =(CELL_LAT -SWLAT) *1200/ RESOLUTION
      CELL_LON_OFFSET =(CELL_LON -SWLON)
      IF(.NOT.(CELL_LON_OFFSET.LT.0))GOTO 23064
      CELL_LON_OFFSET =360 -CELL_LON_OFFSET
23064 CONTINUE
      CELL_LON_OFFSET =CELL_LON_OFFSET *1200/ RESOLUTION
      TMP_RESOLUTION =1.0/(FLOAT(RESOLUTION))
      LAT_POINTS =1200*TMP_RESOLUTION
      LON_POINTS =1200*TMP_RESOLUTION
      I_LON=0
23066 IF(.NOT.(I_LON.LT.LON_POINTS))GOTO 23068
      TMP_LON_INDEX =CELL_LON_OFFSET+I_LON
      I_LAT =0
23069 IF(.NOT.(I_LAT.LT.LAT_POINTS))GOTO 23071
      ELEV_GRID(CELL_LAT_OFFSET+I_LAT,TMP_LON_INDEX)=0
23070 I_LAT=I_LAT+1
      GOTO 23069
23071 CONTINUE
23067 I_LON=I_LON+1
      GOTO 23066
23068 CONTINUE
      RETURN
      END
      SUBROUTINE READ_ELV_RECORD(INBUF)
      IMPLICIT NONE
      INTEGER*2 INBUF(1200)
      READ ( 71) INBUF
      RETURN
      END
      REAL FUNCTION NAT2LAT(NATINDX)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER IV,NATINDX
      REAL RLAT
      IV =(NATINDX-1) / 72
      RLAT =FBB(224)+IV *5 *0.0174533
      NAT2LAT=(RLAT )
      RETURN
      END
      REAL FUNCTION NAT2LON(NATINDX)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER IH,NATINDX
      REAL RLON
      IH =MOD (NATINDX-1,72)
      RLON =FBB(225)+IH *5 *0.0174533
23072 IF(.NOT.(RLON.GT.3.141592654))GOTO 23073
      RLON =RLON -6.283185307
      GOTO 23072
23073 CONTINUE
23074 IF(.NOT.(RLON.LE.-3.141592654))GOTO 23075
      RLON =RLON +6.283185307
      GOTO 23074
23075 CONTINUE
      NAT2LON=(RLON )
      RETURN
      END
      SUBROUTINE OPEN_ELEV_CELL(DEG_LAT,DEG_LON,LAT_SIGN,LON_SIGN,IOS)
      IMPLICIT NONE
      INTEGER IOS
      INTEGER DEG_LON,DEG_LAT,LAT_SIGN,LON_SIGN
      INTEGER LEN
      INTEGER LENBUF,TRNLOG_V,KK
      LOGICAL*1 TBUF(100)
      CHARACTER *100V_OUTFILE
      LOGICAL*1 OUTFILE(100)
      EQUIVALENCE (V_OUTFILE,OUTFILE)
      LENBUF =TRNLOG_V('ELV_PATH',TBUF)
      V_OUTFILE =' '
      KK =0
      CALL SMOVH (TBUF,LENBUF,OUTFILE,KK)
      CALL SMOVVN ('DTED_',OUTFILE,KK)
      IF(.NOT.(LAT_SIGN.EQ.1))GOTO 23076
      CALL SMOVVN('N',OUTFILE,KK)
      GOTO 23077
23076 CONTINUE
      CALL SMOVVN('S',OUTFILE,KK)
23077 CONTINUE
      CALL SMOVIZ (DEG_LAT,2,OUTFILE,KK)
      IF(.NOT.(LON_SIGN.EQ.1))GOTO 23078
      CALL SMOVVN('E',OUTFILE,KK)
      GOTO 23079
23078 CONTINUE
      CALL SMOVVN('W',OUTFILE,KK)
23079 CONTINUE
      CALL SMOVIZ (DEG_LON,3,OUTFILE,KK)
      CALL SMOVVN ('_1.ELV',OUTFILE,KK)
      IOS=0
      OPEN (UNIT= 71,FILE=V_OUTFILE,FORM='unformatted',RECL=1200*2/4,STA
     *TUS='old',ACCESS ='sequential',IOSTAT=IOS)
      RETURN
      END
      INTEGER FUNCTION ABOVE_TERRAIN (DETLAT,DETLON,COSDETLAT,SQRTDETALT
     *,TGTLAT,TGTLON,COSTGTLAT,SQRTTGTALT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      REAL DETLAT,DETLON,TGTLAT,TGTLON,COSDETLAT,SQRTDETALT,COSTGTLAT,SQ
     *RTTGTALT
      REAL HORIZON
      REAL RANGE
      REAL DETALT
      REAL TGTALT
      REAL TERRAIN_RES
      REAL CELLPNTS
      REAL DETX
      REAL DETY
      REAL TGTX
      REAL TGTY
      REAL SWLAT
      REAL SWLON
      REAL TANALT
      REAL SINGND
      REAL COSGND
      REAL BEGX
      REAL BEGY
      INTEGER AREA_INDEX
      INTEGER X_AREA_INDEX
      INTEGER Y_AREA_INDEX
      INTEGER IYDEGY,IXDEGX
      REAL ELVTN
      INTEGER INDXELEV,I_TMINUSD,IR,DEGX,DEGY
      REAL*4 SRTX,SRTY,ENDX,ENDY,SRTALT,ENDALT
      REAL*4 DX,DY,R,SLOPEGND,BGND
      REAL*4 BNDX,BNDY,ELEVATION,X,Y,XP,YP
      REAL*4 PDY,PTHALT,PTHALT1,PTHALT2,TY
      REAL*8 AREAX,AREAY,CX,CY,AX,AY
      DATA CELLPNTS/1200/
      ABOVE_TERRAIN =1
      IF(.NOT.(IBB(116).EQ.0.AND.N_ELEV_REGIONS.EQ.0))GOTO 23080
      ABOVE_TERRAIN =1
      RETURN
23080 CONTINUE
      IF(.NOT.(IBB(514).EQ.0))GOTO 23082
      ABOVE_TERRAIN =1
      RETURN
23082 CONTINUE
      INDXELEV =1
      DETALT =SQRTDETALT *SQRTDETALT
      TGTALT =SQRTTGTALT *SQRTTGTALT
      IF(.NOT.(IBB(116).EQ.0.AND.DETALT.GT.ELEVATION_REGION_MAX_REGION_E
     *LEVATION(INDXELEV).AND.TGTALT.GT.ELEVATION_REGION_MAX_REGION_ELEVA
     *TION(INDXELEV)))GOTO 23084
      ABOVE_TERRAIN =1
      RETURN
23084 CONTINUE
      SWLAT=ELEVATION_REGION_SWLAT(INDXELEV)
      SWLON=ELEVATION_REGION_SWLON(INDXELEV)
      IF(.NOT.(IBB(116).EQ.0.AND.(DETLAT.LT.SWLAT.OR.DETLAT.GE.SWLAT+ELE
     *VATION_REGION_HEIGHT(INDXELEV)*0.0174533)))GOTO 23086
      ABOVE_TERRAIN =1
      RETURN
23086 CONTINUE
      IF(.NOT.(IBB(116).EQ.0.AND.(DETLON.LT.SWLON.OR.DETLON.GE.SWLON+ELE
     *VATION_REGION_WIDTH(INDXELEV)*0.0174533)))GOTO 23088
      ABOVE_TERRAIN =1
      RETURN
23088 CONTINUE
      IF(.NOT.(IBB(116).EQ.0.AND.(TGTLAT.LT.SWLAT.OR.TGTLAT.GE.SWLAT+ELE
     *VATION_REGION_HEIGHT(INDXELEV)*0.0174533)))GOTO 23090
      ABOVE_TERRAIN =1
      RETURN
23090 CONTINUE
      IF(.NOT.(IBB(116).EQ.0.AND.(TGTLON.LT.SWLON.OR.TGTLON.GE.SWLON+ELE
     *VATION_REGION_WIDTH(INDXELEV)*0.0174533)))GOTO 23092
      ABOVE_TERRAIN =1
      RETURN
23092 CONTINUE
      TERRAIN_RES =ELEVATION_REGION_RESOLUTION(INDXELEV)
      DETY =(DETLAT -SWLAT) *57.29577951*CELLPNTS / TERRAIN_RES
      DETX =(DETLON -SWLON)
      IF(.NOT.(DETX.LT.0.))GOTO 23094
      DETX =6.283185307-DETX
23094 CONTINUE
      DETX =DETX *57.29577951*CELLPNTS / TERRAIN_RES
      TGTY =(TGTLAT -SWLAT) *57.29577951*CELLPNTS / TERRAIN_RES
      TGTX =(TGTLON -SWLON)
      IF(.NOT.(TGTX.LT.0.))GOTO 23096
      TGTX =6.283185307-TGTX
23096 CONTINUE
      TGTX =TGTX *57.29577951*CELLPNTS / TERRAIN_RES
      IF(.NOT.(DETX.LE.TGTX))GOTO 23098
      SRTX =DETX
      SRTY =DETY
      ENDX =TGTX
      ENDY =TGTY
      SRTALT =DETALT
      ENDALT =TGTALT
      I_TMINUSD=1
      GOTO 23099
23098 CONTINUE
      SRTX =TGTX
      SRTY =TGTY
      ENDX =DETX
      ENDY =DETY
      SRTALT =TGTALT
      ENDALT =DETALT
      I_TMINUSD=0
23099 CONTINUE
      DX =ENDX -SRTX
      DY =ENDY -SRTY
      R =SQRT(DX*DX +DY*DY)
      IF(.NOT.(R.EQ.0))GOTO 23100
      ABOVE_TERRAIN =1
      RETURN
23100 CONTINUE
      RANGE =R *TERRAIN_RES / CELLPNTS *0.0174533*3440.082*.5 *(COSDETLA
     *T +COSTGTLAT)
      IF(.NOT.(I_TMINUSD.EQ.1))GOTO 23102
      TANALT =(TGTALT -DETALT) *0.3048/ (100. *TERRAIN_RES) / R
      GOTO 23103
23102 CONTINUE
      TANALT =(DETALT -TGTALT) *0.3048/ (100. *TERRAIN_RES) / R
23103 CONTINUE
      HORIZON =1.25 *(SQRTDETALT +SQRTTGTALT)
      IF(.NOT.(RANGE.GT.HORIZON))GOTO 23104
      ABOVE_TERRAIN =0
      RETURN
23104 CONTINUE
      SINGND =DY/R
      COSGND =DX/R
      IF(.NOT.(ENDX.NE.SRTX))GOTO 23106
      SLOPEGND =(ENDY -SRTY) / (ENDX -SRTX)
      BGND =SRTY -SLOPEGND *SRTX
      GOTO 23107
23106 CONTINUE
      SLOPEGND =999999.
      BGND =999999.
23107 CONTINUE
      X =SRTX
      Y =SRTY
      DEGX =CELLPNTS / TERRAIN_RES
      DEGY =DEGX
      AREAX =DEGX *.25
      AREAY =AREAX
23108 IF(.NOT.(X.LE.ENDX))GOTO 23109
      CX =INT(X/DEGX) *DEGX +DEGX
      IF(.NOT.(ENDY.LT.SRTY))GOTO 23110
      CY =INT(Y/DEGY) *DEGY
      IF(.NOT.(CY.EQ.Y))GOTO 23112
      CY =CY -DEGY
23112 CONTINUE
      GOTO 23111
23110 CONTINUE
      CY =INT(Y/DEGY) *DEGY +DEGY
23111 CONTINUE
      TY =SLOPEGND *CX +BGND
      IF(.NOT.(TY.GT.CY))GOTO 23114
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23116
      BNDX =CX
      BNDY =SLOPEGND *CX +BGND
      GOTO 23117
23116 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23118
      BNDX =CX
      BNDY =Y
      GOTO 23119
23118 CONTINUE
      BNDX =X
      BNDY =CY
23119 CONTINUE
23117 CONTINUE
      GOTO 23115
23114 CONTINUE
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23120
      BNDX =(CY -BGND) / SLOPEGND
      BNDY =CY
      GOTO 23121
23120 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23122
      BNDX =CX
      BNDY =Y
      GOTO 23123
23122 CONTINUE
      BNDX =X
      BNDY =CY
23123 CONTINUE
23121 CONTINUE
23115 CONTINUE
      PTHALT1 =SRTALT
      PTHALT2 =SRTALT +TANALT *SQRT ((BNDX-X)*(BNDX-X) +(BNDY-Y)*(BNDY-Y
     *)) *TERRAIN_RES *100 *3.2808
      PTHALT =MIN(PTHALT1,PTHALT2)
      IYDEGY =NINT(Y/DEGY)
      IXDEGX =NINT(X/DEGX)
      ELVTN =ELEVATION_REGION_MAX_ELEVATION_CELL(IYDEGY,IXDEGX,INDXELEV)
      IF(.NOT.(PTHALT.GT.ELVTN))GOTO 23124
      X =BNDX
      Y =BNDY
      SRTALT =PTHALT2
      PDY =SRTY -Y
      IF(.NOT.(ABS(PDY).GT.ABS(DY)))GOTO 23126
      GOTO 23109
23126 CONTINUE
      GOTO 23108
23124 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.999999.))GOTO 23128
      PDY =SRTY -Y
      IF(.NOT.(ABS(PDY).GT.ABS(DY)))GOTO 23130
      GOTO 23109
23130 CONTINUE
23128 CONTINUE
      CX =INT(X/DEGX) *DEGX
      CY =INT(Y/DEGY) *DEGY
23132 CONTINUE
      IF(.NOT.(X.GT.ENDX))GOTO 23135
      RETURN
23135 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.999999.))GOTO 23137
      PDY =SRTY -Y
      IF(.NOT.(ABS(PDY).GT.ABS(DY)))GOTO 23139
      GOTO 23109
23139 CONTINUE
23137 CONTINUE
      X_AREA_INDEX =INT((X -CX) / ((CELLPNTS/4.)/TERRAIN_RES))
      Y_AREA_INDEX =(Y -CY) / ((CELLPNTS/4.)/TERRAIN_RES) +1
      AREA_INDEX =4 *X_AREA_INDEX +Y_AREA_INDEX
      IF(.NOT.(X_AREA_INDEX.LT.0.OR.X_AREA_INDEX.GT.3))GOTO 23141
      GOTO 23134
23141 CONTINUE
      IF(.NOT.(Y_AREA_INDEX.LT.1.OR.Y_AREA_INDEX.GT.4))GOTO 23143
      GOTO 23134
23143 CONTINUE
      AX =INT(X/AREAX) *AREAX +AREAX
      IF(.NOT.(ENDY.LT.SRTY))GOTO 23145
      AY =INT(Y/AREAY) *AREAY
      IF(.NOT.(AY.EQ.Y))GOTO 23147
      AY =AY -AREAY
23147 CONTINUE
      GOTO 23146
23145 CONTINUE
      AY =INT(Y/AREAY) *AREAY +AREAY
23146 CONTINUE
      TY =SLOPEGND *AX +BGND
      IF(.NOT.(TY.LT.AY))GOTO 23149
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23151
      BNDX =AX
      BNDY =TY
      GOTO 23152
23151 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23153
      BNDX =AX
      BNDY =Y
      GOTO 23154
23153 CONTINUE
      BNDX =X
      BNDY =AY
23154 CONTINUE
23152 CONTINUE
      GOTO 23150
23149 CONTINUE
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23155
      BNDX =(AY -BGND) / SLOPEGND
      BNDY =AY
      GOTO 23156
23155 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23157
      BNDX =AX
      BNDY =Y
      GOTO 23158
23157 CONTINUE
      BNDX =X
      BNDY =AY
23158 CONTINUE
23156 CONTINUE
23150 CONTINUE
      IF(.NOT.(BNDX.GT.ENDX))GOTO 23159
      XP =ENDX -X
      YP =ENDY -Y
      GOTO 23160
23159 CONTINUE
      XP =BNDX -X
      YP =BNDY -Y
23160 CONTINUE
      YP =MIN(ABS(DY),ABS(YP))
      R =SQRT(XP *XP +YP *YP)
      PTHALT1 =SRTALT
      PTHALT2 =SRTALT +TANALT *R *TERRAIN_RES *100. *3.2808
      PTHALT =MIN(PTHALT1,PTHALT2)
      IF(.NOT.(PTHALT.GT.ELEVATION_REGION_MAX_ELEVATION_AREA(AREA_INDEX,
     *Y/DEGY,X/DEGX,AREA_INDEX)))GOTO 23161
      X =BNDX
      Y =BNDY
      SRTALT =PTHALT2
      GOTO 23133
23161 CONTINUE
      BEGX =X
      BEGY =Y
      IR =0
23163 IF(.NOT.(IR.LE.R))GOTO 23165
      X =BEGX +COSGND *IR
      Y =BEGY +SINGND *IR
      ELEVATION =ELEVATION_POINTS(Y,X)
      PTHALT =SRTALT +TANALT *IR *TERRAIN_RES *100. *3.2808
      IF(.NOT.(ELEVATION.GT.PTHALT))GOTO 23166
      ABOVE_TERRAIN =0
      RETURN
23166 CONTINUE
23164 IR=IR+1
      GOTO 23163
23165 CONTINUE
      X =BNDX
      Y =BNDY
      SRTALT =PTHALT2
23133 GOTO 23132
23134 CONTINUE
      GOTO 23108
23109 CONTINUE
      RETURN
      END
      INTEGER FUNCTION LOS_TEST (DETLAT,DETLON,COSDETLAT,SQRTDETALT,TGTL
     *AT,TGTLON,COSTGTLAT,SQRTTGTALT)
      IMPLICIT NONE
      INTEGER ABOVE_TERRAIN
      REAL DETLAT,DETLON,COSDETLAT,SQRTDETALT
      REAL TGTLAT,TGTLON,COSTGTLAT,SQRTTGTALT
      LOS_TEST =ABOVE_TERRAIN (DETLAT,DETLON,COSDETLAT,SQRTDETALT,TGTLAT
     *,TGTLON,COSTGTLAT,SQRTTGTALT)
      RETURN
      END
      INTEGER FUNCTION THE_ELEVATION(LAT,LON)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL LAT,LON
      INTEGER ELEVATION,EARTH_ELEVATION
      IF(.NOT.(IBB(116).EQ.0))GOTO 23168
      ELEVATION =EARTH_ELEVATION(LAT*0.0174533,LON*0.0174533)
      GOTO 23169
23168 CONTINUE
      CALL RESA_WORLDWIDE_ELEVATION(LAT,LON,ELEVATION)
23169 CONTINUE
      THE_ELEVATION=ELEVATION
      RETURN
      END
      INTEGER FUNCTION EARTH_ELEVATION(LAT,LON)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      REAL LAT,LON,SWLAT,SWLON
      REAL CELLPNTS
      REAL TERRAIN_RES
      DATA CELLPNTS/1200/
      INTEGER INDXELEV
      REAL X,Y
      IF(.NOT.(N_ELEV_REGIONS.EQ.0))GOTO 23170
      EARTH_ELEVATION=(0 )
      RETURN
23170 CONTINUE
      INDXELEV =1
      SWLAT=ELEVATION_REGION_SWLAT(INDXELEV)
      SWLON=ELEVATION_REGION_SWLON(INDXELEV)
      IF(.NOT.(LAT.LT.SWLAT.OR.LAT.GE.SWLAT+ELEVATION_REGION_HEIGHT(INDX
     *ELEV)*0.0174533))GOTO 23172
      EARTH_ELEVATION=(0 )
      RETURN
23172 CONTINUE
      IF(.NOT.(LON.LT.SWLON.OR.LON.GE.SWLON+ELEVATION_REGION_WIDTH(INDXE
     *LEV)*0.0174533))GOTO 23174
      EARTH_ELEVATION=(0 )
      RETURN
23174 CONTINUE
      TERRAIN_RES =ELEVATION_REGION_RESOLUTION(INDXELEV)
      X =(LON -ELEVATION_REGION_SWLON(INDXELEV))
      IF(.NOT.(X.LT.0))GOTO 23176
      X =6.283185307-X
23176 CONTINUE
      X =X *57.29577951*CELLPNTS / TERRAIN_RES
      Y =(LAT -ELEVATION_REGION_SWLAT(INDXELEV)) *57.29577951*CELLPNTS /
     * TERRAIN_RES
      EARTH_ELEVATION =ELEVATION_POINTS(NINT(Y),NINT(X))
      RETURN
      END
      SUBROUTINE ZERO_GRID(ELEV_GRID)
      IMPLICIT NONE
      INTEGER*2 ELEV_GRID(0:4080,0:4080)
      INTEGER*2 I_LON,I_LAT
      I_LON=0
23178 IF(.NOT.(I_LON.LT.4080))GOTO 23180
      I_LAT=0
23181 IF(.NOT.(I_LAT.LT.4080))GOTO 23183
      ELEV_GRID(I_LAT,I_LON) =0
23182 I_LAT=I_LAT+1
      GOTO 23181
23183 CONTINUE
23179 I_LON=I_LON+1
      GOTO 23178
23180 CONTINUE
      RETURN
      END
      SUBROUTINE MAP_DTED(OK_TO_WRITE)
      IMPLICIT NONE
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      LOGICAL*1 FNAME(100),SNAME(100),SECTION_NAME(60)
      INTEGER NPAGES,PAGES_MAPPED,FOPENM,FPMAP_DTED
      INTEGER OK_TO_WRITE
      CHARACTER *100FILE_NAME
      EQUIVALENCE (FNAME,FILE_NAME)
      LOGICAL*4 FILE_PRESENT
      INTEGER SEG_JFN
      INTEGER ILEN,I,IERR
      NPAGES =(((8 +17 *(17+1) *(17+1))+(1 +26)+((4080+1)*(4080+1))/2)/1
     *28) +100
      ILEN =0
      CALL SMOVVN ('DTED.AA',FNAME,ILEN)
      CALL SMOV (0,FNAME,ILEN)
      ILEN =0
      CALL SMOV (0,SECTION_NAME,ILEN)
      IF(.NOT.(OK_TO_WRITE.EQ.0))GOTO 23184
      INQUIRE (FILE =FILE_NAME,EXIST =FILE_PRESENT)
      IF(.NOT.(.NOT.FILE_PRESENT))GOTO 23186
      RETURN
23186 CONTINUE
23184 CONTINUE
      IERR =FOPENM (SEG_JFN,FNAME,NPAGES,IERR)
      PAGES_MAPPED =FPMAP_DTED (SEG_JFN,SECTION_NAME,NPAGES,ELEVATION_CO
     *MMON_OVERLAY,0,IERR)
      RETURN
      END
      INTEGER FUNCTION DTED_MAX_ELEVATION(USER_SWLAT,USER_SWLON,USER_NEL
     *AT,USER_NELON)
      IMPLICIT NONE
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      INTEGER CW,CH,SAW,SAH,EAH,EAW,AW,AH
      INTEGER START_AREA_WIDTH,END_AREA_WIDTH
      INTEGER START_AREA_HEIGHT,END_AREA_HEIGHT
      REAL START_CELL_HEIGHT,END_CELL_HEIGHT
      REAL START_CELL_WIDTH,END_CELL_WIDTH
      INTEGER INDX_ELEV,MAX_ELEV,INDX_AREA
      REAL USER_SWLON,USER_NELON,USER_SWLAT,USER_NELAT
      REAL WORK_NELON
      IF(.NOT.(N_ELEV_REGIONS.EQ.0))GOTO 23188
      DTED_MAX_ELEVATION=(0 )
      RETURN
23188 CONTINUE
      INDX_ELEV =1
      MAX_ELEV =0
      IF(.NOT.(USER_SWLON.GT.USER_NELON))GOTO 23190
      WORK_NELON =USER_NELON *6.283185307
      GOTO 23191
23190 CONTINUE
      WORK_NELON =USER_NELON
23191 CONTINUE
      IF(.NOT.(ELEVATION_REGION_SWLAT(INDX_ELEV).GT.USER_SWLAT))GOTO 231
     *92
      START_CELL_HEIGHT =0
      GOTO 23193
23192 CONTINUE
      START_CELL_HEIGHT =(USER_SWLAT -ELEVATION_REGION_SWLAT(INDX_ELEV))
     * *57.29577951
23193 CONTINUE
      IF(.NOT.(START_CELL_HEIGHT.GT.ELEVATION_REGION_HEIGHT(INDX_ELEV)))
     *GOTO 23194
      DTED_MAX_ELEVATION=(MAX_ELEV )
      RETURN
23194 CONTINUE
      IF(.NOT.(ELEVATION_REGION_SWLON(INDX_ELEV).GT.USER_SWLON))GOTO 231
     *96
      START_CELL_WIDTH=0
      GOTO 23197
23196 CONTINUE
      START_CELL_WIDTH=(USER_SWLON -ELEVATION_REGION_SWLON(INDX_ELEV)) *
     *57.29577951
23197 CONTINUE
      IF(.NOT.(START_CELL_WIDTH.GT.ELEVATION_REGION_WIDTH(INDX_ELEV)))GO
     *TO 23198
      DTED_MAX_ELEVATION=(MAX_ELEV )
      RETURN
23198 CONTINUE
      IF(.NOT.(ELEVATION_REGION_SWLAT(INDX_ELEV)+ELEVATION_REGION_HEIGHT
     *(INDX_ELEV)*57.29577951.LT.USER_NELAT))GOTO 23200
      END_CELL_HEIGHT =ELEVATION_REGION_HEIGHT(INDX_ELEV)
      GOTO 23201
23200 CONTINUE
      END_CELL_HEIGHT =(USER_NELAT -ELEVATION_REGION_SWLAT(INDX_ELEV)) *
     *57.29577951
23201 CONTINUE
      IF(.NOT.(ELEVATION_REGION_SWLON(INDX_ELEV)+ELEVATION_REGION_WIDTH(
     *INDX_ELEV)*57.29577951.LT.WORK_NELON))GOTO 23202
      END_CELL_WIDTH =ELEVATION_REGION_WIDTH(INDX_ELEV)
      GOTO 23203
23202 CONTINUE
      END_CELL_WIDTH =(WORK_NELON -ELEVATION_REGION_SWLON(INDX_ELEV)) *5
     *7.29577951
23203 CONTINUE
      START_AREA_HEIGHT =(START_CELL_HEIGHT -INT(START_CELL_HEIGHT)) *4.
     * +1
      END_AREA_HEIGHT =(END_CELL_HEIGHT -INT(END_CELL_HEIGHT)) *4. +1
      START_AREA_WIDTH=(START_CELL_WIDTH -INT(START_CELL_WIDTH)) *4. +1
      END_AREA_WIDTH=(END_CELL_WIDTH -INT(END_CELL_WIDTH)) *4. +1
      CW =START_CELL_WIDTH
23204 IF(.NOT.(CW.LE.END_CELL_WIDTH))GOTO 23206
      IF(.NOT.(CW.EQ.INT(START_CELL_WIDTH)))GOTO 23207
      SAW =START_AREA_WIDTH
      GOTO 23208
23207 CONTINUE
      SAW =1
23208 CONTINUE
      IF(.NOT.(CW.EQ.INT(END_CELL_WIDTH)))GOTO 23209
      EAW =END_AREA_WIDTH
      GOTO 23210
23209 CONTINUE
      EAW =4
23210 CONTINUE
      CH =START_CELL_HEIGHT
23211 IF(.NOT.(CH.LE.END_CELL_HEIGHT))GOTO 23213
      IF(.NOT.(CH.EQ.INT(START_CELL_HEIGHT)))GOTO 23214
      SAH =START_AREA_HEIGHT
      GOTO 23215
23214 CONTINUE
      SAH =1
23215 CONTINUE
      IF(.NOT.(CH.EQ.INT(END_CELL_HEIGHT)))GOTO 23216
      EAH =END_AREA_HEIGHT
      GOTO 23217
23216 CONTINUE
      EAH =4
23217 CONTINUE
      IF(.NOT.(SAW.EQ.1.AND.EAW.EQ.4.AND.SAH.EQ.1.AND.EAW.EQ.4))GOTO 232
     *18
      MAX_ELEV =MAX(MAX_ELEV,ELEVATION_REGION_ MAX_ELEVATION_CELL(CH,CW,
     *INDX_ELEV))
      GOTO 23219
23218 CONTINUE
      AW =SAW
23220 IF(.NOT.(AW.LE.EAW))GOTO 23222
      AH =SAH
23223 IF(.NOT.(AH.LE.EAH))GOTO 23225
      INDX_AREA =(AW-1) *4 +AH
      MAX_ELEV =MAX(MAX_ELEV,ELEVATION_REGION_ MAX_ELEVATION_AREA(INDX_A
     *REA,CH,CW,INDX_ELEV))
23224 AH=AH+1
      GOTO 23223
23225 CONTINUE
23221 AW=AW+1
      GOTO 23220
23222 CONTINUE
23219 CONTINUE
23212 CH=CH+1
      GOTO 23211
23213 CONTINUE
23205 CW=CW+1
      GOTO 23204
23206 CONTINUE
      DTED_MAX_ELEVATION=(MAX_ELEV)
      RETURN
      END
      INTEGER FUNCTION LAND_BETWEEN_POINTS (DETLAT,DETLON,COSDETLAT,TGTL
     *AT,TGTLON,COSTGTLAT)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      REAL DETLAT,DETLON,TGTLAT,TGTLON,COSDETLAT,COSTGTLAT
      REAL RANGE
      REAL TERRAIN_RES
      REAL CELLPNTS
      REAL DETX
      REAL DETY
      REAL TGTX
      REAL TGTY
      REAL SWLAT
      REAL SWLON
      REAL SINGND
      REAL COSGND
      REAL BEGX
      REAL BEGY
      INTEGER AREA_INDEX
      INTEGER X_AREA_INDEX
      INTEGER Y_AREA_INDEX
      INTEGER INDXELEV
      REAL*4 SRTX,SRTY,ENDX,ENDY,DX,DY,R,X,Y
      REAL*4 SLOPEGND,BGND,BNDX,BNDY
      REAL*4 TY,PDY,XP,YP,ELEVATION
      INTEGER I_TMINUSD,IR,DEGX,DEGY
      REAL*8 AREAX,AREAY,CX,CY,AX,AY
      DATA CELLPNTS/1200/
      LAND_BETWEEN_POINTS =0
      IF(.NOT.(N_ELEV_REGIONS.GT.0))GOTO 23226
      IF(.NOT.(IBB(514).NE.0))GOTO 23228
      INDXELEV =1
      SWLAT =ELEVATION_REGION_SWLAT(INDXELEV)
      SWLON =ELEVATION_REGION_SWLON(INDXELEV)
      IF(.NOT.(((DETLAT.GE.SWLAT.AND.DETLAT.LE.SWLAT+ELEVATION_REGION_HE
     *IGHT(INDXELEV)*0.0174533).AND.(DETLON.GE.SWLON.AND.DETLON.LE.SWLON
     *+ELEVATION_REGION_WIDTH(INDXELEV)*0.0174533)).AND.((TGTLAT.GE.SWLA
     *T.AND.TGTLAT.LE.SWLAT+ELEVATION_REGION_HEIGHT(INDXELEV)*0.0174533)
     *.AND.(TGTLON.GE.SWLON.AND.TGTLON.LE.SWLON+ELEVATION_REGION_WIDTH(I
     *NDXELEV)*0.0174533))))GOTO 23230
      TERRAIN_RES =ELEVATION_REGION_RESOLUTION(INDXELEV)
      DETY =(DETLAT -SWLAT) *57.29577951*CELLPNTS / TERRAIN_RES
      DETX =(DETLON -SWLON)
      IF(.NOT.(DETX.LT.0.))GOTO 23232
      DETX =6.283185307-DETX
23232 CONTINUE
      DETX =DETX *57.29577951*CELLPNTS / TERRAIN_RES
      TGTY =(TGTLAT -SWLAT) *57.29577951*CELLPNTS / TERRAIN_RES
      TGTX =(TGTLON -SWLON)
      IF(.NOT.(TGTX.LT.0.))GOTO 23234
      TGTX =6.283185307-TGTX
23234 CONTINUE
      TGTX =TGTX *57.29577951*CELLPNTS / TERRAIN_RES
      IF(.NOT.(DETX.LE.TGTX))GOTO 23236
      SRTX =DETX
      SRTY =DETY
      ENDX =TGTX
      ENDY =TGTY
      I_TMINUSD=1
      GOTO 23237
23236 CONTINUE
      SRTX =TGTX
      SRTY =TGTY
      ENDX =DETX
      ENDY =DETY
      I_TMINUSD=0
23237 CONTINUE
      DX =ENDX -SRTX
      DY =ENDY -SRTY
      R =SQRT(DX*DX +DY*DY)
      IF(.NOT.(R.EQ.0))GOTO 23238
      LAND_BETWEEN_POINTS =0
      RETURN
23238 CONTINUE
      RANGE =R *TERRAIN_RES / CELLPNTS *0.0174533*3440.082*0.5 *(COSDETL
     *AT +COSTGTLAT)
      SINGND =DY/R
      COSGND =DX/R
      IF(.NOT.(ENDX.NE.SRTX))GOTO 23240
      SLOPEGND =(ENDY -SRTY) / (ENDX -SRTX)
      BGND =SRTY -SLOPEGND *SRTX
      GOTO 23241
23240 CONTINUE
      SLOPEGND =999999.
      BGND =999999.
23241 CONTINUE
      X =SRTX
      Y =SRTY
      DEGX =CELLPNTS / TERRAIN_RES
      DEGY =DEGX
      AREAX =DEGX *.25
      AREAY =AREAX
23242 IF(.NOT.(X.LE.ENDX))GOTO 23243
      CX =INT(X/DEGX) *DEGX +DEGX
      IF(.NOT.(ENDY.LT.SRTY))GOTO 23244
      CY =INT(Y/DEGY) *DEGY
      IF(.NOT.(CY.EQ.Y))GOTO 23246
      CY =CY -DEGY
23246 CONTINUE
      GOTO 23245
23244 CONTINUE
      CY =INT(Y/DEGY) *DEGY +DEGY
23245 CONTINUE
      TY =SLOPEGND *CX +BGND
      IF(.NOT.(TY.GT.CY))GOTO 23248
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23250
      BNDX =CX
      BNDY =SLOPEGND *CX +BGND
      GOTO 23251
23250 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23252
      BNDX =CX
      BNDY =Y
      GOTO 23253
23252 CONTINUE
      BNDX =X
      BNDY =CY
23253 CONTINUE
23251 CONTINUE
      GOTO 23249
23248 CONTINUE
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23254
      BNDX =(CY -BGND) / SLOPEGND
      BNDY =CY
      GOTO 23255
23254 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23256
      BNDX =CX
      BNDY =Y
      GOTO 23257
23256 CONTINUE
      BNDX =X
      BNDY =CY
23257 CONTINUE
23255 CONTINUE
23249 CONTINUE
      IF(.NOT.(ELEVATION_REGION_MAX_ELEVATION_CELL(Y/DEGY,X/DEGX,INDXELE
     *V).EQ.0))GOTO 23258
      X =BNDX
      Y =BNDY
      PDY =SRTY -Y
      IF(.NOT.(ABS(PDY).GT.ABS(DY)))GOTO 23260
      GOTO 23243
23260 CONTINUE
      GOTO 23242
23258 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.999999.))GOTO 23262
      PDY =SRTY -Y
      IF(.NOT.(ABS(PDY).GT.ABS(DY)))GOTO 23264
      GOTO 23243
23264 CONTINUE
23262 CONTINUE
      CX =INT(X/DEGX) *DEGX
      CY =INT(Y/DEGY) *DEGY
23266 CONTINUE
      IF(.NOT.(X.GT.ENDX))GOTO 23269
      RETURN
23269 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.999999.))GOTO 23271
      PDY =SRTY -Y
      IF(.NOT.(ABS(PDY).GT.ABS(DY)))GOTO 23273
      GOTO 23243
23273 CONTINUE
23271 CONTINUE
      X_AREA_INDEX =INT((X -CX) / ((CELLPNTS/4.)/TERRAIN_RES))
      Y_AREA_INDEX =(Y -CY) / ((CELLPNTS/4.)/TERRAIN_RES) +1
      AREA_INDEX =4 *X_AREA_INDEX +Y_AREA_INDEX
      IF(.NOT.(X_AREA_INDEX.LT.0.OR.X_AREA_INDEX.GT.3))GOTO 23275
      GOTO 23268
23275 CONTINUE
      IF(.NOT.(Y_AREA_INDEX.LT.1.OR.Y_AREA_INDEX.GT.4))GOTO 23277
      GOTO 23268
23277 CONTINUE
      AX =INT(X/AREAX) *AREAX +AREAX
      IF(.NOT.(ENDY.LT.SRTY))GOTO 23279
      AY =INT(Y/AREAY) *AREAY
      IF(.NOT.(AY.EQ.Y))GOTO 23281
      AY =AY -AREAY
23281 CONTINUE
      GOTO 23280
23279 CONTINUE
      AY =INT(Y/AREAY) *AREAY +AREAY
23280 CONTINUE
      TY =SLOPEGND *AX +BGND
      IF(.NOT.(TY.LT.AY))GOTO 23283
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23285
      BNDX =AX
      BNDY =TY
      GOTO 23286
23285 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23287
      BNDX =AX
      BNDY =Y
      GOTO 23288
23287 CONTINUE
      BNDX =X
      BNDY =AY
23288 CONTINUE
23286 CONTINUE
      GOTO 23284
23283 CONTINUE
      IF(.NOT.(SLOPEGND.NE.0.AND.SLOPEGND.NE.999999.))GOTO 23289
      BNDX =(AY -BGND) / SLOPEGND
      BNDY =AY
      GOTO 23290
23289 CONTINUE
      IF(.NOT.(SLOPEGND.EQ.0))GOTO 23291
      BNDX =AX
      BNDY =Y
      GOTO 23292
23291 CONTINUE
      BNDX =X
      BNDY =AY
23292 CONTINUE
23290 CONTINUE
23284 CONTINUE
      IF(.NOT.(BNDX.GT.ENDX))GOTO 23293
      XP =ENDX -X
      YP =ENDY -Y
      GOTO 23294
23293 CONTINUE
      XP =BNDX -X
      YP =BNDY -Y
23294 CONTINUE
      YP =MIN(ABS(DY),ABS(YP))
      R =SQRT(XP *XP +YP *YP)
      IF(.NOT.(ELEVATION_REGION_MAX_ELEVATION_AREA(AREA_INDEX,Y/DEGY,X/D
     *EGX,INDXELEV).EQ.0))GOTO 23295
      X =BNDX
      Y =BNDY
      GOTO 23267
23295 CONTINUE
      BEGX =X
      BEGY =Y
      IR =0
23297 IF(.NOT.(IR.LE.R))GOTO 23299
      X =BEGX +COSGND *IR
      Y =BEGY +SINGND *IR
      ELEVATION =ELEVATION_POINTS(Y,X)
      IF(.NOT.(ELEVATION.GT.0))GOTO 23300
      LAND_BETWEEN_POINTS =1
      RETURN
23300 CONTINUE
23298 IR=IR+1
      GOTO 23297
23299 CONTINUE
      X =BNDX
      Y =BNDY
23267 GOTO 23266
23268 CONTINUE
      GOTO 23242
23243 CONTINUE
23230 CONTINUE
23228 CONTINUE
23226 CONTINUE
      RETURN
      END
      INTEGER FUNCTION LAND_IN_CIRCLE(CLAT,CLON,RADIUS)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      REAL CLAT,CLON,RADIUS
      REAL DEG
      REAL COSCIRCLELAT
      REAL FLAT1,FLON1,COSLAT1
      INTEGER LAND_BETWEEN_POINTS,ANY_LAND
      REAL RELBRG
      COSCIRCLELAT =COS(CLAT)
      RELBRG =0.0
      ANY_LAND =0
      DEG =0
23302 IF(.NOT.(DEG.LT.360))GOTO 23304
      FLAT1 =CLAT
      FLON1 =CLON
      COSLAT1 =COSCIRCLELAT
      CALL RRB2LL(FLAT1,FLON1,RADIUS,RELBRG,DEG*0.0174533,COSLAT1)
      ANY_LAND =LAND_BETWEEN_POINTS (CLAT,CLON,COSCIRCLELAT,FLAT1,FLON1,
     *COSLAT1)
      IF(.NOT.(ANY_LAND.EQ.1))GOTO 23305
      GOTO 23304
23305 CONTINUE
23303 DEG=DEG+1
      GOTO 23302
23304 CONTINUE
      LAND_IN_CIRCLE=(ANY_LAND)
      RETURN
      END
      SUBROUTINE LOAD_SHORE_ALT
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      INTEGER THE_ELEVATION
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_TRUEALTDEPTH
      INTEGER*4  I_UNT_TYPE
      INTEGER*4  KPOINT_SHC
      REAL*8 CSTRIP8
      IF(.NOT.(N_ELEV_REGIONS.GT.0))GOTO 23307
      KPOINT_UNT=IBBP(1,01)
23309 IF(.NOT.((KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,01)+I
     *BBP(3,01)-1))))GOTO 23311
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+25),-(30)),'0001'X)).EQ.1))GOT
     *O 23312
      GOTO 23310
23312 CONTINUE
      I_UNT_TRUEALTDEPTH=THE_ELEVATION (FBB(KPOINT_UNT+19)*57.29577951,F
     *BB(KPOINT_UNT+20)*57.29577951)
      I_UNT_TRUEALTDEPTH=MAX (0,I_UNT_TRUEALTDEPTH)
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.EQ.2))GOTO 23314
      IF(.NOT.(I_UNT_TRUEALTDEPTH.GT.0))GOTO 23316
      CALL ECHOV ('Warning: Submarine ')
      CALL ECHOHN (CSTRIP8(IBB(KPOINT_UNT)),8)
      CALL ECHOV (' on land. Speed set to zero.')
      CALL ECHOR
      ISNAP_BEFORE_1 =IBB(KPOINT_UNT+21+0)
      FBB(KPOINT_UNT+21)=(0)
      ISNAP_AFTER_1 =IBB(KPOINT_UNT+21+0)
      ISNAP_D =0
      if (ISNAP_BEFORE_1 .NE.ISNAP_AFTER_1) ISNAP_D =1
      IF(.NOT.(ISNAP_D.NE.0))GOTO 23318
      IBB(KPOINT_UNT+87)=IOR(IAND(IBB(KPOINT_UNT+87),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((IOR(IOR('00000020'X,'00000001'X),(IAND(ISHFT(IBB(K
     *POINT_UNT+87),-(0)),'FFFF'X)))),'FFFF'X),0))
23318 CONTINUE
      FBB(KPOINT_UNT+32)=(0)
      FBB(KPOINT_UNT+31)=(0)
      GOTO 23317
23316 CONTINUE
      I_UNT_TRUEALTDEPTH=(IAND(ISHFT(IBB(KPOINT_UNT+61),-(0)),'1FFFFF'X)
     *)
23317 CONTINUE
      GOTO 23315
23314 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.3.OR.I_UNT_TYPE.EQ.4))GOTO 23320
      KPOINT_SHC=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *31))
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SHC+18),-(0)),'0003'X)).EQ.1.AND.I
     *_UNT_TRUEALTDEPTH.EQ.0))GOTO 23322
      CALL ECHOV ('Warning: Land only ship/boat ')
      CALL ECHOHN (CSTRIP8(IBB(KPOINT_UNT)),8)
      CALL ECHOV (' on water. Speed set to zero.')
      CALL ECHOR
      ISNAP_BEFORE_1 =IBB(KPOINT_UNT+21+0)
      FBB(KPOINT_UNT+21)=(0)
      ISNAP_AFTER_1 =IBB(KPOINT_UNT+21+0)
      ISNAP_D =0
      if (ISNAP_BEFORE_1 .NE.ISNAP_AFTER_1) ISNAP_D =1
      IF(.NOT.(ISNAP_D.NE.0))GOTO 23324
      IBB(KPOINT_UNT+87)=IOR(IAND(IBB(KPOINT_UNT+87),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((IOR(IOR('00000020'X,'00000001'X),(IAND(ISHFT(IBB(K
     *POINT_UNT+87),-(0)),'FFFF'X)))),'FFFF'X),0))
23324 CONTINUE
      FBB(KPOINT_UNT+32)=(0)
      FBB(KPOINT_UNT+31)=(0)
      GOTO 23323
23322 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SHC+18),-(0)),'0003'X)).EQ.2.AND.I
     *_UNT_TRUEALTDEPTH.GT.0))GOTO 23326
      CALL ECHOV ('Warning: Ocean only ship/boat ')
      CALL ECHOHN (CSTRIP8(IBB(KPOINT_UNT)),8)
      CALL ECHOV (' on land. Speed set to zero.')
      CALL ECHOR
      ISNAP_BEFORE_1 =IBB(KPOINT_UNT+21+0)
      FBB(KPOINT_UNT+21)=(0)
      ISNAP_AFTER_1 =IBB(KPOINT_UNT+21+0)
      ISNAP_D =0
      if (ISNAP_BEFORE_1 .NE.ISNAP_AFTER_1) ISNAP_D =1
      IF(.NOT.(ISNAP_D.NE.0))GOTO 23328
      IBB(KPOINT_UNT+87)=IOR(IAND(IBB(KPOINT_UNT+87),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((IOR(IOR('00000020'X,'00000001'X),(IAND(ISHFT(IBB(K
     *POINT_UNT+87),-(0)),'FFFF'X)))),'FFFF'X),0))
23328 CONTINUE
      FBB(KPOINT_UNT+32)=(0)
      FBB(KPOINT_UNT+31)=(0)
      I_UNT_TRUEALTDEPTH=0
23326 CONTINUE
23323 CONTINUE
23320 CONTINUE
23315 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.2.OR.I_UNT_TYPE.EQ.3.OR.I_UNT_TYPE.EQ.4.OR.
     *I_UNT_TYPE.EQ.3.OR.I_UNT_TYPE.EQ.7))GOTO 23330
      ISNAP_BEFORE_1 =IBB(KPOINT_UNT+61+0)
      IBB(KPOINT_UNT+61)=IOR(IAND(IBB(KPOINT_UNT+61),NOT(ISHFT(         
     *'1FFFFF'X,0))),ISHFT(IAND((I_UNT_TRUEALTDEPTH),'1FFFFF'X),0))
      ISNAP_AFTER_1 =IBB(KPOINT_UNT+61+0)
      ISNAP_D =0
      if (ISNAP_BEFORE_1 .NE.ISNAP_AFTER_1) ISNAP_D =1
      IF(.NOT.(ISNAP_D.NE.0))GOTO 23332
      IBB(KPOINT_UNT+87)=IOR(IAND(IBB(KPOINT_UNT+87),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((IOR(IOR('00000080'X,'00000001'X),(IAND(ISHFT(IBB(K
     *POINT_UNT+87),-(0)),'FFFF'X)))),'FFFF'X),0))
23332 CONTINUE
23330 CONTINUE
23310 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23309
23311 CONTINUE
23307 CONTINUE
      RETURN
      END
      SUBROUTINE RELOAD_SHORE_ALT
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      INTEGER THE_ELEVATION
      INTEGER*4  KPOINT_UNT
      INTEGER*4  I_UNT_TRUEALTDEPTH
      INTEGER*4  I_UNT_TYPE
      INTEGER*4  KPOINT_SHC
      REAL*8 CSTRIP8
      IF(.NOT.(N_ELEV_REGIONS.GT.0))GOTO 23334
      KPOINT_UNT=IBBP(1,01)
23336 IF(.NOT.((KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,01)+I
     *BBP(3,01)-1))))GOTO 23338
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+25),-(30)),'0001'X)).EQ.1))GOT
     *O 23339
      GOTO 23337
23339 CONTINUE
      I_UNT_TRUEALTDEPTH=THE_ELEVATION (FBB(KPOINT_UNT+19)*57.29577951,F
     *BB(KPOINT_UNT+20)*57.29577951)
      I_UNT_TRUEALTDEPTH=MAX (0,I_UNT_TRUEALTDEPTH)
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.EQ.7))GOTO 23341
      ISNAP_BEFORE_1 =IBB(KPOINT_UNT+61+0)
      IBB(KPOINT_UNT+61)=IOR(IAND(IBB(KPOINT_UNT+61),NOT(ISHFT(         
     *'1FFFFF'X,0))),ISHFT(IAND((I_UNT_TRUEALTDEPTH),'1FFFFF'X),0))
      ISNAP_AFTER_1 =IBB(KPOINT_UNT+61+0)
      ISNAP_D =0
      if (ISNAP_BEFORE_1 .NE.ISNAP_AFTER_1) ISNAP_D =1
      IF(.NOT.(ISNAP_D.NE.0))GOTO 23343
      IBB(KPOINT_UNT+87)=IOR(IAND(IBB(KPOINT_UNT+87),NOT(ISHFT('FFFF'X,0
     *))),ISHFT(IAND((IOR(IOR('00000080'X,'00000001'X),(IAND(ISHFT(IBB(K
     *POINT_UNT+87),-(0)),'FFFF'X)))),'FFFF'X),0))
23343 CONTINUE
23341 CONTINUE
23337 KPOINT_UNT=KPOINT_UNT+104
      GOTO 23336
23338 CONTINUE
23334 CONTINUE
      RETURN
      END
      SUBROUTINE ODEFINE_TERRAIN_ELEVATION(NARGS,ARGS,IERROR)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL ELEVATION_REGION_SWLAT(1)
      REAL ELEVATION_REGION_SWLON(1)
      INTEGER ELEVATION_REGION_HEIGHT(1)
      INTEGER ELEVATION_REGION_WIDTH(1)
      INTEGER ELEVATION_REGION_RESOLUTION(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB1(1)
      INTEGER ELEVATION_REGION_ELEVATION_SUB2(1)
      INTEGER ELEVATION_REGION_MAX_REGION_ELEVATION(1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_CELL(0:17,0:17,1)
      INTEGER ELEVATION_REGION_MAX_ELEVATION_AREA(16,0:17,0:17,1)
      INTEGER NAT2ELEV(26)
      INTEGER N_ELEV_REGIONS
      INTEGER*2 ELEVATION_POINTS(0:4080,0:4080)
      INTEGER ELEVATION_COMMON_OVERLAY(100)
      COMMON /DTEDBOARD/ N_ELEV_REGIONS,NAT2ELEV,ELEVATION_REGION_SWLAT,
     *ELEVATION_REGION_SWLON,ELEVATION_REGION_HEIGHT,ELEVATION_REGION_WI
     *DTH,ELEVATION_REGION_RESOLUTION,ELEVATION_REGION_ELEVATION_SUB1,EL
     *EVATION_REGION_ELEVATION_SUB2,ELEVATION_REGION_MAX_REGION_ELEVATIO
     *N,ELEVATION_REGION_MAX_ELEVATION_CELL,ELEVATION_REGION_MAX_ELEVATI
     *ON_AREA,ELEVATION_POINTS
cpar$ private / DTEDboard / ! no FORTRAN assigning a global section
      EQUIVALENCE (N_ELEV_REGIONS,ELEVATION_COMMON_OVERLAY)
      LOGICAL*1 MSG_LIB_MSG(400)
      LOGICAL*1 MSG_LIB_MSGARG(400)
      INTEGER MSG_LIB_MSGLEN
      INTEGER USERORDID
      COMMON /MESSAGE/MSG_LIB_MSG,MSG_LIB_MSGARG,MSG_LIB_MSGLEN,USERORDI
     *D
      REAL*8 ARGS(46)
      INTEGER NARGS,IERROR
      REAL DEGLATARGS(10),DEGLONARGS(10)
      INTEGER ELEVATION_IN_FEET
      INTEGER INDXELEV
      REAL LAT,LON,SWLAT,SWLON
      REAL XP(8),YP(8)
      INTEGER IX,IY,IARG,NP,I,INSIDE,FEET
      REAL CELLPNTS
      INTEGER IVIEW,IAREAX,IAREAY,AREA_INDEX
      INTEGER X_AREA_INDEX,Y_AREA_INDEX,DEGX,DEGY
      REAL*4 XW,XE,YS,YN,TERRAIN_RES
      REAL*4 DMS2RAD,DMS2LL,X,Y
      REAL*8 AREAX,AREAY,CX,CY
      DATA CELLPNTS/1200/
      IERROR =0
      IVIEW =0
      IF(.NOT.(N_ELEV_REGIONS.EQ.0))GOTO 23345
      MSG_LIB_MSGLEN=0
      CALL SMOVV ('No terrain region defined.',MSG_LIB_MSG,MSG_LIB_MSGLE
     *N)
      USERORDID =-1
      IERROR =15
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
      RETURN
23345 CONTINUE
      IF(.NOT.(ARGS(4).LT.0.OR.ARGS(4).GT.32000))GOTO 23347
      MSG_LIB_MSGLEN=0
      CALL SMOVV ('Elevation must be in range 0 thru 32000.',MSG_LIB_MSG
     *,MSG_LIB_MSGLEN)
      USERORDID =-1
      IERROR =15
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
23347 CONTINUE
      INDXELEV =1
      SWLAT=ELEVATION_REGION_SWLAT(INDXELEV)
      SWLON=ELEVATION_REGION_SWLON(INDXELEV)
      NP =0
      IF(.NOT.(IBB(116).EQ.1))GOTO 23349
      IARG =5
23351 IF(.NOT.(IARG.LT.NARGS))GOTO 23353
      NP =NP+1
      LAT =DMS2LL(ARGS(IARG))
      LON =DMS2LL(ARGS(IARG+1))
      DEGLATARGS(NP)=LAT
      DEGLONARGS(NP)=LON
23352 IARG=IARG+2
      GOTO 23351
23353 CONTINUE
      FEET=NINT(ARGS(4))
      CALL MODIFY_RESA_WORLDWIDE_ELEVATION(FEET,NP,DEGLATARGS,DEGLONARGS
     *)
      NP=0
23349 CONTINUE
      IARG =5
23354 IF(.NOT.(IARG.LT.NARGS))GOTO 23356
      NP =NP +1
      LAT =DMS2RAD(ARGS(IARG))
      LON =DMS2RAD(ARGS(IARG+1))
      XP(NP) =LON
      YP(NP) =LAT
      IF(.NOT.((LAT.LT.SWLAT.OR.LAT.GE.SWLAT+ELEVATION_REGION_HEIGHT(IND
     *XELEV)*0.0174533).OR.(LON.LT.SWLON.OR.LON.GE.SWLON+ELEVATION_REGIO
     *N_WIDTH(INDXELEV)*0.0174533)))GOTO 23357
      MSG_LIB_MSGLEN=0
      CALL SMOVV ('Polygon point ',MSG_LIB_MSG,MSG_LIB_MSGLEN)
      CALL SMOVI (NP,MSG_LIB_MSG,MSG_LIB_MSGLEN)
      CALL SMOVV (' outside terrain grid.',MSG_LIB_MSG,MSG_LIB_MSGLEN)
      USERORDID =-1
      IERROR =15
      CALL SEND_(IVIEW,0,MSG_LIB_MSGLEN,MSG_LIB_MSG)
23357 CONTINUE
23355 IARG=IARG+2
      GOTO 23354
23356 CONTINUE
      IF(.NOT.(IERROR.NE.0))GOTO 23359
      RETURN
23359 CONTINUE
      I =1
23361 IF(.NOT.(I.LE.NP))GOTO 23363
      XP(I) =(XP(I) -ELEVATION_REGION_SWLON(INDXELEV))
      IF(.NOT.(XP(I).LT.0))GOTO 23364
      XP(I) =6.283185307-XP(I)
23364 CONTINUE
      XP(I) =XP(I) *57.29577951*CELLPNTS / ELEVATION_REGION_RESOLUTION(I
     *NDXELEV)
      YP(I) =(YP(I) -ELEVATION_REGION_SWLAT(INDXELEV)) *57.29577951*CELL
     *PNTS / ELEVATION_REGION_RESOLUTION(INDXELEV)
23362 I=I+1
      GOTO 23361
23363 CONTINUE
      XW =XP(1)
      XE =XP(1)
      YS =YP(1)
      YN =YP(1)
      I =2
23366 IF(.NOT.(I.LE.NP))GOTO 23368
      XW =MIN(XW,XP(I))
      XE =MAX(XE,XP(I))
      YS =MIN(YS,YP(I))
      YN =MAX(YN,YP(I))
23367 I=I+1
      GOTO 23366
23368 CONTINUE
      ELEVATION_IN_FEET =ARGS(4)
      NP =NP +1
      XP(NP) =XP(1)
      YP(NP) =YP(1)
      IX =NINT(XW)
23369 IF(.NOT.(IX.LE.NINT(XE)))GOTO 23371
      IY =NINT(YS)
23372 IF(.NOT.(IY.LE.NINT(YN)))GOTO 23374
      CALL INOUTXY(FLOAT(IX),FLOAT(IY),NP,XP ,YP,INSIDE)
      IF(.NOT.(INSIDE.EQ.1))GOTO 23375
      ELEVATION_POINTS(IY,IX) =ELEVATION_IN_FEET
23375 CONTINUE
23373 IY=IY+1
      GOTO 23372
23374 CONTINUE
23370 IX=IX+1
      GOTO 23369
23371 CONTINUE
      ELEVATION_REGION_MAX_REGION_ELEVATION(INDXELEV) =MAX(ELEVATION_IN_
     *FEET,ELEVATION_REGION_MAX_REGION_ELEVATION(INDXELEV))
      DEGX =CELLPNTS / ELEVATION_REGION_RESOLUTION(INDXELEV)
      DEGY =DEGX
      AREAX =DEGX *.25
      AREAY =AREAX
      IAREAX =AREAX
      IAREAY =AREAY
      TERRAIN_RES =ELEVATION_REGION_RESOLUTION(INDXELEV)
      IX =NINT(XW)
23377 IF(.NOT.(IX.LE.NINT(XE)))GOTO 23379
      IY =NINT(YS)
23380 IF(.NOT.(IY.LE.NINT(YN)))GOTO 23382
      X =IX
      Y =IY
      ELEVATION_REGION_MAX_ELEVATION_CELL(Y/DEGY,X/DEGX,INDXELEV) =MAX (
     *ELEVATION_IN_FEET,ELEVATION_REGION_MAX_ELEVATION_CELL(Y/DEGY,X/DEG
     *X,INDXELEV))
      CX =INT(X/DEGX) *DEGX
      CY =INT(Y/DEGY) *DEGY
      X_AREA_INDEX =INT((X -CX) / ((CELLPNTS/4.)/TERRAIN_RES))
      Y_AREA_INDEX =(Y -CY) / ((CELLPNTS/4.)/TERRAIN_RES) +1
      AREA_INDEX =4 *X_AREA_INDEX +Y_AREA_INDEX
      ELEVATION_REGION_MAX_ELEVATION_AREA(AREA_INDEX,Y/DEGY,X/DEGX,INDXE
     *LEV) =MAX (ELEVATION_IN_FEET,ELEVATION_REGION_MAX_ELEVATION_AREA(A
     *REA_INDEX,Y/DEGY,X/DEGX,INDXELEV))
23381 IY=IY+IAREAY
      GOTO 23380
23382 CONTINUE
23378 IX=IX+IAREAX
      GOTO 23377
23379 CONTINUE
      CALL RELOAD_SHORE_ALT
      RETURN
      END
