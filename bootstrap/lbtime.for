      INTEGER FUNCTION GAME_DTG(GMIN)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER DTG
      REAL GMIN
      INTEGER MIN_TO_DTG,IRC
      REAL RESULT_DTG(5)
      IRC =MIN_TO_DTG (FBB(508),GMIN,RESULT_DTG)
      DTG =INT(RESULT_DTG(3))*10000 +INT(RESULT_DTG(4))*100 +INT(RESULT_
     *DTG(5))
      GAME_DTG=(DTG)
      RETURN
      END
      INTEGER FUNCTION GAME_DTGS(GMIN)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER DTG
      REAL GMIN
      INTEGER MINUTE,SECOND
      INTEGER MIN_TO_DTG,IRC
      REAL RESULT_DTG(5)
      IRC =MIN_TO_DTG (FBB(508),GMIN,RESULT_DTG)
      MINUTE =INT(RESULT_DTG(5))
      SECOND =(RESULT_DTG(5) -MINUTE) *60.
      DTG =INT(RESULT_DTG(3))*1000000 +INT(RESULT_DTG(4))*10000 +MINUTE*
     *100 +SECOND
      GAME_DTGS=(DTG)
      RETURN
      END
      INTEGER FUNCTION GAME_TIME(GMIN)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER HRS,LOG,MIN
      REAL GMIN
      LOG =MOD(IBB(104)+INT(GMIN),INT(1440.))
      MIN =MOD(LOG,60)
      HRS =LOG/60
      GAME_TIME=(HRS*100+MIN)
      RETURN
      END
      SUBROUTINE MONDAY(IYEAR,JDAY,MONTH,IDAY)
      IMPLICIT NONE
      INTEGER IYEAR,JDAY,MONTH,IDAY,LEAP_YEAR
      INTEGER DAYS_IN (13) / 31,28,31,30,31,30,31,31,30,31,30,31,99999/
      DAYS_IN(2) =28 +LEAP_YEAR(IYEAR)
      IDAY =JDAY
      MONTH =1
23000 IF(.NOT.(IDAY.GT.DAYS_IN(MONTH)))GOTO 23002
      IDAY =IDAY -DAYS_IN(MONTH)
23001 MONTH=MONTH+1
      GOTO 23000
23002 CONTINUE
      IF(.NOT.(MONTH.GT.12))GOTO 23003
      MONTH =12
      IDAY =DAYS_IN(12)
23003 CONTINUE
      RETURN
      END
      SUBROUTINE LOAD_START_TIME(SCENARIO_NAME)
      IMPLICIT NONE
      INTEGER*4 IHS_TIM(10)
      REAL*4 FHS_TIM(10)
      EQUIVALENCE (IHS_TIM,FHS_TIM)
      COMMON/TIM/IHS_TIM
      REAL*8 SCENARIO_NAME
      INTEGER K,I
      INTEGER FIRST_CALL/1/
      REAL TIME_STAMP
      REAL CURRENT_TIME,CURRENT_TIME_IN
      REAL TIM_RECORD_HOLD(10)
      REAL TIM_RECORD_PEND(10)
      LOGICAL*1 CFILE(64)
      CHARACTER *64 V_CFILE
      EQUIVALENCE (CFILE,V_CFILE)
23005 CONTINUE
      IF(.NOT.(FIRST_CALL.NE.1))GOTO 23008
      GOTO 23007
23008 CONTINUE
      FIRST_CALL =0
      K =0
      CALL SMOVHN (SCENARIO_NAME,100,CFILE,K)
      CALL SMOVV ('h.tim',CFILE,K)
      CALL SMOV (0,CFILE,K)
      OPEN(UNIT =60,FILE =V_CFILE,ACCESS ='SEQUENTIAL',FORM =           
     *'UNFORMATTED',STATUS ='OLD')
      READ(60,END=800,ERR=850)IHS_TIM
      TIME_STAMP =FHS_TIM(9)
      CURRENT_TIME =TIME_STAMP
      I=1
23010 IF(.NOT.(I.LE.10))GOTO 23012
      TIM_RECORD_PEND(I) =FHS_TIM(I)
23011 I=I+1
      GOTO 23010
23012 CONTINUE
23006 IF(.NOT.(1.EQ.1))GOTO 23005
23007 CONTINUE
23013 CONTINUE
      GOTO 23015
      ENTRY CHECK_FOR_NEXT_START_TIME (CURRENT_TIME_IN)
      CURRENT_TIME =CURRENT_TIME_IN
23014 GOTO 23013
23015 CONTINUE
      RETURN
800   RETURN
850   PRINT *,' Read error in tim history file '
      STOP
      END
      SUBROUTINE CONVERT_TO_GM (TIME,GAME_MINUTE)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER TIME
      REAL GAME_MINUTE
      INTEGER MIN,HR,DAY
      INTEGER IRC,MIN_TO_DTG,DTG_TO_MIN,IGM
      REAL INPUT_DTG(5)
      REAL RESULT_DTG(5)
      MIN =MOD (TIME,100)
      HR =INT ((MOD (TIME,10000) -MIN) *0.01)
      DAY =INT (TIME *0.0001)
      IRC =MIN_TO_DTG (FBB(508),FBB(461),RESULT_DTG)
      INPUT_DTG(1) =RESULT_DTG(1)
      INPUT_DTG(2) =RESULT_DTG(2)
      IF(.NOT.(DAY.LT.RESULT_DTG(3)))GOTO 23016
      IF(.NOT.((RESULT_DTG(3)-DAY).GT.10))GOTO 23018
      INPUT_DTG(2) =INPUT_DTG(2) +1
      IF(.NOT.(INPUT_DTG(2).GT.12))GOTO 23020
      INPUT_DTG(1) =INPUT_DTG(1) +1
      INPUT_DTG(2) =1
23020 CONTINUE
23018 CONTINUE
23016 CONTINUE
      INPUT_DTG(3) =DAY
      INPUT_DTG(4) =HR
      INPUT_DTG(5) =MIN
      IRC =DTG_TO_MIN (FBB(508),INPUT_DTG,GAME_MINUTE)
      IGM =GAME_MINUTE +0.5
      GAME_MINUTE =IGM
      RETURN
      END
      INTEGER FUNCTION MIN_TO_DTG(INITDTG,DELTATIME,RESULTDTG)
      IMPLICIT NONE
      REAL INITDTG(5),DELTATIME,RESULTDTG(5)
      INTEGER DTG_TO_OFFSET,OFFSET_TO_DTG
      INTEGER RETURN_CODE
      REAL*8 BASEMIN,SUM_MIN
      RETURN_CODE =DTG_TO_OFFSET (INITDTG,BASEMIN)
      IF(.NOT.(RETURN_CODE.EQ.0))GOTO 23022
      MIN_TO_DTG=(RETURN_CODE )
      RETURN
23022 CONTINUE
      SUM_MIN =BASEMIN +DELTATIME +.0001
      RETURN_CODE =OFFSET_TO_DTG (SUM_MIN,RESULTDTG)
      MIN_TO_DTG=(RETURN_CODE )
      RETURN
      END
      INTEGER FUNCTION DTG_TO_MIN(INITDTG,INPUTDTG,INTERVAL)
      IMPLICIT NONE
      REAL INITDTG(5),INPUTDTG(5),INTERVAL
      INTEGER IRC
      REAL*8 INIT_INTERVAL,INPUT_INTERVAL
      INTEGER DTG_TO_OFFSET
      IRC =DTG_TO_OFFSET (INITDTG,INIT_INTERVAL)
      IF(.NOT.(IRC.EQ.0))GOTO 23024
      DTG_TO_MIN=(IRC )
      RETURN
23024 CONTINUE
      IRC =DTG_TO_OFFSET (INPUTDTG,INPUT_INTERVAL)
      INTERVAL =INPUT_INTERVAL -INIT_INTERVAL
      DTG_TO_MIN=(IRC )
      RETURN
      END
      INTEGER FUNCTION OFFSET_TO_DTG(OFFSET,DTG)
      IMPLICIT NONE
      REAL*8 OFFSET
      REAL DTG(5)
      REAL SDTG(5)
      REAL*8 WOFFSET,MIN_IN_YEAR
      REAL MINUTE
      INTEGER YEAR,MONTH,DAY,HOUR,JULIAN_DAY,IRC
      INTEGER LEAP_YEAR
      DATA SDTG/1980.,1.,1.,0.,0./
      WOFFSET =OFFSET
      IF(.NOT.(WOFFSET.LT.0.))GOTO 23026
      OFFSET_TO_DTG=(0 )
      RETURN
23026 CONTINUE
      YEAR =SDTG(1)
      IRC =1
23028 CONTINUE
      IF(.NOT.(LEAP_YEAR(YEAR).EQ.1))GOTO 23031
      MIN_IN_YEAR =(366 *(24.0 *60. ))
      GOTO 23032
23031 CONTINUE
      MIN_IN_YEAR =(365 *(24.0 *60. ))
23032 CONTINUE
      IF(.NOT.(WOFFSET.LT.MIN_IN_YEAR))GOTO 23033
      GOTO 23030
23033 CONTINUE
      YEAR =YEAR +1
      WOFFSET =WOFFSET -MIN_IN_YEAR
23029 GOTO 23028
23030 CONTINUE
      JULIAN_DAY =(INT(WOFFSET) / INT(1440.)) +1
      CALL MONDAY(YEAR,JULIAN_DAY,MONTH,DAY)
      WOFFSET =WOFFSET -(JULIAN_DAY -1) *INT(1440.)
      HOUR =INT(WOFFSET *(1./60.))
      WOFFSET =WOFFSET -HOUR *INT(60.)
      MINUTE =WOFFSET
      DTG(1) =YEAR
      DTG(2) =MONTH
      DTG(3) =DAY
      DTG(4) =HOUR
      DTG(5) =MINUTE
      OFFSET_TO_DTG=(IRC )
      RETURN
      END
      INTEGER FUNCTION DTG_TO_OFFSET(DTG,OFFSET)
      IMPLICIT NONE
      REAL*8 OFFSET
      REAL DTG(5)
      REAL SDTG(5)
      REAL*8 WOFFSET
      INTEGER JULIAN_DAY,MONTH,DAY,IRC
      INTEGER YEAR,YEAR_END
      INTEGER LEAP_YEAR,MONTH_TO_JULIAN
      DATA SDTG/1980,1,1,0,0/
      YEAR =SDTG(1)
      YEAR_END =DTG(1)
      IF(.NOT.(YEAR_END.LT.100))GOTO 23035
      YEAR_END =YEAR_END +1900
23035 CONTINUE
      IF(.NOT.(YEAR_END.LT.YEAR))GOTO 23037
      DTG_TO_OFFSET=(0 )
      RETURN
23037 CONTINUE
      IRC =1
      WOFFSET =0
      YEAR =SDTG(1)
23039 IF(.NOT.(YEAR.LT.YEAR_END))GOTO 23041
      IF(.NOT.(LEAP_YEAR(YEAR).EQ.1))GOTO 23042
      WOFFSET =WOFFSET +(366 *(24.0 *60. ))
      GOTO 23043
23042 CONTINUE
      WOFFSET =WOFFSET +(365 *(24.0 *60. ))
23043 CONTINUE
23040 YEAR=YEAR+1
      GOTO 23039
23041 CONTINUE
      MONTH =DTG(2)
      DAY =DTG(3)
      JULIAN_DAY =MONTH_TO_JULIAN(YEAR_END,MONTH,DAY)
      WOFFSET =WOFFSET +(JULIAN_DAY -1) *1440.
      OFFSET =WOFFSET +DTG(4) *60.+DTG(5)
      DTG_TO_OFFSET=(IRC )
      RETURN
      END
      INTEGER FUNCTION LEAP_YEAR(YEAR)
      IMPLICIT NONE
      INTEGER YEAR
      IF(.NOT.((MOD(YEAR,4).EQ.0.AND.MOD(YEAR,100).NE.0).OR.MOD(YEAR,400
     *).EQ.0))GOTO 23044
      LEAP_YEAR =1
      GOTO 23045
23044 CONTINUE
      LEAP_YEAR =0
23045 CONTINUE
      RETURN
      END
      INTEGER FUNCTION MONTH_TO_JULIAN(YEAR,MONTH,DAY)
      IMPLICIT NONE
      INTEGER YEAR,MONTH,DAY,JULIAN
      INTEGER CUM_DAYS(12),LEAP_YEAR
      DATA CUM_DAYS/0,31,59,90,120,151,181,212,243,273,304,334/
      JULIAN =DAY
      IF(.NOT.(MONTH.GT.2))GOTO 23046
      JULIAN =JULIAN +LEAP_YEAR(YEAR)
23046 CONTINUE
      JULIAN =JULIAN +CUM_DAYS(MONTH)
      MONTH_TO_JULIAN=(JULIAN)
      RETURN
      END
      SUBROUTINE SMOVDATETIME(DTG,STR,LEN)
      IMPLICIT NONE
      REAL DTG(5)
      LOGICAL*1 STR(100)
      INTEGER LEN
      LOGICAL*1 MONTH_TEXT(39)
      DATA MONTH_TEXT(1)/120/,MONTH_TEXT(2)/120/,MONTH_TEXT(3)/74/,MONTH
     *_TEXT(4)/65/,MONTH_TEXT(5)/78/,MONTH_TEXT(6)/70/,MONTH_TEXT(7)/69/
     *,MONTH_TEXT(8)/66/,MONTH_TEXT(9)/77/,MONTH_TEXT(10)/65/,MONTH_TEXT
     *(11)/82/,MONTH_TEXT(12)/65/,MONTH_TEXT(13)/80/,MONTH_TEXT(14)/82/,
     *MONTH_TEXT(15)/77/,MONTH_TEXT(16)/65/,MONTH_TEXT(17)/89/,MONTH_TEX
     *T(18)/74/,MONTH_TEXT(19)/85/,MONTH_TEXT(20)/78/,MONTH_TEXT(21)/74/
     *,MONTH_TEXT(22)/85/,MONTH_TEXT(23)/76/,MONTH_TEXT(24)/65/,MONTH_TE
     *XT(25)/85/,MONTH_TEXT(26)/71/,MONTH_TEXT(27)/83/,MONTH_TEXT(28)/69
     */,MONTH_TEXT(29)/80/,MONTH_TEXT(30)/79/,MONTH_TEXT(31)/67/,MONTH_T
     *EXT(32)/84/,MONTH_TEXT(33)/78/,MONTH_TEXT(34)/79/,MONTH_TEXT(35)/8
     *6/,MONTH_TEXT(36)/68/,MONTH_TEXT(37)/69/,MONTH_TEXT(38)/67/,MONTH_
     *TEXT(39)/0/
      CALL SMOVIZ(INT(DTG(3)),2,STR,LEN)
      CALL SMOVH(MONTH_TEXT(INT(DTG(2))*3),3,STR,LEN)
      CALL SMOVI(INT(DTG(1)),STR,LEN)
      CALL SMOV (58,STR,LEN)
      CALL SMOVIZ(INT(DTG(4)),2,STR,LEN)
      CALL SMOVIZ(INT(DTG(5)),2,STR,LEN)
      CALL SMOV (58,STR,LEN)
      CALL SMOVIZ(INT((DTG(5)-INT(DTG(5)))*60.),2,STR,LEN)
      RETURN
      END
      SUBROUTINE SMOVNOYRMODATETIME(DTG,STR,LEN)
      IMPLICIT NONE
      REAL DTG(5)
      LOGICAL*1 STR(100)
      INTEGER LEN
      CALL SMOVIZ(INT(DTG(3)),2,STR,LEN)
      CALL SMOV (45,STR,LEN)
      CALL SMOVIZ(INT(DTG(4)),2,STR,LEN)
      CALL SMOVIZ(INT(DTG(5)),2,STR,LEN)
      CALL SMOV (58,STR,LEN)
      CALL SMOVIZ(INT((DTG(5)-INT(DTG(5)))*60.),2,STR,LEN)
      RETURN
      END
      SUBROUTINE PARSE_DTG (LINE,DTG)
      IMPLICIT NONE
      LOGICAL*1 LINE(100)
      REAL DTG(5)
      INTEGER CTOI,LEN
      LOGICAL*1 WLINE(100)
      LEN =1
      CALL STCOPY (LINE,1,WLINE,LEN)
      LEN =13
      DTG(5) =CTOI(WLINE,LEN) *(1./60.)
      WLINE(13) =0
      LEN =11
      DTG(5) =DTG(5) +CTOI(WLINE,LEN)
      WLINE(11) =0
      LEN =9
      DTG(4) =CTOI(WLINE,LEN)
      WLINE(9) =0
      LEN =7
      DTG(3) =CTOI(WLINE,LEN)
      WLINE(7) =0
      LEN =5
      DTG(2) =CTOI(WLINE,LEN)
      WLINE(5) =0
      LEN =1
      DTG(1) =CTOI(WLINE,LEN)
      RETURN
      END
      SUBROUTINE DTG_TO_DELTA_MIN (DTG,LOOK_BACK,DELTA_MINUTES)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER DTG,DELTA_MINUTES,LOOK_BACK,DAY,HR,MIN,IRC,DTG_TO_MIN,MIN_
     *TO_DTG
      REAL CURRENT_DTG(5),FUTURE_DTG(5),FUTURE_MINUTE
      DAY =MAX(1,DTG / 10000 )
      HR =MOD (DTG / 100,100)
      MIN =MOD (DTG,100)
      IRC =MIN_TO_DTG (FBB(508),FBB(461),CURRENT_DTG)
      FUTURE_DTG(1) =CURRENT_DTG(1)
      FUTURE_DTG(2) =CURRENT_DTG(2)
      FUTURE_DTG(3) =DAY
      FUTURE_DTG(4) =HR
      FUTURE_DTG(5) =MIN
      IRC =DTG_TO_MIN (FBB(508),FUTURE_DTG,FUTURE_MINUTE)
      DELTA_MINUTES =FUTURE_MINUTE -FBB(461)
      IF(.NOT.(DELTA_MINUTES.GT.(15*24*60)))GOTO 23048
      FUTURE_DTG(2) =CURRENT_DTG(2) -1
      IF(.NOT.(FUTURE_DTG(2).LE.0))GOTO 23050
      FUTURE_DTG(2) =FUTURE_DTG(2) +12
      FUTURE_DTG(1) =FUTURE_DTG(1) -1
23050 CONTINUE
      IRC =DTG_TO_MIN (FBB(508),FUTURE_DTG,FUTURE_MINUTE)
      DELTA_MINUTES =FUTURE_MINUTE -FBB(461)
23048 CONTINUE
      IF(.NOT.(DELTA_MINUTES.LT.0.AND.ABS(DELTA_MINUTES).GT.LOOK_BACK))G
     *OTO 23052
      FUTURE_DTG(2) =CURRENT_DTG(2) +1
      IF(.NOT.(FUTURE_DTG(2).GE.12))GOTO 23054
      FUTURE_DTG(2) =FUTURE_DTG(2) -12
      FUTURE_DTG(1) =FUTURE_DTG(1) +1
23054 CONTINUE
      IRC =DTG_TO_MIN (FBB(508),FUTURE_DTG,FUTURE_MINUTE)
      DELTA_MINUTES =FUTURE_MINUTE -FBB(461)
23052 CONTINUE
      RETURN
      END
      SUBROUTINE LIB$DATE_TIME(DATE_TIME_V)
      CHARACTER *23 DATE_TIME_V
      CHARACTER *8 DATE_V
      CHARACTER *10 TIME_V
      CHARACTER *5 ZONE_V
      LOGICAL*1 STR(24)
      INTEGER LEN
      INTEGER SYS_TIME(8)
      LOGICAL*1 MONTH_TEXT(39)
      DATA MONTH_TEXT(1)/120/,MONTH_TEXT(2)/120/,MONTH_TEXT(3)/74/,MONTH
     *_TEXT(4)/65/,MONTH_TEXT(5)/78/,MONTH_TEXT(6)/70/,MONTH_TEXT(7)/69/
     *,MONTH_TEXT(8)/66/,MONTH_TEXT(9)/77/,MONTH_TEXT(10)/65/,MONTH_TEXT
     *(11)/82/,MONTH_TEXT(12)/65/,MONTH_TEXT(13)/80/,MONTH_TEXT(14)/82/,
     *MONTH_TEXT(15)/77/,MONTH_TEXT(16)/65/,MONTH_TEXT(17)/89/,MONTH_TEX
     *T(18)/74/,MONTH_TEXT(19)/85/,MONTH_TEXT(20)/78/,MONTH_TEXT(21)/74/
     *,MONTH_TEXT(22)/85/,MONTH_TEXT(23)/76/,MONTH_TEXT(24)/65/,MONTH_TE
     *XT(25)/85/,MONTH_TEXT(26)/71/,MONTH_TEXT(27)/83/,MONTH_TEXT(28)/69
     */,MONTH_TEXT(29)/80/,MONTH_TEXT(30)/79/,MONTH_TEXT(31)/67/,MONTH_T
     *EXT(32)/84/,MONTH_TEXT(33)/78/,MONTH_TEXT(34)/79/,MONTH_TEXT(35)/8
     *6/,MONTH_TEXT(36)/68/,MONTH_TEXT(37)/69/,MONTH_TEXT(38)/67/,MONTH_
     *TEXT(39)/0/
      CALL DATE_AND_TIME (DATE_V,TIME_V,ZONE_V,SYS_TIME)
      LEN =0
      CALL SMOVIZ(SYS_TIME(3),2,STR,LEN)
      CALL SMOV (45,STR,LEN)
      CALL SMOVH(MONTH_TEXT(SYS_TIME(2)*3),3,STR,LEN)
      CALL SMOV (45,STR,LEN)
      CALL SMOVI(SYS_TIME(1),STR,LEN)
      CALL SMOV (32,STR,LEN)
      CALL SMOVIZ(SYS_TIME(5),2,STR,LEN)
      CALL SMOV (58,STR,LEN)
      CALL SMOVIZ(SYS_TIME(6),2,STR,LEN)
      CALL SMOV (58,STR,LEN)
      CALL SMOVIZ(SYS_TIME(7),2,STR,LEN)
      CALL SMOV (46,STR,LEN)
      CALL SMOVIZ(SYS_TIME(8)/10,2,STR,LEN)
      CALL SMOV (0,STR,LEN)
      CALL RS2FS(STR,DATE_TIME_V)
      RETURN
      END
      INTEGER FUNCTION MONTH2INT (MONTH)
      INTEGER I,KK,EQUAL
      LOGICAL*1 MONSTR(4)
      LOGICAL*1 MONTH_TEXT(37)
      DATA MONTH_TEXT(1)/74/,MONTH_TEXT(2)/65/,MONTH_TEXT(3)/78/,MONTH_T
     *EXT(4)/70/,MONTH_TEXT(5)/69/,MONTH_TEXT(6)/66/,MONTH_TEXT(7)/77/,M
     *ONTH_TEXT(8)/65/,MONTH_TEXT(9)/82/,MONTH_TEXT(10)/65/,MONTH_TEXT(1
     *1)/80/,MONTH_TEXT(12)/82/,MONTH_TEXT(13)/77/,MONTH_TEXT(14)/65/,MO
     *NTH_TEXT(15)/89/,MONTH_TEXT(16)/74/,MONTH_TEXT(17)/85/,MONTH_TEXT(
     *18)/78/,MONTH_TEXT(19)/74/,MONTH_TEXT(20)/85/,MONTH_TEXT(21)/76/,M
     *ONTH_TEXT(22)/65/,MONTH_TEXT(23)/85/,MONTH_TEXT(24)/71/,MONTH_TEXT
     *(25)/83/,MONTH_TEXT(26)/69/,MONTH_TEXT(27)/80/,MONTH_TEXT(28)/79/,
     *MONTH_TEXT(29)/67/,MONTH_TEXT(30)/84/,MONTH_TEXT(31)/78/,MONTH_TEX
     *T(32)/79/,MONTH_TEXT(33)/86/,MONTH_TEXT(34)/68/,MONTH_TEXT(35)/69/
     *,MONTH_TEXT(36)/67/,MONTH_TEXT(37)/0/
      I=1
23056 IF(.NOT.(I.LE.12))GOTO 23058
      KK =0
      CALL SMOVH(MONTH_TEXT((I-1)*3+1),3,MONSTR,KK)
      CALL SMOV (0,MONSTR,KK)
      IF(.NOT.(EQUAL(MONTH,MONSTR).EQ.1))GOTO 23059
      GOTO 23058
23059 CONTINUE
23057 I=I+1
      GOTO 23056
23058 CONTINUE
      IF(.NOT.(I.GT.12))GOTO 23061
      I =0
23061 CONTINUE
      MONTH2INT=(I)
      RETURN
      END
      SUBROUTINE DTG_ARITH (INDTG,VALUE,OUTDTG)
      IMPLICIT NONE
      LOGICAL*1 INDTG(7)
      LOGICAL*1 OUTDTG(7)
      REAL VALUE
      REAL REALDTG(5)
      REAL*8 OFFSET
      INTEGER DTG_TO_OFFSET
      INTEGER OFFSET_TO_DTG
      INTEGER IRC
      CALL STRDTG_TO_REALDTG (INDTG,REALDTG)
      IRC =DTG_TO_OFFSET (REALDTG,OFFSET)
      OFFSET =OFFSET +VALUE
      IRC =OFFSET_TO_DTG (OFFSET,REALDTG)
      CALL REALDTG_TO_STRDTG (REALDTG,OUTDTG)
      RETURN
      END
      SUBROUTINE STRDTG_TO_REALDTG (INDTG,REALDTG)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL REALDTG(5)
      REAL CURRENT_DTG(5)
      INTEGER KK
      INTEGER CTOI
      LOGICAL*1 INDTG(7)
      LOGICAL*1 DAY(3)
      LOGICAL*1 HR(3)
      LOGICAL*1 MIN(3)
      INTEGER MIN_TO_DTG,IRC
      KK =0
      CALL SMOVH (INDTG,2,DAY,KK)
      CALL SMOV (0,DAY,KK)
      KK =0
      CALL SMOVH (INDTG(3),2,HR,KK)
      CALL SMOV (0,HR,KK)
      KK =0
      CALL SMOVH (INDTG(5),2,MIN,KK)
      CALL SMOV (0,MIN,KK)
      IRC =MIN_TO_DTG (FBB(508),FBB(461),CURRENT_DTG)
      REALDTG(1) =CURRENT_DTG(1)
      REALDTG(2) =CURRENT_DTG(2)
      KK =1
      REALDTG(3) =CTOI(DAY,KK)
      KK =1
      REALDTG(4) =CTOI(HR,KK)
      KK =1
      REALDTG(5) =CTOI(MIN,KK)
      RETURN
      END
      SUBROUTINE REALDTG_TO_STRDTG (REALDTG,OUTDTG)
      IMPLICIT NONE
      REAL REALDTG(5)
      INTEGER KK
      INTEGER CTOI
      LOGICAL*1 OUTDTG(7)
      KK =0
      CALL SMOVIZ (INT(REALDTG(3)),2,OUTDTG,KK)
      CALL SMOVIZ (INT(REALDTG(4)),2,OUTDTG,KK)
      CALL SMOVIZ (INT(REALDTG(5)),2,OUTDTG,KK)
      CALL SMOV (0,OUTDTG,KK)
      RETURN
      END
