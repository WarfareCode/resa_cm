      SUBROUTINE BINSET(VLAT,VLON,IRADUS)
      IMPLICIT NONE
      REAL*8 IOBS(10),ISHOBJ(250),ISHOBX(250)
      INTEGER ISTATION,KSTATION,IFD,ISBCT,IOBJCT,KOBJCT,IBIN,ICIRC
      INTEGER IDETCH,KMAP
      INTEGER IDELCSA,IROTAS,IROTDN,IROTINDX,ISELCSA
      INTEGER EVALDIR(144)
      REAL*8 CTKCD
      REAL QLAT,QLON,DLAT,DLON
      REAL*4 ROTLAT(13,9),ROTLON(13,9),RADIALADD(9)
      REAL*4 IMIN,KMIN
      INTEGER*4 CURRENT_GEO_SYMBOLOGY
      INTEGER USING_NEWGUI
      COMMON /PLOT_COM/ IOBS,ISHOBJ,ISHOBX,ISTATION,KSTATION,IFD,ISBCT,I
     *OBJCT,KOBJCT,IBIN,ICIRC,CTKCD,QLAT,QLON,DLAT,DLON,IDETCH,IMIN,KMAP
     *,KMIN,IROTINDX,IROTAS,IROTDN,ISELCSA,IDELCSA,ROTLAT,ROTLON,RADIALA
     *DD,EVALDIR,CURRENT_GEO_SYMBOLOGY,USING_NEWGUI
      REAL*4 RADIUS,VLAT,PLAT,VLON
      INTEGER IRADUS
      RADIUS =FLOAT(IRADUS) *1.25
      IF(.NOT.(ABS(VLAT).GT.1.396263401))GOTO 23000
      PLAT =1.396263401
      IF(.NOT.(VLAT.LT.0.0))GOTO 23002
      PLAT =-1.396263401
23002 CONTINUE
      VLAT =PLAT
23000 CONTINUE
      DLAT =0.0002908882*RADIUS
      IF(.NOT.((ABS(VLAT)+DLAT).GT.1.413716693))GOTO 23004
      RADIUS =(1.413716693 -ABS(VLAT))/0.0002908882
      DLAT =0.0002908882*RADIUS
23004 CONTINUE
      DLON =0.0002908882/ COS(VLAT) *RADIUS
      IRADUS =INT(RADIUS *.8)
      QLAT =VLAT
      QLON =VLON
      RETURN
      END
      INTEGER FUNCTION BINCK (TLAT,TLON)
      IMPLICIT NONE
      REAL*8 IOBS(10),ISHOBJ(250),ISHOBX(250)
      INTEGER ISTATION,KSTATION,IFD,ISBCT,IOBJCT,KOBJCT,IBIN,ICIRC
      INTEGER IDETCH,KMAP
      INTEGER IDELCSA,IROTAS,IROTDN,IROTINDX,ISELCSA
      INTEGER EVALDIR(144)
      REAL*8 CTKCD
      REAL QLAT,QLON,DLAT,DLON
      REAL*4 ROTLAT(13,9),ROTLON(13,9),RADIALADD(9)
      REAL*4 IMIN,KMIN
      INTEGER*4 CURRENT_GEO_SYMBOLOGY
      INTEGER USING_NEWGUI
      COMMON /PLOT_COM/ IOBS,ISHOBJ,ISHOBX,ISTATION,KSTATION,IFD,ISBCT,I
     *OBJCT,KOBJCT,IBIN,ICIRC,CTKCD,QLAT,QLON,DLAT,DLON,IDETCH,IMIN,KMAP
     *,KMIN,IROTINDX,IROTAS,IROTDN,ISELCSA,IDELCSA,ROTLAT,ROTLON,RADIALA
     *DD,EVALDIR,CURRENT_GEO_SYMBOLOGY,USING_NEWGUI
      REAL*4 DIFLON,TLON,TLAT
      IF(.NOT.(USING_NEWGUI.EQ.1))GOTO 23006
      BINCK =1
      RETURN
23006 CONTINUE
      BINCK =0
      DIFLON =ABS(TLON -QLON)
      IF(.NOT.(DIFLON.GT.3.141592654))GOTO 23008
      DIFLON =6.283185307-DIFLON
23008 CONTINUE
      IF(.NOT.(ABS(TLAT-QLAT).LE.DLAT.AND.DIFLON.LE.DLON))GOTO 23010
      BINCK =1
23010 CONTINUE
      RETURN
      END
      SUBROUTINE CLEAR_HOOKS
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 K
      HOOK_COUNT =0
      HOOK_INFO_COUNT =0
      SELECT_COUNT =0
      PRIOR_HOOK_ID =-30000
      K =1
23012 IF(.NOT.(K.LE.6))GOTO 23014
      HOOK_TYPE_COUNT(K) =0
23013 K=K+1
      GOTO 23012
23014 CONTINUE
      END
      SUBROUTINE GET_HOOK_ID (ID)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 ID
      PRIOR_HOOK_ID =PRIOR_HOOK_ID -1
      ID =PRIOR_HOOK_ID
      END
      SUBROUTINE ADD_HOOK (ID,IX,IY)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 ID,IX,IY
      IF(.NOT.(HOOK_COUNT.LT.6000))GOTO 23015
      HOOK_COUNT =HOOK_COUNT +1
      HOOK_ID(HOOK_COUNT) =ID
      HOOK_X(HOOK_COUNT) =IX
      HOOK_Y(HOOK_COUNT) =IY
      HOOK_X2(HOOK_COUNT) =0
      HOOK_Y2(HOOK_COUNT) =0
      HOOK_TYPE(HOOK_COUNT) =1
      HOOK_TYPE_COUNT(1) =HOOK_TYPE_COUNT(1) +1
23015 CONTINUE
      END
      SUBROUTINE ADD_HOOK_LINE (ID,IX,IY,JX,JY)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 ID,IX,IY,JX,JY
      IF(.NOT.(HOOK_COUNT.LT.6000))GOTO 23017
      IF(.NOT.(IX.EQ.JX.AND.IY.EQ.JY))GOTO 23019
      RETURN
23019 CONTINUE
      HOOK_COUNT =HOOK_COUNT +1
      HOOK_ID(HOOK_COUNT) =ID
      HOOK_X(HOOK_COUNT) =IX
      HOOK_Y(HOOK_COUNT) =IY
      HOOK_X2(HOOK_COUNT) =JX
      HOOK_Y2(HOOK_COUNT) =JY
      HOOK_TYPE(HOOK_COUNT) =2
      HOOK_TYPE_COUNT(2) =HOOK_TYPE_COUNT(2) +1
23017 CONTINUE
      END
      SUBROUTINE ADD_HOOK_BOX (ID,IX,IY,JX,JY)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 ID,IX,IY,JX,JY
      IF(.NOT.(HOOK_COUNT.LT.6000))GOTO 23021
      IF(.NOT.(IX.EQ.JX.AND.IY.EQ.JY))GOTO 23023
      RETURN
23023 CONTINUE
      HOOK_COUNT =HOOK_COUNT +1
      HOOK_ID(HOOK_COUNT) =ID
      HOOK_X(HOOK_COUNT) =MIN(IX,JX)
      HOOK_Y(HOOK_COUNT) =MIN(IY,JY)
      HOOK_X2(HOOK_COUNT) =MAX(JX,IX)
      HOOK_Y2(HOOK_COUNT) =MAX(JY,IX)
      HOOK_TYPE(HOOK_COUNT) =3
      HOOK_TYPE_COUNT(3) =HOOK_TYPE_COUNT(3) +1
23021 CONTINUE
      END
      SUBROUTINE ADD_HOOK_INFO (ID,A_LINE)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 ID
      CHARACTER *(*) A_LINE
      IF(.NOT.(HOOK_INFO_COUNT.LT.1000))GOTO 23025
      HOOK_INFO_COUNT =HOOK_INFO_COUNT +1
      HOOK_INFO_ID(HOOK_INFO_COUNT) =ID
      HOOK_INFO_TEXT(HOOK_INFO_COUNT) =A_LINE
23025 CONTINUE
      END
      SUBROUTINE CHECK_HOOK_INFO (ID,TEXT)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 ID
      CHARACTER *(*) TEXT
      INTEGER*4 N
      N =1
23027 IF(.NOT.(N.LE.HOOK_INFO_COUNT))GOTO 23029
      IF(.NOT.(ABS(HOOK_INFO_ID(N)).NE.ABS(ID)))GOTO 23030
      GOTO 23028
23030 CONTINUE
      TEXT =HOOK_INFO_TEXT(N)
      RETURN
23028 N=N+1
      GOTO 23027
23029 CONTINUE
      TEXT =''
      END
      SUBROUTINE CHECK_HOOK (IX,IY,ID)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 IX,IY,ID
      INTEGER*4 N,ID_INPUT,LIMIT
      INTEGER BOXES,LINES,POINTS
      POINTS =1
      LINES =2
      BOXES =0
      GOTO 6001
      ENTRY CHECK_BOX_HOOK (IX,IY,ID)
      BOXES =1
      LINES =0
      POINTS =0
      GOTO 6001
      ENTRY CHECK_LINE_HOOK (IX,IY,ID)
      BOXES =0
      LINES =1
      POINTS =0
6001  ID_INPUT =ID
      ID =0
      IF(.NOT.(ID_INPUT.NE.0.AND.SELECT_COUNT.NE.0))GOTO 23032
      N =1
23034 IF(.NOT.(N.LE.SELECT_COUNT))GOTO 23036
      IF(.NOT.(SELECT_ID(N).NE.ID_INPUT))GOTO 23037
      GOTO 23035
23037 CONTINUE
      ID =SELECT_ID(N+1)
      GOTO 23036
23035 N=N+1
      GOTO 23034
23036 CONTINUE
      GOTO 23033
23032 CONTINUE
      SELECT_COUNT =0
      LIMIT =20
      N =1
23039 IF(.NOT.(N.LE.6))GOTO 23041
      IF(.NOT.(N.EQ.POINTS))GOTO 23042
      CALL APPEND_POINT_HOOKS (IX,IY,LIMIT)
23042 CONTINUE
      IF(.NOT.(N.EQ.LINES))GOTO 23044
      CALL APPEND_LINE_HOOKS (IX,IY,LIMIT)
23044 CONTINUE
      IF(.NOT.(N.EQ.BOXES))GOTO 23046
      CALL APPEND_BOX_HOOKS (IX,IY,LIMIT)
23046 CONTINUE
23040 N=N+1
      GOTO 23039
23041 CONTINUE
      IF(.NOT.(SELECT_COUNT.EQ.0))GOTO 23048
      LIMIT =200
      N =1
23050 IF(.NOT.(N.LE.6))GOTO 23052
      IF(.NOT.(N.EQ.POINTS))GOTO 23053
      CALL APPEND_POINT_HOOKS (IX,IY,LIMIT)
23053 CONTINUE
      IF(.NOT.(N.EQ.LINES))GOTO 23055
      CALL APPEND_LINE_HOOKS (IX,IY,LIMIT)
23055 CONTINUE
      IF(.NOT.(N.EQ.BOXES))GOTO 23057
      CALL APPEND_BOX_HOOKS (IX,IY,LIMIT)
23057 CONTINUE
23051 N=N+1
      GOTO 23050
23052 CONTINUE
      IF(.NOT.(SELECT_COUNT.EQ.1))GOTO 23059
      CONTINUE
      GOTO 23060
23059 CONTINUE
      IF(.NOT.(SELECT_DIST(1).LE.(SELECT_DIST(2)*0.50)))GOTO 23061
      SELECT_COUNT =1
      SELECT_ID(2 ) =0
      GOTO 23062
23061 CONTINUE
      SELECT_COUNT =0
      SELECT_ID(1 ) =0
23062 CONTINUE
23060 CONTINUE
23048 CONTINUE
      ID =SELECT_ID(1 )
23033 CONTINUE
      END
      SUBROUTINE APPEND_POINT_HOOKS (IX,IY,LIMIT)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 IX,IY,LIMIT
      INTEGER*4 DX,DY,D,N
      IF(.NOT.(HOOK_TYPE_COUNT(1).EQ.0))GOTO 23063
      RETURN
23063 CONTINUE
      N =1
23065 IF(.NOT.(N.LE.HOOK_COUNT))GOTO 23067
      IF(.NOT.(HOOK_TYPE(N).NE.1))GOTO 23068
      GOTO 23066
23068 CONTINUE
      DX =IABS (HOOK_X(N) -IX)
      DY =IABS (HOOK_Y(N) -IY)
      IF(.NOT.(DX.GT.LIMIT.OR.DY.GT.LIMIT))GOTO 23070
      GOTO 23066
23070 CONTINUE
      D =SQRT(FLOAT(DX *DX +DY *DY ) ) +0.5
      IF(.NOT.(D.GT.LIMIT))GOTO 23072
      GOTO 23066
23072 CONTINUE
      CALL APPEND_1_HOOK (HOOK_ID(N) ,D)
23066 N=N+1
      GOTO 23065
23067 CONTINUE
      END
      SUBROUTINE APPEND_LINE_HOOKS (IX,IY,LIMIT)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 IX,IY,LIMIT
      INTEGER*4 DX,DY,D,N
      REAL*4 SLOPE,B
      IF(.NOT.(HOOK_TYPE_COUNT(2).EQ.0))GOTO 23074
      RETURN
23074 CONTINUE
      N =1
23076 IF(.NOT.(N.LE.HOOK_COUNT))GOTO 23078
      IF(.NOT.(HOOK_TYPE(N).NE.2))GOTO 23079
      GOTO 23077
23079 CONTINUE
      IF(.NOT.(IX.LT.MIN(HOOK_X(N),HOOK_X2(N))-10))GOTO 23081
      GOTO 23077
23081 CONTINUE
      IF(.NOT.(IX.GT.MAX(HOOK_X(N),HOOK_X2(N))+10))GOTO 23083
      GOTO 23077
23083 CONTINUE
      IF(.NOT.(IY.LT.MIN(HOOK_Y(N),HOOK_Y2(N))-10))GOTO 23085
      GOTO 23077
23085 CONTINUE
      IF(.NOT.(IY.GT.MAX(HOOK_Y(N),HOOK_Y2(N))+10))GOTO 23087
      GOTO 23077
23087 CONTINUE
      DX =HOOK_X(N) -HOOK_X2(N)
      DY =HOOK_Y(N) -HOOK_Y2(N)
      IF(.NOT.(DX.NE.0))GOTO 23089
      SLOPE =FLOAT(DY) / FLOAT(DX)
      B =HOOK_Y(N) -(SLOPE *HOOK_X(N))
      D =(SLOPE *IX -IY +B) / SQRT(SLOPE*SLOPE+1)
      GOTO 23090
23089 CONTINUE
      D =IX -HOOK_X(N)
23090 CONTINUE
      D =ABS(D)
      IF(.NOT.(D.GT.10))GOTO 23091
      GOTO 23077
23091 CONTINUE
      CALL APPEND_1_HOOK (HOOK_ID(N) ,D +(LIMIT/2))
23077 N=N+1
      GOTO 23076
23078 CONTINUE
      END
      SUBROUTINE APPEND_BOX_HOOKS (IX,IY,LIMIT)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 IX,IY,LIMIT
      INTEGER*4 D,N
      IF(.NOT.(HOOK_TYPE_COUNT(3).EQ.0))GOTO 23093
      RETURN
23093 CONTINUE
      N =1
23095 IF(.NOT.(N.LE.HOOK_COUNT))GOTO 23097
      IF(.NOT.(HOOK_TYPE(N).NE.3))GOTO 23098
      GOTO 23096
23098 CONTINUE
      IF(.NOT.(IX.LT.HOOK_X(N)-2))GOTO 23100
      GOTO 23096
23100 CONTINUE
      IF(.NOT.(IX.GT.HOOK_X2(N)+2))GOTO 23102
      GOTO 23096
23102 CONTINUE
      IF(.NOT.(IY.LT.HOOK_Y(N)-2))GOTO 23104
      GOTO 23096
23104 CONTINUE
      IF(.NOT.(IY.GT.HOOK_Y2(N)+2))GOTO 23106
      GOTO 23096
23106 CONTINUE
      D =1
      IF(.NOT.(D.GT.LIMIT))GOTO 23108
      GOTO 23096
23108 CONTINUE
      CALL APPEND_1_HOOK (HOOK_ID(N) ,D)
23096 N=N+1
      GOTO 23095
23097 CONTINUE
      END
      SUBROUTINE APPEND_1_HOOK (ID,DIST)
      IMPLICIT NONE
      INTEGER*4 HOOK_ID(6000)
      INTEGER*4 HOOK_X(6000),HOOK_Y(6000)
      INTEGER*4 HOOK_X2(6000),HOOK_Y2(6000)
      BYTE HOOK_TYPE(6000)
      INTEGER*4 HOOK_INFO_ID(1000)
      CHARACTER *100 HOOK_INFO_TEXT (1000)
      INTEGER*4 SELECT_ID(25 )
      INTEGER*4 SELECT_DIST(25 )
      INTEGER*4 SELECT_TEMP_ID
      INTEGER*4 SELECT_TEMP_DIST
      INTEGER*4 HOOK_COUNT,SELECT_COUNT,HOOK_INFO_COUNT
      INTEGER*4 HOOK_TYPE_COUNT(6)
      INTEGER*4 PRIOR_HOOK_ID
      COMMON / HOOK_COMMON / HOOK_COUNT,HOOK_ID,HOOK_X,HOOK_Y,HOOK_X2,HO
     *OK_Y2,HOOK_TYPE,HOOK_INFO_COUNT,HOOK_INFO_ID,HOOK_INFO_TEXT,SELECT
     *_COUNT,SELECT_ID,SELECT_DIST,SELECT_TEMP_ID,SELECT_TEMP_DIST,PRIOR
     *_HOOK_ID,HOOK_TYPE_COUNT
      INTEGER*4 ID,DIST
      INTEGER*4 PNT1,PNT2
      LOGICAL*1 NOFLIP,DUPED
      DUPED =.FALSE.
      PNT1 =1
23110 IF(.NOT.(PNT1.LE.SELECT_COUNT))GOTO 23112
      IF(.NOT.(SELECT_ID(PNT1).NE.ID))GOTO 23113
      GOTO 23111
23113 CONTINUE
      IF(.NOT.(SELECT_DIST(PNT1).LT.DIST))GOTO 23115
      RETURN
23115 CONTINUE
      SELECT_DIST(PNT1) =DIST
      DUPED =.TRUE.
      GOTO 23112
23111 PNT1=PNT1+1
      GOTO 23110
23112 CONTINUE
      IF(.NOT.(DUPED))GOTO 23117
      GOTO 23118
23117 CONTINUE
      IF(.NOT.(SELECT_COUNT.GE.24))GOTO 23119
      IF(.NOT.(DIST.LT.SELECT_DIST(SELECT_COUNT)))GOTO 23121
      SELECT_ID(SELECT_COUNT) =ID
      SELECT_DIST(SELECT_COUNT) =DIST
      GOTO 23122
23121 CONTINUE
      RETURN
23122 CONTINUE
      GOTO 23120
23119 CONTINUE
      SELECT_COUNT =SELECT_COUNT +1
      SELECT_ID(SELECT_COUNT) =ID
      SELECT_DIST(SELECT_COUNT) =DIST
23120 CONTINUE
23118 CONTINUE
23123 CONTINUE
      NOFLIP =.TRUE.
      PNT1 =SELECT_COUNT
23126 IF(.NOT.(PNT1.GT.1))GOTO 23128
      PNT2 =PNT1 -1
      IF(.NOT.(SELECT_DIST(PNT1).GE.SELECT_DIST(PNT2)))GOTO 23129
      GOTO 23127
23129 CONTINUE
      SELECT_TEMP_ID =SELECT_ID(PNT1)
      SELECT_TEMP_DIST =SELECT_DIST(PNT1)
      SELECT_ID(PNT1) =SELECT_ID(PNT2)
      SELECT_DIST(PNT1) =SELECT_DIST(PNT2)
      SELECT_ID(PNT2) =SELECT_TEMP_ID
      SELECT_DIST(PNT2) =SELECT_TEMP_DIST
      NOFLIP =.FALSE.
23127 PNT1=PNT1-1
      GOTO 23126
23128 CONTINUE
23124 IF(.NOT.(NOFLIP))GOTO 23123
23125 CONTINUE
      SELECT_ID(SELECT_COUNT+1) =0
      END
      SUBROUTINE GET_L16_TRACK_LITERAL (KPOINT_L16,LITERAL_REPRESENTATIO
     *N)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER KPOINT_L16
      REAL*8 LITERAL_REPRESENTATION
      REAL*8 L_REPRESENTATION
      LOGICAL*1 C_REPRESENTATION(8)
      INTEGER LEN
      INTEGER TEMP
      LOGICAL*1 CONVERSION_TABLE(32)
      EQUIVALENCE (L_REPRESENTATION,C_REPRESENTATION)
      LEN =0
      CALL SMOVV ('01234567ABCDEFGHJKLMNPQRSTUVWXYZ',CONVERSION_TABLE,LE
     *N)
      L_REPRESENTATION ='2020202020202020'X
      LEN =0
      TEMP =(IAND(ISHFT(IBB(KPOINT_L16+1),-(14)),'001F'X))+1
      CALL SMOVH (CONVERSION_TABLE(TEMP),1,C_REPRESENTATION,LEN)
      TEMP =(IAND(ISHFT(IBB(KPOINT_L16+1),-(9)),'001F'X))+1
      CALL SMOVH (CONVERSION_TABLE(TEMP),1,C_REPRESENTATION,LEN)
      TEMP =(IAND(ISHFT(IBB(KPOINT_L16+1),-(6)),'0007'X))+1
      CALL SMOVH (CONVERSION_TABLE(TEMP),1,C_REPRESENTATION,LEN)
      TEMP =(IAND(ISHFT(IBB(KPOINT_L16+1),-(3)),'0007'X))+1
      CALL SMOVH (CONVERSION_TABLE(TEMP),1,C_REPRESENTATION,LEN)
      TEMP =(IAND(ISHFT(IBB(KPOINT_L16+1),-(0)),'0007'X))+1
      CALL SMOVH (CONVERSION_TABLE(TEMP),1,C_REPRESENTATION,LEN)
      LITERAL_REPRESENTATION =L_REPRESENTATION
      RETURN
      END
      SUBROUTINE PUCK_HOOK_REQUEST (X_IN,Y_IN)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 IOBS(10),ISHOBJ(250),ISHOBX(250)
      INTEGER ISTATION,KSTATION,IFD,ISBCT,IOBJCT,KOBJCT,IBIN,ICIRC
      INTEGER IDETCH,KMAP
      INTEGER IDELCSA,IROTAS,IROTDN,IROTINDX,ISELCSA
      INTEGER EVALDIR(144)
      REAL*8 CTKCD
      REAL QLAT,QLON,DLAT,DLON
      REAL*4 ROTLAT(13,9),ROTLON(13,9),RADIALADD(9)
      REAL*4 IMIN,KMIN
      INTEGER*4 CURRENT_GEO_SYMBOLOGY
      INTEGER USING_NEWGUI
      COMMON /PLOT_COM/ IOBS,ISHOBJ,ISHOBX,ISTATION,KSTATION,IFD,ISBCT,I
     *OBJCT,KOBJCT,IBIN,ICIRC,CTKCD,QLAT,QLON,DLAT,DLON,IDETCH,IMIN,KMAP
     *,KMIN,IROTINDX,IROTAS,IROTDN,ISELCSA,IDELCSA,ROTLAT,ROTLON,RADIALA
     *DD,EVALDIR,CURRENT_GEO_SYMBOLOGY,USING_NEWGUI
      INTEGER X_IN,Y_IN
      INTEGER CURR_IX,CURR_IY
      INTEGER LAST_IX / -1 /
      INTEGER LAST_IY / -1 /
      INTEGER ID / 0 /
      CHARACTER  V_STA_PLOTINPUT*24
      INTEGER KPOINT_UNT,KPOINT_OWN,KPOINT_RMT,KPOINT_RVU
      INTEGER KPOINT_UNT3,KPOINT_MC
      INTEGER I_UNT_TYPE,I_OWN_TYPE
      INTEGER I_RMT_DETECTIONTYPE,I_RMT_DETECTOR,I_RMT_LASTDETTYPE
      INTEGER KPOINT_STA
      INTEGER ICOURSE,ISPEED,IALT,IDEPTH,ILEN,ISOURCE,IBEAR
      INTEGER IELEVATION
      INTEGER*4 N_LINE,N,LEN_LINE
      REAL*8 HTYPE,CSTRIP8,NAME,CSTRIP,N_SOURCE,N_TYPE,N_EMIT
      INTEGER KPOINT_UNT2,KPOINT_SSR,KPOINT_HFD,KPOINT_SWD,KPOINT_SOS
      REAL*8 SITE1,SITE2
      INTEGER*4 INDX_UNT,INDX_OWN,INDX_RMT,INDX_SSR,INDX_HFD,INDX_SWD,IN
     *DX_SOS
      INTEGER KPOINT_RAD,I_SSR_DETTYPE,I_UNT_VIEW
      INTEGER*4 INDX_AGD,KPOINT_AGD,I_AGD_ALSPCLASS
      REAL*8 AGD_TYPE,AGD_ALSPID
      INTEGER*4 INDX_L16,KPOINT_L16
      LOGICAL*1 MSG(32)
      CHARACTER A_LINE*100,B_LINE*48
      INTEGER I_STA_PLOTINPUTREQUEST
      INTEGER KK
      REAL*8 LITERAL_TRACK_NUMBER
      CURR_IX =X_IN
      CURR_IY =Y_IN
      KK =0
      CALL SMOVV('                  ',MSG,KK)
      CALL SMOV(0,MSG,KK)
      CALL DRAW_TEXT_C (15,MSG,13)
      CALL DRAW_TEXT_C (14,MSG,13)
      CALL DRAW_TEXT_C (13,MSG,13)
      CALL DRAW_TEXT_C (12,MSG,13)
      CALL DRAW_TEXT_C (11,MSG,13)
      CALL DRAW_TEXT_C (10,MSG,13)
      IF(.NOT.(IABS(LAST_IX-CURR_IX).GT.2.OR.IABS(LAST_IY-CURR_IY).GT.2)
     *)GOTO 23131
      ID =0
      LAST_IX =CURR_IX
      LAST_IY =CURR_IY
23131 CONTINUE
      CALL CHECK_HOOK (LAST_IX,LAST_IY,ID)
      IF(.NOT.(ID.LT.0))GOTO 23133
      CALL CHECK_HOOK_INFO (ID,A_LINE)
      IF(.NOT.(A_LINE.NE.' '))GOTO 23135
      N_LINE =15
      N =0
23137 CONTINUE
      B_LINE =''
      CALL STR_ELEMENT (B_LINE,N,';',A_LINE)
      IF(.NOT.(B_LINE.EQ.''))GOTO 23140
      GOTO 23139
23140 CONTINUE
      N =N +1
      CALL STR_TRIM(B_LINE,B_LINE,LEN_LINE)
      ILEN =0
      CALL SMOVV (B_LINE(1:LEN_LINE),MSG,ILEN)
      CALL SMOV (0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23138 GOTO 23137
23139 CONTINUE
23135 CONTINUE
      GOTO 23134
23133 CONTINUE
      IF(.NOT.(ID.GT.0))GOTO 23142
      N_LINE =15
      IALT =0
      IELEVATION =0
      IDEPTH =0
      ICOURSE =-1
      ISPEED =-1
      IBEAR =-1
      ISOURCE =-1
      N_SOURCE='2020202020202020'X
      N_TYPE ='2020202020202020'X
      N_EMIT ='2020202020202020'X
      SITE1 ='2020202020202020'X
      SITE2 ='2020202020202020'X
      AGD_TYPE ='2020202020202020'X
      AGD_ALSPID ='2020202020202020'X
      INDX_UNT =ID
      INDX_OWN =INDX_UNT -4000
      INDX_RMT =INDX_OWN -10000
      INDX_SSR =INDX_RMT -40000
      INDX_HFD =INDX_SSR -5000
      INDX_SWD =INDX_HFD -10000
      INDX_SOS =INDX_SWD -1000
      INDX_AGD =INDX_SOS -1000
      INDX_L16 =INDX_AGD -100000
      IF(.NOT.(INDX_UNT.LE.4000))GOTO 23144
      KPOINT_UNT=IBBP(1,01)-104+(104)*INDX_UNT
      NAME =CSTRIP8(IBB(KPOINT_UNT))
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      IF(.NOT.(I_UNT_TYPE.NE.7))GOTO 23146
      ICOURSE =FBB(KPOINT_UNT+18)*180.0 / 3.141592654
      ISPEED =FBB(KPOINT_UNT+21)+0.5
23146 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.7.OR.I_UNT_TYPE.EQ.3.OR.I_UNT_TYPE.EQ.4.OR.
     *I_UNT_TYPE.EQ.7.OR.I_UNT_TYPE.EQ.8.OR.I_UNT_TYPE.EQ.13))GOTO 23148
      IELEVATION =(IAND(ISHFT(IBB(KPOINT_UNT+61),-(0)),'1FFFFF'X))
23148 CONTINUE
      IF(.NOT.((I_UNT_TYPE.EQ.1).OR.(I_UNT_TYPE.EQ.32).OR.(I_UNT_TYPE.EQ
     *.5)))GOTO 23150
      IALT =(IAND(ISHFT(IBB(KPOINT_UNT+61),-(0)),'1FFFFF'X))
      GOTO 23151
23150 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.2))GOTO 23152
      IDEPTH =(IAND(ISHFT(IBB(KPOINT_UNT+61),-(0)),'1FFFFF'X))
23152 CONTINUE
23151 CONTINUE
      HTYPE ='FORCE'
      GOTO 23145
23144 CONTINUE
      IF(.NOT.(INDX_OWN.LE.10000))GOTO 23154
      KPOINT_OWN=IBBP(1,57)-19+(19)*INDX_OWN
      KPOINT_UNT=IBBP(1,01)-104+(104)*(IAND(ISHFT(IBB(KPOINT_OWN+7),-(0)
     *),'FFFF'X))
      NAME =CSTRIP8(IBB(KPOINT_UNT))
      ICOURSE =(IAND(ISHFT(IBB(KPOINT_OWN+3),-(0)),'01FF'X))
      ISPEED =(IAND(ISHFT(IBB(KPOINT_OWN+7),-(16)),'0FFF'X))
      I_OWN_TYPE=(IAND(ISHFT(IBB(KPOINT_OWN+10),-(11)),'00FF'X))
      IF(.NOT.((I_OWN_TYPE.EQ.1).OR.(I_OWN_TYPE.EQ.32)))GOTO 23156
      IALT =(IAND(ISHFT(IBB(KPOINT_OWN+3),-(11)),'1FFFFF'X))*100
      GOTO 23157
23156 CONTINUE
      IF(.NOT.(I_OWN_TYPE.EQ.2))GOTO 23158
      IDEPTH =(IAND(ISHFT(IBB(KPOINT_OWN+3),-(11)),'1FFFFF'X))
23158 CONTINUE
23157 CONTINUE
      HTYPE ='FORCE'
      GOTO 23155
23154 CONTINUE
      IF(.NOT.(INDX_RMT.LE.40000))GOTO 23160
      KPOINT_RMT=IBBP(1,56)-21+(21)*INDX_RMT
      CALL MAKE_TRACK_NUM (KPOINT_RMT,NAME)
      I_RMT_DETECTIONTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+8),-(25)),'0003'X))
      I_RMT_DETECTOR=(IAND(ISHFT(IBB(KPOINT_RMT+12),-(16)),'FFFF'X))
      KPOINT_UNT3=IBBP(1,01)-104+(104)*I_RMT_DETECTOR
      N_SOURCE =CSTRIP8(IBB(KPOINT_UNT3))
      IBEAR =(IAND(ISHFT(IBB(KPOINT_RMT+7),-(10)),'01FF'X))
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.2))GOTO 23162
      N_TYPE ='(SON)'
      ISOURCE =1
      HTYPE ='BEAR'
      GOTO 23163
23162 CONTINUE
      IF(.NOT.(I_RMT_DETECTIONTYPE.EQ.3))GOTO 23164
      N_TYPE ='(ESM)'
      ISOURCE =1
      N_EMIT =CSTRIP8(IBB((IAND(ISHFT(IBB(KPOINT_RMT+3),-(0)),'0FFFFF'X)
     *+IBBP(1,34))))
      HTYPE ='BEAR'
      GOTO 23165
23164 CONTINUE
      I_RMT_LASTDETTYPE=(IAND(ISHFT(IBB(KPOINT_RMT+7),-(28)),'0007'X))
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.1))GOTO 23166
      N_TYPE ='(RAD)'
      GOTO 23167
23166 CONTINUE
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.2))GOTO 23168
      N_TYPE ='(SON)'
      GOTO 23169
23168 CONTINUE
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.3))GOTO 23170
      N_TYPE ='(MAD)'
      GOTO 23171
23170 CONTINUE
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.4))GOTO 23172
      N_TYPE ='(VIS)'
      GOTO 23173
23172 CONTINUE
      IF(.NOT.(I_RMT_LASTDETTYPE.EQ.5))GOTO 23174
      N_TYPE ='(LID)'
      GOTO 23175
23174 CONTINUE
      N_TYPE ='2020202020202020'X
23175 CONTINUE
23173 CONTINUE
23171 CONTINUE
23169 CONTINUE
23167 CONTINUE
      ICOURSE =(IAND(ISHFT(IBB(KPOINT_RMT+7),-(19)),'01FF'X))
      ISPEED =(IAND(ISHFT(IBB(KPOINT_RMT+3),-(20)),'0FFF'X))
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_RMT+13),-(29)),'0003'X)).EQ.1))GOT
     *O 23176
      IALT =(IAND(ISHFT(IBB(KPOINT_RMT+6),-(0)),'03FFFF'X))*100
23176 CONTINUE
      HTYPE ='TRACK'
23165 CONTINUE
23163 CONTINUE
      GOTO 23161
23160 CONTINUE
      IF(.NOT.(INDX_SSR.LE.5000))GOTO 23178
      KPOINT_SSR=IBBP(1,53)-7+(7)*INDX_SSR
      KK =0
      KPOINT_RVU=IBBP(1,67)-2+(2)*((IAND(ISHFT(IBB(KPOINT_SSR+3),-(25)),
     * '000F'X)))
      CALL SMOV (CSTRIP(IBB(KPOINT_RVU),4,1),NAME,KK)
      I_SSR_DETTYPE=(IAND(ISHFT(IBB(KPOINT_SSR+3),-(0)),'0007'X))
      IF(.NOT.(I_SSR_DETTYPE.EQ. 0))GOTO 23180
      CALL SMOVV ('E',NAME,KK)
      GOTO 23181
23180 CONTINUE
      IF(.NOT.(I_SSR_DETTYPE.EQ.1))GOTO 23182
      CALL SMOVV ('A',NAME,KK)
      GOTO 23183
23182 CONTINUE
      IF(.NOT.(I_SSR_DETTYPE.EQ.3))GOTO 23184
      CALL SMOVV ('S',NAME,KK)
      GOTO 23185
23184 CONTINUE
      IF(.NOT.(I_SSR_DETTYPE.EQ.4))GOTO 23186
      CALL SMOVV ('I',NAME,KK)
      GOTO 23187
23186 CONTINUE
      CALL SMOVV ('U',NAME,KK)
23187 CONTINUE
23185 CONTINUE
23183 CONTINUE
23181 CONTINUE
      CALL SMOVIZ ((IAND(ISHFT(IBB(KPOINT_SSR+5),-(16)),'FFFF'X)),3,NAME
     *,KK)
      CALL SMOV (0,NAME,KK)
      N_TYPE ='(SAT)'
      HTYPE ='TRACK'
      KPOINT_RAD=IBBP(1,34)-151+(151)*((IAND(ISHFT(IBB(KPOINT_SSR+3),-(3
     *)),'03FF'X)))
      N_EMIT =CSTRIP8(IBB(KPOINT_RAD))
      GOTO 23179
23178 CONTINUE
      IF(.NOT.(INDX_HFD.LE.10000))GOTO 23188
      KPOINT_HFD=IBBP(1,25)-11+(11)*INDX_HFD
      KPOINT_UNT=IBBP(1,01)-104+(104)*((IAND(ISHFT(IBB(KPOINT_HFD+7),-(0
     *)),'FFFF'X)))
      KPOINT_UNT2=IBBP(1,01)-104+(104)*((IAND(ISHFT(IBB(KPOINT_HFD+7),-(
     *16)),'FFFF'X)))
      I_UNT_VIEW=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(28)),'000F'X))
      KK =0
      IF(.NOT.(I_UNT_VIEW.LT.IBB(131).AND.I_UNT_VIEW.GE.IBB(129)))GOTO 2
     *3190
      CALL SMOVV('BH',NAME,KK)
      GOTO 23191
23190 CONTINUE
      CALL SMOVV('OH',NAME,KK)
23191 CONTINUE
      CALL SMOVIZ ((IAND(ISHFT(IBB(KPOINT_HFD+4),-(0)),'FFFF'X)),3,NAME,
     *KK)
      CALL SMOV (0,NAME,KK)
      N_TYPE ='(HFD)'
      SITE1 =CSTRIP8(IBB(KPOINT_UNT))
      IBEAR =(IAND(ISHFT(IBB(KPOINT_HFD+6),-(18)),'01FF'X))
      IF(.NOT.(IBEAR.GT.0))GOTO 23192
      HTYPE ='BEAR'
      GOTO 23193
23192 CONTINUE
      HTYPE ='TRACK'
23193 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_HFD+4),-(31)),'0001'X)).EQ.1))GOTO
     * 23194
      SITE2 =CSTRIP8(IBB(KPOINT_UNT2))
23194 CONTINUE
      GOTO 23189
23188 CONTINUE
      IF(.NOT.(INDX_SWD.LE.1000))GOTO 23196
      KPOINT_SWD=IBBP(1,107)-8+(8)*INDX_SWD
      KK =0
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_SWD+5),-(0)),'000F'X)).EQ.1))GOTO 
     *23198
      CALL SMOVV('BT',NAME,KK)
      GOTO 23199
23198 CONTINUE
      CALL SMOVV('OT',NAME,KK)
23199 CONTINUE
      CALL SMOVIZ((IAND(ISHFT(IBB(KPOINT_SWD+6),-(16)),'FFFF'X)),3,NAME,
     *KK)
      CALL SMOV(0,NAME,KK)
      N_TYPE ='(SWB)'
      ICOURSE =(IAND(ISHFT(IBB(KPOINT_SWD+5),-(5)),'01FF'X))
      ISPEED =(IAND(ISHFT(IBB(KPOINT_SWD+4),-(26)),'003F'X))
      HTYPE ='TRACK'
      GOTO 23197
23196 CONTINUE
      IF(.NOT.(INDX_SOS.LE.1000))GOTO 23200
      KPOINT_SOS=IBBP(1,26)-9+(9)*INDX_SOS
      KK =0
      CALL SMOVV('BZ',NAME,KK)
      CALL SMOVIZ((IAND(ISHFT(IBB(KPOINT_SOS+6),-(0)),'FFFF'X)),3,NAME,K
     *K)
      CALL SMOV(0,NAME,KK)
      N_TYPE ='(SOS)'
      ICOURSE =(IAND(ISHFT(IBB(KPOINT_SOS+6),-(16)),'01FF'X))
      ISPEED =(IAND(ISHFT(IBB(KPOINT_SOS+5),-(26)),'003F'X))
      HTYPE ='TRACK'
      GOTO 23201
23200 CONTINUE
      IF(.NOT.(INDX_AGD.LE.100000))GOTO 23202
      KPOINT_AGD=IBBP(1,144)-7+(7)*(INDX_AGD)
      NAME ='2020202020202020'X
      KK =0
      CALL SMOVHN (CSTRIP8(IBB(KPOINT_AGD)),8,NAME,KK)
      KK =0
      I_AGD_ALSPCLASS=(IAND(ISHFT(IBB(KPOINT_AGD+2),-(26)),'001F'X))
      IF(.NOT.(I_AGD_ALSPCLASS.EQ.17))GOTO 23204
      KPOINT_RAD=(IAND(ISHFT(IBB(KPOINT_AGD+3),-(0)),'07FFFF'X)+IBBP(1,3
     *4))
      IF(.NOT.((KPOINT_RAD.GE.IBBP(1,34).AND.KPOINT_RAD.LT.(IBBP(1,34)+I
     *BBP(2,34)))))GOTO 23206
      CALL SMOVHN (CSTRIP8(IBB(KPOINT_RAD)),8,AGD_TYPE,KK)
      GOTO 23207
23206 CONTINUE
      CALL SMOVV ('RADAR',AGD_TYPE,KK)
23207 CONTINUE
      GOTO 23205
23204 CONTINUE
      IF(.NOT.(I_AGD_ALSPCLASS.EQ.11.OR.I_AGD_ALSPCLASS.EQ.9))GOTO 23208
      KPOINT_MC=(IAND(ISHFT(IBB(KPOINT_AGD+3),-(0)),'07FFFF'X)+IBBP(1,40
     *))
      IF(.NOT.((KPOINT_MC.GE.IBBP(1,40).AND.KPOINT_MC.LT.(IBBP(1,40)+IBB
     *P(2,40)))))GOTO 23210
      CALL SMOVHN (CSTRIP8(IBB(KPOINT_MC)),8,AGD_TYPE,KK)
      GOTO 23211
23210 CONTINUE
      CALL SMOVV ('SAM SITE',AGD_TYPE,KK)
23211 CONTINUE
      GOTO 23209
23208 CONTINUE
      IF(.NOT.(I_AGD_ALSPCLASS.EQ.12))GOTO 23212
      CALL SMOVV ('COMBAT',AGD_TYPE,KK)
      GOTO 23213
23212 CONTINUE
      IF(.NOT.(I_AGD_ALSPCLASS.EQ.14))GOTO 23214
      CALL SMOVV ('CONVOY',AGD_TYPE,KK)
      GOTO 23215
23214 CONTINUE
      IF(.NOT.(I_AGD_ALSPCLASS.EQ.15.OR.I_AGD_ALSPCLASS.EQ.16))GOTO 2321
     *6
      CALL SMOVV ('SUP UNIT',AGD_TYPE,KK)
23216 CONTINUE
23215 CONTINUE
23213 CONTINUE
23209 CONTINUE
23205 CONTINUE
      KK =0
      CALL SMOVI ((IAND(ISHFT(IBB(KPOINT_AGD+2),-(0)),'03FFFFFF'X)),AGD_
     *ALSPID,KK)
      ICOURSE =INT (((IAND(ISHFT(IBB(KPOINT_AGD+4),-(0)),'FFFF'X)*1.0*0.
     *001)*180.0 / 3.141592654) +0.5)
      ISPEED =INT ((IAND(ISHFT(IBB(KPOINT_AGD+4),-(16)),'FFFF'X)*1.0*1.0
     *)+0.5)
      HTYPE ='GROUND'
23202 CONTINUE
23201 CONTINUE
23197 CONTINUE
23189 CONTINUE
23179 CONTINUE
23161 CONTINUE
23155 CONTINUE
23145 CONTINUE
      ILEN =0
      CALL SMOVV ('ID:  ',MSG,ILEN)
      CALL SMOVHN (NAME,8,MSG,ILEN)
      CALL SMOVV (' ',MSG,ILEN)
      CALL SMOVHN (N_TYPE,8,MSG,ILEN)
      CALL SMOV (0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
      IF(.NOT.(KSTATION.GT.0))GOTO 23218
      KPOINT_STA=IBBP(1,65)-40771+(40771)*KSTATION
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_STA+29),-(16)),'0001'X)).EQ.0))GOT
     *O 23220
      IBB(KPOINT_STA+29)=IOR(IAND(IBB(KPOINT_STA+29),NOT(ISHFT('0001'X,1
     *6))),ISHFT(IAND((1),'0001'X),16))
23220 CONTINUE
      I_STA_PLOTINPUTREQUEST=(IAND(ISHFT(IBB(KPOINT_STA+29),-(12)),     
     *'0007'X))
      IF(.NOT.(I_STA_PLOTINPUTREQUEST.EQ.4.OR.(I_STA_PLOTINPUTREQUEST.EQ
     *.2.AND.HTYPE.EQ.'FORCE').OR.(I_STA_PLOTINPUTREQUEST.EQ.5.AND.HTYPE
     *.EQ.'GROUND').OR.(I_STA_PLOTINPUTREQUEST.EQ.3.AND.HTYPE.EQ.       
     *'TRACK')))GOTO 23222
      ILEN =0
      IF(.NOT.(I_STA_PLOTINPUTREQUEST.NE.4))GOTO 23224
      CALL SMOVH (HTYPE,7,MSG,ILEN)
23224 CONTINUE
      IF(.NOT.(HTYPE.EQ.'GROUND'))GOTO 23226
      CALL SMOVHN (AGD_ALSPID,8,MSG,ILEN)
      GOTO 23227
23226 CONTINUE
      CALL SMOVHN (NAME,8,MSG,ILEN)
23227 CONTINUE
      CALL SMOVV (' ',MSG,ILEN)
      CALL SMOV (0,MSG,ILEN)
      V_STA_PLOTINPUT=' '
      KK =0
      CALL VMOVH (MSG,ILEN,V_STA_PLOTINPUT,KK)
      CALL VDRESS(V_STA_PLOTINPUT,IBB(KPOINT_STA+30),1,24)
      IBB(KPOINT_STA+29)=IOR(IAND(IBB(KPOINT_STA+29),NOT(ISHFT('0001'X,1
     *5))),ISHFT(IAND((1),'0001'X),15))
23222 CONTINUE
23218 CONTINUE
      IF(.NOT.(AGD_TYPE.NE.'2020202020202020'X))GOTO 23228
      ILEN =0
      CALL SMOVV ('       ',MSG,ILEN)
      CALL SMOVHN (AGD_TYPE,8,MSG,ILEN)
      CALL SMOV (0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23228 CONTINUE
      IF(.NOT.(AGD_ALSPID.NE.'2020202020202020'X))GOTO 23230
      ILEN =0
      CALL SMOVV ('ALSPID:',MSG,ILEN)
      CALL SMOVHN (AGD_ALSPID,8,MSG,ILEN)
      CALL SMOV (0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23230 CONTINUE
      IF(.NOT.(SITE1.NE.'2020202020202020'X))GOTO 23232
      ILEN =0
      IF(.NOT.(SITE2.NE.'2020202020202020'X))GOTO 23234
      CALL SMOVV ('SITE1: ',MSG,ILEN)
      CALL SMOVHN(SITE1,8,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
      ILEN =0
      CALL SMOVV ('SITE2: ',MSG,ILEN)
      CALL SMOVHN(SITE2,8,MSG,ILEN)
      GOTO 23235
23234 CONTINUE
      CALL SMOVV ('BRG:   ',MSG,ILEN)
      CALL SMOVIZ(IBEAR,3,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
      ILEN =0
      CALL SMOVV ('SITE1: ',MSG,ILEN)
      CALL SMOVHN(SITE1,8,MSG,ILEN)
23235 CONTINUE
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23232 CONTINUE
      IF(.NOT.(ISOURCE.GE.0))GOTO 23236
      ILEN =0
      CALL SMOVV ('BRG:   ',MSG,ILEN)
      CALL SMOVIZ(IBEAR,3,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
      ILEN =0
      CALL SMOVV ('FROM:  ',MSG,ILEN)
      CALL SMOVHN(N_SOURCE,8,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23236 CONTINUE
      IF(.NOT.(N_EMIT.NE.'2020202020202020'X))GOTO 23238
      ILEN =0
      CALL SMOVV ('EMIT:  ',MSG,ILEN)
      CALL SMOVHN(N_EMIT,8,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23238 CONTINUE
      IF(.NOT.(ICOURSE.GE.0))GOTO 23240
      ILEN =0
      CALL SMOVV ('CRS:   ',MSG,ILEN)
      CALL SMOVIZ(ICOURSE,3,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23240 CONTINUE
      IF(.NOT.(ISPEED.GE.0))GOTO 23242
      ILEN =0
      CALL SMOVV ('SPD:  ',MSG,ILEN)
      CALL SMOVIB(ISPEED,4,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23242 CONTINUE
      IF(.NOT.(IELEVATION.GT.0))GOTO 23244
      ILEN =0
      CALL SMOVV ('ELV: ',MSG,ILEN)
      CALL SMOVIB (IELEVATION,6,MSG,ILEN)
      CALL SMOV (0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23244 CONTINUE
      IF(.NOT.(IALT.GT.0))GOTO 23246
      ILEN =0
      CALL SMOVV ('ALT: ',MSG,ILEN)
      CALL SMOVIB(IALT,7,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
      GOTO 23247
23246 CONTINUE
      IF(.NOT.(IDEPTH.GT.0))GOTO 23248
      ILEN =0
      CALL SMOVV ('DEP: ',MSG,ILEN)
      CALL SMOVIB(IDEPTH,5,MSG,ILEN)
      CALL SMOV(0,MSG,ILEN)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23248 CONTINUE
23247 CONTINUE
      KK =0
      CALL SMOVV('------------------',MSG,KK)
      CALL DRAW_TEXT_C (N_LINE,MSG,13)
      N_LINE =N_LINE +(14-15)
23142 CONTINUE
23134 CONTINUE
      CALL DRAW_TEXT_DONE
      END
      SUBROUTINE CVT_RANGE_TO_LL(CTR_LATITUDE,CTR_LONGITUDE,RADIUS,POINT
     *S_PLOTTED,PLAT,PLON,LL_INDEX)
      IMPLICIT NONE
      REAL*4 CTR_LATITUDE
      REAL*4 CTR_LONGITUDE
      REAL*4 RADIUS (3*100)
      INTEGER*4 POINTS_PLOTTED
      REAL PLAT(3*100),PLON(3*100)
      INTEGER*4 LL_INDEX
      INTEGER*4 I
      REAL*4 LAT_SAVE
      REAL*4 LONG_SAVE
      REAL*4 OLD_RADIUS
      REAL*4 OLD_BEARING
      REAL COS,LATF,LONF,BEARING,TCOS
      LAT_SAVE =CTR_LATITUDE
      LONG_SAVE =CTR_LONGITUDE
      LL_INDEX =0
      OLD_RADIUS =RADIUS (1 )
      OLD_BEARING =0.0
      I =1
23250 IF(.NOT.(I.LE.POINTS_PLOTTED))GOTO 23252
      BEARING =I *6.283185307/ POINTS_PLOTTED
      IF(.NOT.(RADIUS(I).GT.OLD_RADIUS))GOTO 23253
      LL_INDEX =LL_INDEX +1
      LATF =LAT_SAVE
      LONF =LONG_SAVE
      TCOS =COS(LATF)
      CALL RRB2LL(LATF,LONF,OLD_RADIUS,BEARING,0.0,TCOS)
      PLAT(LL_INDEX ) =LATF *180/3.141592654
      PLON(LL_INDEX ) =LONF *180/3.141592654
      GOTO 23254
23253 CONTINUE
      IF(.NOT.(RADIUS(I).LT.OLD_RADIUS))GOTO 23255
      LL_INDEX =LL_INDEX +1
      LATF =LAT_SAVE
      LONF =LONG_SAVE
      TCOS =COS(LATF)
      CALL RRB2LL(LATF,LONF,RADIUS (I ),OLD_BEARING,0.0,TCOS)
      PLAT(LL_INDEX ) =LATF *180/3.141592654
      PLON(LL_INDEX ) =LONF *180/3.141592654
23255 CONTINUE
23254 CONTINUE
      LL_INDEX =LL_INDEX +1
      LATF =LAT_SAVE
      LONF =LONG_SAVE
      TCOS =COS(LATF)
      CALL RRB2LL(LATF,LONF,RADIUS (I ),BEARING,0.0,TCOS)
      PLAT(LL_INDEX ) =LATF *180/3.141592654
      PLON(LL_INDEX ) =LONF *180/3.141592654
      OLD_RADIUS =RADIUS (I )
      OLD_BEARING =BEARING
23251 I=I+1
      GOTO 23250
23252 CONTINUE
      RETURN
      END
      INTEGER*4 FUNCTION DRAW_LINE_ID (LAT1,LON1,LAT2,LON2,COLOR,ID)
      IMPLICIT NONE
      INTEGER*4 DRAW_LINE_C,COLOR,ID
      REAL*4 LAT1,LON1
      REAL*4 LAT2,LON2
      DRAW_LINE_ID =DRAW_LINE_C (LAT1,LON1,LAT2,LON2,COLOR)
      END
      SUBROUTINE CHECK_LOAD_SYMBOLOGY(NEW_SYMBOLOGY)
      IMPLICIT NONE
      REAL*8 IOBS(10),ISHOBJ(250),ISHOBX(250)
      INTEGER ISTATION,KSTATION,IFD,ISBCT,IOBJCT,KOBJCT,IBIN,ICIRC
      INTEGER IDETCH,KMAP
      INTEGER IDELCSA,IROTAS,IROTDN,IROTINDX,ISELCSA
      INTEGER EVALDIR(144)
      REAL*8 CTKCD
      REAL QLAT,QLON,DLAT,DLON
      REAL*4 ROTLAT(13,9),ROTLON(13,9),RADIALADD(9)
      REAL*4 IMIN,KMIN
      INTEGER*4 CURRENT_GEO_SYMBOLOGY
      INTEGER USING_NEWGUI
      COMMON /PLOT_COM/ IOBS,ISHOBJ,ISHOBX,ISTATION,KSTATION,IFD,ISBCT,I
     *OBJCT,KOBJCT,IBIN,ICIRC,CTKCD,QLAT,QLON,DLAT,DLON,IDETCH,IMIN,KMAP
     *,KMIN,IROTINDX,IROTAS,IROTDN,ISELCSA,IDELCSA,ROTLAT,ROTLON,RADIALA
     *DD,EVALDIR,CURRENT_GEO_SYMBOLOGY,USING_NEWGUI
      INTEGER*4 NEW_SYMBOLOGY
      INTEGER*4 STATUS
      IF(.NOT.(NEW_SYMBOLOGY.EQ.CURRENT_GEO_SYMBOLOGY.OR.NEW_SYMBOLOGY.E
     *Q.0))GOTO 23257
      RETURN
23257 CONTINUE
      IF(.NOT.(NEW_SYMBOLOGY.EQ.2))GOTO 23259
      CALL LOAD_SYMBOLOGY ('MMI$TOPVIEW',STATUS)
      GOTO 23260
23259 CONTINUE
      IF(.NOT.(NEW_SYMBOLOGY.EQ.3))GOTO 23261
      CALL LOAD_SYMBOLOGY ('MMI$SIDEVIEW',STATUS)
23261 CONTINUE
23260 CONTINUE
      CURRENT_GEO_SYMBOLOGY =NEW_SYMBOLOGY
      IF(.NOT.(STATUS.NE.0))GOTO 23263
23263 CONTINUE
      RETURN
      END
      SUBROUTINE LOAD_SYMBOLOGY (FILE_NAME,STATUS)
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      CHARACTER *(*) FILE_NAME
      INTEGER*4 STATUS
      INTEGER*4 ICON_INDEX_FIRST_DATA (8)
      INTEGER*4 ICON_INDEX_INTO_FIRST_DATA (8)
      REAL*4 ICON_DRAWING_SCALE (8)
      INTEGER*4 ICON_TOT_DATA_PTS
      INTEGER*2 ICON_NUM_ICONS
      INTEGER*2 ICON_DEFAULT_INDX(8)
      INTEGER*2 ICON_NUM_DEFAULT_ICONS
      BYTE ICON_X (640)
      BYTE ICON_Y (640)
      CHARACTER ICON_PEN (640)
      COMMON / ICONCOMMN /ICON_INDEX_FIRST_DATA,ICON_INDEX_INTO_FIRST_DA
     *TA,ICON_DRAWING_SCALE,ICON_TOT_DATA_PTS,ICON_NUM_ICONS,ICON_DEFAUL
     *T_INDX,ICON_NUM_DEFAULT_ICONS,ICON_X,ICON_Y,ICON_PEN
      CHARACTER *(80) LINE
      CHARACTER CMD
      INTEGER*4 CTOI
      EXTERNAL CTOI
      REAL*4 DRAWING_SCALE,CTOF
      INTEGER*2 DX,DY
      CHARACTER *(5) FIELD
      INTEGER*4 FIELD_LEN
      INTEGER*4 KPOINT_ICN
      INTEGER*4 IERR
      INTEGER I
      INTEGER*4 ICON_FOUND
      INTEGER K,KK
      INTEGER NBYTES
      INTEGER*4 POS
      INTEGER*4 STR_POS
      INTEGER*4 SIGN
      INTEGER LENGTH_TRIMMED
      CHARACTER VSTRIP *8
      EXTERNAL VSTRIP
      CALL OPEN_SYMBOL_FILE(17,FILE_NAME,STATUS)
      IF(.NOT.(STATUS.NE.1))GOTO 23265
      RETURN
23265 CONTINUE
      I=1
23267 IF(.NOT.(I.LE.8))GOTO 23269
      ICON_INDEX_INTO_FIRST_DATA(I) =0
23268 I=I+1
      GOTO 23267
23269 CONTINUE
      I=1
23270 IF(.NOT.(I.LE.8))GOTO 23272
      ICON_INDEX_FIRST_DATA(I) =0
23271 I=I+1
      GOTO 23270
23272 CONTINUE
      I=1
23273 IF(.NOT.(I.LE.8))GOTO 23275
      ICON_DEFAULT_INDX(I) =0
23274 I=I+1
      GOTO 23273
23275 CONTINUE
      STATUS =1
      ICON_NUM_ICONS =1
      ICON_TOT_DATA_PTS =1
      ICON_INDEX_FIRST_DATA(ICON_NUM_ICONS) =ICON_TOT_DATA_PTS
      DRAWING_SCALE =1.0
23276 CONTINUE
      LINE =''
      NBYTES =0
      READ (17,9001,END=8002,ERR=8002) LINE
9001  FORMAT (A)
      GOTO 6001
8002  NBYTES =-1
6001  NBYTES =LENGTH_TRIMMED (LINE)
      IF(.NOT.(NBYTES.EQ.-1))GOTO 23279
      GOTO 23278
23279 CONTINUE
      CMD =LINE(1:I)
      IF(.NOT.(CMD.EQ.'M'.OR.CMD.EQ.'D'))GOTO 23281
      FIELD =''
      CALL PARSE_FIELD(LINE,' ',2,FIELD,FIELD_LEN,STR_POS)
      IERR =1
      IF(.NOT.(FIELD_LEN.NE.0))GOTO 23283
      IF(.NOT.(FIELD(1:1).EQ.'-'))GOTO 23285
      SIGN =-1
      POS =2
      GOTO 23286
23285 CONTINUE
      SIGN =1
      POS =1
23286 CONTINUE
      K =1
      DX =CTOI (%REF(FIELD(POS:FIELD_LEN)),K) *SIGN
      IERR =0
23283 CONTINUE
      FIELD =''
      CALL PARSE_FIELD(LINE,' ',3,FIELD,FIELD_LEN,STR_POS)
      IF(.NOT.(FIELD_LEN.NE.0))GOTO 23287
      IF(.NOT.(FIELD(1:1).EQ.'-'))GOTO 23289
      SIGN =-1
      POS =2
      GOTO 23290
23289 CONTINUE
      SIGN =1
      POS =1
23290 CONTINUE
      K =1
      DY =CTOI (%REF(FIELD(POS:FIELD_LEN)),K) *-1 *SIGN
      IERR =0
23287 CONTINUE
      GOTO 23282
23281 CONTINUE
      IF(.NOT.(CMD.EQ.'N'))GOTO 23291
      FIELD =''
      CALL PARSE_FIELD(LINE,' ',2,FIELD,FIELD_LEN,STR_POS)
      IF(.NOT.(FIELD_LEN.NE.0))GOTO 23293
      ICON_FOUND =.FALSE.
      KPOINT_ICN=IBBP(1,154)
23295 IF(.NOT.((KPOINT_ICN.GE.IBBP(1,154).AND.KPOINT_ICN.LE.(IBBP(1,154)
     *+IBBP(3,154)-1))))GOTO 23297
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.VSTRIP(IBB(KPOINT_ICN),1,8)))GOTO 2
     *3298
      ICON_INDEX_INTO_FIRST_DATA (((KPOINT_ICN-IBBP(1,154))/0+1)) =ICON_
     *NUM_ICONS
      ICON_FOUND =.TRUE.
      GOTO 23297
23298 CONTINUE
23296 KPOINT_ICN=KPOINT_ICN+0
      GOTO 23295
23297 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'SHIP'))GOTO 23300
      ICON_DEFAULT_INDX(1) =ICON_NUM_ICONS
      GOTO 23301
23300 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'JET'))GOTO 23302
      ICON_DEFAULT_INDX(2) =ICON_NUM_ICONS
      GOTO 23303
23302 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'HELO'))GOTO 23304
      ICON_DEFAULT_INDX(8) =ICON_NUM_ICONS
      GOTO 23305
23304 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'PROP'))GOTO 23306
      ICON_DEFAULT_INDX(3) =ICON_NUM_ICONS
      GOTO 23307
23306 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'CRUIS'))GOTO 23308
      ICON_DEFAULT_INDX(5) =ICON_NUM_ICONS
      GOTO 23309
23308 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'SS'))GOTO 23310
      ICON_DEFAULT_INDX(4) =ICON_NUM_ICONS
      GOTO 23311
23310 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'TORP'))GOTO 23312
      ICON_DEFAULT_INDX(6) =ICON_NUM_ICONS
      GOTO 23313
23312 CONTINUE
      IF(.NOT.(FIELD(1:FIELD_LEN).EQ.'CTRM'))GOTO 23314
      ICON_DEFAULT_INDX(7) =ICON_NUM_ICONS
23314 CONTINUE
23313 CONTINUE
23311 CONTINUE
23309 CONTINUE
23307 CONTINUE
23305 CONTINUE
23303 CONTINUE
23301 CONTINUE
      GOTO 23294
23293 CONTINUE
      GOTO 23277
23294 CONTINUE
      GOTO 23277
23291 CONTINUE
      IF(.NOT.(CMD.EQ.'HS'))GOTO 23316
      FIELD =''
      CALL PARSE_FIELD(LINE,' ',2,FIELD,FIELD_LEN,STR_POS)
      IF(.NOT.(FIELD_LEN.NE.0))GOTO 23318
      KK =1
      DRAWING_SCALE =CTOF(FIELD,KK)
23318 CONTINUE
      GOTO 23277
23316 CONTINUE
      IF(.NOT.(CMD.EQ.'E'))GOTO 23320
      DX =0
      DY =0
      GOTO 23321
23320 CONTINUE
      GOTO 23277
23321 CONTINUE
23317 CONTINUE
23292 CONTINUE
23282 CONTINUE
      IF(.NOT.(IERR.EQ.1))GOTO 23322
      GOTO 23277
23322 CONTINUE
      ICON_X (ICON_TOT_DATA_PTS) =DX
      ICON_Y (ICON_TOT_DATA_PTS) =DY
      ICON_PEN(ICON_TOT_DATA_PTS) =CMD
      ICON_TOT_DATA_PTS =ICON_TOT_DATA_PTS +1
      IF(.NOT.(CMD.EQ.'E'))GOTO 23324
      ICON_DRAWING_SCALE(ICON_NUM_ICONS) =DRAWING_SCALE
      ICON_NUM_ICONS =ICON_NUM_ICONS +1
      ICON_INDEX_FIRST_DATA(ICON_NUM_ICONS) =ICON_TOT_DATA_PTS
      DRAWING_SCALE =1.0
23324 CONTINUE
      IF(.NOT.(ICON_TOT_DATA_PTS.GE.640))GOTO 23326
      GOTO 23278
23326 CONTINUE
23277 GOTO 23276
23278 CONTINUE
      ICON_X (ICON_TOT_DATA_PTS) =0
      ICON_Y (ICON_TOT_DATA_PTS) =0
      ICON_PEN(ICON_TOT_DATA_PTS) ='E'
      CLOSE (17)
      RETURN
      END
      SUBROUTINE OPEN_SYMBOL_FILE(LFC,FILE_NAME,STATUS)
      IMPLICIT NONE
      INTEGER*4 LFC
      CHARACTER *(*) FILE_NAME
      INTEGER*4 STATUS
      INTEGER*4 IO_STATUS
      OPEN (UNIT =LFC,FILE =FILE_NAME,STATUS ='OLD',ACCESS =            
     *'Sequential',FORM ='Formatted',IOSTAT =IO_STATUS,ERR =8001)
      GOTO 6001
8001  PRINT *,'Problem opening Symbol file ',FILE_NAME,', IOS=',IO_STATU
     *S
      STOP 'Can''t open ICON symbols.'
6001  STATUS =1
      RETURN
      END
      SUBROUTINE SETUP_ICON (ID,NTDS,ICNINDX,SYMBOLOGY )
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      REAL*8 IOBS(10),ISHOBJ(250),ISHOBX(250)
      INTEGER ISTATION,KSTATION,IFD,ISBCT,IOBJCT,KOBJCT,IBIN,ICIRC
      INTEGER IDETCH,KMAP
      INTEGER IDELCSA,IROTAS,IROTDN,IROTINDX,ISELCSA
      INTEGER EVALDIR(144)
      REAL*8 CTKCD
      REAL QLAT,QLON,DLAT,DLON
      REAL*4 ROTLAT(13,9),ROTLON(13,9),RADIALADD(9)
      REAL*4 IMIN,KMIN
      INTEGER*4 CURRENT_GEO_SYMBOLOGY
      INTEGER USING_NEWGUI
      COMMON /PLOT_COM/ IOBS,ISHOBJ,ISHOBX,ISTATION,KSTATION,IFD,ISBCT,I
     *OBJCT,KOBJCT,IBIN,ICIRC,CTKCD,QLAT,QLON,DLAT,DLON,IDETCH,IMIN,KMAP
     *,KMIN,IROTINDX,IROTAS,IROTDN,ISELCSA,IDELCSA,ROTLAT,ROTLON,RADIALA
     *DD,EVALDIR,CURRENT_GEO_SYMBOLOGY,USING_NEWGUI
      INTEGER*4 ID
      INTEGER*4 NTDS
      INTEGER*4 ICNINDX
      INTEGER*4 SYMBOLOGY
      INTEGER*4 KPOINT_UNT
      ICNINDX =NTDS
      SYMBOLOGY =CURRENT_GEO_SYMBOLOGY
      KPOINT_UNT=IBBP(1,01)-104+(104)*ID
      IF(.NOT.(.NOT.(KPOINT_UNT.GE.IBBP(1,01).AND.KPOINT_UNT.LE.(IBBP(1,
     *01)+IBBP(3,01)-1))))GOTO 23328
      SYMBOLOGY =1
      RETURN
23328 CONTINUE
      IF(.NOT.((IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X)).EQ.7))GOT
     *O 23330
      SYMBOLOGY =1
23330 CONTINUE
      IF(.NOT.(SYMBOLOGY.NE.1))GOTO 23332
      CALL GET_ICNINDEX (ID,ICNINDX )
      IF(.NOT.(ICNINDX.EQ.0))GOTO 23334
      ICNINDX =NTDS
      SYMBOLOGY =1
23334 CONTINUE
23332 CONTINUE
      RETURN
      END
      SUBROUTINE GET_ICNINDEX (UNT_INDEX,ICNINDX )
      IMPLICIT NONE
      INTEGER*4 IBB(10240000)
      INTEGER*2 IBBW(2,10240000)
      BYTE IBBB(4,10240000)
      REAL*8 CBB(5120000)
      REAL FBB(10240000)
      INTEGER IBBP(6,170)
      EQUIVALENCE (IBB,FBB,CBB,IBBW,IBBB)
      EQUIVALENCE (IBB(1025),IBBP)
      COMMON /BBOARD/ IBB
cpar$ private / BBoard / ! keep FORTRAN from assigning a global section
      INTEGER ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 , ISNAP_AFTER_1 
     *, ISNAP_AFTER_2
      COMMON / SNAP_COMMON / ISNAP_D , ISNAP_BEFORE_1 , ISNAP_BEFORE_2 ,
     * ISNAP_AFTER_1 , ISNAP_AFTER_2
cpar$ private / snap_common / ! no FORTRAN global section
      INTEGER*4 ICON_INDEX_FIRST_DATA (8)
      INTEGER*4 ICON_INDEX_INTO_FIRST_DATA (8)
      REAL*4 ICON_DRAWING_SCALE (8)
      INTEGER*4 ICON_TOT_DATA_PTS
      INTEGER*2 ICON_NUM_ICONS
      INTEGER*2 ICON_DEFAULT_INDX(8)
      INTEGER*2 ICON_NUM_DEFAULT_ICONS
      BYTE ICON_X (640)
      BYTE ICON_Y (640)
      CHARACTER ICON_PEN (640)
      COMMON / ICONCOMMN /ICON_INDEX_FIRST_DATA,ICON_INDEX_INTO_FIRST_DA
     *TA,ICON_DRAWING_SCALE,ICON_TOT_DATA_PTS,ICON_NUM_ICONS,ICON_DEFAUL
     *T_INDX,ICON_NUM_DEFAULT_ICONS,ICON_X,ICON_Y,ICON_PEN
      INTEGER*4 UNT_INDEX
      INTEGER*4 ICNINDX
      INTEGER*4 I_ACC_CATEGORY
      INTEGER*4 KPOINT_ACC
      INTEGER*4 KPOINT_CTM
      INTEGER*4 KPOINT_SHC
      INTEGER*4 KPOINT_TRP
      INTEGER*4 I_UNT_TYPE
      INTEGER*4 KPOINT_UNT
      INTEGER*4 I_UNT_SUPERTYPE
      ICNINDX =0
      KPOINT_UNT=IBBP(1,01)-104+(104)*(UNT_INDEX)
      I_UNT_TYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(20)),'00FF'X))
      I_UNT_SUPERTYPE=(IAND(ISHFT(IBB(KPOINT_UNT+16),-(17)),'07FF'X))
      IF(.NOT.(I_UNT_TYPE.EQ.1))GOTO 23336
      KPOINT_ACC=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *32))
      ICNINDX =0
      GOTO 23337
23336 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.3.OR.I_UNT_SUPERTYPE.EQ.(ISHFT(2,3))))GOTO 
     *23338
      KPOINT_SHC=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *31))
      ICNINDX =0
      GOTO 23339
23338 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3)+1)))GOTO 23340
      KPOINT_TRP=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *96))
      ICNINDX =0
      GOTO 23341
23340 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3)+2)))GOTO 23342
      KPOINT_CTM=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *97))
23342 CONTINUE
23341 CONTINUE
23339 CONTINUE
23337 CONTINUE
      IF(.NOT.(ICNINDX.NE.0))GOTO 23344
      ICNINDX =ICON_INDEX_INTO_FIRST_DATA (ICNINDX )
23344 CONTINUE
      IF(.NOT.(ICNINDX.EQ.0))GOTO 23346
      IF(.NOT.(I_UNT_TYPE.EQ.1))GOTO 23348
      KPOINT_ACC=(IAND(ISHFT(IBB(KPOINT_UNT+22),-(0)),'7FFFFF'X)+IBBP(1,
     *32))
      I_ACC_CATEGORY=(IAND(ISHFT(IBB(KPOINT_ACC+21),-(28)),'0003'X))
      ICNINDX =ICON_DEFAULT_INDX(2)
      IF(.NOT.(I_ACC_CATEGORY.EQ.2))GOTO 23350
      ICNINDX =ICON_DEFAULT_INDX(8)
      GOTO 23351
23350 CONTINUE
      IF(.NOT.(I_ACC_CATEGORY.EQ.0))GOTO 23352
      ICNINDX =ICON_DEFAULT_INDX(2)
      GOTO 23353
23352 CONTINUE
      IF(.NOT.(I_ACC_CATEGORY.EQ.1))GOTO 23354
      ICNINDX =ICON_DEFAULT_INDX(3)
23354 CONTINUE
23353 CONTINUE
23351 CONTINUE
      GOTO 23349
23348 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.5))GOTO 23356
      ICNINDX =ICON_DEFAULT_INDX(5)
      GOTO 23357
23356 CONTINUE
      IF(.NOT.(I_UNT_TYPE.EQ.3))GOTO 23358
      ICNINDX =ICON_DEFAULT_INDX(1)
      GOTO 23359
23358 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3))))GOTO 23360
      ICNINDX =ICON_DEFAULT_INDX(4)
      GOTO 23361
23360 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3)+1)))GOTO 23362
      ICNINDX =ICON_DEFAULT_INDX(6)
      GOTO 23363
23362 CONTINUE
      IF(.NOT.(I_UNT_SUPERTYPE.EQ.(ISHFT(2,3)+2)))GOTO 23364
      ICNINDX =ICON_DEFAULT_INDX(7)
23364 CONTINUE
23363 CONTINUE
23361 CONTINUE
23359 CONTINUE
23357 CONTINUE
23349 CONTINUE
23346 CONTINUE
      RETURN
      END
      SUBROUTINE ROTATE_POINTS (CENTER_X,CENTER_Y,ORIENTATION,PNT_COUNT,
     *IN_PNTS_X$W_GPNT_X,IN_PNTS_X$W_GPNT_Y,OUT_PNTS_X$W_GPNT_X,OUT_PNTS
     *_X$W_GPNT_Y)
      IMPLICIT NONE
      INTEGER*4 CENTER_X
      INTEGER*4 CENTER_Y
      REAL*4 ORIENTATION
      INTEGER*4 PNT_COUNT
      INTEGER*2 IN_PNTS_X$W_GPNT_X (PNT_COUNT )
      INTEGER*2 IN_PNTS_X$W_GPNT_Y (PNT_COUNT )
      INTEGER*2 OUT_PNTS_X$W_GPNT_X (PNT_COUNT )
      INTEGER*2 OUT_PNTS_X$W_GPNT_Y (PNT_COUNT )
      REAL*4 ANGLE
      INTEGER*4 I
      REAL H
      REAL*4 SLOPE
      REAL*4 VECT_LEN
      REAL W
      I =1
23366 IF(.NOT.(I.LE.PNT_COUNT))GOTO 23368
      W =IN_PNTS_X$W_GPNT_X(I) -CENTER_X
      H =CENTER_Y -IN_PNTS_X$W_GPNT_Y(I)
      VECT_LEN =SQRT((H*H) +(W*W))
      SLOPE =0
      IF(.NOT.(H.NE.0.0))GOTO 23369
      SLOPE =W/H
23369 CONTINUE
      ANGLE =ATAN (SLOPE )
      IF(.NOT.(H.LT.0.0))GOTO 23371
      ANGLE =ANGLE +3.141592654
      GOTO 23372
23371 CONTINUE
      IF(.NOT.(H.EQ.0))GOTO 23373
      IF(.NOT.(W.GT.0))GOTO 23375
      ANGLE =3.141592654/ 2
      GOTO 23376
23375 CONTINUE
      ANGLE =3.141592654+3.141592654/ 2
23376 CONTINUE
23373 CONTINUE
23372 CONTINUE
      ANGLE =ANGLE +ORIENTATION
23377 IF(.NOT.(ANGLE.GE.6.283185307))GOTO 23378
      ANGLE =ANGLE -6.283185307
      GOTO 23377
23378 CONTINUE
23379 IF(.NOT.(ANGLE.LT.0.))GOTO 23380
      ANGLE =ANGLE +6.283185307
      GOTO 23379
23380 CONTINUE
      OUT_PNTS_X$W_GPNT_X(I) =CENTER_X +SIN (ANGLE) *VECT_LEN
      OUT_PNTS_X$W_GPNT_Y(I) =CENTER_Y -COS (ANGLE) *VECT_LEN
23367 I=I+1
      GOTO 23366
23368 CONTINUE
      RETURN
      END
      SUBROUTINE REFLECT_POINTS (CENTER_X,CENTER_Y,AXIS_FLAG,PNT_COUNT,P
     *NTS_X$W_GPNT_X,PNTS_X$W_GPNT_Y)
      IMPLICIT NONE
      INTEGER*4 CENTER_X
      INTEGER*4 CENTER_Y
      CHARACTER *(2) AXIS_FLAG
      INTEGER*4 PNT_COUNT
      INTEGER*2 PNTS_X$W_GPNT_X (PNT_COUNT )
      INTEGER*2 PNTS_X$W_GPNT_Y (PNT_COUNT )
      INTEGER*4 I
      IF(.NOT.(AXIS_FLAG.EQ.'EW'))GOTO 23381
      I =1
23383 IF(.NOT.(I.LE.PNT_COUNT))GOTO 23385
      PNTS_X$W_GPNT_X(I) =CENTER_X +(CENTER_X -PNTS_X$W_GPNT_X(I))
23384 I=I+1
      GOTO 23383
23385 CONTINUE
      GOTO 23382
23381 CONTINUE
      IF(.NOT.(AXIS_FLAG.EQ.'NS'))GOTO 23386
      I =1
23388 IF(.NOT.(I.LE.PNT_COUNT))GOTO 23390
      PNTS_X$W_GPNT_Y(I) =CENTER_Y +(CENTER_Y -PNTS_X$W_GPNT_Y(I))
23389 I=I+1
      GOTO 23388
23390 CONTINUE
23386 CONTINUE
23382 CONTINUE
      RETURN
      END
      SUBROUTINE MODIFY_POINTS(PERSPECTIVE_CODE,CENTER_X,CENTER_Y,ORIENT
     *ATION,PNT_COUNT,IN_PNTS_X$W_GPNT_X,IN_PNTS_X$W_GPNT_Y,OUT_PNTS_X$W
     *_GPNT_X,OUT_PNTS_X$W_GPNT_Y,ARRAY_ADDR_X,ARRAY_ADDR_Y)
      IMPLICIT NONE
      INTEGER*4 PERSPECTIVE_CODE
      INTEGER*4 CENTER_X
      INTEGER*4 CENTER_Y
      REAL*4 ORIENTATION
      INTEGER*4 PNT_COUNT
      INTEGER*2 IN_PNTS_X$W_GPNT_X (PNT_COUNT )
      INTEGER*2 IN_PNTS_X$W_GPNT_Y (PNT_COUNT )
      INTEGER*2 OUT_PNTS_X$W_GPNT_X (PNT_COUNT )
      INTEGER*2 OUT_PNTS_X$W_GPNT_Y (PNT_COUNT )
      INTEGER*4 ARRAY_ADDR_X,ARRAY_ADDR_Y
      IF(.NOT.(PERSPECTIVE_CODE.EQ.2))GOTO 23391
      CALL ROTATE_POINTS (CENTER_X,CENTER_Y,ORIENTATION,PNT_COUNT,IN_PNT
     *S_X$W_GPNT_X,IN_PNTS_X$W_GPNT_Y,OUT_PNTS_X$W_GPNT_X,OUT_PNTS_X$W_G
     *PNT_Y)
      ARRAY_ADDR_X =%LOC(OUT_PNTS_X$W_GPNT_X)
      ARRAY_ADDR_Y =%LOC(OUT_PNTS_X$W_GPNT_Y)
      GOTO 23392
23391 CONTINUE
      IF(.NOT.(PERSPECTIVE_CODE.EQ.3))GOTO 23393
      IF(.NOT.(ORIENTATION.GT.0.0.AND.ORIENTATION.LT.3.141592654))GOTO 2
     *3395
      CALL REFLECT_POINTS (CENTER_X,CENTER_Y,'EW',PNT_COUNT,IN_PNTS_X$W_
     *GPNT_X,IN_PNTS_X$W_GPNT_Y)
23395 CONTINUE
23393 CONTINUE
23392 CONTINUE
      RETURN
      END
      SUBROUTINE DRAW_ARROW_INIT(ARGUMENT,VALUE)
      IMPLICIT NONE
      INTEGER*4 AC_STYLE
      INTEGER*4 AC_THICKNESS
      INTEGER*4 AC_HEAD_LENGTH
      INTEGER*4 AC_LINE_LENGTH
      INTEGER*4 AC_HEAD_OFFSET
      INTEGER*4 AC_TAIL_OFFSET
      INTEGER*4 AC_HEAD_X
      INTEGER*4 AC_HEAD_Y
      INTEGER*4 AC_TAIL_X
      INTEGER*4 AC_TAIL_Y
      INTEGER*4 AC_PATTERN
      INTEGER*4 AC_PIXMAP
      COMMON /ARROW_COMMON/ AC_STYLE,AC_THICKNESS,AC_HEAD_LENGTH,AC_LINE
     *_LENGTH,AC_HEAD_OFFSET,AC_TAIL_OFFSET,AC_HEAD_X,AC_HEAD_Y,AC_TAIL_
     *X,AC_TAIL_Y,AC_PATTERN,AC_PIXMAP
      CHARACTER *(*) ARGUMENT
      INTEGER*4 VALUE
      IF(.NOT.(ARGUMENT.EQ.'style'))GOTO 23397
      AC_STYLE =VALUE
      GOTO 23398
23397 CONTINUE
      IF(.NOT.(ARGUMENT.EQ.'thickness'))GOTO 23399
      AC_THICKNESS =VALUE
      GOTO 23400
23399 CONTINUE
      IF(.NOT.(ARGUMENT.EQ.'headlength'))GOTO 23401
      AC_HEAD_LENGTH =VALUE
      GOTO 23402
23401 CONTINUE
      IF(.NOT.(ARGUMENT.EQ.'linelength'))GOTO 23403
      AC_LINE_LENGTH =VALUE
      GOTO 23404
23403 CONTINUE
      IF(.NOT.(ARGUMENT.EQ.'headoffset'))GOTO 23405
      AC_HEAD_OFFSET =VALUE
      GOTO 23406
23405 CONTINUE
      IF(.NOT.(ARGUMENT.EQ.'tailoffset'))GOTO 23407
      AC_TAIL_OFFSET =VALUE
      GOTO 23408
23407 CONTINUE
      IF(.NOT.(ARGUMENT.EQ.'pattern'))GOTO 23409
      AC_PATTERN =VALUE
      GOTO 23410
23409 CONTINUE
      IF(.NOT.(ARGUMENT.EQ.'pixmap'))GOTO 23411
      AC_PIXMAP =VALUE
23411 CONTINUE
23410 CONTINUE
23408 CONTINUE
23406 CONTINUE
23404 CONTINUE
23402 CONTINUE
23400 CONTINUE
23398 CONTINUE
      END
      SUBROUTINE DRAW_ARROW_GET_TAIL (X,Y)
      IMPLICIT NONE
      INTEGER*4 AC_STYLE
      INTEGER*4 AC_THICKNESS
      INTEGER*4 AC_HEAD_LENGTH
      INTEGER*4 AC_LINE_LENGTH
      INTEGER*4 AC_HEAD_OFFSET
      INTEGER*4 AC_TAIL_OFFSET
      INTEGER*4 AC_HEAD_X
      INTEGER*4 AC_HEAD_Y
      INTEGER*4 AC_TAIL_X
      INTEGER*4 AC_TAIL_Y
      INTEGER*4 AC_PATTERN
      INTEGER*4 AC_PIXMAP
      COMMON /ARROW_COMMON/ AC_STYLE,AC_THICKNESS,AC_HEAD_LENGTH,AC_LINE
     *_LENGTH,AC_HEAD_OFFSET,AC_TAIL_OFFSET,AC_HEAD_X,AC_HEAD_Y,AC_TAIL_
     *X,AC_TAIL_Y,AC_PATTERN,AC_PIXMAP
      DATA AC_STYLE / 1 /
      DATA AC_HEAD_LENGTH / 10 /
      DATA AC_LINE_LENGTH / 25 /
      DATA AC_HEAD_OFFSET / 6 /
      DATA AC_TAIL_OFFSET / 6 /
      DATA AC_PATTERN / 0 /
      DATA AC_PIXMAP / 0 /
      INTEGER*4 X,Y
      X =AC_TAIL_X
      Y =AC_TAIL_Y
      END
      SUBROUTINE GET_ARROWHEAD_POINTS (CENTER_X,CENTER_Y,LINE_ORIENTATIO
     *N,ARROW_STYLE,HEAD_LENGTH,LINE_LENGTH,LINE_WIDTH,NUM_POINTS,XPOINT
     *S_X$W_GPNT_X,XPOINTS_X$W_GPNT_Y,POINT_OFFSET,TAIL_OFFSET,TAIL_X,TA
     *IL_Y)
      IMPLICIT NONE
      INTEGER*2 CENTER_X
      INTEGER*2 CENTER_Y
      REAL*4 LINE_ORIENTATION
      INTEGER*4 ARROW_STYLE
      INTEGER*4 HEAD_LENGTH
      INTEGER*4 LINE_LENGTH
      INTEGER*4 LINE_WIDTH
      INTEGER*4 NUM_POINTS
      INTEGER*2 XPOINTS_X$W_GPNT_X ( 10)
      INTEGER*2 XPOINTS_X$W_GPNT_Y ( 10)
      INTEGER*2 POINT_OFFSET
      INTEGER*2 TAIL_OFFSET
      INTEGER*4 TAIL_X
      INTEGER*4 TAIL_Y
      REAL*4 ANGLE_1
      INTEGER*4 ARROW_HEAD_LENGTH
      REAL*4 H_1
      INTEGER*4 HALF_LINE_WIDTH
      INTEGER*4 L_1
      REAL*4 LINE_ANGLE
      INTEGER*2 POINT_X
      INTEGER*2 POINT_Y
      REAL*4 RADIUS
      INTEGER*4 SIGN_FLAG
      REAL*4 W_1
      NUM_POINTS =0
      ARROW_HEAD_LENGTH =HEAD_LENGTH
      POINT_X =CENTER_X -NINT(POINT_OFFSET *SIN(LINE_ORIENTATION))
      POINT_Y =CENTER_Y +NINT(POINT_OFFSET *COS(LINE_ORIENTATION))
      TAIL_X =CENTER_X -NINT((POINT_OFFSET +TAIL_OFFSET +LINE_LENGTH) *S
     *IN(LINE_ORIENTATION))
      TAIL_Y =CENTER_Y +NINT((POINT_OFFSET +TAIL_OFFSET +LINE_LENGTH) *C
     *OS(LINE_ORIENTATION))
      HALF_LINE_WIDTH =NINT(LINE_WIDTH / 2.0)
      LINE_ANGLE =LINE_ORIENTATION +3.141592654
23413 IF(.NOT.(LINE_ANGLE.GE.6.283185307))GOTO 23414
      LINE_ANGLE =LINE_ANGLE -6.283185307
      GOTO 23413
23414 CONTINUE
23415 IF(.NOT.(LINE_ANGLE.LT.0.))GOTO 23416
      LINE_ANGLE =LINE_ANGLE +6.283185307
      GOTO 23415
23416 CONTINUE
      XPOINTS_X$W_GPNT_X(1 ) =POINT_X
      XPOINTS_X$W_GPNT_Y(1 ) =POINT_Y
      IF(.NOT.(ARROW_STYLE.EQ.2.OR.ARROW_STYLE.EQ.4.OR.ARROW_STYLE.EQ.5)
     *)GOTO 23417
      NUM_POINTS =7
      IF(.NOT.(ARROW_STYLE.EQ.2.OR.LINE_WIDTH.GE.8))GOTO 23419
      L_1 =ARROW_HEAD_LENGTH
      GOTO 23420
23419 CONTINUE
      ARROW_HEAD_LENGTH =HEAD_LENGTH *1.6
      RADIUS =ARROW_HEAD_LENGTH / COS((3.141592654*25.0)/180)
      L_1 =NINT(SQRT((RADIUS *RADIUS) -(ARROW_HEAD_LENGTH*ARROW_HEAD_LEN
     *GTH )))
23420 CONTINUE
      SIGN_FLAG =-1
      CALL GET_POINTS (ARROW_HEAD_LENGTH,L_1,LINE_ANGLE,POINT_X,POINT_Y,
     *SIGN_FLAG,XPOINTS_X$W_GPNT_X(2 ),XPOINTS_X$W_GPNT_Y(2 ))
      SIGN_FLAG =1
      CALL GET_POINTS (ARROW_HEAD_LENGTH,L_1,LINE_ANGLE,POINT_X,POINT_Y,
     *SIGN_FLAG,XPOINTS_X$W_GPNT_X(7 ),XPOINTS_X$W_GPNT_Y(7 ))
      IF(.NOT.(ARROW_STYLE.EQ.5))GOTO 23421
      L_1 =0.66 *ARROW_HEAD_LENGTH
      GOTO 23422
23421 CONTINUE
      L_1 =ARROW_HEAD_LENGTH
23422 CONTINUE
      SIGN_FLAG =-1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(3 ),XPOINTS_X$W_GPNT_Y(3 ))
      SIGN_FLAG =1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(6 ),XPOINTS_X$W_GPNT_Y(6 ))
      L_1 =LINE_LENGTH
      SIGN_FLAG =-1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(4 ),XPOINTS_X$W_GPNT_Y(4 ))
      SIGN_FLAG =1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(5 ),XPOINTS_X$W_GPNT_Y(5 ))
      GOTO 23418
23417 CONTINUE
      IF(.NOT.(ARROW_STYLE.EQ.1.OR.ARROW_STYLE.EQ.3))GOTO 23423
      NUM_POINTS =9
      IF(.NOT.(ARROW_STYLE.EQ.1.OR.LINE_WIDTH.GE.8))GOTO 23425
      L_1 =ARROW_HEAD_LENGTH
      GOTO 23426
23425 CONTINUE
      ARROW_HEAD_LENGTH =HEAD_LENGTH *1.6
      RADIUS =ARROW_HEAD_LENGTH / COS((3.141592654*25.0)/180)
      L_1 =NINT(SQRT((RADIUS *RADIUS) -(ARROW_HEAD_LENGTH*ARROW_HEAD_LEN
     *GTH )))
23426 CONTINUE
      SIGN_FLAG =-1
      CALL GET_POINTS (ARROW_HEAD_LENGTH,L_1,LINE_ANGLE,POINT_X,POINT_Y,
     *SIGN_FLAG,XPOINTS_X$W_GPNT_X(2 ),XPOINTS_X$W_GPNT_Y(2 ))
      SIGN_FLAG =1
      CALL GET_POINTS (ARROW_HEAD_LENGTH,L_1,LINE_ANGLE,POINT_X,POINT_Y,
     *SIGN_FLAG,XPOINTS_X$W_GPNT_X(9 ),XPOINTS_X$W_GPNT_Y(9 ))
      IF(.NOT.(ARROW_STYLE.EQ.1))GOTO 23427
      ANGLE_1 =LINE_ANGLE +3.141592654/ 4
      GOTO 23428
23427 CONTINUE
      IF(.NOT.(ARROW_STYLE.EQ.3))GOTO 23429
      ANGLE_1 =LINE_ANGLE +(3.141592654/ 2)-((3.141592654*25.0)/180)
23429 CONTINUE
23428 CONTINUE
23431 IF(.NOT.(ANGLE_1.GE.6.283185307))GOTO 23432
      ANGLE_1 =ANGLE_1 -6.283185307
      GOTO 23431
23432 CONTINUE
23433 IF(.NOT.(ANGLE_1.LT.0.))GOTO 23434
      ANGLE_1 =ANGLE_1 +6.283185307
      GOTO 23433
23434 CONTINUE
      XPOINTS_X$W_GPNT_X(3 ) =XPOINTS_X$W_GPNT_X(2 ) +NINT(LINE_WIDTH *S
     *IN (ANGLE_1))
      XPOINTS_X$W_GPNT_Y(3 ) =XPOINTS_X$W_GPNT_Y(2 ) -NINT(LINE_WIDTH *C
     *OS (ANGLE_1))
      IF(.NOT.(ARROW_STYLE.EQ.1))GOTO 23435
      ANGLE_1 =LINE_ANGLE -3.141592654/ 4
      GOTO 23436
23435 CONTINUE
      IF(.NOT.(ARROW_STYLE.EQ.3))GOTO 23437
      ANGLE_1 =LINE_ANGLE -((3.141592654/ 2)-((3.141592654*25.0)/180))
23437 CONTINUE
23436 CONTINUE
23439 IF(.NOT.(ANGLE_1.GE.6.283185307))GOTO 23440
      ANGLE_1 =ANGLE_1 -6.283185307
      GOTO 23439
23440 CONTINUE
23441 IF(.NOT.(ANGLE_1.LT.0.))GOTO 23442
      ANGLE_1 =ANGLE_1 +6.283185307
      GOTO 23441
23442 CONTINUE
      XPOINTS_X$W_GPNT_X(8 ) =XPOINTS_X$W_GPNT_X(9 ) +NINT(LINE_WIDTH *S
     *IN (ANGLE_1))
      XPOINTS_X$W_GPNT_Y(8 ) =XPOINTS_X$W_GPNT_Y(9 ) -NINT(LINE_WIDTH *C
     *OS (ANGLE_1))
      IF(.NOT.(ARROW_STYLE.EQ.1))GOTO 23443
      ANGLE_1 =3.141592654/ 4
      GOTO 23444
23443 CONTINUE
      IF(.NOT.(ARROW_STYLE.EQ.3))GOTO 23445
      ANGLE_1 =(3.141592654*25.0)/180.0
23445 CONTINUE
23444 CONTINUE
      W_1 =LINE_WIDTH *TAN (ANGLE_1 )
      H_1 =SQRT ((W_1 *W_1) +(LINE_WIDTH *LINE_WIDTH))
      W_1 =LINE_WIDTH / 2.0 +H_1
      L_1 =NINT(W_1 / TAN (ANGLE_1 ))
      SIGN_FLAG =-1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(4 ),XPOINTS_X$W_GPNT_Y(4 ))
      SIGN_FLAG =1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(7 ),XPOINTS_X$W_GPNT_Y(7 ))
      L_1 =LINE_LENGTH
      SIGN_FLAG =-1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(5 ),XPOINTS_X$W_GPNT_Y(5 ))
      SIGN_FLAG =1
      CALL GET_POINTS (L_1,HALF_LINE_WIDTH,LINE_ANGLE,POINT_X,POINT_Y,SI
     *GN_FLAG,XPOINTS_X$W_GPNT_X(6 ),XPOINTS_X$W_GPNT_Y(6 ))
23423 CONTINUE
23418 CONTINUE
      END
