unset RESA_HOME
source resabashrc
#create all directories needed for building
if [ -e $RESA_BUILD ]; then
   rm -Rf $RESA_BUILD
fi
mkdir $RESA_BUILD
mkdir $RESA_BUILD/maketools
mkdir $RESA_BUILD/coretools
mkdir $RESA_BUILD/coretools/ddl
mkdir $RESA_BUILD/coretools/hub_wb
mkdir $RESA_BUILD/coretools/parser
mkdir $RESA_BUILD/coretools/rat4a
mkdir $RESA_BUILD/coretools/library
mkdir $RESA_BUILD/coretools/library/rlib
mkdir $RESA_BUILD/coretools/library/map #not sure how to build this
mkdir $RESA_BUILD/db
mkdir $RESA_BUILD/db/build
mkdir $RESA_BUILD/db/demo
mkdir $RESA_BUILD/db/sonar_env
mkdir $RESA_BUILD/db/sonar_env/special
mkdir $RESA_BUILD/game
mkdir $RESA_BUILD/game/amsg
mkdir $RESA_BUILD/resang
mkdir $RESA_BUILD/resang/trunk
chmod 777 $RESA_BUILD/

#For the purposes of the build, $RESA_BUILD will become $RESA_HOME, 
#so that we can use the same maketools as in the field.  We will
#re-set it later.
WAS_RESA_HOME=$RESA_HOME
RESA_HOME=$RESA_BUILD
unset RAT_LIB
unset RESA_LIB
unset RESA_TRUNK
unset PARSE_TOOLS
unset MAKE_TOOLS
source $RESA_CM/resabashrc
cp $RESA_CM/resabashrc $RESA_BUILD/ #user can re-locate to ~/

#We will run the maketools from $RESA_BUILD
cp $RESA_CM/maketools/* $RESA_BUILD/maketools/

#For the ratfor processor, since we can't build it at the moment, we will 
#copy the already-existing working executable, the code, and the link file
cp $RESA_CM/coretools/rat4a/rat4b.for $RAT_TOOLS
cp $RESA_CM/coretools/rat4a/rat4b.lnk $RAT_TOOLS
cp $RESA_CM/coretools/rat4a/symbwes $RAT_TOOLS
cp $RESA_CM/bootstrap/ratfor.exe $RAT_TOOLS

#build a temporary ratfor library from the "boot" ratfor processor
cp $RESA_CM/coretools/library/rlib/* $RESA_BUILD/coretools/library/rlib/
boot_make_rlib

#build final ratfor processor from "boot" ratfor library
make_ratfor

#final rlib
cp $RESA_CM/coretools/library/rlib/* $RESA_BUILD/coretools/library/rlib/
make_rlib

#parse tools
cp $RESA_CM/coretools/parser/* $RESA_BUILD/coretools/parser
make_parser

#Before we make ddl, we must compile some files in $RESA_TRUNK
cp $RESA_CM/resang/trunk/*.c $RESA_BUILD/resang/trunk/
cp $RESA_CM/bootstrap/*.for $RESA_BUILD/resang/trunk/
make_trunk_partial

#ddl
cp $RESA_CM/coretools/ddl/* $RESA_BUILD/coretools/ddl
make_ddl

#hub and wishbone
cp $RESA_CM/coretools/hub_wb/* $RESA_BUILD/coretools/hub_wb/
make_hub_wb
#later, we will copy necessary .o files to $RESA_BUILD/resang/trunk/ 
#to link programs that use hubs.  Must wait until after cleanup.
#now, copy programs and script to $RESA_BUILD/resang/trunk/ from where they can be executed
cp $RESA_BUILD/coretools/hub_wb/hub $RESA_BUILD/resang/trunk/
cp $RESA_BUILD/coretools/hub_wb/hubconfig $RESA_BUILD/resang/trunk/ 
cp $RESA_BUILD/coretools/hub_wb/hubkill $RESA_BUILD/resang/trunk/
cp $RESA_BUILD/coretools/hub_wb/wishbone.exe $RESA_BUILD/resang/trunk/ 
cp $RESA_BUILD/coretools/hub_wb/wb $RESA_BUILD/resang/trunk/

#trunk 
cp $RESA_CM/resang/trunk/* $RESA_BUILD/resang/trunk/
make_trunk

#map -- some of this is not understood
cp $RESA_CM/coretools/library/map/* $RESA_BUILD/coretools/library/map/
cd $RESA_BUILD/coretools/library/map/
ratc *.rat
forc *.for
link_all

#copy data files
cp $RESA_CM/db/build/* $RESA_BUILD/db/build/
cp $RESA_CM/db/demo/* $RESA_BUILD/db/demo/
cp $RESA_CM/db/sonar_env/special/* $RESA_BUILD/db/sonar_env/special/
cp -r $RESA_CM/game/* $RESA_BUILD/game/

#Finish up
cp $RESA_CM/resabashrc $RESA_BUILD/
RESA_HOME=$WAS_RESA_HOME

