 
define($DEBUG,#)
define($DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbacc.inc"
include "bbacn.inc"
 
include "ascii.inc"
 
define (BBImplicit, Implicit None)      # MJC 4/25/2000
 
undefine write
undefine read
undefine err
 
 
subroutine wglair_noise(reccnt, recsz, rec)
 
########################################################
#$%
#$% Purpose:  WGLAIR_NOISE loads noise data for aircraft from
#$%           the scenario file data into the blackboard.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     BADFLD     ECHOH      ECHOR
#$%            GETSR
#$%
#$% Tables:    ACC        ACN
#$%
#$%
#$% Date:      May 28, 1991
#$%
#$% Author:    Susan Miller
#$%
#$% Note :     No validation is made during this pass thru
#$%            the aircraft file. The validation is performed
#$%            on the first pass thru the file.
#$%
#$% Modified:  Susan Miller - 9/95 (E1454)
#$%            Added handling of new variable SHARE
#$%            (indicates ALSP AEW Sharing).
#$%
########################################################
 
BBcommon
 
integer   reccnt, recsz, pnt
literal   rec[1500]
character cfile[11]
 
integer   ILEN, LOOP, LEN, ISTATX               # MJC 4/25/2000
integer   ACC$Pointer, ACC$Acnindx$I            # MJC 4/25/2000
integer   ACN$NL$Index, ACN$Pointer             # MJC 4/25/2000
integer   ACN$NL$frequency$I, ACN$NL$level$I    # MJC 4/25/2000
literal   CSTRIP8                               # MJC 4/25/2000
 
ilen=0
#$% move "Aircraft" to cfile and flag
call smovv ("Aircraft  ",cfile,ilen)
 
if (reccnt <= 1)
    {
    call echov("During Aircraft Noise loading, Aircraft file empty.")
    call echor
    return
    }
 
for (loop = 2; loop <= reccnt; )        #for each record in the file
    {
    call getsr(loop,recsz,rec)          #get scenario record
    len = rec[1]                        #save length
 
    FOR ( ACC$pointer$first; ACC$pointer$valid; ACC$Pointer$Next)
        {
        IF (rec[ 3 ] == xACC$Type$c)
            break
        }
 
    IF ( ! ACC$Pointer$valid )
        {
        call echov("Could not find aircraft ")
        call echohn(rec[ 3 ],$$MaxLit)
        call echov(" in $$ACC.")
        call echor
        return
        }
 
    ACN$NL$index = 1
 
    for (pnt = 4; pnt <= len; pnt = pnt + 2)
        {
        #$% if array word is NarrowBand Noise
        if (rec[pnt] == 'NBN')        #optional field
            {
            #$% get slots in aircraft noise table
            call gslotm (ACN$Pointer,$$ACN,ACN$Entry,istatx)
 
            #$% if found
            if (istatx != 0)
                {
                #$% set A/C characteristic noise index to acoustic noise index
                #$% and save
 
                ACC$ACNIndx$I = ACN$Pointer$Index
                putACC$ACNIndx$I
 
                for (ACN$NL$index = 1;
                     ACN$NL$index <= ACN$NL$slots;
                     ACN$NL$index = ACN$NL$index + 1)
                    {
                     pnt = pnt + 1          #increment to freqency
 
                     ACN$NL$Frequency$I = rec[pnt]
                     putACN$NL$Frequency$I
                     pnt = pnt + 1          #increment to noise level
 
                     ACN$NL$Level$I = rec[pnt]
                     putACN$NL$Level$I
                     pnt = pnt + 1          #increment to field name
                    }
                } # end if (istatx != 0)
            }
 
        #$% else if variable cross section (in dB//meter sq.)
        else if(rec[pnt] == 'MXSEC')
            {
            #$% we unconditionally add 2 to pnt at top of loop
            pnt = pnt + 6
            }
        else if (rec[pnt] == 'ANT-H'|
                 rec[pnt] == 'NOMEN' )
            {
            pnt=pnt+2
            }
        else if (rec[pnt] == 'VMAX'|
                 rec[pnt] == 'CLIMB'|
                 rec[pnt] == 'AMAX'|
                 rec[pnt] == 'XSECT'|
                 rec[pnt] == 'MXSEC'|
                 rec[pnt] == 'EOIR' |
                 rec[pnt] == 'MAD'  |
                 rec[pnt] == 'LIDAR'|
                 rec[pnt] == 'UAV'|
                 rec[pnt] == 'UAVIX'|
                 rec[pnt] == 'SWEEP'|
                 rec[pnt] == 'VCRU'|
                 rec[pnt] == 'LOTSP'|
                 rec[pnt] == 'VECSP'|
                 rec[pnt] == 'FLXPT'|
                 rec[pnt] == 'FLPRX'|
                 rec[pnt] == 'LOTFL'|
                 rec[pnt] == 'LBSKT'|
                 rec[pnt] == 'LOITF'|
                 rec[pnt] == 'HOVER'|
                 rec[pnt] == 'JP'|
                 rec[pnt] == 'LDELY'|
                 rec[pnt] == 'MNFAL'|
                 rec[pnt] == 'MNMNT'|
                 rec[pnt] == 'SDMNT'|
                 rec[pnt] == 'MNRPR'|
                 rec[pnt] == 'MAINT'|
                 rec[pnt] == 'RDELY'|
                 rec[pnt] == 'ODELY'|
                 rec[pnt] == 'PBLCH'|
                 rec[pnt] == 'PBREC'|
                 rec[pnt] == 'PBFAL'|
                 rec[pnt] == 'SYSFL'|
                 rec[pnt] == 'CAT'|
                 rec[pnt] == 'DTRNG'|
                 rec[pnt] == 'CLRNG'|
                 rec[pnt] == 'TRKS'|
                 rec[pnt] == 'FLIR'|
                 rec[pnt] == 'IRNAM'|
                 rec[pnt] == 'ISAR'|
                 rec[pnt] == 'ZOOM'|
                 rec[pnt] == 'HDG'|
                 rec[pnt] == 'SPD'|
                 rec[pnt] == 'NAV'|
                 rec[pnt] == 'RDESM'|
                 rec[pnt] == 'JAMMR'|
                 rec[pnt] == 'CJAMR'|
                 rec[pnt] == 'COMMS'|
                 rec[pnt] == 'HFDF'|
                 rec[pnt] == 'SONAR'|
                 rec[pnt] == 'NDCLS'|
                 rec[pnt] == 'DNWND'|
                 rec[pnt] == 'UDB'|
                 rec[pnt] == 'IFF'|
                 rec[pnt] == 'GNTYP'|       # 3/92 clk
                 rec[pnt] == 'QMAX'|       # 3/92 clk
                 rec[pnt] == 'AEM'|       # 3/92 clk
                 rec[pnt] == 'GEM'|       # 3/92 clk
                 rec[pnt] == 'SEM'|       # 3/92 clk
                 rec[pnt] == 'REACT'|       # 3/92 clk
                 rec[pnt] == 'EXPND'|       # 3/92 clk
                 rec[pnt] == 'RANGE'|       # 3/92 clk
                 rec[pnt] == 'WIDTH'|       # 11/18/92 jms
                 rec[pnt] == 'HGT'|       # 11/18/92 jms
                 rec[pnt] == 'ASMD'|       #  4/19/93 jms
                 rec[pnt] == 'SHARE'|       #  9/95 smm (E1454)
                 rec[pnt] == 'JTIDS'|       # 11/95 clk (E1469)
                 rec[pnt] == 'MNALT'|       # clk 10/96 (E1695)
                 rec[pnt] == 'CEC'  |       # clk 10/96 (E1695)
                 rec[pnt] == 'ATARS'|       # clk 4/97 (E1785)
                 rec[pnt] == 'TARPS')       # clk 4/97 (E1785)
            {
            continue
            }
        else
            {
            call badfld ('AIRCRAFT   ',rec[3],rec[pnt])
            }
        } # end for each entry in the record
    } # for each record in the file
 
return
end
