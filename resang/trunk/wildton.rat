##	FILE:	wildTON.rat
 
 
#$%
#$%   FLOWCHART IS IN WILDTON.HIR
#$%   =======================================
#$%
 
define  (DEBUG,#)
define  (DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbbml.inc"            # boat sonar classification - JFR 4/25/94 (E1267)
include "bbunt.inc"
include "bbrtl.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit NONE)                          # MJC 5/4/2000 (E2145)
 
Subroutine WGLTON (reccnt,recsz,rec)  #load the RECOG_TONALS scenario file
 
########################################################
#$%
#$% Purpose:   WGLTON loads in the RECOG_TONAL scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     Getsr
#$%
#$% Tables:    RTL
#$%
#$% Date:      July 29 83
#$%
#$% Author:    T. ADAMOS
#$%
#$% Modified:  Jonathan Richardson - 4/25/94 (E1267)
#$%            Added tonal classifiation entry for boats.
#$%
########################################################
 
BBcommon
 
integer 	reccnt,			## RECORD COUNT
    		recsz			## RECORD SIZE
literal 	rec[1500]		## RECORD
    		
 
integer     unit_located_flag
 
integer     LOOP,ISTAT,
            RTL$Pointer,
            UNT$Pointer,
            BML$Pointer                             # MJC 5/4/2000 (E2145)
literal     RTL$Classification1$C,
            RTL$Classification2$C,
            RTL$Classification3$C,
            RTL$Classification4$C,
            UNT$Name$C,
            CSTRIP8,
            BML$Name$C                              # MJC 5/4/2000 (E2145)
 
DEBUG call echov ("<WGLTON:")
 
if (reccnt <= 1)			## if file is empty (no record count)
    {					## send warning message to user return
    call echov ("Recog-Tonal File Empty. ")
    call echor
    return
    }
 
for (loop = 2; loop <= reccnt; )		## for each record in the file
    {
    call GETSR (loop, recsz, rec)		## get scenario record
 
    call GSLOTM (RTL$Pointer,$$RTL,RTL$entry,istat)
 
#    rec[2] = ton$name	(Unit name)
#    rec[3] = ton$classification1
#    rec[4] = ton$classification2
#    rec[5] = ton$classification3
#    rec[6] = ton$classification4
 
    if(istat == $no)
    	{
	call echov ("Recog-Tonals for ")
	call echohn(rec[2],8)
	call echov (" and on are not loaded.")
	call echov (" (RTL table full)")
	call echor
	return
       }
 
    RTL$Classification1$C = rec[3]     # Store the user define
    putRTL$Classification1$C           # classifications in the RTL table
    RTL$Classification2$C = rec[4]
    putRTL$Classification2$C
    RTL$Classification3$C = rec[5]
    putRTL$Classification3$C
    RTL$Classification4$C = rec[6]
    putRTL$Classification4$C
 
    unit_located_flag = $no
 
    # Find the associated unit with this tonal entry
    for (unt$pointer$first; unt$pointer$ok; unt$pointer$next)
       {                              # search for the unit table first
        UNT$Name$C = rec[2]
        if (xUNT$Name$C == UNT$Name$C)
          {
           putUNT$RTLIndx$I (RTL$Pointer$Index)
           unit_located_flag = $yes
           break
          }
       }
 
    if (unit_located_flag == $no)   # look in the BML table is not in the UNT
       {                            # JFR 4/25/94 (E1267)
        for (BML$Pointer$First; BML$Pointer$Ok; BML$Pointer$Next)
          {
           BML$Name$C = rec[2]
           if (xBML$Name$C == BML$Name$C)
             {
              putBML$RTLIndx$I (RTL$Pointer$Index)
              break
             }     # end of if boat located
          }     # end of loop through the BML table
       }     # end of if unit was not located in the UNT table
 
    DEBUGL  call echov ("Recognized-Tonals List Loaded for ") # jb E2144 5/22/00
    DEBUGL  call echohn(rec[2],8)
    DEBUGL  call echor
    }
 
return
end
