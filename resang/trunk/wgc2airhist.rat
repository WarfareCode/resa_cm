# File:          wgc2airhist.rat
# Initial Date:  27-Oct-1994

include 'bbcode.inc'    # RESA code definitions
include 'bbctl.inc'     # BBCommon definition, etc.

include 'bbacc.inc'     # Aircraft Characteristics Table Definition
include 'bbamh.inc'     # Aircraft Mission History Table Definition
include 'bbnam.inc'     # Name Table Definition
include 'bbunt.inc'     # Active Unit Table Definition

include 'ascii.inc'

undefine write

define (max_c2_weapons, 3)
define (BBImplicit, Implicit None)


Subroutine Init_Air_Mission_History (_
                         UNT$Pointer,      # in:  UNT index of flight
                         split_unt_index)  # in:  UNT index of original flight,
                                           #      if this a/c is result of split
##############################################################################
#$%
#$% Purpose:   Init_Air_Mission_History initializes a flight mission
#$%            history entry in the common block strcuture array
#$%            c2_air_hist_data_rec.  All the data known at the time of the
#$%            launch order processing is stored in the array.
#$%
#$% Called By: Record_Flight_Split
#$%
#$% Calls:     Get_Free_AMH_Entry
#$%            addnam_unit           <lbcommn.rat>
#$%
#$% Tables:    AMH     UNT     ACC     NAM
#$%
#$% Date:      Oct. 1994
#$%
#$% Author:    Carol L. Kropp
#$%
#$% Modified:  Carol Kropp - 12/96 (E1726)
#$%            Name changed from Init_C2_Flight_Mission history, since data
#$%            is going to be for more than the WPC C2 interface. Created a
#$%            RESA Blackboard table to maintain information in rather than
#$%            array structure (new table is AMH).
#$%
##############################################################################
BBCommon

integer  UNT$Pointer, split_unt_index

literal  cstrip8                 # function to extract literals

integer  AMH$Pointer
literal  UNT$ForceName$C
literal  AMH$CallSign$C, AMH$EventName$C
integer  AMH$AccPntr$I, AMH$UNTIndx$I
integer  AMH$View$I, AMH$NbrRequested$I
real     AMH$TimeLaunched$F
integer  AMH$OriginalAMHIndx$I, AMH$LaunchNAMPntr$I

integer  UNT$AirHistIndx$I
integer  UNT$LaunchIndx$I        # UNT table index of launching platform
integer  UNT2$Pointer            # Unit table pointer for launching platform

integer  NAM$Pointer

  call Get_Free_AMH_Entry (AMH$Pointer)
  if (AMH$Pointer$Valid)   # if there was a slot to be used
    {
     AMH$CallSign$C = xUNT$Name$C
     UNT$ForceName$C = xUNT$ForceName$C        # Use mission number if exists
     if (UNT$ForceName$C != $BLANKLIT) AMH$CallSign$C = UNT$ForceName$C
     putAMH$CallSign$C

     AMH$EventName$C = xUNT$Event$C
     putAMH$EventName$C

     AMH$AccPntr$I = xUNT$AccPntr$I
     putAMH$AccPntr$I

     AMH$UNTIndx$I = UNT$Pointer$Index
     putAMH$UNTIndx$I

     UNT$AirHistIndx$I = AMH$Pointer$Index
     putUNT$AirHistIndx$I

     AMH$View$I = xUNT$View$I
     putAMH$View$I

     AMH$NbrRequested$I = xUNT$NbrAcTot$I
     putAMH$NbrRequested$I

     AMH$TimeLaunched$F = xUNT$TimeLaunched$F
     putAMH$TimeLaunched$F

     AMH$OriginalAMHIndx$I = split_unt_index
     putAMH$OriginalAMHIndx$I

     UNT$LaunchIndx$I = xUNT$LaunchIndx$I
     UNT2$Pointer$To    (UNT$LaunchIndx$I)
     call addnam_unit (UNT2$Pointer, NAM$Pointer)
     AMH$LaunchNAMPntr$I = NAM$Pointer
     putAMH$LaunchNAMPntr$I
    }

return
end    # end of Init_Air_Mission_History


Subroutine Record_Air_Launch_Complete (UNT$Pointer)
##############################################################################
#$%
#$% Purpose:   Record_Air_Launch_Complete will update the units the common
#$%            block structure array entry with data known at the time of
#$%            launch completion.
#$%
#$% Called By: Record_Flight_Split
#$%
#$% Calls:     none
#$%
#$% Tables:    AMH     UNT
#$%
#$% Date:      Oct. 1994
#$%
#$% Author:    Carol L. Kropp
#$%
#$% Modified:  Carol Kropp - 12/96 (E1726)
#$%            Name changed from Record_Air_Launch_Complete, since data
#$%            is going to be for more than the WPC C2 interface. Created a
#$%            RESA Blackboard table to maintain information in rather than
#$%            array structure (new table is AMH).
#$%
##############################################################################
BBCommon

integer  UNT$Pointer          # Unit Table Pointer for the aircraft

literal  cstrip8              # literal function

integer  UNT$AirHistIndx$I
integer  AMH$Pointer, AMH$NbrLaunched$I, AMH$Mission$I
literal  AMH$CallSign$C, UNT$ForceName$C

  UNT$AirHistIndx$I = xUNT$AirHistIndx$I
  AMH$Pointer$To  (UNT$AirHistIndx$I)

  if (AMH$Pointer$Valid)
    {
     AMH$CallSign$C = xUNT$Name$C
     UNT$ForceName$C = xUNT$ForceName$C        # Use mission number if exists
     if (UNT$ForceName$C != $BLANKLIT) AMH$CallSign$C = UNT$ForceName$C
     putAMH$CallSign$C

     AMH$NbrLaunched$I = xUNT$NbrAc$I
     putAMH$NbrLaunched$I

     AMH$Mission$I = xUNT$Mission$I
     putAMH$Mission$I
    }   # end of if the unit has an AMH

return
end


Subroutine Record_Flight_EQ_Expended (_
                         UNT$Pointer,   # in: UNT Pointer for the aircraft
                         TBL$Pointer,   # in: Table Pointer for the expendable item
                         amount)        # in: amount expended
##############################################################################
#$%
#$% Purpose:   Record_Flight_EQ_Expended will store weapons expended in the
#$%            common block structure array entry.  If a weapon type was
#$%            previously entered, then the amount expended is increased.
#$%
#$% Called By: 
#$%
#$% Calls:     None
#$%
#$% Tables:    UNT
#$%
#$% Date:      Oct. 1994
#$%
#$% Author:    Carol L. Kropp
#$%
#$% Modified:  Carol Kropp - 12/96 (E1726)
#$%            Name changed from Record_C2_Flight_EQ_Expended, since data
#$%            is going to be for more than the WPC C2 interface. Created a
#$%            RESA Blackboard table to maintain information in rather than
#$%            array structure (new table is AMH).
#$%
##############################################################################
BBCommon

integer  UNT$Pointer, TBL$Pointer, amount

integer  UNT$AirHistIndx$I
integer  AMH$Pointer, AMH$NbrExpEntries$I
integer  AMH$NbrAt1stTarget$I
real     AMH$TimeAt1stTarget$F
integer  AMH$EXP$Index, AMH$EXP$NbrExpended$I, AMH$EXP$Pntr$I
integer  weapon_located       # flag to indicate weapon type previously entered

  UNT$AirHistIndx$I = xUNT$AirHistIndx$I
  AMH$Pointer$To  (UNT$AirHistIndx$I)

  if (AMH$Pointer$Valid)
    {     
     weapon_located = $no

     AMH$NbrExpEntries$I = xAMH$NbrExpEntries$I
     for (AMH$EXP$Index = 1; AMH$EXP$Index <= AMH$NbrExpEntries$I;
                             AMH$EXP$Index = AMH$EXP$Index + 1)
       {
        if (xAMH$EXP$Pntr$I == TBL$Pointer)
          {
           weapon_located = $yes
           AMH$EXP$NbrExpended$I = xAMH$EXP$NbrExpended$I + amount
           putAMH$EXP$NbrExpended$I
           break
          }   # end of equipment table pointers match
       }   # end of loop through previously entered expenditures

     if (weapon_located == $no)
       {
        if (AMH$NbrExpEntries$I < AMH$EXP$Slots)
          {
           AMH$NbrExpEntries$I = AMH$NbrExpEntries$I + 1
           putAMH$NbrExpEntries$I

           if (AMH$NbrExpEntries$I == 1)    # if 1st expenditure
             {
              AMH$NbrAt1stTarget$I = xUNT$NbrAC$I
              putAMH$NbrAt1stTarget$I
              AMH$TimeAt1stTarget$F = Game$Time
              putAMH$TimeAt1stTarget$F
             }   # end of if this is the first weapon expenditure for the flight

           AMH$EXP$Index = AMH$NbrExpEntries$I
           AMH$EXP$Pntr$I = TBL$Pointer
           putAMH$EXP$Pntr$I
           AMH$EXP$NbrExpended$I = amount
           putAMH$EXP$NbrExpended$I
          }  # end of if there is room to enter the new expenditure
       }   # end of if weapon type was not previously fired
    }   # end of if unit has an AMH

return
end


Subroutine Record_Flight_Mission_Change (UNT$Pointer)  # in: Aircraft's UNT
##############################################################################
#$%
#$% Purpose:   Record_Flight_Mission_Change will update the mission of
#$%            the aircraft in the common block structure array entry.
#$%
#$% Called By: Record_Flight_Split
#$%
#$% Calls:     none
#$%
#$% Tables:    AMH     UNT
#$%
#$% Date:      Oct. 1994
#$%
#$% Author:    Carol L. Kropp
#$%
#$% Modified:  Carol Kropp - 12/96 (E1726)
#$%            Name changed from Record_Flight_Mission_Change, since data
#$%            is going to be for more than the WPC C2 interface. Created a
#$%            RESA Blackboard table to maintain information in rather than
#$%            array structure (new table is AMH).
#$%
##############################################################################
BBCommon

integer  UNT$Pointer

integer  UNT$AirHistIndx$I
integer  AMH$Pointer, AMH$Mission$I

  UNT$AirHistIndx$I = xUNT$AirHistIndx$I
  AMH$Pointer$To  (UNT$AirHistIndx$I)

  if (AMH$Pointer$Valid)
    {
     AMH$Mission$I = xUNT$Mission$I
     putAMH$Mission$I
    }   # end of if unit has an AMH

return
end


Subroutine Record_Flight_Split (_
                    UNT$Pointer,   # in: UNT of the original flight
                    number_split,  # in: number of a/c splitting off
                    UNT2$Pointer)  # in: UNT of the new flight
##############################################################################
#$%
#$% Purpose:   Record_Flight_Split will update the number of aircraft
#$%            split from the original flight in the flight mission history 
#$%            common block structure array entry.
#$%
#$% Called By: 
#$%
#$% Calls:     Init_Air_Mission_History
#$%            Record_Air_Launch_Complete
#$%            Record_Flight_Mission_Change
#$%
#$% Tables:    AMH     UNT
#$%
#$% Date:      Oct. 1994
#$%
#$% Author:    Carol L. Kropp
#$%
#$% Modified:  Carol Kropp - 12/96 (E1726)
#$%            Name changed from Record_C2_Flight_Split, since data
#$%            is going to be for more than the WPC C2 interface. Created a
#$%            RESA Blackboard table to maintain information in rather than
#$%            array structure (new table is AMH).
#$%
##############################################################################
BBCommon

integer  UNT$Pointer, number_split, UNT2$Pointer

integer  UNT$AirHistIndx$I
integer  AMH$Pointer, AMH$NbrSplitOff$I
real     AMH$TimeInitiallySplit$F

  UNT$AirHistIndx$I = xUNT$AirHistIndx$I
  AMH$Pointer$To  (UNT$AirHistIndx$I)

  if (AMH$Pointer$Valid)
    {
     AMH$NbrSplitOff$I = xAMH$NbrSplitOff$I + number_split
     putAMH$NbrSplitOff$I

     if (xAMH$TimeInitiallySplit$F == 0.0)
       {
        AMH$TimeInitiallySplit$F = Game$Time
        putAMH$TimeInitiallySplit$F
       }

     call Init_Air_Mission_History (UNT2$Pointer, UNT$Pointer$Index)
     call Record_Air_Launch_Complete (UNT2$Pointer)
     call Record_Flight_Mission_Change (UNT2$Pointer)
    }   # end of if unit has an AMH

return
end   # end of Record_Flight_Split


Subroutine Record_Flight_Landed (_
                    UNT$Pointer,    # in: UNT of the flight
                    UNT2$Pointer)   # in: UNT of the recovering platform
##############################################################################
#$%
#$% Purpose:   Record_Flight_Landed will record the time the flight
#$%            landed (which makes it available to be reported to the C2
#$%            System).
#$%
#$% Called By:
#$%
#$% Calls:     addnam_unit           <lbcommn.rat>
#$%
#$% Tables:    AMH     UNT     NAM
#$%
#$% Date:      Oct. 1994
#$%
#$% Author:    Carol L. Kropp
#$%
#$% Modified:  Carol Kropp - 12/96 (E1726)
#$%            Name changed from Record_C2_Flight_Landed, since data
#$%            is going to be for more than the WPC C2 interface. Created a
#$%            RESA Blackboard table to maintain information in rather than
#$%            array structure (new table is AMH).
#$%
##############################################################################
BBCommon

integer  UNT$Pointer, UNT2$Pointer

integer  UNT$AirHistIndx$I
integer  AMH$Pointer, AMH$RecoverNAMPntr$I
integer  AMH$NbrRequested$I, AMH$NbrSplitOff$I, AMH$NbrLostAAE$I
integer  AMH$NbrLostSAM$I, AMH$NbrLostOnGround$I, AMH$NbrLanded$I
real     AMH$TimeLanded$F
integer  NAM$Pointer

  UNT$AirHistIndx$I = xUNT$AirHistIndx$I
  AMH$Pointer$To  (UNT$AirHistIndx$I)

  if (AMH$Pointer$Valid)
    {
     AMH$TimeLanded$F = Game$Time
     putAMH$TimeLanded$F

     call addnam_unit (UNT2$Pointer, NAM$Pointer)
     AMH$RecoverNAMPntr$I = NAM$Pointer
     putAMH$RecoverNAMPntr$I

     AMH$NbrLostAAE$I = xAMH$NbrLostAAE$I
     AMH$NbrLostSAM$I = xAMH$NbrLostSAM$I
     AMH$NbrLostOnGround$I = xAMH$NbrLostOnGround$I
     AMH$NbrSplitOff$I = xAMH$NbrSplitOff$I
     AMH$NbrRequested$I = xAMH$NbrRequested$I

     AMH$NbrLanded$I = AMH$NbrRequested$I - 
                       (AMH$NbrSplitOff$I + AMH$NbrLostAAE$I +
                        AMH$NbrLostSAM$I + AMH$NbrLostOnGround$I)
     putAMH$NbrLanded$I
     putAMH$ReadyToReport$I ($yes)
    }

return
end


Subroutine Report_C2_Flight_Hist_Data
##############################################################################
#$%
#$% Purpose:   Report_C2_Flight_Hist_Data will locate information for landed
#$%            flights which have not been reported before, read the data,
#$%            format it into the desired format and write the data to the
#$%            C2 data file.
#$%
#$% Called By: 
#$%
#$% Calls:     trnlog_vv
#$%            char_length   <alsp_init.rat>
#$%            open
#$%            Game_DTG      <lbtime.rat>
#$%            echo..        <lbech.rat>
#$%            Located_C2_Squadron
#$%            write
#$%            Astab_Mission <lbcommn.rat>
#$%            close
#$%
#$% Tables:    AMH     ACC
#$%
#$% Date:      Oct. 1994
#$%
#$% Author:    Carol L. Kropp
#$%
#$% Modified:  Carol Kropp - 8/96 (E1710)
#$%            Added extra check to see if unit has actually landed.
#$%            A flight of two was still in the air, but an attempt
#$%            was made to report them.
#$%
#$% Modified:  Carol Kropp - 12/96 (E1726)
#$%            Created a RESA Blcoakboard table (AMH) to maintain the
#$%            information in rather than an array structure.
#$%
##############################################################################
BBCommon

include 'alsp_io_rat.inc'

literal  cstrip8                 # function to extract literals
integer  char_length             # integer function in alsp_init.rat
integer  Game_DTG                # integer function to compute zulu time
literal  Astab_Mission           # literal mission (lbcommn.rat)

integer  AMH$Pointer, AMH$UNTIndx$I, AMH$View$I
integer  AMH$Mission$I, AMH$NbrSplitOff$I
literal  AMH$CallSign$C, AMH$EventName$C
integer  AMH$EXP$Index
real     AMH$TimeAt1stTarget$F

integer  UNT$Pointer   # clk 8/96 (E1710) - to check unit

integer         ACC$Pointer
literal         ACC$Type$C

vmschar*30      file_name
integer         file_name_len
vaxcharacter*8  event_name
vaxcharacter*8  v_squadron, launch_plat, land_plat
literal         l_squadron
vaxcharacter*8  aircraft_type
vaxcharacter*4  color
integer         current_time, time_launched, time_landed   # DTG format
literal         mission_name
vaxcharacter*3  mission
integer         nbr_requested, nbr_launched,  nbr_at_tgt
integer         nbr_landed
integer         amts[3]
vaxcharacter*8  weaps[3]
integer         time_at_target                             # DTG format
integer         j
integer         litcmp                      # joa E2210
integer		trnlog_vv

  # open the data file
  file_name = ' '
  file_name_len = trnlog_vv('C2_MISSION_HIST',file_name)
  if (file_name_len == 0)
    {
        j = node_len
        file_name =  alsp_node_name[1:j] // '_NAV_MISSION_HISTORY.DAT'
    }

  open (unit            = 10,
        file            = file_name,
        status          = 'unknown',
        recl            = 130*4)


  current_time = Game_DTG (Game$Time)

  # loop through the structure array
  for (AMH$Pointer$First; AMH$Pointer$Valid; AMH$Pointer$Next)
    {
     if (xAMH$ReadyToReport$I == $yes &     # if all data there and not
         xAMH$ReportedToC2$I == $no)        # previously reported
       {
        AMH$CallSign$C = xAMH$CallSign$C
        AMH$EventName$C = xAMH$EventName$C

        # clk 8/96 (E1710) - check to see if a/c is airborne
        AMH$UNTIndx$I = xAMH$UNTIndx$I
        UNT$Pointer$To  (AMH$UNTIndx$I)
        if (UNT$Pointer$Ok)
          {
           if ((litcmp(xUNT$Name$C, AMH$CallSign$C) == 0 |
                litcmp(xUNT$ForceName$C, AMH$CallSign$C) == 0) &
               (xUNT$Status$I != $BeingDeleted$Code))
             {
              call echov  ("Attempted to send data on a/c ")
              call echohn (AMH$CallSign$C, $$MaxLit)
              call echov  ("/")
              call echohn (AMH$EventName$C, $$MaxLit)
              call echov  (", but it is not being deleted.")
              call echor
              call echo   ($Bell)
              call echo   ($Bell)
              call echor
              next
             }   # end of if the same name and not being deleted
          }   # end of if the UNT table pointer is ok

        # get the data
#        call Locate_C2_Squadron (AMH$CallSign$C, l_squadron)
#        write (v_squadron, '(a8)') l_squadron
        l_squadron = AMH$Callsign$C
        write (event_name, '(a8)') AMH$EventName$C
        write (launch_plat, '(a8)') xAMH$LaunchPlatform$C

        ACC$Pointer = xAMH$AccPntr$I
        ACC$Type$C = xACC$Type$C
        write (aircraft_type, '(a8)') ACC$Type$C

        AMH$View$I = xAMH$View$I
        if (AMH$View$I < $FirstBlue$View)
          color = 'NEUT'
        else if (AMH$View$I < $FirstOrange$View)
          color = 'BLUE'
        else
          color = 'RED '

        AMH$Mission$I = xAMH$Mission$I
        mission_name = Astab_Mission (AMH$Mission$I)
        write (mission, '(a3)') mission_name

        AMH$NbrSplitOff$I = xAMH$NbrSplitOff$I
        nbr_requested = max(0, xAMH$NbrRequested$I - AMH$NbrSplitOff$I)
        nbr_launched  = max(0, xAMH$NbrLaunched$I - AMH$NbrSplitOff$I)
        nbr_at_tgt    = xAMH$NbrAt1stTarget$I
        nbr_landed    = xAMH$NbrLanded$I

        time_launched =  Game_DTG (xAMH$TimeLaunched$F)
        if (nbr_landed < 0 | nbr_landed > 9999)   # clk 8/96 (E1710) - make sure it is a
          {                                       # good number landed
           call echov  ("Bad nbr_landed (")
           call echoi  (nbr_landed)
           call echov  (") for ")
           call echohn (AMH$CallSign$C, $$MaxLit)
           call echov  (" value set to zero.")
           call echor
           call echo   ($Bell)
           call echo   ($Bell)
           call echor

           nbr_landed = 0
           write (land_plat, '(a8)') '     '
           time_landed = 0
          }
        else
          {
           write (land_plat, '(a8)') xAMH$RecoverPlatform$C
           time_landed = Game_DTG (xAMH$TimeLanded$F)
          }

        for (AMH$EXP$Index = 1; (AMH$EXP$Index <= xAMH$NbrExpEntries$I &
                                 AMH$EXP$Index <= max_c2_weapons);
                                AMH$EXP$Index = AMH$EXP$Index + 1)
          {
           amts[AMH$EXP$Index] = xAMH$EXP$NbrExpended$I
           write (weaps[AMH$EXP$Index], '(a8)') xAMH$EXP$Type$C
          }
        for (; AMH$EXP$Index <= max_c2_weapons; AMH$EXP$Index = AMH$EXP$Index + 1)
          {
           amts[AMH$EXP$Index] = 0
           write (weaps[AMH$EXP$Index], '(a8)') '     '
          }

        AMH$TimeAt1stTarget$F = xAMH$TimeAt1stTarget$F
        if (AMH$TimeAt1stTarget$F > 0.0)
          {
           time_at_target = Game_DTG (AMH$TimeAt1stTarget$F)
           write(10, 100)  current_time, color, l_squadron, launch_plat,
                           launch_plat, land_plat, event_name, aircraft_type,
                           mission, nbr_requested, nbr_launched, nbr_at_tgt,
                           nbr_landed, time_launched, time_at_target,
                           time_landed, (amts[j], weaps[j], j=1,3)
          }
        else
          {
           write(10, 200)  current_time, color, l_squadron, launch_plat,
                           launch_plat, land_plat, event_name, aircraft_type,
                           mission, nbr_requested, nbr_launched, nbr_at_tgt,
                           nbr_landed, time_launched, '      ',
                           time_landed, (amts[j], weaps[j], j=1,3)
          }
        putAMH$ReportedToC2$I  ($yes)
       }   # end of if data is to be reported
    }   # end of loop through the AMH table

  # close the data file
  close (unit = 10)

100 format (i6.6, a4, 4a8, a8, a8, a3, 4i4.4, 3i6.6, 3(i3,a8))
200 format (i6.6, a4, 4a8, a8, a8, a3, 4i4.4, i6.6, a6, i6.6, 3(i3,a8))

return
end


Subroutine Get_Free_AMH_Entry (AMH$Pointer)     # out:  The free AMH entry or
                                                #       $null if table is full
##############################################################################
#$%
#$% Purpose:   Get_Free_AMH_Entry will look for an available entry in the
#$%            AMH table.  If the table is full a warning will be sent to
#$%            the wargame terminal and all control stations.
#$%
#$% Called By: Init_Air_Mission_History
#$%
#$% Calls:     smovv..
#$%            send
#$%
#$% Tables:    AMH
#$%
#$% Date:      December 1996 (E1726)
#$%
#$% Author:    Carol L. Kropp
#$%
##############################################################################
BBCommon

integer   AMH$Pointer

literal   cstrip8       # function to extract literals
integer   Game_DTG      # function to compute game zulu time

real      AMH$TimeLanded$F
real      oldest_reported_land_time
integer   oldest_reported_entry_ptr
real      oldest_land_time
integer   oldest_entry_ptr
integer   msg_len
character msg[ARB]

  oldest_reported_land_time = Game$Time + 1.0
  oldest_reported_entry_ptr = $null
  oldest_land_time = Game$Time + 1.0
  oldest_entry_ptr = $null
  for (AMH$Pointer$First; AMH$Pointer$Valid; AMH$Pointer$Next)
    {
     if (xAMH$InUse$I == $no)
       {
        break
       }   # end of if this one is available
     else if (xAMH$ReportedToC2$I != $no)
       {
        AMH$TimeLanded$F  = xAMH$TimeLanded$F
        if (AMH$TimeLanded$F < oldest_reported_land_time &  # JOA CT01 0 means not landed yet
            AMH$TimeLanded$f > 0.0)
          {
           oldest_reported_land_time = AMH$TimeLanded$F
           oldest_reported_entry_ptr = AMH$Pointer
          }   # end of if this one is older than any previous
       }   # end of if this one has been reported out
      if (AMH$TimeLanded$F < oldest_land_time &  # JOA CT01 0 means not landed yet
          AMH$TimeLanded$f > 0.0)
        {
         oldest_land_time = AMH$TimeLanded$F
         oldest_entry_ptr = AMH$Pointer
        }   # end of if this one is older than any previous
    }   # end of loop looking for a free entry

  if (oldest_reported_entry_ptr != $null)
      AMH$pointer = oldest_reported_entry_ptr

  if (!(AMH$Pointer$Valid))   # if the AMH Table Pointer is not valid
    {
     call Report_C2_Flight_Hist_Data
     AMH$pointer = oldest_entry_ptr
     msg_len = 0
     call smov  ($Bell, msg, msg_len)
     call smovv ("WARNING:  Air Mission History Table ", msg, msg_len)
     call smovv ("(AMH) overflow: ", msg, msg_len)
     call smovv ("Data written to file to allow override.", msg, msg_len)
     call echoh (msg, msg_len)
     call echor
     
    }   # end of if there were no free entries

   if (AMH$Pointer$Valid)
     {   
      AMH$ZERO           # JOA CT01  Need to clear all fields to correct override problem
     }

return
end   # end of Get_Free_AMH_Entry
