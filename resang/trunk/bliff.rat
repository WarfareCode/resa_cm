 
#####   version 1.0  dated- 21FEB91
 
 
# 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine IFFbld
 
      ##################################################
      #$%
      #$% Purpose:   IFFbld allows the user to
      #$%            interact with the IFF
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      FEB 91
      #$%
      #$% Author:    Cynthia Leaf
      #$%
      ##################################################
 
#
#     New IFF
#
##      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT NONE         # jb  E2145 4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom,  5)     # The number of entries in the defCOM table.
define (zdctyp,  8)     # The size of the defTYP table.
define (zdcfld, 49)     # The size of the defFLD table.
define (zdsarg,  8)     # The size of entries in the defARG table. reh, was 4,9/13/89
define (zdcarg,  6)     # The number of entries in the defARG table. #(7) 5/4/89
define (zdcfmt,  5)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      character  line[ARB]
 
      integer    m
 
 ##     Note:  See also declarations in BLSUB!.rin...
 
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("        ","IFF  sys","tems"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of IFF system
 DATA$com("TYPE ",  1)      # Type of IFF system
 DATA$com("RANGE",  1)      # Maximum range
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 
 
 $set (Data_Count,0)
 DATA$typ("     ",  0)      # rec type 1
 DATA$typ("     ",  1)      #
 DATA$typ("     ",  0)      # rec type 2
 DATA$typ("     ",  1)      #
 
 
 
 $set (Data_Count,0)
 
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","jammer  ","        ","      ")
 DATA$fld1("TYPE ", 1, 1,"TYPE ", 1,"Type (IN","TER/TRAN","S)      ","      ")
 DATA$fld3("NOMEN", 3,-5,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("RANGE", 1, 2,"MILES", 1,"Maximum ","range   ","        ","      ")
 
 
 $set (Data_Count,0)
 DATA$arg8N("NAME ",6000,0,0)                # Alphanumeric -- Anything
 DATA$arg8C("TYPE ",8002,"INTER","TRANS")    # Alphanumeric list
 DATA$arg8N("Text ",9024)                    # Alphanumeric string (24 bytes)
 DATA$arg8N("...  ",9000)                    # Alphanumeric string filler
 DATA$arg8C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg8N("MILES",2002, 0,  10000)         # Numeric Range 0 -> 10000
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 3,"A5,2I9) "," "," "," ")
 DATA$fmt( 3,"A5,A7,A7",")"," "," ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    NONE
#
#
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
 
 
		  #***********************************************************
		  #***********************************************************
		  if (argtyp<=0)          #*** SPECIAL ***
		   {
		   #
		   # increment PTRCNT for each additional input word processed
		   #
		   # on error: increment VERR and NEXT to the next loop
		   #
		    #*********************************************************
		    if (argn==1)                          # Special Test 1
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==2)                     # Special Test 2
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==3)                     # Special Test 3
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    #*********************************************************
 
		    next
		   }
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# scan the work area looking at all fields....
 
# for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
#    {
#    }
 
 
 
 
 
# test results ......
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
