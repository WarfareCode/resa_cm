#include "clidef.inc"
include "ascii.inc"
include "macros.inc"
 
integer function c_spawn_io (iname, pname, inum, pid, s_in, s_out, s_err)
implicit none
VMSchar*(*)     iname,          # Image Name (to execute)
                pname,          # Process Name (to assign)
                s_in,           # Logical name to assign for Sys$Input
                s_out,          # Logical name to assign for Sys$Output
                s_err           # Logical name to assign for Sys$Error
 
integer         inum,           # Process Name Index
                pid,            # Process Id (assigned)
                rc,
                make_pname_w_index,
                kk
 
VMSchar         procname*20,
                tin*FILENAMESIZE,
                tout*FILENAMESIZE,
                terr*FILENAMESIZE
 
integer         rc2, lib$spawn
 
#todo:  rewrite routine to fork a process for linux
#call trnlog_vv (s_in,  tin)
#call trnlog_vv (s_out, tout)
#call trnlog_vv (s_err, terr)
 
#kk = make_pname_w_index (pname,inum,procname)
 
#rc = lib$spawn (iname,                          # command to execute
#                ,tin                           # input file (use default)
#                tout,                           # output file (use default)
#                CLI$M_NOWAIT,                   # Flags (CLI$M_NOLOGNAM &
                                                #CLI$M$M_NOWAIT)
#                procname[1:kk],                 # process name
#                pid,                            # process id
#                rc2,                            # completion status
#                ,                               # completion event flag nbr
#                ,                               # completion AST
#                )                               # completion AST parameter
 
return (rc)
end

 
integer function make_pname_w_index (name,indx,pname)
implicit none
VMSchar*(*)     name,pname
integer         indx
integer         i, j
 
j = 0
for (i=1; name[i:i] != char(EOS) & j < 16; i=i+1)
    {
    if (name[i:i] == "") break
 
    if (name[i:i] == "#")
        {
        call vmovi (indx,pname,j)
        }
    else
        {
        call vmovv (name[i:i],pname,j)
        }
    }
 
call vmov (EOS,pname,j)
 
call upper_v (pname)
 
return (j-1)
end
 

 
subroutine read_pname_index (indx)
implicit none
character       name[20]
integer         indx, ctoi, ilen
integer		length, i
 
# Stubbed out for port.  This feature is not used
#call getpnm (name)
#ilen = length(name)
 
#indx = 0
 
#for (i=1; i < ilen; i=i+1)
#    {
#    if (name[i] != $UNDERSCORE) next
 
#    i = i+1
#    indx = ctoi (name,i)
 
#    if (indx > 0) break
#    }
 
return
end

 
subroutine make_sta_config_name (cname,file_name)
implicit none
literal         cname
character       work_name[ARB],
                file_name[ARB]
integer         equal
integer		jj, index
 
work_name[1] = EOS
file_name[1] = EOS
 
jj = 0
call smovhn (Cname,8,work_name,jj)
call smov   (EOS,work_name,jj)
call upper  (work_name)
 
call trnlog (work_name,file_name)
 
if (equal (work_name,file_name) == YES)
    {
    if (index(file_name,$PERIOD) == 0)              # look for file-type in name
        {                                       # (i.e. '.DAT') if NONE....
        jj = jj - 1
        call smovv (".DAT",file_name,jj)      # use default file type '.DAT'
        call smov  (EOS,file_name,jj)
        }
    }
 
return
end
 

 

 
subroutine make_CSF_bb_name (igame,oldname,newname)
 
integer         igame
VMSchar*(*)     oldname,
                newname
integer		kk
 
 
kk = 0
call vmovvn (oldname,newname,kk)     # generate BB Name  i.e. 'wes.bbX'
 
if (igame != 0)
    call vmovi (igame,  newname,kk)
 
call vmov  (EOS, newname,kk)
 
return
end
 

subroutine make_RG_bb_name (igame,igen,oldname,newname)
implicit none
integer         igame, igen
VMSchar*(*)     oldname,
                newname
 
integer         kk, i, index_vv
 
 
kk = 0
i = index_vv(oldname,".")
 
call vmovv  (oldname[1:i-1], newname, kk)     # generate BB Name  i.e. 'RAINx.DBy'
if (igen != 0)
    call vmovi  (igen,       newname, kk)
call vmovvn (oldname[i:],    newname, kk)     # generate BB Name  i.e. 'RAINx.DBy'
 
if (igame != 0)
    call vmovi (igame,       newname,kk)
 
call vmov  (EOS, newname,kk)
 
return
end
 

 
subroutine do_sys_command (command, rc)
use ifport
implicit none
character command[ARB]
vmschar*ARB vcmd
integer rc
 
call rs2fs (command, vcmd)  #RESA string to Fortran string
rc = system(vcmd)		# portability function
 
return
end
 
 
