 
include "ascii.inc"                                   # ascii constants
include "bbcode.inc"                                  # blackboard defines
include "bbctl.inc"
include "bbunt.inc"
include "bbown.inc"
include "bbrad.inc"
include "bbsui.inc"
include "bbesm.inc"
include "bbsig.inc"
include "bbdeq.inc"
include "stmain.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  5/18/00
define ($low$order$key,ikey)
 
define ($row,21)                                      # graph page dimensions
define ($column,80)
define ($max_comm,30)                                 # max num of comm equip.
define ($New_Unit,100)
 
define (SIGcommon,
        Literal rkey,                                 # Receiver name key
                receiver[$max_comm]                   # Receiver name
        Common /SIG/rkey,receiver
        )
 

Subroutine SIGSTA
 
 
BBcommon
STATUScommon
SIGcommon
 
integer EMI_Signal,More_units, Temp_ctr, Cont_Units
Integer OWN$Pointer, ircvr, icom, DEQ$Pointer       # jb E2145  5/18/00
 
if(Remote$Node$Number != 0)                 # jb Only StandAlone  3/25/91
   {
    call NOSIGNAL                           # jb Notify via ASTAB 3/25/91
    RETURN
   }
 
EMI_Signal = $NO
More_units = 0
Cont_units = 0
 
call NxtSIGNAL (OWN$Pointer,cont_units)
 
repeat
    {
    if (ikey2 == $New_Unit)
       {
        ikey2 = 1
        lkey2 = 1
        rx_count = 0
        $clear$overflow
        $update$keys
        next
       }
 
    call getsignal(OWN$Pointer)
 
    if (OWN$Pointer == 0) break
 
    call anyrvr (OWN$Pointer,ircvr)
 
    if (ircvr == $NO)
        {
        EMI_Signal = $NO
        $increment$keys
        next
        }
 
    icom = 0
    rkey = 1
    EMI_Signal = $YES
 
    repeat    #get all the receivers for the unit
        {
        call GETRECVR(OWN$Pointer,DEQ$Pointer)
 
        if (DEQ$Pointer == 0) break
 
        icom = icom + 1
        receiver[icom] = rkey
 
        call litinc (rkey)
        }
 
    IF  (asb_refresh == $NO)
        {
         Temp_ctr = rx_count + 1
         IF  (Temp_ctr > icom)
             {
             call NxtSIGNAL (OWN$Pointer,more_units)
             IF  (More_units == 1)
                 {
                  Ikey2 = $New_Unit
                  Next
                 }
             ELSE
                 {
                  ikey = 1
                  ikey2 = $new_unit
                  lkey = 1
                  nkey = 1
                  iovflo = $no
                  kpage = 1
                  next
                 }
             }
         ELSE
            rx_count = rx_count + 1
 
        }
    call SIGENTER(OWN$Pointer,rx_count)
 
    IF  (temp_ctr == icom & Cont_units == 0)
        IOVFLO = 0
    ELSE
        $set$overflow
    nsect = isect
    nsect2 = isect2
    nkey = ikey
    lkey = nkey
    $save$line$count
#    $exit$on$overflow
    RETURN
    }
 
    if (EMI_Signal == $NO) call NOSIGNAL
 
return
end
 

Subroutine anyrvr (OWN$Pointer,ircvr)
 
##########################################################################
#$%
#$% Purpose:   anyrvr determines if platform has any receivers.
#$%
#$% Called By:
#$%
#$% Calls:     None
#$%
#$% Tables:    OWN    DEQ
#$%
#$% Date:      28 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
STATUScommon
 
Integer OWN$Pointer, OWN$Unit$I,         # jb E2145  5/18/00
        UNT$Pointer, DEQ$Pointer, ircvr  # jb E2145  5/18/00
 
ircvr = $NO
 
OWN$Unit$i = xOWN$Unit$i
 
UNT$Pointer$To OWN$Unit$i
 
FOR_DEQ_CHAIN
    {
    if (xDEQ$EMIinterest$i == $NO) next         # device must be selected
 
    if (xdeq$TimeWhenUse$f > Game$time) next  # device must be operable
 
    if (xDEQ$Ident$i != $CommSuite$Code &
        xDEQ$On$i    == $NO              ) next # device must be ON (to TX)
 
    ircvr = $YES
 
    return
    }
 
return
end
 

Subroutine GETSIGNAL (nxtforce)
 
##########################################################################
#$%
#$% Purpose:   GETSIGNAL locates the force with the receiver with EMI of
#$%            interest.
#$%
#$% Called By: SIGSTA
#$%
#$% Calls:     None
#$%
#$% Tables:    OWN    UNT
#$%
#$% Date:      28 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
STATUScommon
 
Literal unit[1],key[1],lowest[1]
LITERAL CSTRIP8                           # jb E2145  5/18/00
Integer OWN$Pointer, OWN$Type$I,          # jb E2145  5/18/00
        UNT$Pointer, NXTforce, Irsult     # jb E2145  5/18/00
 
lowest[1] = $highest$ascii
 
#$% if only one, load lowest ascii, otherwise save key
if (ikey == 1) key[1] = $lowest$ascii
else           key[1] = ikey
 
nxtforce = 0
 
for (OWN$Pointer$First; OWN$Pointer$OK; OWN$Pointer$Next)
   {
    if (xOWN$View$i != iview) next          # if not same view, get next
 
    OWN$type$i = xOWN$type$i
 
    #$% if not a sub, aircraft, boat, ship, shorebase or carrier, get next
    if (OWN$Type$i != $sub$code &
        OWN$Type$i != $Air$code &
        OWN$Type$i != $surface$code &
	OWN$Type$i != $shorebase$code &
	OWN$Type$i != $SurfaceWithAC$Code) next
 
    UNT$Pointer$To xOWN$Unit$i
 
    #$% exclude units that are being deleted
    if (xUNT$Status$i == $BeingDeleted$Code) next
 
    if (xUNT$EMIinterest$i == $NO) next
 
    unit[1] = xUNT$Name$c                 # save unit name
 
    call COMPAR (1,unit,key,irsult)
 
    if (irsult < 0) next                  # less than key
 
    if (irsult == 0)                      # found exact match
        {
        nxtforce = OWN$Pointer            # save pointer
        return
        }
 
    call COMPAR(1,unit,lowest,irsult)
 
    if (irsult > 0) next                  # larger than lowest found
 
    lowest[1] = unit[1]                   # at this point, have
                                          # best candidate so far
    nxtforce = OWN$Pointer
    }
 
    ikey = lowest[1]
return
end
 
 

Subroutine GETRECVR (OWN$Pointer,nxtrcvr)
 
##########################################################################
#$%
#$% Purpose:   GETRECVR locates the receivers with EMI of interest on a
#$%            given platform.
#$%
#$% Called By: SIGSTA
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    OWN    DEQ    RAD    SUI    ESM
#$%
#$% Date:      28 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
SIGcommon
STATUScommon
 
Literal key[1],lowest[1],rcvr[1]
LITERAL DEQ$Type$C,  CSTRIP8              # jb E2145  5/18/00
 
Integer OWN$Pointer, OWN$UNit$I,          # jb E2145  5/18/00
        UNT$Pointer, DEQ$Pointer, Irsult  # jb E2145  5/18/00
Integer NxtRCVR                           # jb E2145  5/18/00
 
lowest[1] = $highest$ascii
 
#$% if only one, load lowest ascii, otherwise save key
if (rkey == 1) key[1] = $lowest$ascii
else           key[1] = rkey
 
nxtrcvr = 0
 
OWN$Unit$i = xOWN$Unit$i
 
UNT$Pointer$To OWN$Unit$i
 
FOR_DEQ_CHAIN
    {
    if (xDEQ$EMIinterest$i == $NO) next         # device must be selected
 
    if (xdeq$TimeWhenUse$f > Game$time) next  # device must be operable
 
    if (xDEQ$Ident$i != $CommSuite$Code &
        xDEQ$On$i    == $NO              ) next # device must be ON (to TX)
 
    DEQ$Type$c = xDEQ$Type$c
 
    rcvr[1] = DEQ$Type$c
 
    call COMPAR (1,rcvr,key,irsult)
 
    if (irsult < 0) next                  # less than key
 
    if (irsult == 0)                      # found exact match
        {
        nxtrcvr = DEQ$Pointer             # save pointer
        return
        }
 
    call COMPAR(1,rcvr,lowest,irsult)
 
    if (irsult > 0) next                  # larger than lowest found
 
    lowest[1] = rcvr[1]                   # at this point, have
                                          # best candidate so far
    nxtrcvr = DEQ$Pointer
    }
 
    rkey = lowest[1]
 
return
end
 
 

Subroutine SIGENTER(OWN$Pointer,npage)
 
#############################################################################
#$%
#$% Purpose:   SIGENTER gets the receiver data for display on the status board.
#$%
#$% Called By: SIGSTA
#$%
#$% Calls:     LIB$MOVC3  LIB$MOVC5  SMOVV  SMOVH  SMOVIB  $OutV
#$%
#$% Tables:    SIG    RAD    ESM    SUI
#$%
#$% Date:      28 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
#############################################################################
BBcommon
STATUScommon
SIGcommon
 
Literal the_receiver
LITERAL UNT$Name$C,  CSTRIP8                    # jb E2145  5/18/00
Integer len[$row],scale,npage
Integer OWN$Pointer, OWN$UNit$I,                # jb E2145  5/18/00
        UNT$Pointer,                            # jb E2145  5/18/00
        SIG$Pointer,Sig$RxCode$I,SIG$TM$Index,  # jb E2145  5/18/00
        RAD$Pointer,ESM$Pointer,SUI$Pointer,    # jb E2145  5/18/00
        I,J,K9, I_SWITCH_1, GAME_DTGs
 
Integer*2 s_length,d_length
byte    graph[$column,$row]
byte    noise[SIG$TM$Slots]
byte    fill
logical found_Sig
 
$exit$on$overflow
$save$line$count
 
fill = 32
s_length = 0
d_length = %%loc(graph[$column,$row]) - %%loc(graph[1,1]) + 1
 
OWN$Unit$i = xOWN$Unit$i
 
call LIB$MOVC5 (s_length,,fill,d_length,graph[1,1])        # clear graph page
 
found_sig = .false.
 
for (SIG$Pointer$First; SIG$Pointer$OK; SIG$Pointer$Next)
    {
    SIG$RxCode$i = xSIG$RxCode$i
    switch (SIG$RxCode$i)
        {
        case $Radar$Code:
            {
            RAD$Pointer$To xSIG$RADIndex$i
            the_receiver = xRAD$Type$c
            }
        case $ESM$Code:
            {
            ESM$Pointer$To xSIG$ESMIndex$i
            the_receiver = xESM$Type$c
            }
        case $CommSuite$Code:
            {
            SUI$Pointer$To xSIG$SUIIndex$i
            the_receiver = xSUI$Name$c
            }
        }
    if (receiver[npage] != the_receiver) next
 
    if (xSIG$UnitIndex$i != OWN$Unit$i) next
 
    found_sig = .true.
    break
    }
 
len [1] = 0
call SMOVv ("View: ",graph[1,1],len[1])
call SMOVH (nmvue,5,graph[1,1],len[1])
len [1] = 24
call SMOVv ("SIGNAL STATUS BOARD [",graph[1,1],len[1])
call smovib(iboard,2,graph[1,1],len[1])
call smovv("] - Page ",graph[1,1],len[1])
 
#call SMOVv ("SIGNAL STATUS BOARD - Page ",graph[1,1],len[1])
#call SMOVIB(kpage,2,graph[1,1],len[1])
len [1] = 61 ; call SMOVv ("Game Time: ",graph[1,1],len[1]) ; call SMOVIZ (Game_DTGs(igmin),8,graph[1,1],len[1])
 
len [2] = 0
UNT$Pointer$To OWN$Unit$i
UNT$Name$c = xUNT$Name$c
call SMOVv ("Unit: ",graph[1,2],len[2])
call SMOVH (UNT$Name$c,5,graph[1,2],len[2])
call SMOVv ("   Receiver: ",graph[1,2],len[2])
call SMOVH (receiver[npage],5,graph[1,2],len[2])
 
# EMI$Phasing$Mode, reh 1/4/90
#$% if emi analysis uses only the single worst culprit for EMI power
IF ( EMI$Phasing$Mode == $EMI$Worst )
    {
    call SMOVv ("   Analysis: Single Worst Culprit",graph[1,2],len[2])
    }
#$% if emi analysis uses root mean square of all culprit powers
ELSE IF ( EMI$Phasing$Mode == $EMI$RMS )
    {
    call SMOVv ("   Analysis: Root Mean Square",graph[1,2],len[2])
    }
#$% if emi analysis sums EMI power from all culprits
ELSE IF ( EMI$Phasing$Mode == $EMI$InPhase )
    {
    call SMOVv ("   Analysis: Power Summed",graph[1,2],len[2])
    }
 
for (i = 3; i <= $row; i = i + 1)           # place dBm scaling on graph
    {
    switch (i)
        {
        case 3:
            {
            len[i] = 8
            scale = 0
            call SMOVIB (scale,4,graph[1,i],len[i])
            call SMOVv (" dBm",graph[1,i],len[i])
            call SMOVv (" +",graph[1,i],len[i])
            }
        case 6,9,12,15,18,$row:
            {
            len[i] = 8
            scale = (20 * (i - 3))/3
            call SMOVv ("-",graph[1,i],len[i])
            call SMOVIB (scale,3,graph[1,i],len[i])
            call SMOVv (" dBm",graph[1,i],len[i])
            call SMOVv (" +",graph[1,i],len[i])
            }
        default:
            {
            len[i] = 16
            call SMOVv (" |",graph[1,i],len[i])
            }
        }
    }
 
if (found_sig)
    {
    for (SIG$TM$index = 1; SIG$TM$index$ok; SIG$TM$index = SIG$TM$index + 1)
        {
        noise[SIG$TM$index] = xSIG$TM$Noise$i
        }
 
    for (i = 3; i <= $row; i = i + 1)
        {
        for (j = 1; j <= SIG$TM$Slots; j = j + 1)
            {
            if (noise[j] > (-20 * (i - 3))/3)
                graph [ j + 19, i ] = $ASTER
            }
        }
    }
else
    {
    k9 = 0
    call SMOVv ("[ No signal computed for this Receiver ]",graph[31,12],k9)
    }
 
 
call LIB$MOVC3 (d_length, graph[1,1], ipage[1,1])
 
for (i = 1; i <= $row; i = i + 1)                    # update line length
    {
    LINLEN[i] = 78
    }
 
LINCNT = $row
 
$prepare$next$line
ibyte = 19
$OUTV ("<----------                60 Seconds") # jb  E2144  $outV  7/20/00
ibyte = 68
$OUTV ("--------->")                            # jb  E2144  $outV  7/20/00
 
return
end
 
 

Subroutine NOSIGNAL
 
############################################################################
#$%
#$% Purpose:   NOSIGNAL generates a message when there is no signal data
#$%            for display.
#$%
#$% Called By: SIGSTA
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      28 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
############################################################################
 
BBcommon
STATUScommon
 
integer Game_DTG
 
$prepare$next$line
 
ibyte = 0
call SMOVv ("View: ",ipage[1,LINCNT],ibyte)
call SMOVH (nmvue,5,ipage[1,LINCNT],ibyte)
ibyte  = 24
call SMOVv ("SIGNAL STATUS BOARD [",ipage[1,lincnt],ibyte)
call smovib(iboard,2,ipage[1,lincnt],ibyte)
call smovv("] - Page ",ipage[1,LINCNT],ibyte)
call SMOVIB(kpage,2,ipage[1,LINCNT],ibyte)
ibyte  = 61
call SMOVv ("Game Time: ",ipage[1,LINCNT],ibyte)
call SMOVIZ (Game_DTG(igmin),6,ipage[1,LINCNT],ibyte)
linlen[LINCNT] = ibyte
 
lincnt = lincnt +2                         # jb                  3/26/91
$prepare$next$line
 
ibyte = 0
 
if(Remote$Node$Number != 0)                 # jb Only StandAlone  3/25/91
  call SMOVv("Cannot display at Remote Site Module",ipage[1,LINCNT],ibyte)
else
  call SMOVv("Selected receiver is not active",ipage[1,LINCNT],ibyte)
 
linlen[LINCNT] = ibyte
 
return
end
 

Subroutine NxtSIGNAL (Pointer,more)
 
##########################################################################
#$%
#$% Purpose:   NxtSIGNAL determines if there are any more units with EMI of
#$%            interest.
#$%
#$% Called By: SIGSTA
#$%
#$% Calls:     None
#$%
#$% Tables:    OWN    UNT
#$%
#$% Date:      28 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
STATUScommon
 
integer Pointer,more
integer Save_Ptr
Integer UNT$Pointer, OWN$Pointer,Own$Type$I # jb E2145  5/18/00
more = 0
 
Save_Ptr = Pointer
OWN$Pointer = Pointer
OWN$Pointer$Next
 
for (OWN$Pointer=OWN$Pointer; OWN$Pointer$OK; OWN$Pointer$Next)
    {
    if (xOWN$View$i != iview) next          # if not same view, get next
 
    OWN$type$i = xOWN$type$i
 
    #$% if not a sub, aircraft, boat, ship, shorebase or carrier, get next
    if (OWN$Type$i != $sub$code &
        OWN$Type$i != $Air$code &
        OWN$Type$i != $surface$code &
	OWN$Type$i != $shorebase$code &
	OWN$Type$i != $SurfaceWithAC$Code) next
 
    UNT$Pointer$To xOWN$Unit$i
 
    #$% exclude units that are being deleted
    if (xUNT$Status$i == $BeingDeleted$Code) next
 
    if (xUNT$EMIinterest$i == $NO) next
 
    more = 1
#     pointer = OWN$POINTER
    OWN$Pointer = Pointer                    # restore OWN$Pointer
 
    return
    }
 
    OWN$Pointer = Pointer                    # restore OWN$Pointer
 
return
end
 
