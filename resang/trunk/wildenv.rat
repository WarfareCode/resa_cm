 
#####   WES version 3.1 converted to the VAX11/780   dated-12feb82
 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      LDENV                         ECHOH                      NONE
#$%                                    ECHOR
#$%                                    CLOSE
#$%                                    OPEN
#$%
#$%      LD1ENV                        ECHOH                      ANO
#$%                                    ECHOR                      SOB
#$%                                                               PRL
#$%                                                               SON
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    2.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WILDENV
#$%    ========================
#$%
#$%    START0 <WARGAM> - WGLOAD - LDENV - LD1ENV*
 

 
undefine err
undefine write
undefine read
include "bbctl.inc"
include "bbcode.inc"
include "bbano.inc"
include "bbprl.inc"
include "bbsob.inc"
include "bbson.inc"
 
define (BBImplicit, Implicit None)          # MJC 4/26/2000
 
#############################################################################
# This routine loads the environmental file at wargam initialization.
# The environment file consists of 23 records of 360 long words.  All of the
# data is numeric except the names(types) of the sonars and sonobuoys.
# The sonobuoy types are in record number 1, and the sonars are in record
# number 22&23.  Records 2 - 21 contain propagation loss data which is all
# numeric.  There is a max of 24 sonars and 106 sonobuoys allowed at this
# date - 21dec82.  There is no space remaining in records 1 and 22,23.  The
# other records are full.  The "type" specifications now fill 2 long words.
# Additional information may be found in pemain.rat(Print Environment main.)
#############################################################################
 

 
Subroutine LDENV (filnam,nerror)        #LoaD ENVironment file
                                        #file name (input)
                                        #number of missing data items
                                        #     (output)(-1 = fatal error)
 ######################################################
 #$%
 #$% Purpose:   LDENV loads the environment file.
 #$%
 #$% Called By: START0
 #$%
 #$% Calls:     ECHOH      ECHOR      CLOSE
 #$%            OPEN
 #$%
 #$% Tables:    NONE
 #$%
 #$% Date:      OCT 80 (6/83)
 #$%
 #$% Author:    Ron Williams (Modified T.D. BURZETTE)
 #$%
 ######################################################
 
BBcommon
 
character       filnam[11],
                msg[ARB]
character       fname[ARB]
vaxcharacter*ARB v_fname
equivalence (fname, v_fname)
 
common/scratch$pad/ibuf[720]
real            buf[720]
equivalence (buf,ibuf)
 
character tbuf[ARB]
 
 
integer         NERROR, NV_INDEX, KK,
                I_SWITCH_1, IOS, IBUF, I,
                JSTAT, lenbuf, trnlog_v
nerror = 0                                      # Initialize error flag
                                                # Loop for the 4 possible files
 
lenbuf = trnlog_v("SONARENV_BASE",tbuf)        # Translate Input TTY to device name
 
for (NV_Index = 1; NV_Index <= 4; NV_Index = NV_Index+1)
    {
    kk = 0
    call smovh  (tbuf,lenbuf,fname,kk) #   name for sonar env base directory
    call smovhn (Environment$SubDir,$$Maxlit,fname,kk);
    call smovvn ("/",fname,kk);
 
    switch (NV_Index)                           # Determine, display name
    {
        case $Env$Good$Code:
            call smovhn (EnvironmentGood$Name,$$Maxlit,fname,kk);
        case $Env$Fair$Code:
            call smovhn (EnvironmentFair$Name,$$Maxlit,fname,kk);
        case $Env$Poor$Code:
            call smovhn (EnvironmentPoor$Name,$$Maxlit,fname,kk);
        case $Env$User$Code: call smovhn (filnam    ,ARB,fname,kk);
    }
 
    call smovvn (".env",fname,kk);
    call smov (EOS,fname,kk)                    # Cap it off
 
    open(unit     =   $LFC$env,                 # Open the environment file
         file     =   v_fname,
         status   =  'old',
         access   =  'sequential',
         recl     =   360,    #longwords
         form     =  'unformatted',
         iostat   =   ios,
         err      =   999)
                                                # Read first record
    read($LFC$env,iostat=ios,err=999) (ibuf[I],I=1,360)
 
##    if (1 == 2)
    REPEAT
        {
        BREAK       # jb E2143 (BRNCHINTOBLK)   7/13/00
        #Error exit if disk I/O problem
        #------------------------------         # Notify user of problem and
                                                # type I/O error number
        999 call echov("I/O error.  Sonar Environment File #")
        call echoi (NV_Index)
        call echor
 
        call geterr_fort (ios,msg)              # get FORTRAN Error Messages
        call echoh(msg,ARB)
        call echor
 
        nerror = -1                             # Indicates fatal error
 
        next
        }
 
 
    if (ibuf[2] != 20)                          # If number of freqs is not 20
        {
        call echoh(fname,ARB)                   # Display name of file
        call echov(": ")
                                                # Test to display message for a
        if (NV_Index == $Env$User$Code)                 # specified or system env file
           call echov ('Invalid environment file for this version of NWISS.')
        else
           call echov ('Invalid System Sonar Environment file.')
 
        call echor
        nerror = -1                             #Indicates fatal error
        next
        }                                       # Endif for invalid files
 
    call ld1env (NV_Index,jstat)                # Call to load individual file
 
    if (jstat < 0)   nerror = -1                # Test for fatal error
 
    if (nerror >= 0) nerror = nerror + jstat    # Keep track of errors during
                                                # load routine
    close ($LFC$env)                            # Close the env file
 
    }                                           # End loop for all env files
 
return
end
 
 

 
Subroutine LD1ENV (NV_Index,nerror)     #LoaD Individual ENVironment file
                                        # (input)
                                        #number of missing data items
                                        #     (output)(-1 = fatal error)
 ######################################################
 #$%
 #$% Purpose:   LD1ENV loads the individual environment file.
 #$%
 #$% Called By: LDENV
 #$%
 #$% Calls:     ECHOH      ECHOR
 #$%
 #$% Tables:    ANO        SOB        PRL     SON
 #$%
 #$% Date:      6/83
 #$%
 #$% Author:    T.D. BURZETTE
 #$%
 ######################################################
 
BBcommon
 
literal         name                    #used to test sonar and sonby types
logical         nomtch
integer         irmax,ircurr
common/scratch$pad/ibuf[720]
real            buf[720]
equivalence (buf,ibuf)
 
integer         NERROR, IBUF, NSBY, NSNR,
                IANO, I, ILEN, IOS, IPRL, J,
                NV_INDEX,
                ANO$NV$Index, ANO$Pointer,
                SOB$NV$Index, SOB$Pointer,
                PRL$NV$Index, PRL$NV$FQ$Index,
                PRL$Pointer,
                SON$NV$Index, SON$Pointer,
                SON$NV$dipdepth$I                           # MJC 4/26/2000
real            SON$NV$dpin12$F, SON$NV$dpdeep12$F,
                SON$NV$dpin18$F, SON$NV$dpdeep18$F,
                SON$NV$dpin24$F, SON$NV$dpdeep24$F,
                SON$NV$bbinshort$F, SON$NV$bbinlong$F,
                SON$NV$bbdeepshort$F, SON$NV$bbdeeplong$F,
                SON$NV$czshort$F, SON$NV$czlong$F,
                PRL$NV$FQ$proplossin$F,
                PRL$NV$FQ$proplosscross$F,
                PRL$NV$FQ$proplossdeep$F,
                ANO$NV$noise$F                              # MJC 4/26/2000
literal         SOB$Type$C, SON$Type$C, CSTRIP8             # MJC 4/26/2000
 
nerror = 0                                      # Init missing data counter
 
LAYER$DEPTH = ibuf[1]                           # Store sonic layer depth
 
nsby = ibuf[3]                                  # Save number of sonobuoys
 
nsnr = ibuf[4]                                  # Save number of sonars
 
#--------------------------------------------------------------------------
#  Load the 20 values for ambient noise for the env file
#--------------------------------------------------------------------------
 
ANO$NV$Index = NV_Index
 
for (iano = 1; iano <= ANO$Slots; iano = iano + 1)      # For ambient noise
    {                                                   # load the 20 values
    ANO$pointer$to iano
 
    ANO$NV$Noise$F = ibuf[24+iano]
 
    putANO$NV$Noise$F                           # Store them in blackboard
    }
 
#--------------------------------------------------------------------------
#  Load values for sonobuoys
#--------------------------------------------------------------------------
 
SOB$NV$Index = NV_Index
                                                # For each sonobuoy in SOB
for (SOB$Pointer$First; SOB$Pointer$Valid; SOB$Pointer$Next)
    {
    if (xSOB$ActiveSonar$I == $NO)  next        # Skip if passive
 
    SOB$Type$C = xSOB$Type$C                    # Get type
 
    nomtch = .TRUE.                             # Init no-match flag
 
    for (I=45;I<=3*NSBY+42;I=I+3)               # For each sonobuoy in env file
        {
        ilen = 0
        call smovh (ibuf[I],4,name,ilen)
        call smovh (ibuf[I+1],4,name,ilen)
 
        if (SOB$Type$C == name |                # If type matches
            'DEFAULT' == name  )
            {
 
            ircurr = xSOB$NV$MaxRange$I         # get value stored in the
                                                # blackboard
            if (ircurr == 0)                    # if no value is already there
                {
                irmax = buf[I+2] + 0.5          # round off to integer
                irmax = min(irmax, 100)         # limit to maximum range
                putSOB$NV$MaxRange$I (irmax)    # Store in the blackboard
                }
 
            nomtch = .FALSE.                    # Turn off no-match flag
 
            if (SOB$Type$C == name) break       # If type matches end search
            }                                   # End if match found
        }                                       # End for env file sonobuoys
 
    if (nomtch)                                 # If no match found
        {
        nerror = nerror + 1                     # Increment missing-data count
 
        call echov ('Environment file # ')
        call echoi(nv_index)
        call echov (', contains no data for ')
        call echov ('sonobuoy ')               # This sonobuoy
        call echohn(SOB$Type$C,$$MaxLit)                # is missing
        call echor                              # carriage return
        }                                       # End if no match
    }                                           # End for SOB entries
 
#--------------------------------------------------------------------------
#  Load prop loss values
#--------------------------------------------------------------------------
 
PRL$NV$Index = NV_Index
 
do PRL$NV$FQ$Index = 1, 20 #PRL$NV$FQ$Slots             # For each frequency
    {
    read($LFC$env,iostat=ios,err=999) (ibuf[I],I=1,360) #read 1 record
                                                # Loop for prop loss ranges
    for (PRL$Pointer$First; PRL$Pointer$Valid; PRL$Pointer$Next)
        {
        iprl = PRL$Pointer$Index
                                                # Get prop loss data
        PRL$NV$FQ$PropLossIn$F    = buf[3*iprl-2]
        PRL$NV$FQ$PropLossCross$F = buf[3*iprl-1]
        PRL$NV$FQ$PropLossDeep$F  = buf[3*iprl]
 
        putPRL$NV$FQ$PropLossIn$F
        putPRL$NV$FQ$PropLossCross$F
        putPRL$NV$FQ$PropLossDeep$F
        }                                       # End for each range
    }                                           # End for each frequency
 
#--------------------------------------------------------------------------
#  Read next records and load values for Sonars
#--------------------------------------------------------------------------
 
read($LFC$env,iostat=ios,err=999)(ibuf[I],I=1,360)      #read next record (#22)
read($LFC$env,iostat=ios)        (ibuf[I],I=361,720)    #read next record (#23)
 
SON$NV$Index = NV_Index
                                                # For each Sonar in SON
for (SON$Pointer$First; SON$Pointer$Valid; SON$Pointer$Next)
    {
    if (xSON$ActiveSonar$I == $NO)  next        #skip if passive
 
    SON$Type$C = xSON$Type$C                    #get type
 
    nomtch = .TRUE.                             #init no-match flag
 
    for (J=1; J <= 15*NSNR; J=J+15)             #for each sonar in env file
        {
        ilen = 0; call smovv ("        ", name, ilen)
        ilen = 0
        call smovh (ibuf[J],$$MaxLit,name,ilen) # SMM 8/99 E2141
        if (SON$Type$C == name |
            'DEFAULT'  == name  )               # If match found
            {
            I = J + 1
            SON$NV$DipDepth$I    = ibuf[I+1]    # Get dip/tow depth
            SON$NV$Dpin12$F      = buf[I+2]     # Get the various
            SON$NV$DpDeep12$F    = buf[I+3]     # detection ranges
            SON$NV$Dpin18$F      = buf[I+4]
            SON$NV$DpDeep18$F    = buf[I+5]
            SON$NV$Dpin24$F      = buf[I+6]
            SON$NV$DpDeep24$F    = buf[I+7]
            SON$NV$BBInShort$F   = buf[I+8]
            SON$NV$BBInLong$F    = buf[I+9]
            SON$NV$BBDeepShort$F = buf[I+10]
            SON$NV$BBDeepLong$F  = buf[I+11]
            SON$NV$CZShort$F     = buf[I+12]
            SON$NV$CZLong$F      = buf[I+13]
 
 
            putSON$NV$DipDepth$I                # And store them in
            putSON$NV$Dpin12$F                  # the blackboard
            putSON$NV$DpDeep12$F
            putSON$NV$Dpin18$F
            putSON$NV$DpDeep18$F
            putSON$NV$Dpin24$F
            putSON$NV$DpDeep24$F
            putSON$NV$BBInShort$F
            putSON$NV$BBInLong$F
            putSON$NV$BBDeepShort$F
            putSON$NV$BBDeepLong$F
            putSON$NV$CZShort$F
            putSON$NV$CZLong$F
 
            nomtch = .FALSE.                    # Turn off no-match flag
 
            if (SON$Type$C == name) break       # Terminate search
            }                                   # End if match found
        }                                       # End for env file sonars
 
    if (nomtch)                                 # If no match found
        {
        nerror = nerror + 1                     # Increment missing-data count
 
        call echov ('Environment file # ')
        call echoi(nv_index)
        call echov (', contains no data for ')
        call echov ('sonar ')                  # That this sonar
        call echohn(SON$TYPE$C,$$MaxLit)                # is missing
        call echor                              # Carriage return
        }                                       # End if no match found
    }                                           # End for SON entries
 
return
 
#Error exit if disk I/O problem
#------------------------------                 # Notify user of problem and
                                                # type I/O error number
999 call echov("I/O error.  Sonar Environment File #")
    call echoi (NV_Index)
    call echor
    call echov("Fortran Run-Time Error #")
    call echoi (ios)
    call echor
 
nerror = -1                                     # Indicates fatal error
 
return
end
 
