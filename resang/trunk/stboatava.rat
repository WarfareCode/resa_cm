##			File  STBOATAVA.rat
###
###                      dated 6-JUNE-1989
###
### smn prog    module  comments
### === ====    ======  =================================================
###
 
#$%     MODULE                 UTILITY         DATA
#$%   SUBROUTINES            SUBROUTINES      TABLES
#$%   ===========            ===========      ======
#$%
#$%     BOATAVA                 OUTH              BML
#$%     BAVATIT                 OUTI              OWN
#$%     BAVAGEN                 OUTIB             UNT
#$%     BAVAHED                 SMOVH             SHC
#$%     LBTYPES                 SMOVIZ            INV
#$%     NXTUNIT                 LITINC
#$%     ENTBOAT
#$%     NBOATAV
#$%     ANYBOAT
#$%     GETBOAT
#$%     COMPAR<STATUS>
#$%
#$%
#$%   NOTES:
#$%   =====_
#$%
#$%      1.  <filename> indicates file where subroutine is located.
#$%
#$%      2.  Utility subroutines are not shown on flowchart.
#$%
#$%      3.  * indicates no other subroutines are called.
#$%
#$%
#$%  FLOWCHART FOR FILE BOATAVA
#$%  =========================
#$%
#$%    STDISP<STATUS> - BOATAVA - BAVATIT *
#$%                             - BAVAGEN - BAVAHED *
#$%                                       - LBTYPES - COMPAR *
#$%                                       - NXTUNIT - COMPAR *
#$%                                       - ANYBOAT *
#$%                                       - GETBOAT - COMPAR *
#$%                                       - ENTBOAT *
#$%                                       - NBOATAV *
 
 
include "ascii.inc"                                 # ascii constants
include "bbcode.inc"                                # blackboard defines
include "bbctl.inc"
include "bbown.inc"
include "bbunt.inc"
include "bbbml.inc"
include "bbshc.inc"
include "bbinv.inc"
include "stmain.inc"
 
define (BOATcommon,
        Literal bkey,                       # Boat name key
                ava_boat[bml$Slots],   # Name of Available boats
                res_boat[bml$Slots]    # Name of Boats in Resupply
        Integer aboats,               # Number of boats available per type
                rboats,               # Num of boats in resupply per type
                tba_boat[bml$Slots]    # Time before boat becomes available
        Common /BOAT/bkey,ava_boat,res_boat,aboats,rboats,tba_boat
        )
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  2/15/00
define ($low$order$key,ikey)
 
 

Subroutine BOATAVA
 
#####################################################################
#$%
#$% Purpose:   BOATAVA display of boat availability status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     BAVATIT     BAVAGEN
#$%
#$% Tables:    None
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
########################################################################
 
BBcommon
STATUScommon
 
call BAVATIT                     # display title
 
call BAVAGEN                     # generate boat availability status data
 
return
end
 
 

Subroutine BAVATIT
 
############################################################################
#$%
#$% Purpose:   BAVATIT generates title for boat availability status board.
#$%
#$% Called By: BOATAVA
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
############################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
$prepare$next$line
 
$column 1
$outV("View: ")    # jb   ($outV)  2/15/00
$outH(nmvue,5)
$column 16
$outv("BOAT AVAILABILITY STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$outIB(kpage,2)
$column 61; $outV("Game Time: "); $outIZ(Game_DTGs(igmin),8)
 
return
end
 
 

Subroutine BAVAGEN
 
#######################################################################
#$%
#$% Purpose:   BAVAGEN executes boat availability status board generation
#$%            subroutines.
#$%
#$% Called By: BOATAVA
#$%
#$% Calls:     BAVAHED
#$%            LBTYPES    ANYBOAT
#$%            NBOATAV    NXTUNIT
#$%            ENTBOAT    GETBOAT
#$%
#$% Tables:    SHC    OWN    BML    INV
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
#######################################################################
BBcommon
STATUScommon
BOATcommon
 
LITERAL CSTRIP8
literal UnitName
integer boat_type, boat_found, Exp_Index,
        iboat,iclass,
        INV$Pointer,INV$EXP$Index,INV$EXP$Type$I,   # jb E2141  2/15/00
        SHC$Pointer, OWN$Pointer, BML$Pointer       # jb E2141  2/15/00
BBDEclare (UNT$Pointer)
 
call BAVAHED                                           # display heading
 
$exit$on$overflow                                      # exit on overflow
 
boat_found = $no                                       # initialize test flag
 
repeat                  # unit level
{
    call NXTUnit(OWN$Pointer)
 
    if (OWN$Pointer == 0) break                        # if none, break loop
 
    call AnyBoat (OWN$Pointer,iboat)
 
    if (iboat == $NO)                                  # None, get next unit
    {
        $increment$keys
        next
    }
 
    boat_found = $YES
 
    UNT$Pointer$TO xOWN$Unit$i
    UnitName = xUNT$Name$C
 
    repeat              # Boat Class Level
    {
        call LBTYPES(SHC$Pointer)
        if (SHC$Pointer == 0)
        {
            ikey2    = $lowest$ascii         # shc
            break
        }
 
        bkey = 1
        aboats = 0
        rboats = 0
 
        repeat          # Individual Boat Level
        {
            call GETBOAT(OWN$Pointer,INV$Pointer,BML$Pointer,Exp_Index,shc$Pointer)
            if (BML$Pointer == 0) break
 
            INV$EXP$Index = Exp_Index
            INV$EXP$Type$i = xINV$EXP$Type$i
            if (INV$EXP$Type$i == $BoatAvailable$Code)
            {
                aboats = aboats + 1
                ava_boat[aboats] = xBML$Name$c
            }
 
            if (INV$EXP$Type$i == $BoatResupply$Code)
            {
                rboats = rboats + 1
                res_boat[rboats] = xBML$Name$c
                tba_boat[rboats] = xINV$EXP$TimeRemaining$i
            }
            call litinc (bkey)
        }   # end boat loop
        call ENTBOAT(OWN$pointer, SHC$pointer, UnitName)
        $save$keys
        $exit$on$overflow
        call litinc (ikey2)
        $save$keys
    } # end class loop
    $update$keys
} #end unit loop
 
if (boat_found == $NO) call NBOATAV
 
return
end
 
 

Subroutine BAVAHED
 
##########################################################################
#$%
#$% Purpose:   BAVAHED generates heading for boat availability status
#$%            board.
#$%
#$% Called By: BAVAGEN
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
 
BBcommon
STATUScommon
 
#                     1         2         3         4         5         6         7         8
#            12345678901234567890123456789012345678901234567890123456789012345678901234567890
#                  *     *                                                                 *
 
integer ilen                                            # jb  1/5/00
##string MSG2 "PLATF TYPE"                              # jb  1/5/00
##string MSG3 "----- ----"                              # jb  1/5/00
string MSG2 "PLATFORM   TYPE   "    # jb E2141 /8-char. names  1/5/00
string MSG3 "-------- -------- "    # jb E2141 /8-char. names  1/5/00
 
ilen = 0; call smovh (MSG2, ARB,ipage[1,2],ilen)
LINLEN[2] = ilen    # set line length   2/15/00
ilen = 0; call smovh (MSG3, ARB,ipage[1,3],ilen)
LINLEN[3] = ilen    # 2/15/00
 
LINCNT = 3                                            # set line count
 
return
end
 
 

Subroutine AnyBoat (OWN$Pointer,iboat)
 
##########################################################################
#$%
#$% Purpose:   AnyBoat determines if platform has any boats.
#$%
#$% Called By: BAVAGEN
#$%
#$% Calls:     None
#$%
#$% Tables:    OWN    INV
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
STATUScommon
 
Integer iboat,                                      # jb E2145 2/15/00
        INV$Pointer,INV$EXP$Index,INV$EXP$Type$I,   # jb E2145 2/15/00
        OWN$Pointer                                 # jb E2145 2/15/00
 
iboat = $NO
 
for (INV$Pointer$TO xOWN$FirstInvIndx$i; INV$Pointer$OK;
     INV$Pointer$TO xINV$NextINDX$i)
    {
    for (INV$EXP$Index = 1; INV$EXP$Index <= INV$EXP$Slots;
         INV$EXP$Index = INV$EXP$Index + 1)
        {
        INV$EXP$Type$i = xINV$EXP$Type$i
 
        if (INV$EXP$Type$i != $BoatAvailable$Code &
            INV$EXP$Type$i != $BoatResupply$Code) next
 
        iboat = $YES
        return
        }
    }
 
return
end
 
 

Subroutine NXTUnit(nxtunt)
 
##########################################################
#$%
#$% Purpose:   NXTUnit locates next available shore base or
#$%            next available ship.
#$%
#$% Called By: BAVAGEN
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    UNT    OWN
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################
BBcommon
StatusCommon
BoatCommon
 
Literal ibase[1],keys[1]
Literal lowest[1]
LITERAL CSTRIP8                 # jb  E2145  2/15/00
Integer nxtunt, irsult,         # jb  E2145  2/15/00
        OWN$Pointer,OWN$Type$I, # jb  E2145  2/15/00
        UNT$Pointer             # jb  E2145  2/15/00
 
lowest[1] = $highest$ascii
 
#$% if only one, load lowest ascii, otherwise save key
if (ikey == 1)
{
    keys[1] = $lowest$ascii         # unt
    ikey2    = $lowest$ascii         # shc
}
else
{
    keys[1] = ikey
}
 
nxtunt = 0                                  # initialize pointer
 
for (OWN$Pointer$First; OWN$Pointer$OK; OWN$Pointer$Next)
   {
    if (xOWN$View$i != iview) next          # if not same view, get next
 
    OWN$type$i = xOWN$type$i
 
    #$% if not a submarine, ship, shorebase or carrier, get next
    if (OWN$Type$i != $sub$code &
        OWN$Type$i != $surface$code &
        OWN$Type$i != $shorebase$Code) next
 
    UNT$Pointer$TO xOWN$Unit$i
 
    #$% exclude units that are being deleted
    if (xUNT$Status$i == $BeingDeleted$Code) next            # AM.    8/23/89
 
    if (xUNT$SuperType$i == $SmallBoat$SuperCode) next
 
    ibase[1] = XUNT$Name$c                  # save unit name
 
    call COMPAR(1,ibase,keys,irsult)        # compare keys
 
    if (irsult < 0) next                    # less than keys
 
    if (irsult == 0)                        # found exact match
       {
        nxtunt = OWN$pointer                # save pointer
        return
       }
 
    call COMPAR(1,ibase,lowest,irsult)
 
    if (irsult > 0) next                    # larger than lowest found
 
    lowest[1] = ibase[1]                    # at this point, have
                              # best candidate so far
    nxtunt = OWN$Pointer
   }
 
ikey = lowest[1]
 
return
end
 
 

Subroutine GETBOAT (OWN$Pointer,Inventory,nxtboat,index,shcpntr)
 
##########################################################################
#$%
#$% Purpose:   GETBOAT locates boats associated with a given platform.
#$%
#$% Called By: BAVAGEN
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    BML    OWN    INV    SHC
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
STATUScommon
BOATcommon
 
Literal key[1],lowest[1],iboat[1],
        SHC$Type$C,  CSTRIP8                        # jb E2145 2/15/00
Integer bclass,nxtboat,index,Inventory,irsult,      # jb E2145 2/15/00
        INV$Pointer,INV$EXP$Index,INV$EXP$Type$I,   # jb E2145 2/15/00
        OWN$Pointer, BML$Pointer, SHC$Pointer       # jb E2145 2/15/00
integer shcpntr
 
lowest[1] = $highest$ascii
 
#$% if only one, load lowest ascii, otherwise save key
if (bkey == 1) key[1] = $lowest$ascii
else           key[1] = bkey
 
nxtboat = 0
 
for (INV$Pointer$TO xOWN$FirstInvIndx$i; INV$Pointer$OK;
     INV$Pointer$TO xINV$NextINDX$i)
    {
    for (INV$EXP$Index = 1; INV$EXP$Index <= INV$EXP$Slots;
         INV$EXP$Index = INV$EXP$Index + 1)
        {
        INV$EXP$Type$i = xINV$EXP$Type$i
 
        if (INV$EXP$Type$i != $BoatAvailable$Code &
            INV$EXP$Type$i != $BoatResupply$Code) next
 
        BML$Pointer = xINV$EXP$BMLPntr$i
 
        SHC$Pointer = xBML$SHCPntr$i
 
        if (SHC$Pointer != shcpntr) next
 
        SHC$Type$c = xSHC$Type$c
 
        iboat[1]=xBML$Name$c
 
        call COMPAR (1,iboat,key,irsult)
 
        if (irsult < 0) next                  # less than key
 
        if (irsult == 0)                      # found exact match
            {
            nxtboat = BML$pointer             # save pointer
            inventory = INV$Pointer
            index = INV$EXP$Index
            return
            }
 
        call COMPAR(1,iboat,lowest,irsult)
 
        if (irsult > 0) next                  # larger than lowest found
 
        lowest[1] = iboat[1]                  # at this point, have
                                # best candidate so far
        nxtboat = BML$Pointer
 
        inventory = INV$Pointer
 
        index = INV$EXP$Index
 
        }
    }
 
    bkey = lowest[1]
 
return
end
 
 

Subroutine ENTBOAT(OWN$pointer, SHC$Pointer, UnitName)
 
##########################################################################
#$%
#$% Purpose:   ENTBOAT gets boat information for the platform.
#$%
#$% Called By: BOATAVA
#$%
#$% Calls:     None
#$%
#$% Tables:    UNT    OWN
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
STATUScommon
BOATcommon
 
LITERAL UNT$Name$C, CSTRIP8 # jb E2145                          2/15/00
literal UnitName
literal likey, likey2
integer bclass              # jb Delete Game_Time               1/5/00
Integer i,iclass,isave_lincnt, kk,
        OWN$Pointer, UNT$Pointer            # jb                1/5/00
BBDeclare (SHC$Pointer)
 
 
#         1         2         3         4         5         6         7         8
#12345678901234567890123456789012345678901234567890123456789012345678901234567890
#             *          *      *      *      *      *      *      *      *    *
#             *          12345  12345  12345  12345  12345  12345  12345  12345*
 
string MSG2 " avail:"
 
#             *          *          *          *          *          *
#             *          -----/---  -----/---  -----/---  -----/---  -----/--- "
#             *          123456789  123456789  123456789  123456789  123456789
 
string MSG3 " supply: "
 
if (aboats == 0 & rboats == 0) return   # Nothing to do
 
$test$next$line
if (iovflo == 1)
{
    ikey = likey
    ikey2 = likey2
}
$exit$on$overflow
$save$line$count
$prepare$next$line
likey = ikey
likey2 = ikey2
ibyte = 0
 
call SMOVH(UnitName,$$MAXname,IPAGE[1,LINCNT],ibyte) # jb E2141   1/5/00
 
isave_lincnt = LINCNT                           # need to see if too much
                                                # for one page by one unit
$over 1         # jb 1 vice 2 E2141  1/5/00
 
ibyte = 9   # jb 9 vice 6 E2141  1/5/00
 
if (aboats != 0 | rboats != 0)
    call smovh (Xshc$Type$C,$$MAXname,ipage[1,LINCNT],ibyte) # jb 1/5/00
 
if (aboats != 0)
{
    call SMOVH (MSG2,7,ipage[1,LINCNT],ibyte)
 
    for (i=1; i<=aboats; i=i+1)
    {
        if ($beyond$column 74)
        {
            LINLEN[LINCNT] = ibyte
            $test$next$line
            $exit$on$overflow
            $prepare$next$line
            ibyte = 17
        }
        $over 1                 # jb E2141 1 vice 2     1/5/00
        #$% load boat name      # jb E2141 \/ vice 5    1/5/00
        call SMOVH (ava_boat[i],6,IPAGE[1,LINCNT],ibyte)
    }
 
    LINLEN[LINCNT] = ibyte
    $test$next$line
    $exit$on$overflow
    $prepare$next$line
    ibyte = 17
}
 
if (rboats != 0)
{
    call SMOVH (MSG3,10,ipage[1,LINCNT],ibyte)
 
    for (i=1; i<=rboats; i=i+1)
    {
        if ($beyond$column 70)  # jb  E2141  72 vice 69
        {
            LINLEN[LINCNT] = ibyte
            $test$next$line
            $exit$on$overflow
            $prepare$next$line
            ibyte = 17
        }
        #$% load boat name
        $over 2                 # jb E2141 \/ vice 5    1/5/00
        call SMOVH(res_boat[i],6,IPAGE[1,LINCNT],ibyte)
        call SMOVv("/",IPAGE[1,LINCNT],ibyte)
        call SMOVIZ(tba_boat[i],3,IPAGE[1,LINCNT],ibyte)
    }
    LINLEN[LINCNT] = ibyte
}
UnitName = $BLANKLIT
 
return
end
 
 

Subroutine LBTYPES(nxtone)
 
##########################################################################
#$%
#$% Purpose:   LBTYPES lists the different boat types available.
#$%
#$% Called By: BAVAGEN
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    SHC
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
##########################################################################
BBcommon
STATUScommon
BOATcommon
 
Literal keys[1],btype[1]
Literal lowest[1],  CSTRIP8         # jb E3145  2/15/00
Integer nxtone,irsult, SHC$Pointer  # jb E3145  2/15/00
 
lowest[1] = $highest$ascii
 
nxtone = 0
 
for (SHC$Pointer$First; SHC$Pointer$OK; SHC$Pointer$Next)
    {
    if (xSHC$SmallBoat$i == $NO) next
 
    btype[1] = xSHC$Type$c
 
    call COMPAR(1,btype,ikey2,irsult)      # compare keys
 
    if (irsult < 0) next                  # less than keys
 
    if (irsult == 0)                      # found exact match
        {
        nxtone = SHC$pointer              # save pointer
        return
        }
 
    call COMPAR(1,btype,lowest,irsult)
 
    if (irsult > 0) next                  # larger than lowest found
 
    lowest[1] = btype[1]                  # at this point, have
                            # best candidate so far
    nxtone = SHC$Pointer
    }
 
ikey2 = lowest[1]
 
return
end
 
 

Subroutine NBOATAV
 
#####################################################################
#$%
#$% Purpose:   NBOATAV displays message if no boats are available.
#$%
#$% Called By: BAVAGEN
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      6 JUNE 1989
#$%
#$% Author:    Arturo Ma
#$%
#####################################################################
BBcommon
STATUScommon
 
$test$next$line
$exit$on$overflow
$prepare$next$line
 
$column 1
$outV("No boats available in this view")    # jb   ($outV)  2/15/00
 
return
end
