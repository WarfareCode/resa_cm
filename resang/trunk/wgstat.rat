include "ascii.inc"
include "bbctl.inc"
include "bbcode.inc"
 
define(BBImplicit, Implicit NONE)                          # MJC 5/4/2000 (E2145)
 
subroutine wgstah
 
###########################################################
#$%
#$% Purpose:   WGSTAH provides status headings for display
#$%
#$% Called By: WGSTAT
#$%
#$% Calls:     ECHOR   ECHOH
#$%
#$% Tables:    NONE
#$%
#$% Date:      JAN 82
#$%
#$% Author:    DONGOG
#$%
###########################################################
 
BBcommon

VMSchar     tdate*23

call lib$Date_time (tdate) 

call echov (tdate) 
 
#            ..../....1..../....2..../....3..../....4..../....5..../....6..../....7..../....
call echor # 12345678123456781234567812345678123456781234567812345678123456781234567812345678
call echov (" BUSY   AVG  CYCLE TIME   CYCLE  GAME    "//"ZULU      LEN   CPU    GAME   AVG")
call echor
call echov (" SECS   BUSY  TIME SPEC   COUNT  TIME    "//"TIME     CYCLE  TIME   RATE   RATE")
call echor
call echov ("------ ------ ---- ---- ------- ------- "//"-------- ------ ------ ------ ------")
call echor
 
return
end

 
subroutine wgstat (iflag)
    # WARNING:  DON'T change (CONSTANT) argument!
###########################################################
#$%
#$% Purpose:   WGSTAT
#$%
#$% Called By: WARCYC
#$%
#$% Calls:     SMOVH   SMOVHN   SEND
#$%
#$% Tables:    NONE
#$%
#$% Date:      JAN 82
#$%
#$% Author:    DONGOG
#$%
###########################################################
 
BBcommon
 
integer         ncycle, nbusy, busy, avg, runtim
data            ncycle /0/
data            nbusy /0/
real            cycletime
 
integer         IFLAG,LCPU,LCLOCK,GAME_DTGs,
                NOW,NCPU,NCLOCK                         # MJC 5/4/2000 (E2145)
 
data            lclock /0/
data            lcpu /0/
real            X                                       # MJC 5/4/2000 (E2145)
 
if (iflag == 0)                                 # if first pass
   {
    call echor
    call echov ("   WARGAME INFORMATION")
    call echor
 
    call wgstah                                 # put heading
 
    ncycle = 0                                  # initialize values
    nbusy = 0
 
    Lcpu   = runtim(0)                          # cpu time in milliseconds
    Lclock = now(X)                             # clock time in milliseconds
    }
else
    {
    ncycle = ncycle + 1                         # increment cycle
 
    if (mod (ncycle,20) == 0)                   # put a heading every 20 cycles
        {
        call echor
        call echor
 
        call wgstah                             # put heading
        }
 
    busy = cycle$stop$time - cycle$start$time   # compute busy time (millisec)
    nbusy = nbusy + busy                        # Sum Busy time
    avg = nbusy/ncycle                          # compute average busy time
 
    Ncpu = runtim(0)                            # cpu time in milliseconds
    Nclock = now(X)                             # clock time in milliseconds
 
    cycletime = now(x) - cycle$start$time       # compute cycle time (millisec)
    if (cycletime == 0.) cycletime = 1.         # Avoid division by zero
    cycle$game$rate = time$step /(cycletime * $Minutes$Per$Millisecond)
    if (cycle$count <= 1)
        Average$game$rate = cycle$game$rate
    else
        Average$game$rate = (Average$Game$rate * (cycle$count - 1) +
                             cycle$game$rate) / cycle$count
    call echor                                  # display values
    call echof  (busy/1000.0,602)               # 6 bytes wide .00
    call echov  (" ")
    call echof  ( avg/1000.0,602)               # 6 bytes wide .000
    call echov  (" ")
    call echoib (Nint(time$step*$Seconds$per$Minute),4)
    call echov  (" ")
    call echof  (time$spec,401)
    call echov  (" ")
    call echoib (ncycle,7)
    call echov  (" ")
    call echof (game$time,701)
    call echov  (" ")
    call echoiZ (Game_DTGs(game$time),8)
    call echov  (" ")
    call echof  ((Nclock-Lclock)/1000.0,602)    # 8 bytes wide .00
    call echov  (" ")
    call echof  ((Ncpu-Lcpu)/1000.0,602)        # i.e. > 12345.78
    call echov  (" ")
    call echof  (cycle$game$rate, 602)
    call echov  (" ")
    call echof  (Average$game$rate, 602)
 
    if (trace$random != $NO)
        {
        call echov   (' ')
        call echox  (random$seed,8)
        }
 
    call echov   (' ')
 
    Lcpu   = Ncpu                               # update cpu time
    Lclock = Nclock                              # update clock time
 
    call dbreak ($yes)
    }
 
return
end
