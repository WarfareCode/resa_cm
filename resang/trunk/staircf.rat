####	FILE:STAIRCF.rat
 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 9-mar-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw             modularized routine and made compatible with
###                     use of search keys in main driver;
###                     added checks on validity of data to avoid
###                     problems which could result now that the blackboard
###                     can be read at any time
###
 
###
### mod to version 3.0          dated 2-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 sfc             changed routine to write position and logistics
###                     data from the OWN Table to the status board;
###
 
 
#####   version 3.0     dated 22-dec-1980
 
 
# 
 
include "bbcode.inc"                                  # blackboard defines
include "bbctl.inc"
include "ascii.inc"                                   # include ascii constants
include "bbunt.inc"                   # jb Replaced DUP
include "bbemc.inc"
include "bbacc.inc"
include "bbrvu.inc"
include "bbown.inc"
include "bbrmt.inc"
include "stmain.inc"
include "bbdeq.inc"             # SMM 1/97 (E1732)
include "bbiff.inc"             # SMM 2/97 (E1732)
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  2/9/00
define ($low$order$key,ikey)
 
Subroutine AIRSTA
 
#######################################################
#$%
#$% Purpose:   AIRSTA generates air events status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     AIRAIR     AIRTIT
#$%
#$% Tables:    None
#$%
#$% Date:      25 JAN 82
#$%
#$% Author:    F. Jones
#$%
#######################################################
 
BBcommon
STATUScommon
 
#$% Display title
call AIRTIT
 
#$% Display status board
call AIRAIR
 
return
end
 

 
Subroutine AIRTIT
 
#######################################################
#$%
#$% Purpose:   AIRTIT generates a title for the air
#$%            events status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
#########################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
$prepare$next$line
 
$column  1 ; $outV("View: ") ; $outH(nmvue,5)
 
if (iboard == $AAWCEvents$Board)		## tpa 8/10/83
    {
    $column 18 ; $OutV("AAWC AIR EVENTS BOARD ")
    }
else if (iboard == $EWCEvents$Board)		# jb	10/1/86
    {
    $column 19 ; $OutV("EWC AIR EVENTS BOARD ")
    }
else if (iboard == $ASWCEvents$Board)
    {
    $column 18 ; $OutV("ASWC AIR EVENTS BOARD ")
    }
else if (iboard == $ASUWCEvents$Board)
    {
    $column 17 ; $OutV("ASUWC AIR EVENTS BOARD ")
    }
else if (iboard == $AirEvents$Board)
    {
    $column 16 ; $OutV("AIR EVENTS STATUS BOARD ")
    }
else if (iboard == $AirEvents$Board)
    {
    $column 16 ; $OutV("AIR EVENTS STATUS BOARD ")
    }
else if (iboard == $AmphibEvents$Board )
    {
    $column 16 ;  $OutV("AMPHIB. AIR EVENTS STATUS BOARD ")
    }
 
$OutV(" [") ; $outI(iboard) ; $Outv("] - Page ") ; $OutIB(kpage,2)
 
$column 61 ; $outV("Game Time: ") ; $outIZ(Game_DTGs(igmin),8)
 
return
end
 

 
Subroutine AIRAIR
 
########################################################
#$%
#$% Purpose:   AIRAIR executes the subroutines that gen-
#$%            erate the air events status board.
#$%
#$% Called By: AIRSTA
#$%
#$% Calls:     AIRENT     AIRHED
#$%            AIRNUN     NXTAIR
#$%
#$% Tables:    None
#$%
#$% Date:      25 JAN 82
#$%
#$% Author:    F. Jones
#$%
##########################################################
BBcommon
STATUScommon
 
Integer ifound,  OWN$Pointer    # jb E2145  2/9/00
 
#$% display heading
call AIRHED
 
$exit$on$overflow
 
#$% initialize flag
ifound = $no
 
repeat
   {
    #$% get next air event
    call NXTFLT(own$pointer)
 
    #$% if last one, break loop
    if (own$pointer == 0) break
 
    #$% found one
    ifound = $yes
 
    #$% get air event data
    call AIRENT(own$pointer)
 
    $exit$on$overflow
   }
 
#$% if none, send message
if (ifound == $no)  call AIRNUN
 
return
end
 

 
Subroutine AIRHED
 
###########################################################
#$%
#$% Purpose:   AIRHED  generates heading for air events
#$%            status board.
#$%
#$% Called By: AIRAIR
#$%
#$% Calls:     SMOVH
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
#$% Modified:  James O. Allen 11/02 (E2313)
#$%            Changed first three columns of header to callsign, side#,
#$%            mission#
#$%
###########################################################
BBcommon
STATUScommon
 
Integer ilen    # jb E2145  2/9/00
 
    ## jb  Omit EMCON status from AIR EVENTS board..		4/22/87
    # jb  E2141:  change 2 strings for 8-char. names:            1/6/00
##                     1         2         3         4         5         6
##           012345678901234567890123456789012345678901234567890123456789012345
string MSG2 "SIDE# CALLSIGN MISSION# NBR  TYPE     LNCH RCVR MISSN  TARGT    TOT  REPT OBSV"
string MSG3 "----- -------- -------- ---  ------   ---- ---- ----- -------- ----- ---- ----"
 
ilen = 0; call smovh(MSG2,ARB,Ipage[1,2],ilen)
ilen = 0; call smovh(MSG3,ARB,Ipage[1,3],ilen)
 
LINLEN[2] = 78    # jb E2141 set line lengths 78 vice 74  1/6/00
LINLEN[3] = 78    # jb E2141 set line lengths 78 vice 74  1/6/00
 
LINCNT    = 3                                     # set line counter
 
return
end
 

 
Subroutine AIRENT(own$pointer)
 
##################################################################
#$%
#$% Purpose:   AIRENT gets aircraft data for air events status board.
#$%
#$% Called By: AIRAIR
#$%
#$% Calls:     FMTEXP     OUTH      GETTGT      Display_IFF
#$%            OUTIB      LSTEXP    SMOVH
#$%            SMOVIB     $outV
#$%
#$% Tables:    OWN    UNT
#$%            ACC    EMC     RVU
#$%
#$% Date:      25 JAN 82
#$%
#$% Author:    F. Jones
#$%
#$% Modified:  Susan Miller 8/95 - (E1454)
#$%            Added asterisk before the callsign of ghosted AEW
#$%            aircraft (AEW Sharing)
#$%
#$%            Susan Miller 9/95 - (E1453)
#$%            Added asterisk before the callsign of ghosted AIRTANKER,
#$%            or STTANKER aircraft (Air Tanker Sharing).
#$%
#$%            Carol Kropp - 8/96 (E1644)
#$%            If unit is striking a position displace the TGT/TOT info.
#$%
#$%            Carol Kropp - 2/97 (E1743)
#$%            When computing TOT for position engagements, prevent
#$%            divide by zero (when the speed is 0).
#$%
#$%            Susan Miller 2/97 (E1732)
#$%            If a unit has an IFF, it's on and is a transponder,
#$%            display the modes.
#$%
######################################################################
BBcommon
STATUScommon
 
Literal MISS          # put MISSN array in function astab_mission 12/21/89 reh
Literal namtgt
Literal astab_Mission    # external function
LITERAL UNT$Event$C,UNT$Name$C,UNT$ForceName$C, # jb E2145  2/9/00
        ACC$Type$C, CSTRIP8                     # jb E2145  2/9/00
REAL*4 OWN$TimeObserved$F,OWN$TimeReported$F,   # jb E2145  2/9/00
       OWN$TimeOverTarget$F                     # jb E2145  2/9/00
REAL*4 OWN$LaunchTime$F,OWN$RecoveryTime$F      # jb E2145  2/9/00
integer Game_Time,   nbr, none, lcomp_v, kk,
        OWN$Pointer,OWN$Unit$I,OWN$Mission$I,   # jb E2145  2/9/00
        OWN$AssignedTarget$I,OWN$View$I,        # jb E2145  2/9/00
        RVU$Pointer,RVU$EmbarkIndx$I,           # jb E2145  2/9/00
        UNT$Pointer,UNT$GhostedUnit$I,          # jb E2145  2/9/00
        UNT$Mission$I, ACC$Pointer, DEQ$Pointer # jb E2145  2/9/00
 
## Data IBLANK /'    '/     # jb E2145 (unused integer) 5/9/00
 
real    range_nmi, bearing    # clk 8/96 (E1644) - used to compute TOT
real    aircraft_speed        # clk 2/97 (E1743)
integer has_IFF, IFF$Pointer     # smm 2/97
integer UNT$View$I, only_mode3   # (E1732)
 
 
$test$next$line ; $exit$on$overflow
$save$line$count
$update$keys
 
$prepare$next$line
 
own$unit$i = xown$unit$i
UNT$pointer$to own$unit$i		## TPA 29NOV82 unt
 
#$% get event
UNT$EVENT$C = XUNT$EVENT$C		## TPA 29NOV82
 
UNT$NAME$C = XUNT$NAME$C                # get flight name
UNT$GhostedUnit$I = xUNT$GhostedUnit$I  #SMM 8/95 PER E1454
UNT$Mission$I = xUNT$Mission$I
 
##if (UNT$Name$C != $NO) # jb Omit callsign until side-number is assigned:
if(UNT$NAME$C != $NO & UNT$NAME$C != UNT$EVENT$C) # jb 1/6/00
  {
   IBYTE = 0
   call smovhn (UNT$Name$C, $$MaxLit, ipage[1,lincnt], ibyte)
 
   if ((xUNT$GhostedUnit$I == $Yes) & # SMM 8/95 PER E1454
       ((UNT$Mission$I == $AEW$Code) | # it's a ghosted unit with an AEW mission
        (UNT$Mission$I == $AirTanker$Code) |
        (UNT$Mission$I == $STtanker$Code)))
     {
      call smovv ("*", ipage[1,lincnt], ibyte)
     }
  }
 
#$% if event exists
if(UNT$EVENT$C != $NO)
  {
   IBYTE = 6
 
   #$% load event
   call SMOVH(_
   UNT$EVENT$C,
   $$MAXname,           # jb E2141 $$MAXname vice 5  1/6/00
   IPAGE[1,LINCNT],
   IBYTE)
  }
 
UNT$ForceName$C = XUNT$ForceName$C      # get force name
 
if(UNT$ForceName$C != $NO)              # is there a force name?
  {
   IBYTE = 15    # jb E2141  (15 vice 14)  2/9/00
   call smovhn (UNT$ForceName$C, $$MaxLit, ipage[1,lincnt], ibyte)
  }
 
nbr = xown$NbrAcTot$i                   # load number in flight
 
IBYTE = 24    # jb E2141  (25 vice 24 or 20)  2/14/00
call smovib (NBR, 3, IPAGE[1,LINCNT], IBYTE)  # jb E2141 (3 vice 2) 2/15/00
 
acc$pointer = xown$accpntr$i            # set pointer to ACC table
 
ACC$TYPE$C  = XACC$TYPE$C                # retrieve the A/C type.
 
IBYTE = 29    # jb E2141  (29 vice 24 or 28)  2/14/00
 
call SMOVH(_
     ACC$TYPE$C,                    # insert A/C type into display array
     $$MAXname,         # jb E2141  ($$MAXname vice 5)  2/9/00
     IPAGE[1,LINCNT],
     IBYTE)
 
OWN$LaunchTime$F = xOWN$LaunchTime$F    # retrieve A/C launch time
 
IBYTE = 38    # jb E2141  (38 vice 30)  2/14/00
 
#$% load launch time
call SMOVIZ (Game_Time(OWN$LaunchTime$F), 4,
             IPAGE[1,LINCNT], IBYTE)
 
OWN$RecoveryTime$F = xOWN$RecoveryTime$F        # get A/C bingo time
 
#$% if bingo time non-zero
if(OWN$RecoveryTime$F != $NO)
  {
   IBYTE = 43    # jb E2141  (43 vice 35)  2/9/00
 
   #$% load recovery time tpa
   call SMOVIZ (Game_Time(OWN$RecoveryTime$F), 4,
                IPAGE[1,LINCNT], IBYTE)
  }
 
own$mission$i = xown$mission$i                  # get A/C mission
 
if (own$mission$i != $noneassigned$code)        # unit assigned a mission?
  {
   #$% yes
   IBYTE = 48    # jb E2141  (48 vice 40)  2/15/00
 
   #$% get mission
   miss = astab_mission(own$mission$i)
 
   #$% load mission
   call SMOVH(_
	MISS,
	5,
	IPAGE[1,LINCNT],
	IBYTE)
  }                                        # endif
 
#$% get assigned target
own$AssignedTarget$i = xown$AssignedTarget$i
 
#$% any target
if (own$AssignedTarget$i != 0)
  {
   if (OWN$AssignedTarget$I == UNT$Engaging$Position)    # clk 8/96 (E1644)
     {
      $column 55    # jb E2141  (55 vice 47)  2/9/00
      $outv ("POSIT")
      call RLL2RB (xUNT$TrueLatitude$F, xUNT$TrueLongitude$F,
                   xUNT$CosTrueLat$F,
                   xUNT$OrderedLatitude$F, xUNT$OrderedLongitude$F,
                   COS (xUNT$OrderedLatitude$F),
                   range_nmi, bearing)
      aircraft_speed = FLOAT (xOWN$Speed$I)
      aircraft_speed = MAX (0.001, aircraft_speed)
      OWN$TimeOverTarget$F = Game$Time +
                             ($Minutes$Per$Hour *
                                  (range_nmi / aircraft_speed))
      $column 63    # jb E2141  (63 vice 53)  2/9/00
      $outiz (Game_Time (OWN$TimeOverTarget$F), 4)
     }  # end of if unit is striking a position
   else
     {
      #$% yes, get view
      own$view$i = xown$view$i
 
      #$% get target data
      call GETTGT(own$AssignedTarget$i,namtgt)
 
      #$% if target exists
      if (lcomp_v(namtgt, "        ") != 0)
        {
         #$% load target name
         $column 55 ; $outHN(namtgt,$$MAXname) # jb E2141  (55 vice 47)  2/9/00
 
         #$% get intercept time
         OWN$TimeOverTarget$F = xOWN$TimeOverTarget$F
 
         #$% if time exists
         if (OWN$TimeOverTarget$F != 0)
           {
            #$% load intercept time @ col. 63 vice 53   jb E2141    2/9/00
            $column 63 ; $outIZ(Game_Time(OWN$TimeOverTarget$F),4) ## tpa
           }
        }
     }   # end of if the assigned target is not the position code
  }   # end of if the unit has an assigned target
 
###################### removed 4/22/87  jb  (per CS request) ###################
#own$emconindx$i = xown$emconindx$i
#if(own$emconindx$i != 0)
#  {
#   emc$pointer$to own$emconindx$i
#   EMC$NAME$C = XEMC$NAME$C
#
#   IBYTE = 57
#   call SMOVH(_
#	EMC$NAME$C,
#	5,
#	IPAGE[1,LINCNT],
#	IBYTE)
#  }
#######################  End of 4/22/87 removal ###########################
 
OWN$TimeReported$F = xOWN$TimeReported$F
 
IBYTE = 69    # jb E2141  (69 vice 64)  2/9/00
call SMOVIZ (Game_Time(OWN$TimeReported$F), 4,
             IPAGE[1,LINCNT], IBYTE)
 
OWN$TimeObserved$F = xOWN$TimeObserved$F
 
RVU$pointer$to iview
RVU$EmbarkIndx$i = xRVU$EmbarkIndx$i
 
$over 1       # jb E2141  (1 vice 2)  2/9/00
 
#$% if own unit or none defined load heading
if (RVU$EmbarkIndx$i == own$Unit$i |
    RVU$EmbarkIndx$i == 0          ) $outV("EMBK")       # jb    2/9/00
 
#$% if time non-zero, load time
else if (OWN$TimeObserved$F != 0)   $outIZ(Game_Time(OWN$TimeObserved$F),4)
 
LINLEN[LINCNT] = IBYTE
 
# does this unit have an IFF - SMM 1/97 (E1732)
has_IFF = $no
for_DEQ_chain (UNT$Pointer$index)
   {
    if ((xDEQ$Ident$I == $IFF$Code) &
        (xDEQ$On$I == $yes))
      {
       IFF$Pointer = xDEQ$Pntr$i
       if (xIFF$Function$i != $INTERROGATOR$Code)
         {
          has_IFF = $yes
          break
         }
      }
   } # end of search through DEQ table
 
 only_mode3 = $no
 UNT$View$I = xUNT$View$I
 
 if ((UNT$View$I == $Neutral$View) |
     (UNT$View$I >= $FirstOrange$View &
      UNT$View$I <= $LastOrange$View))
   {
    only_mode3 = $yes
   }
 if ((only_mode3 ==$yes) &
     (xUNT$Type$I != $Air$Code))
   {
    has_IFF = $no
   }
 
if (has_IFF == $yes)
   {
    $test$next$line ; $exit$on$overflow    #$% list overflow
    $prepare$next$line
 
    $column 4
    $outV("IFF Modes:")       # jb    2/9/00
    $over 2
 
    call display_iff(DEQ$Pointer,19,only_mode3)
   }
 
call LSTEXP(own$pointer,none)	#$% get expendables list
 
if (none == $no)		#  If no expendables:
   {
    $test$next$line ; $exit$on$overflow    #$% list overflow
    $prepare$next$line
 
    #$% format expendables list:
    $column 10 ; $outV("Exp:")  # jb    2/9/00
    $over 2    ; call FMTEXP(16)
   }
 
#$% get ground equipment
 
call LSTGND(own$pointer,none)
 
if (none == $no)
   {
    #$% test and exit if status board full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% display "GND" and format
    $column 10 ; $OutV("Gnd:")  # jb    2/9/00
    $over 2   ; call FMTEXP(16)
   }
 
return
end
 

 
Subroutine AIRNUN
 
#########################################################################
#$%
#$% Purpose:   AIRNUN displays message if there are no air events for this view
#$%
#$% Called By: AIRAIR
#$%
#$% Calls:     $OUTV
#$%
#$% Tables:    None
#$%
#$% Date:      25 JAN 82
#$%
#$% Author:    F. Jones
#$%
#########################################################################
BBcommon
STATUScommon
 
$test$next$line ; $exit$on$overflow
 
$prepare$next$line
 
$column 1 ; $outV("No air events in this view")       # jb    2/9/00
 
return
end
 

 
Subroutine  TGTget(itargt,namtgt)
 
####################################################
#$%
#$% Purpose:   GETTGT get target data for air event status board.
#$%
#$% Called By: AIRENT
#$%
#$% Calls:     TRKNUM
#$%
#$% Tables:    UNT    RVU     RMT
#$%
#$% Date:      25 JAN 82
#$%
#$% Author:    F. Jones
#$%
#####################################################
BBcommon
StatusCommon
 
Literal namtgt, RVU$TrackCode$C, CSTRIP, CSTRIP8    # jb  E2145  2/9/00
REAL*4  latest,  RMT$LastDetTime$F                  # jb  E2145  2/9/00
Integer itargt,i_code, ifirst,ilast, latept,        # jb  E2145  2/9/00
        RMT$Pointer,RMT$Class$I,RMT$TrackNumber$I,  # jb  E2145  2/9/00
        RMT$DetectionType$I,                        # jb  E2145  2/9/00
        UNT$Pointer, RVU$Pointer, kk
 
namtgt = $BLANKLIT
 
#$% if CONTROL, return
if (iview == $neutral$view) return
 
#$% set UNT pointer to target
UNT$pointer$to itargt
 
#$% if shorebase
if (xUNT$type$i == $shorebase$code)
   {
    #$% get name
    namtgt = xUNT$Name$c
    return
   }
 
#$% set view pointer
RVU$pointer$to iview
 
#$% set RMT pointer to beginning, save start of RMT table
rmt$pointer$to xRVU$FirstRmtIndx$i
ifirst = rmt$pointer
 
#$% set RMT pointer to end, save end of RMT table
rmt$pointer$to xRVU$LastRmtIndx$i
ilast = rmt$pointer
 
#$% initialize variables
latest = 0.0
latept = 0
 
#$% search RMT table
for (rmt$pointer=ifirst; rmt$pointer<=ilast ; rmt$pointer$next)
   {
    #$% if slot not in use, get next slot
    if (Xrmt$InUse$i    == $no) next
    if (xRMT$Detector$I == $no) next
 
    #$% if detectee not target, get next slot
    if (Xrmt$Detectee$i != itargt) next
 
    #$% get detection type
    rmt$DetectionType$i = xrmt$DetectionType$i
 
    if (rmt$DetectionType$i != $ActiveVisual$code    &
    	rmt$DetectionType$i != $ActiveNonVisual$code )
 
    #$% get last detection time
    RMT$LastDetTime$F = xRMT$LastDetTime$F
 
    #$% if not most recent, get next slot
    if (RMT$LastDetTime$F <= latest) next
 
    #$% save most recent detection time and pointer
    latest = RMT$LastDetTime$F
    latept = rmt$pointer
   #$% end for
   }
 
#$% if none
if (latept == 0)
   {
    #$% clear target name
    namtgt = 0
    return
   }
 
#$% set RMT pointer to target
rmt$pointer = latept
 
if (xRMT$TmaFlag$I == YES & xrmt$DetectionType$i == $PassiveSonar$Code)
    {
    i_code = $PassiveSonar$Code
    }
else
    {
    i_code = $ActiveNonVisual$Code
    }
 
RVU$TrackCode$c   = xRVU$TrackCode$c
rmt$Class$i       = xrmt$Class$i
rmt$TrackNumber$i = xrmt$TrackNumber$i
 
call TRKNUM(RVU$TrackCode$c,
    	    i_code,
    	    rmt$Class$i,
    	    rmt$TrackNumber$i,
    	    namtgt)
 
return
end
 

 
Subroutine Display_IFF (DEQ$Pointer,column_number,only_mode3)
####################################################################
#$%
#$% Purpose:  Display_IFF
#$%
#$% Called By: AIRENT     SHPENT    SUBENT      BOATENT
#$%
#$% Calls:     out...
#$%
#$% Tables:    DEQ
#$%
#$% Date:      29 JAN 97
#$%
#$% Author:    Susan Miller (E1732)
#$%
#$% Modified:  Carol Kropp - 3/97 (E1772)
#$%            Since the two digits of the mode 1 code are stored
#$%            independently, extract each rather than trying to
#$%            convert to the strange base eight layout.
#$%
####################################################################
BBCommon
StatusCommon
 
integer DEQ$Pointer, column_number, only_mode3
integer iff_mode
integer Base_10_to_Base_8
 
 $column column_number
 
 if (only_mode3 == $no)
   {
    #$% output quantity and name
    $OutIB(1,1)
    $outV("/")       # jb    2/9/00
    $OutI(xDEQ$IFFMode1_Digit1$I)
    $OutI(xDEQ$IFFMode1_Digit2$I)
    $over 2
 
    iff_mode = base_10_to_Base_8(xDEQ$IFFMode2$I)
    #$% output quantity and name
    $OutIB(2,1)
    $outV("/")       # jb    2/9/00
    $OutIZ(iff_mode,4)
    $over 2
   }
 
 iff_mode = base_10_to_Base_8(xDEQ$IFFMode3$I)
 #$% output quantity and name
 $OutIB(3,1)
 $outV("/")         # jb    2/9/00
 $OutIZ(iff_mode,4)
 
return
end
