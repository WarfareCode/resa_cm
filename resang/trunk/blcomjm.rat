 
#####   version 3.?  dated-  10jan88
 
 
# 
 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine COMMJ
 
      ##################################################
      #$%
      #$% Purpose:   COMMJ allows the user to
      #$%            interact with the COMMJr
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Robert Hundt
      #$%
      ##################################################
 
#
#     New COMMJR
#
##      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT NONE         # jb  E2145     4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom, 13)     # The number of entries in the defCOM table.
define (zdctyp,  8)     # The size of the defTYP table.
define (zdcfld,127)     # The size of the defFLD table.
define (zdsarg,  8)     # The size of entries in the defARG table. reh, was 4 9/13/89
define (zdcarg, 16)     # The number of entries in the defARG table.
define (zdcfmt,  8)     # The number of entries in the defFMT table.
 
define($MaxFreqs,10)
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
      include   "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      Integer frqcnt,dlycnt,
        nfreq,ifreq_counter,ipulse_counter,istat    # jb 11/25/98
## Note: See also declarations in BLSUB1.RIN..
 
      character  line[ARB]
      logical*1   ipulsed_type
 
      logical    freq_exists[ $MaxFreqs ]
      logical    pulse_Exists[ $MaxFreqs ]
      Real*4     pulse_width [ $MaxFreqs ]
      Real*4     pulse_RR [ $MaxFreqs ]
      integer    m
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("        ","Comm Jam","mers"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of Communcation Jammer
 DATA$com("RANGE",  1)      # Maximum effective range
 DATA$com("POWER",  1)      # Comm. Jammer Power
 DATA$com("GAIN ",  1)      # comm. jammer Antenna Gain in DB (see 2-57)
 DATA$com("COVER",  1)      # If tone, Percent band covered
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("FREQ ",- $MaxFreqs)      # Center Freq & Bandwith
 DATA$com("PULSE",- $MaxFreqs)      # pulse data corresponding to freq
 DATA$com("MODUL",- 1)      # modulation type for transmitter
 DATA$com("DELAY", -1)      # Delay time , 0 if not a tone jammer
 DATA$com("MNFAL",- 1)      # Mean time between failures
 DATA$com("MNRPR",- 1)      # Mean time to repair
 
 
 
 $set (Data_Count,0)
 DATA$typ("     ",  0)     # rec type 2
 DATA$typ("     ",  1)     #
 DATA$typ("     ",  0)     # rec type 1
 DATA$typ("     ",  1)     #
 
 
 
 $set (Data_Count,0)
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","COMMJr  ","        ","      ")
 DATA$fld1("RANGE", 1, 2,"MILES", 1,"Maximum ","effectiv","e range ","      ")
 DATA$fld1("POWER", 1, 2,"WATT ", 1,"Power in"," WATTS  ","        ","      ")
 DATA$fld1("GAIN ", 1, 2,"dB   ", 1,"Comm. Ja","mmer Ant","enna Gai","n  dB ")
 DATA$fld3("NOMEN", 3,-8,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld2("DELAY", 2, 3,"USEC ", 1,"Hz   ", 1,"If follo","wer, tim","e delay ","factor")
 DATA$fld1("COVER", 1, 2,"%    ", 1,"% band c","overed, ","0 if not"," Tone ")
 DATA$fld1("MNFAL", 1, 2,"MINUT", 1,"Mean tim","e betwee","n failur","es    ")
 DATA$fld1("MNRPR", 1, 2,"MINUT", 1,"Mean tim","e to rep","air     ","      ")
 DATA$fld1("MODUL", 1, 1,"NAME ", 1,"Transmit","ter Modu","lation T","ype   ")
 DATA$fld2("FREQ ", 2, 3,"MHz  ", 1,"Hz   ", 1,"Center f","req and ","bdwth of"," jammr")
 DATA$fld2("PULSE", 2,7,"WIDTH",1,"PRR",1,"Width an","d PRR (m","cSec & p","ps)")
 
 $set (Data_Count,0)
 
 DATA$arg8N("NAME ",6000, 0,      0)     # Alphanumeric -- Anything
 DATA$arg8N("MILES",2002, 0,    500)     # Numeric Range 0 -> 500
 DATA$arg8N("MINUT",2002, 0,  10000)     # Numeric Range 0 -> 10000
 DATA$arg8N("WATT ",2002, 0,  10000)     # Numeric Range 0 -> 10000
 DATA$arg8N("Text ",9024, 0,      0)     # Alphanumeric string (24 bytes)
 DATA$arg8N("...  ",9000, 0,      0)     # Alphanumeric string filler
 DATA$arg8C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg8N("dB   ",2002, -200, 200)     # Numeric Range -200 -> 200 reh 6/91
 DATA$arg8N("USEC ",2002, 0,     10)
 DATA$arg8N("CHAN ",2002, 1,     10)
 DATA$arg8N("WIDTH",-2000,0.001,1000.0)  # FP Num Rng .001->1000.0
 DATA$arg8N("%    ",2002, 0,    100)
 DATA$arg8N("PRR  ",2002, 0, 320000)     # Numeric Range 0 -> 320000 6/91
 DATA$arg8C("RFREQ",8001, "FRQ ")
 DATA$arg8N("MHz  ",-2002,0.001,10000.0) # Floating point Range .001 -> 10000.0
 DATA$arg8N("Hz   ",2002, 1,10000000)    # Numeric Range 1 -> 10000000 # was 50000,
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 3,"A5,2I10)"," "," "," ")
 DATA$fmt( 3,"A5,I9,I7",")       "," "," ")
 DATA$fmt( 3,"A5,A7,I9",")       "," "," ")
 DATA$fmt( 3,"A5,A7,A7",")"," "," ")
 DATA$fmt( 3,"A5,F10.3",",I7)","   ","     ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    There must be one occurrence of FREQ
#
#
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
 
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                    #*********************************************************
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==2)                     # Special Test 2
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
                   }
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
  frqcnt = 0
  dlycnt = 0
 
for (ptr=1; ptr < $MaxFreqs; ptr=ptr+1)
    {
    freq_exists[ptr] = .false.
    pulse_exists[ ptr ] = .false.
    }
 
ipulsed_type = .false.
 
ifreq_counter=0
ipulse_counter = 0
 
for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
    {
    #$% if this field PULSE information
    if (work[ptr] == 'FREQ')
        {
        ifreq_counter = ifreq_counter + 1
 
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            freq_exists[ifreq_counter] = .true.
            }
        }
    else if (work[ptr] == 'PULSE')
        {
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            ipulse_counter = ipulse_counter + 1
            pulse_exists[ipulse_counter] = .true.
            pulse_width[ipulse_counter] = work[ptr+2]
            pulse_RR[ipulse_counter] = work[ptr+3]
            ipulsed_type = .true.           # this is a pulsed jammer
            }
        }
    } # end loop thru record
 
for (nfreq=1; nfreq <= $MaxFreqs; nfreq=nfreq+1)
    {
    #$% if freq is specified for a given channel and
    IF (freq_exists[ nfreq ] == .true. )
        {
        #$% at least one "PULSE" entry indicates this is a pulsed type jammer
        if ( ipulsed_type == .true. &
             pulse_exists[ nfreq ] == .false.)
            {
            call echor
            serr = serr + 1
            call echor
            call echov  ('Must enter PULSE for frequency # ')
            call echoi ( nfreq )
            call echor
            }
        }
    else
        {
        if ( pulse_exists[ nfreq ] == .true.)
            {
            call echor
            serr = serr + 1
            call echor
            call echov  ('PULSE entered for non-existant frequency')
            call echor
            }
        }
 
    if ( pulse_exists[ nfreq ] == .true.)
        {
        #$% if pulse width greater than pulse period
        if ( pulse_width [ nfreq ] > (1.0/pulse_RR [ nfreq ])*1.0E+6 )
            {
            call echor
            serr = serr + 1
            call echor
            call echov  ('PULSE width greater than period as a function of PRR, PULSE #')
            call echoi ( nfreq )
            call echor
            }
        }
    }
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
   {
    if (lcomp_v(work[ptr],"FREQ ") == 0)                    # Any FREQ ?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)             # is it filled in?
        frqcnt = frqcnt + 1
      }
    else if (lcomp_v(work[ptr],"DELAY") == 0)               # Any DELAY?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)             # is it filled in?
        dlycnt = dlycnt + 1
      }
    #$% if this field is Jammer modulation
    else if (work[ptr] == 'MODUL')
        {
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            call validate_modulation(work[ptr+2], istat)
 
            #$% if modulation not to international standard
            IF (istat != 1)
                {
                serr = serr + 1
                call echor
                call echov  ('Invalid Modulation Type ')
                call echoh ( work[ptr+2], 5 )
                call echov  ('. Reference International Standard')
                call echor
                }
            }
        }
   }
 
 
# test results ......
 
#$% test for modulation characteristics error
 
 if (frqcnt< 1 & dlycnt< 1)
   {
    call echor
    call echov (' FREQ or DELAY is required to have AT LEAST ONE entry.')
    call echor
    serr = serr + 1
   }
 
 if (frqcnt> 0 & dlycnt> 0)
   {
    call echor
    call echov (' FREQ and DELAY are not both allowed.')
    call echor
    serr = serr + 1
   }
 
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
 
