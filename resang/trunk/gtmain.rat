include "ascii.inc"

Program rmg_substitute
implicit none

integer    tcp_client_connect, tcp_client_close, tcp_client_write
integer    rc, sockfd, k, isize, kk, i, n
integer    ifd_cmd
integer    open_, length, getarg3, getlin, getwrd, equal
character  filename[ARB],  buf[ARB], line[ARB], token[ARB]

string     server_name "COMMS1"
string     server_port "2020"
string     eom "NNNN"

call initr4

call help_pgm(2,
		"rmgsub: resa message generator substitute",
		"rmgsub Tags: C4I, OTH-Gold",
		"Usage: rmgsub <OTH/Gold Message file>",
		"",
		"",
		"",
		"",
		"Example: rmgsub port.out")
call echor; call echor

k = getarg3(1,buf,49)

if (k == EOF) call exit

if (buf[k] == NEWLINE) buf[k] = EOS

isize = length(buf)
if (isize == 0)
{
	call remark_v ("You must enter a OTH/Gold Message file name.")
	call exit
}

else if (isize > ARB)
{
	call echov ("The input file name cannot exceed ")
	call echoi (ARB)
	call echov (" characters.")
	call exit
}

kk = 0
call smovh(buf, isize, filename, kk)
call smov(EOS, filename, kk)
call fold(filename)

sockfd = -1
sockfd = tcp_client_connect(server_name, server_port)

if (sockfd != -1)
{
	call echov("Successful TCP/IP connect to GCCS-M server ")
	call echohn(server_name, ARB)
	call echov(" Port ")
	call echohn(server_port, ARB)
	call echor
}
else
{
	call echov("Unsuccessful TCP/IP connect to GCCS-M server ")
	call echohn(server_name, ARB)
	call echov(" Port ")
	call echohn(server_port, ARB)
	call echor
	call exit
}

ifd_cmd = open_(filename, READ)

if (ifd_cmd == ERR)
{
	call remark_V("Could not open the OTH/Gold Message File.")
	call exit
}

while (getlin(line, ifd_cmd) != EOF)
{
	rc = tcp_client_write(sockfd, line, n)
	if (rc != 0)
	{
		call echov("Error writing message line to server")
		call echor
	}
	if (n < length(line))		# Buffer Overflow
	{
		call echov("GCCSM TCP/IP Buffer Overflow")
		call echor
	}

	# Output to screen
    for (i = 1; i <= length(line); i = i + 1)
    {
    	if      (line[i] == $RETURN)   continue
        else if (line[i] == $LINEFEED) call echor
        else if (line[i] == EOS)       continue
        else    call echo (line[i])
    }


	# Check for end of message (NNNN)
	kk = 1
	n = getwrd(line, kk, token)
	if (equal(token, eom) == YES)
	{
		rc = tcp_client_close(sockfd)
		call delay(50)
		sockfd = tcp_client_connect(server_name, server_port)
	}
}

rc = tcp_client_close(sockfd)
call close_(ifd_cmd)

end
