#$%  NOTE:  For initial prototyping, only air units are being ghosted.
 
define(trace$engage$exe, istrip(trace$engage,0,M1bits)) # trace general exec
 
##############################################################################
#                                                                            #
#  File:     ALSP_SEND_INTERACT.RAT                                          #
#                                                                            #
#  Created:  May 18, 1992                                                    #
#                                                                            #
#  Author:   Carol L. Kropp                                                  #
#                                                                            #
#  Purpose:  This file contains the routines for sending out ALSP            #
#            interaction messages for various types of engagements.          #
#                                                                            #
##############################################################################
 
include "alsp.inc"
include "bbmfd.inc"
include "alsp_resa.inc"
 
define (BBImplicit, Implicit None) # SMM 3/00
 

 
subroutine ALSP_Send_AAM_Engage (UNT$Pointer,        # input - unit pointer of attacker
                                 DEQ$Pointer,        # input - the attackers aam equipment pointer
                                 aam_available,      # input - the number of AAMs available
                                 MC$Pointer,         # input - AAM characteristic pointer
                                 UNT2$Pointer,       # input - unit pointer of target
                                 number_to_be_fired, # input - the number of AAMs to be fired
                                 number_of_targets,  # input - the number of a/c being targeted
                                 int_range)          # input - range to target for engagement log
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled aircraft engages an ALSP ghosted
#$%             aircraft with AAM.  The number of AAM avaialble to
#$%             the attcker will also be updated and if the enhanced
#$%             air-to-air is being used a probability of launch will
#$%             be factored in.
#$%
#$% Called By:  atoair <wgmdeng.rat>
#$%
#$% Calls:      Echo..
#$%             WhSide
#$%             INT
#$%             ALSP_Map_Outgoing_Weapon     <alsp_mapping.rat>
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     DEQ     MC
#$%
#$% Date:       May 18, 1992
#$%
#$% Author:     Carol L. Kropp
#$%
#$% Modified:   Carol L. Kropp - 2/93
#$%             Updated ICD changes and probability of launch.
#$%
#########################################################################
BBCommon
ENCommon
 
integer  UNT$Pointer, DEQ$Pointer, MC$Pointer, UNT2$Pointer
integer  aam_available, number_to_be_fired, number_of_targets
 
real     MBUrange     # function to obtain main battle unit range
 
real     random_number, prob_of_launch
integer  attacker_side, alsp_weapon_code
integer  idummy,kk
real     fdummy
real     x, random  # SMM 3/00
integer  DEQ$Remaining$I, UNT$AlspId$I, int_range  # SMM 3/00
literal  MC$Name$C, cstrip8,alspidname			   # SMM 3/00, JHM 1/02 CT02
 
    if (aam_available < number_to_be_fired)   # if there are not enough AAMs
      {                                       # for the maximum firing rate,
        number_to_be_fired = aam_available    # then fire all of them
        number_of_targets  = aam_available
      }
 
    if (number_of_targets >  number_to_be_fired)    # the number of targets shouldn't
        number_of_targets = number_to_be_fired      # exceed the number fired.
 
    MC$Name$C = xMC$Name$C
    if (trace$engage$exe != $no)
      {
        call echov  (" (ghosted flight) ")
        call echov  (" - ")
        call echoi  (number_of_targets)
        call echov  (" aircraft being targeted, ")
        call echov  (" with ")
        call echoi  (number_to_be_fired)
        call echov  (" ")
        call echohn (MC$Name$C, $$MaxLit)
        call echov  (" AAMs.")
        call echor
      }
 
    if (Level$Air$Engagement >= 1)  #if the enhanced air-to-air
      {
        call whside (xUNT$View$I, attacker_side)
 
        if (attacker_side == $Orange$Code)
            prob_of_launch = AirToAir$Prob$Launch$Orange
        else # blue or neutral
            prob_of_launch = AirToAir$Prob$Launch$blue
 
        random_number = random(x)
        if (prob_of_launch <= random_number)
            {
             if (trace$engage$exe != $no)
                {
                 call echov  ("Probability of launch (")
                 call echof  ((prob_of_launch * 100.0), 3)
                 call echov  ("%) not met for ")
                 call echohn (MC$Name$c, $$MaxLit)
                 call echov  (" - draw was ")
                 call echof  ((random_number * 100.0), 3)
                 call echov  ("% - No engagement message sent.")
                 call echor
                }
             return
            }   # end of failed launch
      }         # end of if level$air$engagement >= 1
 
    DEQ$Remaining$I = aam_available - number_to_be_fired
    putDEQ$Remaining$I
 
    call ALSP_Map_Outgoing_Weapon (MC$Name$C, $AAM$Code, alsp_weapon_code)
 
    idummy = 0
    fdummy = 0.0
    UNT$ALSPid$I = xUNT$ALSPid$I
    call ALSP_Send_Interaction_Msg (UNT$ALSPid$I, xUNT2$ALSPid$I, 0,
                                    $event_message, $air_to_air,
                                    $air_to_air, alsp_weapon_code,
                                    number_to_be_fired, number_of_targets,
                                    idummy, idummy, fdummy, fdummy, idummy,"")
 
    if (log$engage != $no)              # if engagement log desired
      {
      # putENG$Time$F (Game$Time)       #JHM 1/02 CT02 (E2257)
      # putENG$Platform$C (xUNT$Name$C) #JHM 1/02    # Missile ID Number
       call engdata(UNT$Pointer,UNT2$Pointer)
       putENG$Weapon$C (MC$Name$C)          # AAM Type
       call smoviz (xUNT2$AlspId$I,$$MaxLit,alspidname,kk) # JHM 1/02 CT02
       putENG$Track$C (alspidname)                         # (E2257)
      # putENG$Track$C ('GHOST   ')             # marks as a ghost
       putENG$Target$C (xUNT2$Name$C)       # the target
       putENG$Result$I (ENG$Fired$Code)
       putENG$NumberFired$I (number_to_be_fired)           # record the number of shots
       putENG$Range$F (float(int_range))                   # integer range to target
      # putENG$MBUrange$F (MBURange(UNT2$Pointer)) #jhm ct02  # get range to MBU
       call write_eng_rec
      }
 
return
end

 
subroutine ALSP_Send_Interaction_Msg (_
                Attacker_ALSPid,   # in - attacker   # FROM
                Target_ALSPid,     # in - target     # TO
                alsp_target_type,  # in - for target priority list (RESA code)
                message_form,      # in - form of alsp message (event or dispatch)
                message_kind_code, # in - type of alsp interaction message
                report_kind_code,  # in - type of interaction report message
                weapon_code,       # in - alsp weapon code from alsp.inc
                number_fired,      # in - number of weapon type fired
                number_targeted,   # in - number engaged for interaction events
                number_of_hits,    # in - number of hits for interaction reports
                number_killed,     # in - number killed for interaction reports
                target_lat,        # in - targeted position latitude (radians)
                target_long,       # in - targeted position longitutde (radians)
                BTT_index,         # in - BTT Table Index or 0 (for target_ref)
                correlation_id)    # in - correlation id, if not null, from engagement
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled unit engages an ALSP ghosted unit or
#$%             a interaction report when a ghosted unit attacked a
#$%             RESA unit.
#$%
#$% Called By:  ALSP_Send_AAM_Engage
#$%             ALSP_Send_BOMB_Engage
#$%             ALSP_Send_SAM_Engage
#$%             ALSP_Receive_AAM_Engage   <alsp_receive_interact.rat>
#$%             ALSP_Receive_SAM_Engage   <alsp_receive_interact.rat>
#$%
#$% Calls:      ALSP_Send_Interact      <transifsend.c>
#$%
#$% Tables:     None
#$%
#$% Date:       May 22, 1992
#$%
#$% Author:     Carol L. Kropp
#$%
#$% Modified:   Carol L. Kropp - 2/93
#$%             Updated ICD changes.
#$%
#$%             Carol L. Kropp - 10/95 (E1488)
#$%             For air_to_ground engagements against bases, the lat
#$%             and long are now required.
#$%
#$%             Susan M. Miller - 12/95 (E1527)
#$%             Changed when KILLS or HITS are sent out based upon table
#$%             4-2 in 1996 Joint Training Confed. Op. Spec. 29 Nov 95.
#$%             KILLS() for *_TO_AIR engagements and HITS() for
#$%            *_TO_SHIP engagements.
#$%
#$%             Carol Kropp/Susan Miller - 2/96 (E1548)
#$%             RESA was sending interaction messages with no NUMBER in
#$%             the SALVO...related to aircraft units with a size of 0.
#$%
#$%             Carol Kropp - 2/96 (E1550)
#$%             The 1996 Combat Interactions ICD requires aircraft
#$%             mission in all air_to_ground engagement msgs.  Rather
#$%             than adding the mission to the argument list, obtain
#$%             the unit table pointer when it is an air_to_ground
#$%             (computationally more expensive, but better than
#$%             changing all the subroutine calls).
#$%
#$%             Carol Kropp - 12/97 (E1911)
#$%             Added BTT_index to the argument list so that the
#$%             target_ref attribute can be filled.  The table index
#$%             is passed rather than the actual value(s) since the
#$%             TIN can be included and report will not have this info.
#$%
#$%             John McCormick- 2/98 (E1911)
#$%             Added new flags/keywords to handle new target_ref
#$%             message format changed at AAI '98.
#$%
#$%             Jay Braun - 4/2015
#$%             Add incoming correlation id to reflect in report-attrition
#$%
#########################################################################
BBCommon
 
integer  Attacker_ALSPid, Target_ALSPid, alsp_target_type
integer  message_form, message_kind_code, report_kind_code, weapon_code,
         number_fired, number_targeted, number_of_hits, number_killed
real     target_lat, target_long
integer  BTT_index, lcomp_v
 
integer   ALSP_Get_UNT_Mission    # integer function to determine enumeration
 
integer  n_args
integer  i, kk, alsp_message_kind_code
integer  param_flag [MAX_INTERACT_PARAM], int_params [MAX_INTERACT_PARAM]
real     f_params[MAX_INTERACT_PARAM]
integer  strlens[MAX_INTERACT_PARAM]
vaxcharacter*MAX_STR_LEN correlation_id
character long_corid[MAX_STR_LEN]
vaxcharacter*MAX_STR_LEN string_params[MAX_INTERACT_PARAM]
integer  number_of_targets, target_list [$max_num_alsp_targets]
integer  UNT$Pointer, id_found     # clk 2/96 (E1550)
integer  BTT$Pointer               # clk 12/97 (E1911)
 
integer          expanded_target_len
Character        c_expanded_target[35]
VaxCharacter*35  v_expanded_target
equivalence (v_expanded_target, c_expanded_target)
 
Character       c_corid[16]
VaxCharacter*16  v_corid
equivalence (v_corid, c_corid)
 
literal  cstrip8, cstrip

  for (i = 1; i <= MAX_INTERACT_PARAM; i = i + 1)   # clear the attribute flags
    param_flag [i] = 0
 
  param_flag [$int_firing] = Attacker_ALSPid
  int_params [$int_firing] = Attacker_ALSPid
 
  param_flag [$int_victim] = Target_ALSPid
  int_params [$int_victim] = Target_ALSPid
 
  if (message_kind_code == $report)     # if an interaction report message
    {
     kk=0
     call smovv(correlation_id,long_corid,kk)
     if (long_corid[1]>0) #not null
     {
        param_flag[$int_correlation_id] = $YES
        strlens[$int_correlation_id] = len_trim(correlation_id)
        string_params[$int_correlation_id] = correlation_id
     }

     if (report_kind_code == $air_to_air)
       alsp_message_kind_code = $report_air_to_air
     else if (report_kind_code == $air_to_ship)
       alsp_message_kind_code = $report_air_to_ship
     else if (report_kind_code == $air_to_ground)
        alsp_message_kind_code = $report_air_to_ground 
     else if (report_kind_code == $ship_to_air)
       alsp_message_kind_code = $report_ship_to_air
     else if (report_kind_code == $ship_to_ship)
       alsp_message_kind_code = $report_ship_to_ship
     else if (report_kind_code == $ship_to_ground)
       alsp_message_kind_code = $report_ship_to_ground
     else if (report_kind_code == $ground_to_air)
       alsp_message_kind_code = $report_ground_to_air
     else if (report_kind_code == $ground_to_ship)
       alsp_message_kind_code = $report_ground_to_ship
     else if (report_kind_code == $ground_to_ground)
       alsp_message_kind_code = $report_ground_to_ground
    }
  else    # the interaction is not a report
    {
     if (number_fired <= 0)       # clk/smm 2/96 (E5148)
       {
        call echov  ("RESA vs. ALSP Ghost interaction ")
        call echov  ("with number of weapons to ")
        call echov  ("fire = 0...interaction is between ")
        call echoi  (Attacker_ALSPid)
        call echov  (" and ")
        call echoi  (Target_ALSPid)
        call echov  (" - no msg sent.")
        call echor
        return      # don't send any message
       }
 
     if (message_kind_code == $air_to_ground)   # clk 10/95 (E1488)
       {
        param_flag [$int_lat] = 1
        f_params [$int_lat] = target_lat * 180.0 / $pi
 
        param_flag [$int_long] = 1
        f_params [$int_long] = target_long * 180.0 / $pi
 
        param_flag [$int_mission] = 1                      # clk 2/96 (E1550)
        int_params [$int_mission] = $mission_navy_strike   # default the mission
        call ALSP_Get_UNT_Pointer (UNT$Pointer, Attacker_ALSPid, id_found)
        if (id_found == $yes)
          {
           if (xUNT$Type$I == $Air$Code)
             int_params [$int_mission] = ALSP_Get_UNT_Mission (xUNT$Mission$I)
          }
       }
 
     alsp_message_kind_code = message_kind_code
    }
 
  param_flag [$int_kind] = alsp_message_kind_code
  int_params [$int_kind] = alsp_message_kind_code
 
  param_flag [$weapon_type] = weapon_code
  int_params [$weapon_type] = weapon_code
 
  param_flag [$int_salvo_num] = number_fired
  int_params [$int_salvo_num] = number_fired
 
  param_flag [$int_targets_engaged] = number_targeted
  int_params [$int_targets_engaged] = number_targeted
 
  if (message_kind_code == $report)     # if an interaction report message
    {
     if (alsp_message_kind_code != $report_ground_to_air)
       {
        param_flag [$int_hits] = $yes    # could be zero for reports
        int_params [$int_hits] = number_of_hits
       }
     else
       { # 2/11/94 - CBS cannot handle HITS() or TARGETS_ENGAGED() in the reports
        param_flag [$int_targets_engaged] = $no
       }
 
     if ((alsp_message_kind_code == $report_air_to_air) |         # smm 12/95 (E1527)
         (alsp_message_kind_code == $report_ground_to_air) |
         (alsp_message_kind_code == $report_ship_to_air))
        {
         param_flag [$int_kills] = $yes
         int_params [$int_kills] = number_killed
         param_flag [$int_hits] = $no
         param_flag [$int_targets_engaged] = $no
        }
     else if ((alsp_message_kind_code == $report_air_to_ship) |
              (alsp_message_kind_code == $report_ground_to_ship) |
              (alsp_message_kind_code == $report_ship_to_ship))
        {
         param_flag [$int_hits] = $yes
         int_params [$int_hits] = number_of_hits
         param_flag [$int_kills] = $no
         param_flag [$int_targets_engaged] = $no
        }
    }
  else
    {
     call Establish_Target_List (alsp_target_type, number_of_targets, target_list)
     param_flag [$target] = number_of_targets   # target list is already populated
     int_params [$target] = number_of_targets
    }
 
  if (BTT_index > 0)  # if an expanded target was identified
    {                 # clk 12/97 (E1911)
#      param_flag [$int_target_ref] = $yes    # this attribute is now a wrapper, since
                                             # CBS cannot handle the ":" - not mentioned
                                             # until the AAI.   jhm - 2/98 (E1911)
     expanded_target_len = 0
     v_expanded_target = ""
     BTT$Pointer$To (BTT_index)
 
     # changed the following if/else from creating a string for the target_ref
     # attribute to set up the appropriate sub-attribute - jhm 2/98 (E1911)
     if (lcomp_v(xBTT$TINnumber$C, "        ") == 0)  # if no TIN
       {
        param_flag[$int_target_ref_ben] = $yes
        call smovhn (xBTT$BEnumber1$C, $$MaxLit, c_expanded_target, expanded_target_len)
        call smovhn (xBTT$BEnumber2$C, $$MaxLit, c_expanded_target, expanded_target_len)
        strlens[$int_target_ref_ben] = expanded_target_len
        string_params[$int_target_ref_ben] = v_expanded_target
       }
     else  # a TIN was included
       {
        param_flag[$int_target_ref_ttn] = $yes
        call smovhn (xBTT$TINnumber$C, $$MaxLit, c_expanded_target, expanded_target_len)
        strlens[$int_target_ref_ttn] = expanded_target_len
        string_params[$int_target_ref_ttn] = v_expanded_target
 
        expanded_target_len = 0
        param_flag[$int_target_ref_ben] = $yes
        call smovhn (xBTT$BEnumber1$C, $$MaxLit, c_expanded_target, expanded_target_len)
        call smovhn (xBTT$BEnumber2$C, $$MaxLit, c_expanded_target, expanded_target_len)
        strlens[$int_target_ref_ben] = expanded_target_len
        string_params[$int_target_ref_ben] = v_expanded_target
 
        expanded_target_len = 0
        param_flag[$int_target_ref_ben_suffix] = $yes
        call smovvn ("NULL", c_expanded_target, expanded_target_len)
        strlens[$int_target_ref_ben_suffix] = expanded_target_len
        string_params[$int_target_ref_ben_suffix] = v_expanded_target
 
        expanded_target_len = 0
        param_flag[$int_target_ref_pin] = $yes
        call smovvn ("NULL", c_expanded_target, expanded_target_len)
        strlens[$int_target_ref_pin] = expanded_target_len
        string_params[$int_target_ref_pin] = v_expanded_target
 
        expanded_target_len = 0
        param_flag[$int_target_ref_loc] = $yes
        call smovvn ("NULL", c_expanded_target, expanded_target_len)
        strlens[$int_target_ref_loc] = expanded_target_len
        string_params[$int_target_ref_loc] = v_expanded_target
 
       }
    } #end BTT_index
 
  ALSP$CORID$Count = ALSP$CORID$Count + 1
 
  if (message_kind_code !=$report)
  {
  	param_flag[$int_correlation_id] = $yes
  	kk = 0
 	call smovi (ALSP$CORID$Count, c_corid, kk)
        call smovvn(":RE:", c_corid, kk)
	call smovi (ALSPActor$Number, c_corid, kk)
  	strlens[$int_correlation_id] = kk
  	string_params[$int_correlation_id] = v_corid
  }
 
  n_args = MAX_INTERACT_PARAM
 
  call ALSP_Send_Interact (message_form, n_args,
                           param_flag, int_params, f_params,
                           strlens, %%REF(string_params),
                           number_of_targets, target_list)
 
return
end

 
subroutine ALSP_Send_Posit_Engage (_
                UNT$Pointer,       # in:  attacker unit pointer
                weapon_type,       # in:  DEQ$Ident$I enumerations
                TBL$Pointer,       # in:  weapon characteristic pointer
                number_fired,      # in:  number of weapons launched/dropped
                target_lat,        # in:  targeted position latitude (radians)
                target_long,       # in:  targeted position longitutde (radians)
                target_code)       # in:  specified targeting code
################################################################################
#$%
#$% Purpose:    ALSP_Send_Posit_Engage sets up and sends an ALSP interaction
#$%             messages for engagements against position targets.
#$%
#$% Called By:  CMEPRO
#$%             ASM_at_Posit
#$%             Bomb_at_Posit
#$%
#$% Calls:      ALSP_Map_Outgoing_Weapon     <alsp_mapping.rat>
#$%             ALSP_Send_Interact
#$%             SMOV...
#$%             READ
#$%             RADTODMS     <alsp_receive_create.rat>
#$%             ALSP_Get_UNT_Mission   <alsp_send_updates.rat>
#$%
#$% Tables:     UNT     TBL (generic pointer)
#$%
#$% Date:       March 30, 1993
#$%
#$% Author:     Carol L. Kropp
#$%
#$% Modified:   Carol Kropp - Sept. 1993
#$%             Was previously ALSP_Send_CM_Posit_Engage, but made more
#$%             general for ASM, BOMB and GUN engagements against positions.
#$%             Also moved the postgame engagement recording to Log_Posit_Eng
#$%             in wgmdeng.rat.
#$%
#$%             Carol Kropp - 12/97 (E1911)
#$%             If the attacker has a non-zero BTTIndx then be or be/tin
#$%             was entered into the command, so setup the target_ref
#$%             attribute data.
#$%
#$%             John McCormick- 2/98 (E1911)
#$%             Added new flags/keywords to handle new target_ref
#$%             message format changed at AAI '98.
#$%
################################################################################
BBCommon
 
integer   UNT$Pointer, weapon_type, TBL$Pointer, number_fired
real      target_lat,  target_long
integer   target_code, lcomp_v
 
literal   weapon_name
integer   alsp_weapon_enumeration
integer   ALSP_Get_UNT_Mission    # integer function to determine enumeration
 
#$% Variables used for creation of arrays passed to ALSP msg format routine
integer  param_flag [MAX_INTERACT_PARAM], int_params [MAX_INTERACT_PARAM]
real     f_params[MAX_INTERACT_PARAM]
integer  strlens[MAX_INTERACT_PARAM]
vaxcharacter*MAX_STR_LEN string_params[MAX_INTERACT_PARAM]
integer  number_of_targets, target_list [$max_num_alsp_targets]
 
integer          BTT$Pointer               # clk 12/97 (E1911)
integer          expanded_target_len
Character        c_expanded_target[35]
VaxCharacter*35  v_expanded_target
equivalence (v_expanded_target, c_expanded_target)
 
Character       c_corid[16]
VaxCharacter*16  v_corid
equivalence (v_corid, c_corid)
 
integer  i, kk, UNT$ALSPId$I, CMC$Pointer, message_form  # SMM 3/00
literal  cstrip8, cstrip			     # SMM 3/00
 
  if (ALSP$Active == $yes)
    {
     weapon_name = xTBL$Name$C    # extract the first two words of the table
 
     for (i = 1; i <= MAX_INTERACT_PARAM; i = i + 1)   # clear the attribute flags
        param_flag [i] = 0
 
     UNT$ALSPid$I = xUNT$ALSPid$I                  # the attacking unit | weapon
     if (UNT$ALSPid$I <= 0)       # if for some reason the unit isn't registered
       {
        if (xUNT$Type$I == $CruiseMissile$Code)    # if any type of cruise missile
          {
           call ALSP_Update_Cruise_Missile (UNT$Pointer)
           UNT$ALSPid$I = xUNT$ALSPid$I
          }
       }
 
     param_flag [$int_firing] = UNT$ALSPid$I
     int_params [$int_firing] = UNT$ALSPid$I
 
     if (weapon_type == $ASM$Code | weapon_type == $Bomb$Code |
         weapon_type == $CruiseMissile$Code)
       {
        param_flag [$int_kind] = $air_to_ground
        int_params [$int_kind] = $air_to_ground
       }
     else if (weapon_type == $Mine$Code)
       {
        param_flag [$int_kind] = $mines
        int_params [$int_kind] = $mines
       }
     else if (weapon_type == $Gun$Code)
       {
        if (xUNT$Type$I == $Air$Code)      # if from an a/c
          {
           param_flag [$int_kind] = $air_to_ground
           int_params [$int_kind] = $air_to_ground
          }
        else
          {
           param_flag [$int_kind] = $ship_to_ground
           int_params [$int_kind] = $ship_to_ground
          }
       }
 
     call Establish_Target_List (target_code, number_of_targets, target_list)
     param_flag [$target] = number_of_targets   # target list is already populated
     int_params [$target] = number_of_targets
 
     param_flag [$int_lat] = 1
     f_params [$int_lat] = target_lat * 180.0 / $pi
 
     param_flag [$int_long] = 1
     f_params [$int_long] = target_long * 180.0 / $pi
 
     param_flag [$int_salvo_num] = number_fired
     int_params [$int_salvo_num] = number_fired
 
     if (weapon_type == $Gun$Code)        # clk 3/94 - Guns targeting positions have separate
       {                                  # enumerations from guns targeting units
        call ALSP_Map_Outgoing_Weapon (weapon_name, $Posit$GunCode, alsp_weapon_enumeration)
 
       }
     else
       call ALSP_Map_Outgoing_Weapon (weapon_name, weapon_type, alsp_weapon_enumeration)
 
     param_flag [$weapon_type] = alsp_weapon_enumeration
     int_params [$weapon_type] = alsp_weapon_enumeration
 
     param_flag [$int_mission] = 1
     if (xUNT$Type$I == $Air$Code)
        int_params [$int_mission] = ALSP_Get_UNT_Mission (xUNT$Mission$I)
     else
        int_params [$int_mission] = $mission_navy_strike
 
     BTT$Pointer$To  (xUNT$BTTIndx$I)
     if (BTT$Pointer$Valid)  # if an expanded target was identified
       {                     # clk 12/97 (E1911)
#       param_flag [$int_target_ref] = $yes    # this attribute is now a wrapper, since
                                               # CBS cannot handle the ":" - not mentioned
                                               # until the AAI.   jhm - 2/98 (E1911)
 
        expanded_target_len = 0
        v_expanded_target = ""
 
        # changed the following if/else from creating a string for the target_ref
        # attribute to set up the appropriate sub-attribute - jhm 2/98 (E1911)
        if (lcomp_v(xBTT$TINnumber$C, "        ") == 0)   # if no TIN
          {
           param_flag[$int_target_ref_ben] = $yes
           call smovhn (xBTT$BEnumber1$C, $$MaxLit, c_expanded_target, expanded_target_len)
           call smovhn (xBTT$BEnumber2$C, $$MaxLit, c_expanded_target, expanded_target_len)
           strlens[$int_target_ref_ben] = expanded_target_len
           string_params[$int_target_ref_ben] = v_expanded_target
          }
        else  # a TIN was included
          {
            param_flag[$int_target_ref_ttn] = $yes
            call smovhn (xBTT$TINnumber$C, $$MaxLit, c_expanded_target, expanded_target_len)
            strlens[$int_target_ref_ttn] = expanded_target_len
            string_params[$int_target_ref_ttn] = v_expanded_target
 
            expanded_target_len = 0
            param_flag[$int_target_ref_ben] = $yes
            call smovhn (xBTT$BEnumber1$C, $$MaxLit, c_expanded_target, expanded_target_len)
            call smovhn (xBTT$BEnumber2$C, $$MaxLit, c_expanded_target, expanded_target_len)
            strlens[$int_target_ref_ben] = expanded_target_len
            string_params[$int_target_ref_ben] = v_expanded_target
 
            # Kevin requested unused sub-attributes have NULL which is treated
            #  as null value by adaptor
            expanded_target_len = 0
            param_flag[$int_target_ref_ben_suffix] = $yes
            call smovvn ("NULL", c_expanded_target, expanded_target_len)
            strlens[$int_target_ref_ben_suffix] = expanded_target_len
            string_params[$int_target_ref_ben_suffix] = v_expanded_target
 
            expanded_target_len = 0
            param_flag[$int_target_ref_pin] = $yes
            call smovvn ("NULL", c_expanded_target, expanded_target_len)
            strlens[$int_target_ref_pin] = expanded_target_len
            string_params[$int_target_ref_pin] = v_expanded_target
 
            expanded_target_len = 0
            param_flag[$int_target_ref_loc] = $yes
            call smovvn ("NULL", c_expanded_target, expanded_target_len)
            strlens[$int_target_ref_loc] = expanded_target_len
            string_params[$int_target_ref_loc] = v_expanded_target
 
          }
       }
 
	ALSP$CORID$Count = ALSP$CORID$Count + 1
 
  	param_flag[$int_correlation_id] = $yes
  	kk = 0
 	call smovi (ALSP$CORID$Count, c_corid, kk)
    call smovvn(":RE:", c_corid, kk)
	call smovi (ALSPActor$Number, c_corid, kk)
	strlens[$int_correlation_id] = kk
  	string_params[$int_correlation_id] = v_corid
     message_form = $event_message	# SMM 3/00
     call ALSP_Send_Interact (message_form, MAX_INTERACT_PARAM,
                              param_flag, int_params, f_params,
                              strlens, %%REF(string_params),
                              number_of_targets, target_list)
    }   # end of ALSP is active, so send an interaction message
 
return
end

 
subroutine ALSP_Send_ASM_or_Bomb_Engage (_
                     UNT$Pointer,          # in - unit pointer of attacker
                     weapon_code,          # in - DEQ$Ident$I code number
                     TBL$Pointer,          # in - ASM or Bomb characteristic pointer
                     UNT2$Pointer,         # in - unit pointer of target
                     number_fired,         # in - the number of ASMs fired of Bombs dropped
                     target_priority)      # in - RESA target priority code
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled aircraft engages an ALSP ghosted
#$%             unit with air to surface missiles or bombs.
#$%
#$% Called By:  airbomb <wgmdeng.rat>
#$%
#$% Calls:      Echo..
#$%             ALSP_Map_Outgoing_Weapon     <alsp_mapping.rat>
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     TBL     MC
#$%
#$% Date:       Spet. 1993
#$%
#$% Author:     Carol L. Kropp
#$%
#$% Modified:   Carol Kropp - 10/95 (E1488)
#$%             When the target is a base, the lat and long of the base
#$%             must be included in the interaction message.
#$%
#########################################################################
BBCommon
 
integer  UNT$Pointer, weapon_code, TBL$Pointer, UNT2$Pointer
integer  number_fired, target_priority
 
literal  weapon_name
integer  alsp_weapon_code, MC$Pointer, alsp_target, idummy
integer  interaction_type
real     target_lat, target_long
integer  UNT2$Type$I   # SMM 3/00
literal  cstrip8       # SMM 3/00
 
    weapon_name = xTBL$Name$C
    if (trace$engage$exe != $no)
      {
        call echov  (" ghost targeted with ")
        call echoi  (number_fired)
        call echov  (" ")
        call echohn (weapon_name, $$MaxLit)
        if (weapon_code == $ASM$Code)
          call echov  (" ASMs ")
        else   # weapon_code == $Bomb$Code
          call echov  (" BOMBs ")
        call echor
      }
 
    call ALSP_Map_Outgoing_Weapon (weapon_name, weapon_code, alsp_weapon_code)
 
    alsp_target = 0
    if (weapon_code == $ASM$Code)              # If the weapon is an ASM,
      {                                        # need to check to see if the
       MC$Pointer = TBL$Pointer                # ASM is an ARM or not.  If it
       if (xMC$ARMflag$I == $yes)              # is an ARM, need to have RADAR
         alsp_target = $AirDefense$TargetCode  # in the target list.
      }
 
    if (alsp_target == 0)
      alsp_target = target_priority
 
    UNT2$Type$I = xUNT2$Type$I
    if (UNT2$Type$I == $ShoreBase$Code)
      {
       interaction_type = $air_to_ground
       target_lat  = xUNT2$TrueLatitude$F
       target_long = xUNT2$TrueLongitude$F
      }
    else #  if (UNT2$Type$I == $Surface$Code)
      {
       interaction_type = $air_to_ship
       target_lat  = 0.0
       target_long = 0.0
      }
 
    idummy = 0
    call ALSP_Send_Interaction_Msg (xUNT$ALSPid$I, xUNT2$ALSPid$I,
                                    alsp_target, $event_message, interaction_type,
                                    interaction_type, alsp_weapon_code,
                                    number_fired, idummy, idummy, idummy,
                                    target_lat, target_long, xUNT$BTTIndx$I,"")
 
return
end

 
subroutine ALSP_Send_SAM_Engage (UNT$Pointer,        # in - unit pointer of attacker
                                 MC$Pointer,         # in - SAM characteristic pointer
                                 UNT2$Pointer,       # in - unit pointer of target
                                 number_fired,       # in - number of SAMs to be fired
                                 number_targeted)    # in - number of units targeted
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled unit engages an ALSP ghosted
#$%             unit with SAMs.
#$%
#$% Called By:  sameng <wgmdeng.rat>
#$%
#$% Calls:      Echo..
#$%             ALSP_Map_Outgoing_Weapon     <alsp_mapping.rat>
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     MC
#$%
#$% Date:       Sept. 1993
#$%
#$% Author:     Carol L. Kropp
#$%
#########################################################################
BBCommon
 
integer  UNT$Pointer, MC$Pointer, UNT2$Pointer
integer  number_fired, number_targeted
 
integer  alsp_weapon_code
integer  idummy
real     fdummy
integer  UNT$Alspid$I  	     # SMM 3/00
literal  MC$Name$C, cstrip8  # SMM 3/00
 
    MC$Name$C = xMC$Name$C
    if (trace$engage$exe != $no)
      {
        call echov  (" (ghosted unit) ")
        call echov  (" with ")
        call echoi  (number_fired)
        call echov  (" ")
        call echohn (MC$Name$C, $$MaxLit)
        call echov  (" SAMs.")
        call echor
      }
 
    call ALSP_Map_Outgoing_Weapon (MC$Name$C, $SAM$Code, alsp_weapon_code)
 
    idummy = 0
    fdummy = 0.0
    UNT$ALSPid$I = xUNT$ALSPid$I
    call ALSP_Send_Interaction_Msg (UNT$ALSPid$I, xUNT2$ALSPid$I, 0,
                                    $event_message, $ship_to_air,
                                    $ship_to_air, alsp_weapon_code,
                                    number_fired, number_targeted,
                                    idummy, idummy, fdummy, fdummy, idummy,"")
 
return
end

 
subroutine ALSP_Send_Gun_Engage (UNT$Pointer,        # in - unit pointer of attacker
                                 TOR$Pointer,        # in - Gun characteristic pointer
                                 UNT2$Pointer,       # in - unit pointer of target
                                 number_rounds,      # in - number of rounds to be fired
                                 target_priority)    # in - target priority (RESA code)
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled unit engages an ALSP ghosted
#$%             unit with Guns.
#$%
#$% Called By:  guneng   <wgmdeng_guns.rin>
#$%             gun_fire <wgmdeng_guns.rin>
#$%
#$% Calls:      Echo..
#$%             ALSP_Map_Outgoing_Weapon     <alsp_mapping.rat>
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     TOR
#$%
#$% Date:       Oct. 1993
#$%
#$% Author:     Carol L. Kropp
#$%
#$% Modified:   Carol Kropp - 12/95 (E1528)
#$%             Changed it so that number_targeted is set to zero unless
#$%             the target is a flight of aircraft.  A value of zero
#$%             indicates not to include it in the message.
#$%
#########################################################################
BBCommon
 
integer  UNT$Pointer, TOR$Pointer, UNT2$Pointer
integer  number_rounds, target_priority
 
integer  alsp_weapon_code, number_targeted, interaction_type
integer  weapon_type_id_code
integer  idummy
real     fdummy
integer  UNT$Type$I, UNT2$Type$I, UNT$Alspid$I   # SMM 3/00
literal  TOR$Type$C, cstrip8			 # SMM 3/00
 
    TOR$Type$C = xTOR$Type$C
    if (trace$engage$exe != $no)
      {
        call echohn (xUNT$Name$C, $$MaxLit)
        call  echov  (" is attacking ")
        call echohn (xUNT2$Name$C, $$MaxLit)
        call echov  (" (ghosted unit) ")
        call echov  (" with ")
        call echoi  (number_rounds)
        call echov  (" rounds of ")
        call echohn (TOR$Type$C, $$MaxLit)
        call echor
      }
 
    UNT$Type$I = xUNT$Type$I
    UNT2$Type$I = xUNT2$Type$I
 
    weapon_type_id_code = $Gun$Code
    if ((UNT$Type$I == $Surface$Code | UNT$Type$I == $SubSurface$Code) &
         UNT2$Type$I == $Air$Code)
      {
       interaction_type = $ship_to_air
       number_targeted = 1
      }
    else if ((UNT$Type$I == $Surface$Code | UNT$Type$I == $SubSurface$Code) &
             (UNT2$Type$I == $Surface$Code | UNT2$Type$I == $SubSurface$Code))
      {
       interaction_type = $ship_to_ship
       weapon_type_id_code = $Ship$GunCode
       number_targeted = 0
      }
    else if (UNT$Type$I == $Air$Code & UNT2$Type$I == $Air$Code)
      {
       interaction_type = $air_to_air
       number_targeted = 1
      }
    else if (UNT$Type$I == $Air$Code &
            (UNT2$Type$I == $Surface$Code | UNT2$Type$I == $SubSurface$Code))
      {
       interaction_type = $air_to_ship
       number_targeted = 0
      }
    else if (UNT$Type$I == $Shorebase$Code & UNT2$Type$I == $Air$Code)
      {
       interaction_type = $ground_to_air
       number_targeted = 1
      }
    else if (UNT$Type$I == $Shorebase$Code &
            (UNT2$Type$I == $Surface$Code | UNT2$Type$I == $SubSurface$Code))
      {
       interaction_type = $ground_to_ship
       number_targeted = 0
      }
    else if (UNT$Type$I == $Air$Code)   # target must be a ground object
      {
       interaction_type = $air_to_ground
       number_targeted = 0
      }
    else if (UNT$Type$I == $Surface$Code)  # target must be a ground object
      {
       interaction_type = $ship_to_ground
       number_targeted = 0
      }
 
    call ALSP_Map_Outgoing_Weapon (TOR$Type$C, weapon_type_id_code, alsp_weapon_code)
 
    idummy = 0
    fdummy = 0.0
 
    UNT$ALSPid$I = xUNT$ALSPid$I
    call ALSP_Send_Interaction_Msg (UNT$ALSPid$I, xUNT2$ALSPid$I, target_priority,
                                    $event_message, interaction_type,
                                    interaction_type, alsp_weapon_code,
                                    number_rounds, number_targeted,
                                    idummy, idummy, fdummy, fdummy, xUNT$BTTIndx$I,"")
 
return
end

 
subroutine ALSP_Send_CM_Engage (UNT$Pointer,        # in - unit pointer of attacker
                                UNT2$Pointer,       # in - unit pointer of target
                                target_priority)    # in - target priority (RESA code)
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled cruise missile unit engages an ALSP
#$%             ghosted unit.
#$%
#$% Called By:  cmhit    <wgmdeng.rat>
#$%
#$% Calls:      Echo..
#$%             ALSP_Map_Outgoing_Weapon     <alsp_mapping.rat>
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     CMC
#$%
#$% Date:       Dec. 1993
#$%
#$% Author:     Carol L. Kropp
#$%
#$% Modified:   Carol Kropp - 11/94
#$%             Added for target priorities in taking bases.
#$%
#$%             Carol L. Kropp - 10/95 (E1488)
#$%             For air_to_ground engagements against bases, the lat
#$%             and long are now required.
#$%
#$%             Carol Kropp - 12/95 (E1528)
#$%             Changed it so that number_targeted is set to zero unless
#$%             the target is a flight of aircraft.  A value of zero
#$%             indicates not to include it in the message.
#$%
#########################################################################
BBCommon
 
integer  UNT$Pointer, UNT2$Pointer, target_priority
 
integer  CMC$Pointer
integer  alsp_weapon_code, interaction_type
integer  number_fired, number_targeted
real     target_lat, target_long
integer  UNT2$Type$I, IDUMMY, UNT$Alspid$I, UNT2$Alspid$I  # SMM 3/00
literal  cstrip8, CMC$Type$C				   # SMM 3/00
 
    if (trace$engage$exe != $no)
      {
        call echohn (xUNT$Name$C, $$MaxLit)
        call echov  (" is attacking ")
        call echohn (xUNT2$Name$C, $$MaxLit)
        call echov  (" (ghosted unit) ")
        call echor
      }
 
    CMC$Pointer = xUNT$CMCpntr$I
    CMC$Type$C = xCMC$Type$C
    call ALSP_Map_Outgoing_Weapon (CMC$Type$C, $CruiseMissile$Code, alsp_weapon_code)
    target_lat  = 0.0
    target_long = 0.0
    UNT2$Type$I = xUNT2$Type$I
    if (UNT2$Type$I == $Air$Code | UNT2$Type$I == $CruiseMissile$Code)
      {
       interaction_type = $air_to_air
       number_targeted = 1
      }
    else if (UNT2$Type$I == $Surface$Code | UNT2$Type$I == $SubSurface$Code)
      {
       interaction_type = $air_to_ship
       number_targeted = 0
      }
    else   # target must be a ground object
      {
       interaction_type = $air_to_ground
       target_lat  = xUNT2$TrueLatitude$F
       target_long = xUNT2$TrueLongitude$F
       number_targeted = 0
      }
 
    idummy = 0
    number_fired = 1
    UNT$ALSPid$I = xUNT$ALSPid$I
    if (UNT$ALSPid$I <= 0)       # if for some reason the cm isn't registered
      {
       call ALSP_Update_Cruise_Missile (UNT$Pointer)
       UNT$ALSPid$I = xUNT$ALSPid$I
      }
    UNT2$ALSPid$I = xUNT2$ALSPid$I
    call ALSP_Send_Interaction_Msg (UNT$ALSPid$I, UNT2$ALSPid$I,
                                    target_priority,
                                    $event_message, interaction_type,
                                    interaction_type, alsp_weapon_code,
                                    number_fired, number_targeted,
                                    idummy, idummy, target_lat, target_long,
                                    xUNT$BTTIndx$I,"")
return
end

 
subroutine ALSP_Send_Minefield_Engage (MFD$Pointer,  # in - unit pointer of attacker
                                     UNT2$Pointer) # in - unit pointer of target
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled minefield engages an ALSP
#$%             ghosted unit.
#$%
#$% Called By:  check_hit   <wgmdmine.rat>
#$%
#$% Calls:      Echo..
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     MFD
#$%
#$% Date:       Oct. 26, 2006
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
BBCommon
 
integer  MFD$Pointer, UNT2$Pointer, target_priority
 
integer  BOM$Pointer
integer  alsp_weapon_code, interaction_type
integer  number_fired, number_targeted
real     target_lat, target_long
integer  UNT2$Type$I, IDUMMY, MFD$Alspid$I, UNT2$Alspid$I, UNT$BTTIndx$i
literal  cstrip8, BOM$Name$C
 
if (trace$engage$exe != $no)
{
    call echoi (xMFD$Sequence$i)
    call echov  (" minefield is attacking ")
    call echohn (xUNT2$Name$C, $$MaxLit)
    call echov  (" (ghosted unit) ")
    call echor
}
 
BOM$Pointer$to xMFD$BOMIndx$I
call ALSP_Map_Outgoing_Weapon (XBOM$Name$C, $Mine$Code, alsp_weapon_code)
 
interaction_type = $ship_to_ship
number_targeted = 0
 
idummy = 0
number_fired = 1
 
# Ground target parameters
target_lat  = 0.0
target_long = 0.0
target_priority = 0
 
MFD$ALSPid$I = xMFD$ALSPid$I
UNT2$ALSPid$I = xUNT2$ALSPid$I
UNT$BTTIndx$i = 0
 
call ALSP_Send_Interaction_Msg (MFD$ALSPid$I, UNT2$ALSPid$I,
                                target_priority,
                                $event_message, interaction_type,
                                interaction_type, alsp_weapon_code,
                                number_fired, number_targeted,
                                idummy, idummy, target_lat, target_long,
                                UNT$BTTIndx$I,"")
return
end

 
subroutine ALSP_Send_Torpedo_Engage (UNT$Pointer,  # in - unit pointer of attacker
                                     UNT2$Pointer) # in - unit pointer of target
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled torpedo unit engages an ALSP
#$%             ghosted unit.
#$%
#$% Called By:  check_hit   <wgmdtorp.rat>
#$%
#$% Calls:      Echo..
#$%             Map_Outgoing_torpedo_type     <alsp_mapping.rat>
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     TRP
#$%
#$% Date:       June 27, 2006
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
BBCommon
 
integer  UNT$Pointer, UNT2$Pointer, target_priority
 
integer  TRP$Pointer
integer  alsp_weapon_code, interaction_type
integer  number_fired, number_targeted
real     target_lat, target_long
integer  UNT2$Type$I, IDUMMY, UNT$Alspid$I, UNT2$Alspid$I
literal  cstrip8, TRP$Name$C
 
if (trace$engage$exe != $no)
{
    call echohn (xUNT$Name$C, $$MaxLit)
    call echov  (" is attacking ")
    call echohn (xUNT2$Name$C, $$MaxLit)
    call echov  (" (ghosted unit) ")
    call echor
}
 
TRP$Pointer = xUNT$TRPpntr$I
call ALSP_Map_Outgoing_Weapon (XTRP$Name$C, $Torpedo$Code, alsp_weapon_code)
 
interaction_type = $ship_to_ship
number_targeted = 0
 
idummy = 0
number_fired = 1
 
# Ground target parameters
target_lat  = 0.0
target_long = 0.0
target_priority = 0
 
UNT$ALSPid$I = xUNT$ALSPid$I
UNT2$ALSPid$I = xUNT2$ALSPid$I
 
call ALSP_Send_Interaction_Msg (UNT$ALSPid$I, UNT2$ALSPid$I,
                                target_priority,
                                $event_message, interaction_type,
                                interaction_type, alsp_weapon_code,
                                number_fired, number_targeted,
                                idummy, idummy, target_lat, target_long,
                                xUNT$BTTIndx$I,"")
return
end

 
subroutine ALSP_Send_Dumb_Torpedo_Engage (UNT$Pointer,  # in - unit pointer of attacker
                                          UNT2$Pointer, # in - unit pointer of target
                                          TAT$Pointer)  # in - tor engage info
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled dumb torpedo unit engages an ALSP
#$%             ghosted unit.
#$%
#$% Called By:  check_hit   <wgmdtorp.rat>
#$%
#$% Calls:      Echo..
#$%             Map_Outgoing_torpedo_type     <alsp_mapping.rat>
#$%             ALSP_Send_Interaction_Msg
#$%
#$% Tables:     UNT     TOR     TAT
#$%
#$% Date:       June 27, 2006
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
BBCommon
 
integer  UNT$Pointer, UNT2$Pointer, target_priority
 
integer  TAT$Pointer
integer  TOR$Pointer, BOM$Pointer
integer  alsp_weapon_code, interaction_type
integer  number_fired, number_targeted
integer  tat$SourceALSPID$i
real     target_lat, target_long
integer  UNT2$Type$I, IDUMMY, UNT$Alspid$I, UNT2$Alspid$I
literal  cstrip8, TOR$Type$C
 
if (trace$engage$exe != $no)
{
    call echohn (xUNT$Name$C, $$MaxLit)
    call echov  (" is attacking ")
    call echohn (xUNT2$Name$C, $$MaxLit)
    call echov  (" (ghosted unit) ")
    call echor
}
 
if (Xtat$Ident$i == $Mine$code)
{
    BOM$Pointer$to  xTAT$BOMIndx$I
    call ALSP_Map_Outgoing_Weapon (XBOM$Name$C, $Mine$Code, alsp_weapon_code)
}
else
{
    TOR$Pointer$to  xTAT$TORIndx$I
    call ALSP_Map_Outgoing_Weapon (XTOR$Type$C, $Torpedo$Code, alsp_weapon_code)
}
 
interaction_type = $ship_to_ship
number_targeted = 0
 
idummy = 0
number_fired = xTAT$Fired$i
 
# Ground target parameters
target_lat  = 0.0
target_long = 0.0
target_priority = 0
 
tat$SourceALSPID$i = Xtat$SourceALSPID$i
 
UNT2$ALSPid$I = xUNT2$ALSPid$I
 
call ALSP_Send_Interaction_Msg (tat$SourceALSPID$i, UNT2$ALSPid$I,
                                target_priority,
                                $event_message, interaction_type,
                                interaction_type, alsp_weapon_code,
                                number_fired, number_targeted,
                                idummy, idummy, target_lat, target_long,
                                xUNT$BTTIndx$I,"")
return
end

 
subroutine Establish_Target_List (target_code,        # in:  RESA code
                                  number_of_targets,  # out:
                                  target_list)        # out: array of enumeration codes
#########################################################################
#$%
#$% Purpose:    Establish_Target_List populates the target_list based
#$%             upon the target_code.  The datum within target_list are
#$%             ALSP TARGET_PRIORITY(...) enumeration values.
#$%
#$% Called By:  ALSP_Send_Posit_Engage
#$%
#$% Calls:      None
#$%
#$% Tables:     None
#$%
#$% Date:       Feb. 1994
#$%
#$% Author:     Carol L. Kropp
#$%
#$% Modified:   Susan Miller 5/97 (E1704)
#$%             Added aircraft and maintenance target priorities
#$%
#########################################################################
BBCommon
 
integer   target_code, number_of_targets, target_list [$max_num_alsp_targets]
integer   i, j  # SMM 3/00
integer   target_data_array [$max_num_alsp_targets+2, $MaxNum$TargetCode]
data      target_data_array /_
    $AirDefense$TargetCode,  2, $alsp_target_ad,       $alsp_target_radar,
                                $no,
    $Armor$TargetCode,       3, $alsp_target_armor,    $alsp_target_lt_armr,
                                $alsp_target_trks_vn,
    $Artillery$TargetCode,   3, $alsp_target_artll,    $alsp_target_lt_armr,
                                $alsp_target_tank,
    $EngBridge$TargetCode,   1, $alsp_target_eng_brg,  $no,$no,
    $FixedBridge$TargetCode, 1, $alsp_target_fix_brg,  $no,$no,
    $Helicopters$TargetCode, 1, $alsp_target_parked_ac,$no,$no,
    $Infantry$TargetCode,    3, $alsp_target_dismntd,  $alsp_target_trks_vn,
                                $alsp_target_tank,
    $Road$TargetCode,        1, $alsp_target_rip,      $no,$no,
    $Trucks$TargetCode,      3, $alsp_target_trks_vn,  $alsp_target_lt_armr,
                                $alsp_target_tank,
    $Radar$TargetCode,       1, $alsp_target_radar,    $no,$no,
    $AcquisitionRadar$TargetCode, 1, $alsp_target_acq_radar, $no,$no,
    $CIWS$TargetCode,        1, $alsp_target_ciws,     $no,$no,
    $Comm$TargetCode,        1, $alsp_target_comm,     $no,$no,
    $FlightLine$TargetCode,  1, $alsp_target_flightline,$no,$no,
    $Fuel$TargetCode,        1, $alsp_target_fuel,     $no,$no,
    $Generic$TargetCode,     1, $alsp_target_generic,  $no,$no,
    $Personnel$TargetCode,   1, $alsp_target_personnel,$no,$no,
    $Shelters$TargetCode,    1, $alsp_target_shelters, $no,$no,
    $Stores$TargetCode,      1, $alsp_target_stores,   $no,$no,
    $Weapons$TargetCode,     1, $alsp_target_weapons,  $no,$no,
    $Radars$TargetCode,      1, $alsp_target_radars,   $no,$no,
    $Aircraft$TargetCode,    1, $alsp_target_aircraft, $no,$no,
    $Maintenance$TargetCode, 1, $alsp_target_maintenance,$no,$no/
 
  number_of_targets = 0
  for (i = 1; i <= $max_num_alsp_targets; i = i + 1)
     target_list [i] = 0
 
  if (target_code != 0)
    {
     # loop through the target rows
     for (i = 1; i <= $MaxNum$TargetCode; i = i + 1)
       {
        if (target_code == target_data_array [1,i])
          {
           number_of_targets = target_data_array [2,i]
           for (j = 1; j <= number_of_targets; j = j + 1)
              target_list [j] = target_data_array [j+2,i]
           break
          }
       }
    }
 
return
end

 
Subroutine ALSP_Send_Refuel_Request(_
                UNT$Pointer,        # in - unit pointer of a/c requesting fuel
                UNT2$Pointer,       # in - unit pointer of ghosted tanker
                type_of_message,    # in - type of message
                fuel_to_offload)    # in - amount of fuel
#########################################################################
#$%
#$% Purpose:    Sends out an ALSP interaction message when a RESA
#$%             owned/controlled aircraft requests a refuel from a
#$%             ghosted unit.
#$%
#$% Called By:  OREFUL <wgopord.rat>    FLTOPS <wgmdflt.rat>
#$%
#$% Calls:      ALSP_Send_Interact <transifsend.c>
#$%
#$% Tables:     UNT     ACC
#$%
#$% Date:       Sept 1995
#$%
#$% Author:     Susan Miller
#$%
#$% Modified:   Carol Kropp - 2/96 (E1467)
#$%             Replace UNT$FuelRemaining$I reference with new TNK
#$%             subtable.
#$%
#########################################################################
BBCommon
 
integer UNT$Pointer, UNT2$Pointer, type_of_message, Fuel_to_Offload
 
integer UNT$TNK$Index
integer fuelRemaining, MaxFuel, ACC$Pointer
real  real_fuel
 
integer  param_flag [MAX_INTERACT_PARAM], int_params [MAX_INTERACT_PARAM]
real     f_params[MAX_INTERACT_PARAM]
integer  strlens[MAX_INTERACT_PARAM]
vaxcharacter*MAX_STR_LEN string_params[MAX_INTERACT_PARAM]
integer  i, number_of_targets, target_list [$max_num_alsp_targets]
integer  message_form, n_args
 
  if (type_of_message == $supporting_units_request)
    {
     # get fuel requested, could be 0 if not specified in order
     real_fuel = float(Fuel_to_Offload)
 
     # get remaining fuel on board aircraft
     UNT$TNK$Index = AviationFuelTank$Code    # clk 2/96 (E1467)
     fuelRemaining = INT (xUNT$TNK$FuelRemaining$F)
 
     # get the max fuel for this aircraft
     ACC$Pointer = xUNT$AccPntr$I
     MaxFuel = xACC$MaxFuel$I
 
     # get the min amount of fuel to satisfy this aircraft
     if (real_fuel > 0.0)
        real_fuel = MIN(float(MaxFuel-fuelRemaining),real_fuel)
     else
        real_fuel = float(MaxFuel-fuelRemaining)
 
     # convert real pounds to integer kilograms
     Fuel_to_Offload = INT (real_fuel * lbs_to_kg)
    }
  else if (type_of_message == $pol_request)
    {
     Fuel_to_Offload = INT (xUNT$RefuelAmount$I * lbs_to_kg)
    }
 
  # clear the attribute flags
  for (i = 1; i <= MAX_INTERACT_PARAM; i = i + 1)
    param_flag [i] = 0
 
  param_flag [$int_firing] = xUNT$ALSPId$I
  int_params [$int_firing] = xUNT$ALSPId$I
 
  param_flag [$int_victim] = xUNT2$ALSPId$I
  int_params [$int_victim] = xUNT2$ALSPId$I
 
  param_flag [$int_kind] = type_of_message
  int_params [$int_kind] = type_of_message
 
  param_flag [$int_supply_type] = $alsp_supply_jp4
  int_params [$int_supply_type] = $alsp_supply_jp4
 
  param_flag [$int_supply_qty] = Fuel_to_Offload
  int_params [$int_supply_qty] = Fuel_to_Offload
 
  message_form = $event_message
  n_args = MAX_INTERACT_PARAM
  number_of_targets = 0
 
  call ALSP_Send_Interact (message_form, n_args,
                           param_flag, int_params, f_params,
                           strlens, %%REF(string_params),
                           number_of_targets, target_list)
 
return
end

 
Subroutine ALSP_Send_Refuel_Response(_
                UNT$Pointer,        # in - unit pointer of a/c requesting fuel
                UNT2$Pointer,       # in - unit pointer of tanker
                fuel_to_offload,    # in - amt of fuel (kg) requested in order
                response,           # in - response to request
                message_kind)       # in - type of message
#########################################################################
#$%
#$% Purpose:    ALSP_Send_Refuel_Response sends a response message to
#$%             a refuel request from a ghosted a/c to a RESA a/c tanker.
#$%
#$% Called By:  ALSP_Receive_Refuel_Interaction <alsp_receive_interact.rat>
#$%
#$% Calls:      ALSP_Send_Interact <transifsend.c>
#$%
#$% Tables:     UNT
#$%
#$% Date:       Oct 1995
#$%
#$% Author:     Susan Miller
#$%
#########################################################################
BBCommon
 
integer UNT$Pointer, UNT2$Pointer, fuel_to_offload, response
integer message_kind
 
integer  param_flag [MAX_INTERACT_PARAM], int_params [MAX_INTERACT_PARAM]
real     f_params[MAX_INTERACT_PARAM]
integer  strlens[MAX_INTERACT_PARAM]
vaxcharacter*MAX_STR_LEN string_params[MAX_INTERACT_PARAM]
integer  i, number_of_targets, target_list [$max_num_alsp_targets]
integer  message_form, n_args
 
  # clear the attribute flags
  for (i = 1; i <= MAX_INTERACT_PARAM; i = i + 1)
    param_flag [i] = 0
 
  param_flag [$int_firing] = xUNT2$ALSPId$I
  int_params [$int_firing] = xUNT2$ALSPId$I
 
  param_flag [$int_victim] = xUNT$ALSPId$I
  int_params [$int_victim] = xUNT$ALSPId$I
 
  param_flag [$int_kind] = message_kind
  int_params [$int_kind] = message_kind
 
  if (response == $no)
    {
     param_flag [$int_supply_reason] = $alsp_supply_none_available
     int_params [$int_supply_reason] = $alsp_supply_none_available
    }
  else
    {
     param_flag [$int_supply_type] = $alsp_supply_jp4
     int_params [$int_supply_type] = $alsp_supply_jp4
 
     param_flag [$int_supply_qty] = Fuel_to_Offload
     int_params [$int_supply_qty] = Fuel_to_Offload
    }
 
  message_form = $dispatch_message
  n_args = MAX_INTERACT_PARAM
  number_of_targets = 0
 
  call ALSP_Send_Interact (message_form, n_args,
                           param_flag, int_params, f_params,
                           strlens, %%REF(string_params),
                           number_of_targets, target_list)
 
return
end
