#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 02-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 dew     wglwep  Chg- additional entries loaded into BOM table for
###                          identification of WIRES and RBOC
###
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLWEP                        ECHOH                      BOM
#$%      GETSR  <WGLOAD>               ECHOR                      MC
#$%      GSLOTM <WGLOAD>                                          TOR
#$%
#$%
#$%
#$%   NOTES
#$%   =====
#$%
#$%   1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%   2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%   3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%   FLOWCHART FOR FILE WGLWEP
#$%   =========================
#$%
#$%   START0 <WARGAM> - WGLOAD - WGLWEP - GETSR *
#$%                                     - GSLOTM*
 

 
define(DEBUG,#)
 
     #**# temporary till fields defined:  NOT USED AS OF 5/10/89 jb
define (BOM$MnFailure$I         ,#)
define (BOM$MnRepair$I          ,#)
define (putBOM$MnFailure$I      ,#)
define (putBOM$MnRepair$I       ,#)
 
#define (putBOM$RoundsPerSalvo$I ,#)            # turned back on 1/13/90 DEW
 
include "bbctl.inc"
include "bbcode.inc"
include "bbbom.inc"
include "bbmc.inc"
include "bbtor.inc"
include "bbrad.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit NONE)          # MJC 5/1/2000 (E-2145)
 
Subroutine wglwep (reccnt,recsz,rec,$$tbl) #load in the weapons scenario file
 
#############################################################
#$%
#$% Purpose:   WGLWEP loads in the weapons scenario file.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOH      ECHOR      GETSR
#$%            GSLOTM
#$%
#$% Tables:    BOM        MC         TOR
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
#############################################################
 
BBcommon
 
integer reccnt,recsz,pnt
integer i,tempPK,temp_maxrange, kk
literal rec[1500]                                         #smn002
LitCharEquiv(extra,2,12)
integer $$TBL,K,ISTAT,
        KEPUWT,LOOP,LEN,
        RAD$Pointer,
        BOM$Pointer, BOM$Type$I,
        MC$Pointer, MC$Type$I,
        MC$Maxrange$I, MC$BND$Index,
        MC$Firerate$I, MC$Mtbf$I,
        MC$Timetorepair$I, MC$Weight$I,
        MC$Roundspersalvo$I, MC$Firecontrol$I,
        MC$Nbrsimengages$I, MC$Bursttype$I,
        MC$Burstdepth$I, MC$Yield$I,
        MC$Avspeed$I, MC$BND$altitude$I,
        MC$BND$probkill$I, MC$BND$maxrange$I,
        MC$Altitudeaboveattacker$I, MC$Altitudeabovepk$I,
        MC$Altitudebelowattacker$I, MC$Altitudebelowpk$I,
        MC$Abovemaxpk$I,
        TOR$Pointer, TOR$Ident$I, TOR$Maxrange$I,
        TOR$Maxef$I, TOR$Weight$I, TOR$Firerate$I,
        TOR$Maxalt$I, TOR$Speed$I, TOR$Salvo$I,
        TOR$Nbrsimengages$I, TOR$PH$Index, TOR$PH$range$I,
        TOR$Bursttype$I, TOR$Burstdepth$I, TOR$Yield$I,
        BOM$Weight$I, BOM$Roundspersalvo$I, BOM$Maxaltfeet$I,
        BOM$Droprange$I, BOM$MaxrangeYards$I, BOM$Bursttype$I,
        BOM$Burstdepth$I, BOM$Yield$I, BOM$Lifetimeminutes$I,
        BOM$Nbrpersistentdets$I, BOM$TargetCode$I
real    BOM$Probhit$F,
        MC$Probhit$F,
        MC$Probkill$F,
        TOR$Maxprobhit$F                                              # MJC 5/1/2000 (E-2145)
literal TOR$Type$C,
        BOM$Name$C,
        MC$Name$C                                                     # MJC 5/1/2000 (E-2145)
BBdeclare (MC$FullName$V, TOR$FullName$V, BOM$FullName$V)
# 4 arguments
 
define (Data$extra_data, DATA extra  [1,$use(Data_Count)])
define (Data$extra_name, DATA extraC [2,$use(Data_Count)])
define (Data$extra,
     $incr(Data_Count)
     Data$extra_data / @1 /
     Data$extra_name / @2 /
)
 
 
$set(Data_Count,0)
data$extra($wire$code, "WIRES")
data$extra($rboc$code, "RBOC ")
data$extra($wbuoy$code,"BIAS ")
data$extra($HFDF$code, "HFDF ")
data$extra($DECM$code, "DECM ")
data$extra($Blip$code, "BLIP ")
data$extra($fuel$code, "FUEL ")
data$extra($EOIR$code, "EOIR ")
data$extra($MAD$code,  "MAD  ")
data$extra($LIDAR$code,"LIDAR")
data$extra($ASMD$code, "ASMD ")
data$extra(0,          "     ")  # end of list indicator....
 
DEBUG call echov("<wglwep:")
 
#   open(unit   = 31,
 
#$% if bomb table
if ($$tbl == $$bom)                                                   #smn002
   {                                                                  #smn002
    #$% increment k while there is an entry in the bomb table
    for (k = 1; extra[1,k] != 0; k=k+1)                               #smn002
       {                                                              #smn002
        #$% get appropriate number of slots from bomb table
        call gslotm(BOM$POINTER,$$BOM,BOM$ENTRY,istat)                #smn002
 
        #$% get bomb type and save
        BOM$TYPE$I = extra[1,k]                                       #smn002
        PUTBOM$TYPE$I                                                 #smn002
 
        #$% get name of bomb and save
        BOM$NAME$C = extra[2,k]                                       #smn002
        PUTBOM$NAME$C                                                 #smn002
       }                                                              #smn002
   }                                                                  #smn002
#$% if file is empty (no record count)
if (reccnt <= 1)
   {
    #$% if missile table
    if ($$tbl == $$mc)
       {
        #$% send warning message to user
        call echov ("Weapons File Empty")
        call echor
       }
    return
   }
 
kepuwt = 0
 
for (loop = 2; loop <= reccnt; )        #for each record in the file
    {
    call getsr (loop,recsz,rec)        #get scenario record
    len = rec[1]                       #save length
 
    #$% if category of weapon is one of the following
    if(rec[5] == 'AAM' | rec[5] == 'ASM' |
       rec[5] == 'SAM' | rec[5] == 'CIWS'  )
        {
        ###################################################
        #$% if not in missile table, skip it
        if ($$tbl != $$mc) next
        ###################################################
 
        #$% get empty slot from missile table
        call gslotm (mc$pointer,$$mc,mc$entry,istat)
 
        #$% if table is full
        if(istat == $no)
          {
           #$% send warning message to user and get next entry
           call echov ("Missiles from ")
           call echohn (rec[3],$$MaxLit)
           call echov (" and on are not loaded.")
           call echor
           next
          }
 
        putMC$ARMflag$I (No)            ## force bit to no tpa 3/6/85
 
        MC$NAME$C = rec[3]                      # get missile name and save
        PUTMC$NAME$C
 
        for (pnt = 4; pnt <= len; pnt = pnt + 2)
            {
            if (rec[pnt] == 'CAT')
                {
                if      (rec[pnt+1] == 'AAM' ) MC$TYPE$I = $AAM$CODE
                else if (rec[pnt+1] == 'ASM' ) MC$TYPE$I = $ASM$CODE
                else if (rec[pnt+1] == 'SAM' ) MC$TYPE$I = $SAM$CODE
                else if (rec[pnt+1] == 'CIWS') MC$TYPE$I = $CIWS$CODE
                else                           mc$type$i = $null
                PUTMC$TYPE$I
                }
            else if (rec[pnt] == 'MXRNG')
                {
                #$% get max range and save
                MC$MAXRANGE$I = rec[pnt+1] +1           # +1 jb 1/22/87
                PUTMC$MAXRANGE$I                # (Note: scaling is 2)
                temp_maxrange = MC$MAXRANGE$I
                }
            else if (rec[pnt] == 'PH')
                {
                #$% get probability of hit and save
                MC$PROBHIT$F = rec[pnt+1]/100.      #also applies to prob kill
                PUTMC$PROBHIT$F
                }
            else if (rec[pnt] == 'PK')
                {
                #$% get probability of hit and save
                MC$PROBKILL$F = rec[pnt+1]/100.      #also applies to prob kill
                PUTMC$PROBKILL$F
                tempPK = INT(MC$ProbKill$F * 100.0)
 
                if (MC$Type$I == $AAM$Code)
                    {
                    #$% set default values just in case they are not set below
                    putMC$AltitudeAboveAttacker$I (100000) # ALTUP
                    putMC$AltitudeBelowAttacker$I (100000) # ALTDN
                    putMC$AltitudeAbovePK$I (tempPK) # ALTUP
                    putMC$AltitudeBelowPK$I (tempPK) # ALTDN
                    putMC$AboveMaxPK$I (tempPK)      # PKABV
                    } # end if AAM
 
 
                if ((MC$Type$I==$CIWS$Code)|(MC$Type$I==$SAM$Code))
                    {
                    #$% set default values just in case they are not set below
                    #$% ALT1, ALT2, ALT3, ALT4, ALT5
                    for (i = 1; i <= MC$BND$Slots; i = i + 1)
                        {
                        MC$BND$Index = i
                        if (i==1) putMC$BND$Altitude$I (100000)
                        else putMC$BND$Altitude$I (100000 + i)
                        putMC$BND$ProbKill$I (tempPK)
                        putMC$BND$MaxRange$I (temp_maxrange)
                        }
                    } # end if CIWS or SAM
                }
            else if (rec[pnt] == 'FRATE')
                {
                #$% get fire rate and save
                MC$FIRERATE$I = rec[pnt+1]
                PUTMC$FIRERATE$I
                }
            else if(rec[pnt] == 'NOMEN')
                {
                MC$Fullname$V = ""
                kk = 0
                call vmovh (rec[pnt+1], 24, MC$Fullname$V, kk)
                putMC$Fullname$V
                pnt = pnt + 2
                }
            else if(rec[pnt] == 'UDB')
              {
              if      (rec[pnt+1] == 'YES') putMC$UDB$i ($YES)
              else if (rec[pnt+1] != 'NO') putMC$UDB$i (!$NO)
              }
            else if (rec[pnt] == 'MNFAL')
                {
                #$% get mean time between failure and save
                MC$MTBF$I = rec[pnt+1]
                PUTMC$MTBF$I
                }
            else if (rec[pnt] == 'MNRPR')
                {
                #$% get mean time to repair and save
                MC$TIMETOREPAIR$I = rec[pnt+1]
                PUTMC$TIMETOREPAIR$I
                }
            else if (rec[pnt] == 'EPU')
                {
                #$% get EPU weight and save
                MC$WEIGHT$I = rec[pnt+1] * 100   # convert to pounds
                PUTMC$WEIGHT$I
                }
            else if (rec[pnt] == 'PAYLD')
                {
                #$% get warhead weight and save
                MC$WEIGHT$I = rec[pnt+1]         # already in pounds
                PUTMC$WEIGHT$I
                }
            else if (rec[pnt] == 'SALVO')
                {
                #$% get number of rounds per salvo & save
                MC$ROUNDSPERSALVO$I = rec[pnt+1]
                PUTMC$ROUNDSPERSALVO$I
                }
            else if (rec[pnt] == 'RADAR')
                {
                #$% call to find RADAR equipment
                call eqfind($$rad,rad$entry,rec[pnt+1],rad$pointer)
 
                if(rad$pointer != 0)
                    {
                    MC$FireControl$i = RAD$pointer$index
                    PUTMC$FireControl$i
 
#                    Fire control not used in engagement or detection models
#                    Air search radar is referenced instead  - joa 12/09
#                    if (xRAD$radartype$i != $firecontrol$code)
#                        {
#                        call echov (" Warning: The missile ")
#                        call echohn (rec[3],$$MaxLit)
#                        call echov (" calls for a NON-fire control radar")
#                        call echor
#                        }
                    }
                }
            else if (rec[pnt] == 'SIMUL')
                {
                #$% get number of simultaneous engagements & save
                MC$NBRSIMENGAGES$I = rec[pnt+1]
                PUTMC$NBRSIMENGAGES$I
                }
            else if (rec[pnt] == 'ARM')
                {
                #$% missile has ARM capability
                if (rec[pnt+1] == 'YES')      putMC$ARMflag$I (YES)
                else                            putMC$ARMflag$I (NO)
                }
            else if(rec[pnt] == 'BURST')                        #   4/3/85
                {                               # 1 Air; 2 Subsurf; 3 Surf
                if (rec[pnt+1]== 'AIR')
                    mc$BurstType$i = $Air$Code
                else if (rec[pnt+1]== 'SUBSU')
                    mc$BurstType$i = $SubSurface$Code
                else if (rec[pnt+1]== 'SURF')
                    mc$BurstType$i = $Surface$Code
 
                PUTMC$BurstType$i
                }
 
            else if(rec[pnt] == 'BDPTH')                        #   4/3/85
                {
                if (rec[pnt+1]== 'DEEP')
                    mc$BurstDepth$i = 1                 # FLAG as DEEP
                else mc$BurstDepth$i = 0                # default to SHALLOW
                PUTmc$BurstDepth$I
                }
 
            else if(rec[pnt] == 'YIELD')                        #   4/3/85
                {
                mc$YIELD$i = rec[pnt+1]
                PUTmc$YIELD$i
#               Nuclear$Capable = $yes                  # deleted 4/22/85
                }
 
            else if (rec[pnt] == 'VCRU')               # jb    1/21/87
                ##  get AVspeed for msl (as of 1/21/87, SAM only) jb
                {
                MC$AVspeed$I = rec[pnt+1] +30           # jb +30 1/22/87
                putMC$AVspeed$I                 # (Note: scaling is 60)
                }
 
            else if (rec[pnt] == 'ALT1')        # following 5 alt values
                {                               # added SMM 3/17/92
                #$% Get altitude band value and PK and save it
                MC$BND$Index = 1
                MC$BND$Altitude$i = rec[pnt+1]
                putMC$BND$Altitude$i
                MC$BND$ProbKill$i = rec[pnt+2]
                putMC$BND$ProbKill$i
                MC$BND$MaxRange$i = rec[pnt+3] + 1
                putMC$BND$MaxRange$i         # (Note: scaling is 2)
 
                #$% set default values just in case they are not set below
                #$% ALT2, ALT3, ALT4, ALT5
                for (i = 2; i <= MC$BND$Slots; i = i + 1)
                    {
                    MC$BND$Index = i
                    putMC$BND$Altitude$I (MC$BND$Altitude$i + i)
                    putMC$BND$ProbKill$I (tempPK)
                    putMC$BND$MaxRange$I (temp_maxrange)
                    }
 
                pnt = pnt + 2   #Increment the loop one extra
                }
            else if (rec[pnt] == 'ALT2')
                {
                #$% Get altitude band value and PK and save it
                MC$BND$Index = 2
                MC$BND$Altitude$i = rec[pnt+1]
                putMC$BND$Altitude$i
                MC$BND$ProbKill$i = rec[pnt+2]
                putMC$BND$ProbKill$i
                MC$BND$MaxRange$i = rec[pnt+3] + 1
                putMC$BND$MaxRange$i     # (Note: scaling is 2)
 
                #$% set default values just in case they are not set below
                #$% ALT3, ALT4, ALT5
                for (i = 3; i <= MC$BND$Slots; i = i + 1)
                    {
                    MC$BND$Index = i
                    putMC$BND$Altitude$I (MC$BND$Altitude$i + i)
                    putMC$BND$ProbKill$I (tempPK)
                    putMC$BND$MaxRange$I (temp_maxrange)
                    }
 
                pnt = pnt + 2   #Increment the loop one extra
                }
            else if (rec[pnt] == 'ALT3')
                {
                #$% Get altitude band value and PK and save it
                MC$BND$Index = 3
                MC$BND$Altitude$i = rec[pnt+1]
                putMC$BND$Altitude$i
                MC$BND$ProbKill$i = rec[pnt+2]
                putMC$BND$ProbKill$i
                MC$BND$MaxRange$i = rec[pnt+3] + 1
                putMC$BND$MaxRange$i     # (Note: scaling is 2)
 
                #$% set default values just in case they are not set below
                #$% ALT4, ALT5
                for (i = 4; i <= MC$BND$Slots; i = i + 1)
                    {
                    MC$BND$Index = i
                    putMC$BND$Altitude$I (MC$BND$Altitude$i + i)
                    putMC$BND$ProbKill$I (tempPK)
                    putMC$BND$MaxRange$I (temp_maxrange)
                    }
 
                pnt = pnt + 2   #Increment the loop one extra
                }
            else if (rec[pnt] == 'ALT4')
                {
                #$% Get altitude band value and PK and save it
                MC$BND$Index = 4
                MC$BND$Altitude$i = rec[pnt+1]
                putMC$BND$Altitude$i
                MC$BND$ProbKill$i = rec[pnt+2]
                putMC$BND$ProbKill$i
                MC$BND$MaxRange$i = rec[pnt+3] + 1
                putMC$BND$MaxRange$i         # (Note: scaling is 2)
 
                #$% set default values just in case they are not set below
                #$% ALT5
                MC$BND$Index = 5
                putMC$BND$Altitude$I (MC$BND$Altitude$i + 5)
                putMC$BND$ProbKill$I (tempPK)
                putMC$BND$MaxRange$I (temp_maxrange)
 
                pnt = pnt + 2   #Increment the loop one extra
                }
            else if (rec[pnt] == 'ALT5')
                {
                #$% Get altitude band value and PK and save it
                MC$BND$Index = 5
                MC$BND$Altitude$i = rec[pnt+1]
                putMC$BND$Altitude$i
                MC$BND$ProbKill$i = rec[pnt+2]
                putMC$BND$ProbKill$i
                MC$BND$MaxRange$i = rec[pnt+3] + 1
                putMC$BND$MaxRange$i         # (Note: scaling is 2)
                pnt = pnt + 2   #Increment the loop one extra
                }
 
            else if (rec[pnt] == 'ALTUP')   # added for AWSIM upgrade 3/17/92
                {
                #$% Get altitude differential max value for targets equal or
                #$% above the attacker, and PK, and save them
                mc$AltitudeAboveAttacker$i = rec[pnt+1]
                putmc$AltitudeAboveAttacker$i
                mc$AltitudeAbovePK$i = rec[pnt+2]
                putmc$AltitudeAbovePK$i
                pnt = pnt + 1   #Increment the loop one extra
                }
            else if (rec[pnt] == 'ALTDN')   # added for AWSIM upgrade 3/17/92
                {
                #$% Get altitude differential max value for targets below
                #$% the attacker, and PK, and save them
                mc$AltitudeBelowAttacker$i = rec[pnt+1]
                putmc$AltitudeBelowAttacker$i
                mc$AltitudeBelowPK$i = rec[pnt+2]
                putmc$AltitudeBelowPK$i
                pnt = pnt + 1   #Increment the loop one extra
                }
            else if (rec[pnt] == 'PKABV')   # added for AWSIM upgrade 3/17/92
                {
                #$% Get PK for targets above the attacker's maximum altitude,
                #$% and save it. Note that the altitude differential for
                #$% targets equal to or above the attacker still applies,
                #$% this is simply a degradation of capability.
                mc$AboveMaxPK$i = rec[pnt+1]
                putmc$AboveMaxPK$i
                }
            }
        }
    #$% else if array word is TORP or GUN
    else if(rec[5] == 'TORP' | rec[5] == 'GUN')
        {
        #$% if not in torpedo table, get next entry
        if ($$tbl != $$tor) next
 
        #$% get apprporiate number of slots from torpedo table
        call gslotm (tor$pointer,$$tor,tor$entry,istat)
 
        #$% if table is full
        if(istat == $no)
            {
                #$% display warning message to user and go to next entry
            if (rec[5] == 'GUN') call echov ("guns from ")
            else                 call echov ("torpedoes from ")
 
            call echohn (rec[3],$$MaxLit)
            call echov (" and on are not loaded.")
            call echor
            next
            }
 
        #$% get torpedo/gun name and save
        TOR$Type$C = rec[3]
        putTOR$Type$C
 
        putTOR$AutoLaunch$i (yes)       # default for upward compatibility
 
        ## start loop from CAT field
        for (pnt = 4; pnt <= len; pnt = pnt + 2)
            {
            if (rec[pnt] == 'CAT')
                #$% get Category and save
                {
                if      (rec[pnt+1] == 'GUN' ) TOR$Ident$I = $Gun$Code
                else if (rec[pnt+1] == 'TORP') TOR$Ident$I = $Torpedo$Code
                else                           TOR$Ident$I = $null
                putTOR$Ident$I
                }
            else if (rec[pnt] == 'MXRNG')
                ## get max range for torp/gun
                {
                TOR$MaxRange$I = rec[pnt+1]
                putTOR$MaxRange$I
                }
            else if (rec[pnt] == 'MAXEF')
                ##  get maximum effective range for gun
                {
                TOR$MaxEf$I = rec[pnt+1]
                putTOR$MaxEf$I
                }
            else if(rec[pnt] == 'NOMEN')
                {
                TOR$Fullname$V = ""
                kk = 0
                call vmovh (rec[pnt+1], 24, TOR$Fullname$V, kk)
                putTOR$Fullname$V
                pnt = pnt + 2
                }
            else if(rec[pnt] == 'UDB')
              {
              if      (rec[pnt+1] == 'YES') putTOR$UDB$i ($YES)
              else if (rec[pnt+1] != 'NO')  putTOR$UDB$i (!$NO)
              }
            else if (rec[pnt] == 'MNFAL')
                {
                ## no fail
                }
            else if (rec[pnt] == 'MNRPR')
                {
                ## no repair
                }
            else if (rec[pnt] == 'EPU')
                #$% get EPU weight for gun/torp and save
                {
                TOR$Weight$I = rec[pnt+1] * 100   # convert to pounds
                putTOR$Weight$I
                }
            else if (rec[pnt] == 'PAYLD')
                #$% get payload weight for gun and save
                {
                TOR$Weight$I = rec[pnt+1]         # already in pounds
                putTOR$Weight$I
                }
            else if (rec[pnt] == 'FRATE')
                #$% get torpedo firing rate and save
                {
                TOR$FireRate$I = rec[pnt+1]
                putTOR$FireRate$I
                }
            else if (rec[pnt] == 'MXALT')
                ## get max altitude/depth for torp
                {
                TOR$MaxAlt$I = rec[pnt+1]
                putTOR$MaxAlt$I
                }
            else if (rec[pnt] == 'VCRU')
                ##  get cruis speed for torp
                {
                if (TOR$Ident$I != $Gun$Code)
                    {
                    TOR$Speed$I = rec[pnt+1]
                    putTOR$Speed$I
                    }
                }
            else if (rec[pnt] == 'SALVO')
                ##  get salvo for gun
                {
                TOR$Salvo$I = rec[pnt+1]
                putTOR$Salvo$I
                }
            else if (rec[pnt] == 'SIMUL')
                ##  get simul for torp
                {
                TOR$NbrSimEngages$I = rec[pnt+1]
                putTOR$NbrSimEngages$I
                }
            else if (rec[pnt] == 'PH')               ## tpa 7/26/83
                ##  get PH for torp
                {
                TOR$MaxProbHit$F = rec[pnt+1]/100.
                putTOR$MaxProbHit$F
                }
            else if (rec[pnt] == 'RPH10')
                ##  get range for PH 100%,90%,80%...10%
                {
                #$% loop through probabilities of hit (100% - 10%)
                do TOR$PH$Index = 1, 10
                    {
                    #$% get max range for each hit probability & save
                    TOR$PH$Range$I = rec[pnt+TOR$PH$Index*2-1]
                    putTOR$PH$Range$I
                    }
                }
 
            else if(rec[pnt] == 'BURST')                        #   4/3/85
                {                               # 1 Air; 2 Subsurf; 3 Surf
                if (rec[pnt+1]== 'AIR')
                    TOR$BurstType$i = $Air$Code
                else if (rec[pnt+1]== 'SUBSU')
                    TOR$BurstType$i = $SubSurface$Code
                else if (rec[pnt+1]== 'SURF')
                    TOR$BurstType$i = $Surface$Code
 
                PUTTOR$BurstType$i
                }
 
            else if(rec[pnt] == 'BDPTH')                        #   4/3/85
                {
                if (rec[pnt+1]== 'DEEP')
                    TOR$BurstDepth$i = 1                # FLAG as DEEP
                else TOR$BurstDepth$i = 0               # default to SHALLOW
                PUTTOR$BurstDepth$I
                }
 
            else if(rec[pnt] == 'YIELD')                        #   4/3/85
                {
                TOR$YIELD$i = rec[pnt+1]
                PUTTOR$YIELD$i
#               Nuclear$Capable = $yes                  # deleted 4/22/85
                }
 
            else if (rec[pnt] == 'SUBS')   # Subsurface_only torpedoes
                {
                if (rec[pnt+1] == 'YES')  putTOR$Subs$i (yes)
                else                        putTOR$Subs$i (no)
                }                                       # 9/16/85 <SCC>
 
            else if (rec[pnt] == 'AUTO')   # Allow Autolaunch torpedoes
                {
                if (rec[pnt+1] == 'YES')  putTOR$AutoLaunch$i (yes)
                else                        putTOR$AutoLaunch$i (no)
                }                                       # 9/16/85 <SCC>
 
            }
 
        }
    #$% else if array word is BOMB or MINE
    else if(rec[5] == 'BOMB' | rec[5] == 'MINE')
        {
        #$% if not in bomb table, get next entry
        if ($$tbl != $$bom) next
 
        #$% get appropriate number of slots in bomb table
        call gslotm(BOM$POINTER,$$BOM,BOM$ENTRY,istat)
 
        #$% if table is full
        if(istat == $NO)
            {
            #$% send warning message to user and get next entry
            if (rec[5] == 'BOMB') call echov ("bombs from ")
            else                  call echov ("mines from ")
 
            call echohn (rec[3],$$MaxLit)
            call echov (" and on are not loaded.")
            call echor
            next
            }
 
        #$% get bomb/mine name and save
        BOM$NAME$C = rec[3]
        PUTBOM$NAME$C
 
        # Default Mine values
        if (rec[5] == 'MINE')
        {
            PUTBOM$TargetCode$i ($ShipAndSub$Code)
            PUTBOM$ProbHit$f (1.0)
        }
 
        ## start loop from CAT field
        for (pnt = 4; pnt <= len; pnt = pnt + 2)
            {
            if (rec[pnt] == 'CAT')
                #$% get Category and save
                {
                if      (rec[pnt+1] == 'BOMB') BOM$TYPE$I = $BOMB$CODE
                else if (rec[pnt+1] == 'MINE') BOM$TYPE$I = $MINE$CODE
                else                           BOM$TYPE$I = $NULL
 
                #$% save the type (bomb or mine)
                PUTBOM$TYPE$I
                }
            else if (rec[pnt] == 'EPU')
                #$% get EPU weight and save for bomb/mine
                {
                BOM$Weight$I = rec[pnt+1] * 100   # convert to pounds
                PUTBOM$Weight$I
                }
            else if (rec[pnt] == 'PAYLD')
                #$% get payload weight and save for mine
                {
                BOM$Weight$I = rec[pnt+1]       # in pounds
                PUTBOM$Weight$I
                }
            else if (rec[pnt] == 'PH' |
                     rec[pnt] == 'PD' )   # clk 1/97 (E1731) - added PD
                {                         # (prob detonation for mines)
                #$% get probability of hit and save for bomb
                BOM$PROBHIT$F = rec[pnt+1]/100.
                putBOM$ProbHit$F                ## tpa 4/21/83
                }
            else if (rec[pnt] == 'SALVO')   ## Not currently used TPA 8/18/83
                {
                #$% get number of rounds per salvo & save for bombs
                BOM$RoundsPerSalvo$I = rec[pnt+1]
                putBOM$RoundsPerSalvo$I
                }
            else if(rec[pnt] == 'NOMEN')
                {
                BOM$Fullname$V = ""
                kk = 0
                call vmovh (rec[pnt+1], 24, BOM$Fullname$V, kk)
                putBOM$Fullname$V
                pnt = pnt + 2
                }
            else if(rec[pnt] == 'TARGT')
            {
                if (rec[pnt+1]== 'SHIP')
                {
                    BOM$TargetCode$i = $Surface$Code
                }
                else if (rec[pnt+1]== 'SUB')
                {
                    BOM$TargetCode$i = $Sub$Code
                }
                else if (rec[pnt+1]== 'BOTH')
                {
                    BOM$TargetCode$i = $ShipAndSub$Code
                }
                putBOM$TargetCode$i
            }
            else if (rec[pnt] == 'MXALT')   # clk 1/97 (E1731) - Reinstated,
                {                           # max deployment altitude for mines
                 BOM$MaxAltFeet$I = rec[pnt+1]
                 putBOM$MaxAltFeet$I
                }
            else if (rec[pnt] == 'MXRNG')   ## TPA 5/23/85
                {
                #$% get max range
                BOM$DropRange$I = rec[pnt+1]
                putBOM$DropRange$I
                }
            else if (rec[pnt] == 'MXRNGYDS')   # Max effective range of mine
                {
                 BOM$MaxRangeYards$I = rec[pnt+1]
                 putBOM$MaxRangeYards$I
                }
            else if (rec[pnt] == 'MNFAL')   ## Not currently used TPA 8/18/83
                {
                #$% get mean time failure
                BOM$MnFailure$I = rec[pnt+1]
                putBOM$MnFailure$I
                }
            else if (rec[pnt] == 'MNRPR')   ## Not currently used TPA 8/18/83
                {
                #$% get mean repair
                BOM$MnRepair$I = rec[pnt+1]
                putBOM$MnRepair$I
                }
            else if(rec[pnt] == 'BURST')                        #   4/3/85
                {                               # 1 Air; 2 Subsurf; 3 Surf
                if (rec[pnt+1]== 'AIR')
                    BOM$BurstType$i = $Air$Code
                else if (rec[pnt+1]== 'SUBSU')
                    BOM$BurstType$i = $SubSurface$Code
                else if (rec[pnt+1]== 'SURF')
                    BOM$BurstType$i = $Surface$Code
 
                PUTBOM$BurstType$i
                }
 
            else if(rec[pnt] == 'BDPTH')                        #   4/3/85
                {
                if (rec[pnt+1]== 'DEEP')
                    BOM$BurstDepth$i = 1                # FLAG as DEEP
                else BOM$BurstDepth$i = 0               # default to SHALLOW
                PUTBOM$BurstDepth$I
                }
 
            else if(rec[pnt] == 'YIELD')                        #   4/3/85
                {
                BOM$YIELD$i = rec[pnt+1]
                PUTBOM$YIELD$i
                }
 
            else if (rec[pnt] == 'LIFE')    # clk 1/97 (E1731) - Maximum
                {                           # lifetime of persistent effects
                 BOM$LifetimeMinutes$I = rec[pnt+1]
                 putBOM$LifetimeMinutes$I
                }
            else if (rec[pnt] == 'MXDET')   # clk 1/97 (E1731) - Maximum
                {                           # nbr of persistent detonations
                 BOM$NbrPersistentDets$I = rec[pnt+1]
                 putBOM$NbrPersistentDets$I
                }
            }
        }
    #$% else if array word is anything else
    else                                                    # dew 4-DEC-91
        {
        call echov ("The weapon ")
        call echohn (rec[3],$$MaxLit)
        call echov (" of type ")
        call echohn (rec[5],$$MaxLit)
 
        call echov (" is not loaded.")
        call echor
        }
    }
 
return
end
