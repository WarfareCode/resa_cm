 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine navaid
 
      ##################################################
      #$%
      #$% Purpose:   NAVAID permits the user to
      #$%            interact with the naviga-
      #$%            tional aids data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Dana Wills
      #$%
      ##################################################
 
#
#     New NAVAGATIONAL AID
#
#
    IMPLICIT NONE   # jb    E2145   4/4/00
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom,  6)     # The number of entries in the defCOM table.
define (zdctyp, 64)     # The size of the deftyptable.
define (zdcfld,148)     # The size of the defFLD table.
define (zdsarg,  8)     # The size of entries in the defARG table.
define (zdcarg, 11)     # The number of entries in the defARG table.
define (zdcfmt,  3)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      Integer    actcnt # jb    E2145   4/4/00
      Integer    m
 
##      Note:  See also declarations in BLSUB1.rin..
 
      character  line[ARB]
 
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA  objectC/"    Navi","gational"," Aid"," "/
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of navigational device
 DATA$com("CAT  ",  1)      # Type of navigational device
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("MNFAL",- 1)      # Mean time between failures # REH 05/88
 DATA$com("MNRPR",- 1)      # Mean time to repair # REH 05/88
 
 
 $set (Data_Count,0)
 DATA$typ("HDG  ",  1)      # HEADING
 DATA$typ(    "HERR ",  1)      # std dev of heading error
 DATA$typ("SPD  ",  1)      # SPEED
 DATA$typ(    "SERR ",  1)      # std dev of Speed sensor error
 DATA$typ("DR   ",  6)      # DR
 DATA$typ(    "LTRSD",  1)      # Latitude bias error rate
 DATA$typ(    "LGRSD",  1)      # Longitude bias error rate
 DATA$typ(    "LTHFX",  1)      # Fixed human error comp of lat
 DATA$typ(    "LTHSD",  1)      # Std dev human error comp of lat
 DATA$typ(    "LGHFX",  1)      # Fixed human error comp of long
 DATA$typ(    "LGHSD",  1)      # Std dev human error comp of long
 DATA$typ("OMEGA",  6)      # OMEGA
 DATA$typ(    "LTESD",  1)      # Std dev Latitude bias error
 DATA$typ(    "LGESD",  1)      # Std dev Longitude bias error
 DATA$typ(    "LTHFX",  1)      # Fixed human error comp of lat
 DATA$typ(    "LTHSD",  1)      # Std dev human error comp of lat
 DATA$typ(    "LGHFX",  1)      # Fixed human error comp of long
 DATA$typ(    "LGHSD",  1)      # Std dev human error comp of long
 DATA$typ("TRANS",  6)      # TRANS
 DATA$typ(    "LTESD",  1)      # Std dev Latitude bias error
 DATA$typ(    "LGESD",  1)      # Std dev Longitude bias error
 DATA$typ(    "LTHFX",  1)      # Fixed human error comp of lat
 DATA$typ(    "LTHSD",  1)      # Std dev human error comp of lat
 DATA$typ(    "LGHFX",  1)      # Fixed human error comp of long
 DATA$typ(    "LGHSD",  1)      # Std dev human error comp of long
 DATA$typ("OTRAN",  6)      # OMEGA/TRANS
 DATA$typ(    "LTESD",  1)      # Std dev Latitude bias error
 DATA$typ(    "LGESD",  1)      # Std dev Longitude bias error
 DATA$typ(    "LTHFX",  1)      # Fixed human error comp of lat
 DATA$typ(    "LTHSD",  1)      # Std dev human error comp of lat
 DATA$typ(    "LGHFX",  1)      # Fixed human error comp of long
 DATA$typ(    "LGHSD",  1)      # Std dev human error comp of long
 
 
 
 $set (Data_Count,0)
 DATA$fld1("NAME ", 1, 1,"ALPHA", 1,"Name of ","navigati","onal dev","ice   ")
 DATA$fld1("CAT  ", 1, 1,"CAT  ", 1,"Category"," of navi","gational"," aid  ")
 DATA$fld3("NOMEN", 3,-3,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("LTRSD", 1, 2,"yd/mn", 1,"Latitude"," bias er","ror rate","      ")
 DATA$fld1("LGRSD", 1, 2,"yd/mn", 1,"Longitud","e bias e","rror rat","e     ")
 DATA$fld1("HERR ", 1, 2,"HDeg ", 1,"Heading ","sensor e","rror (de","g/100)")
 DATA$fld1("SERR ", 1, 2,"HKnot", 1,"Speed se","nsor err","or (knot","s/100)")
 DATA$fld1("LTHFX", 1, 2,"yds2 ", 1,"Fixed hu","man err ","comp of ","lat   ")
 DATA$fld1("LTHSD", 1, 2,"yds1 ", 1,"Random h","uman err"," comp of"," lat  ")
 DATA$fld1("LGHFX", 1, 2,"yds2 ", 1,"Fixed hu","man err ","comp of ","long  ")
 DATA$fld1("LGHSD", 1, 2,"yds1 ", 1,"Random h","uman err"," comp of"," long ")
 DATA$fld1("LTESD", 1, 2,"yds1 ", 1,"Latitude"," bias er","ror     ","      ")
 DATA$fld1("LGESD", 1, 2,"yds1 ", 1,"Longitud","e bias e","rror    ","      ")
 DATA$fld1("MNFAL", 1, 2,"MINUT", 1,"Mean tim","e betwee","n failur","es    ")
 DATA$fld1("MNRPR", 1, 2,"MINUT", 1,"Mean tim","e to rep","air     ","      ")
 
 
 
 $set (Data_Count,0)
 DATA$arg8N("ALPHA",6000,0,0)                 # Alphanumeric -- Anything
 DATA$arg8C("CAT  ",8006, "HDG  ","SPD  ","DR   ","OMEGA","TRANS","OTRAN")
 DATA$arg8N("yd/mn",2002,  0,  100)           # Numeric Range 0 ->    100
 DATA$arg8N("HDeg ",2002,  0, 1000)           # Numeric Range 0 ->   1000
 DATA$arg8N("HKnot",2002,  0, 5000)           # Numeric Range 0 ->   5000
 DATA$arg8N("yds1 ",2002,  0,20000)           # Numeric Range 0 ->  20000
 DATA$arg8N("yds2 ",2002,  0,100000)          # Numeric Range 0 -> 100000
 DATA$arg8N("Text ",9024)                     # Alphanumeric string (24 bytes)
 DATA$arg8N("...  ",9000)                     # Alphanumeric string filler
 DATA$arg8C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg8N("MINUT",2002,  0,10000)           # Numeric Range 0 -> 10000
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#                NONE
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
 
		  #***********************************************************
		  #***********************************************************
		  if (argtyp<=0)          #*** SPECIAL ***
		   {
		   #
		   # increment PTRCNT for each additional input word processed
		   #
		   # on error: increment VERR and NEXT to the next loop
		   #
		    #*********************************************************
		    if (argn==1)                          # Special Test 1
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==2)                     # Special Test 2
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==3)                     # Special Test 3
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    #*********************************************************
 
		    next
		   }
 
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
  actcnt = 0
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
 
 
 
 
# test results ......
 
 
 
 
 
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
