 
define (number_args, 5)         # prescript file name, outfile, replenish flag
 
undefine write   # use the standard fortran write statement
undefine read
undefine err
 
program ATO_platform_sum
#########################################################################
#$%
#$% Purpose:    This program summaries allocated resources for platform
#$%
#$% Calls:      initr4         <rlib.olb>
#$%             read_arguments
#$%             ctoi
#$%             remark
#$%             exit
#$%             smov..
#$%             echo..
#$%             write
#$%             close
#$%
#$% Tables:     global variables
#$%
#$% Date:       Aug 2012
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
implicit none
 
integer          arg_len[number_args]
vaxcharacter*80  args[number_args], params
 
integer kk
 
vaxcharacter*80  ato_root
vaxcharacter*80  atoid
vaxcharacter*80  atoid_update
vaxcharacter*80  infile
vaxcharacter*80  outfile
 
vaxcharacter*80  atoid_dir
 
call initR4
 
call Read_Arguments (number_args, args, arg_len, params)
 
ato_root     = args[1][1:arg_len[1]]
atoid        = args[2][1:arg_len[2]]
atoid_update = args[3][1:arg_len[3]]
infile       = args[4][1:arg_len[4]]
outfile      = args[5][1:arg_len[5]]
 
# Get ato directory
atoid_dir = ""
kk = 0
call smovvn(ato_root, atoid_dir, kk)
call smovv("/", atoid_dir, kk)
call smovvn(atoid, atoid_dir, kk)
call smovv("/",atoid_dir, kk)
call smovvn(atoid_update, atoid_dir, kk)
call smovv("/", atoid_dir, kk)
 
call do_plat_sum (atoid_dir, infile, outfile)
 
End

Subroutine do_plat_sum (atoid_dir, infile, outfile)
implicit none
 
vaxcharacter*(*)  atoid_dir
vaxcharacter*(*)  infile
vaxcharacter*(*)  outfile
 
vaxcharacter*80  sumfile
vaxcharacter*80  tmpfile
 
 
integer k, kk, i
integer ctoi, itoc
integer name_len, ilen
integer return_val
integer t_len
integer np
 
integer my_platform_len
integer my_actype_len
integer my_item_len
 
vaxcharacter    a_line*120
vaxcharacter    t_line_v*120
character       t_line[120]
equivalence     (t_line, t_line_v)
vaxcharacter    spaces*100
vaxcharacter    w1*120
vaxcharacter    w2*120
vaxcharacter    w3*120
vaxcharacter    w4*120
vaxcharacter    w5*120
vaxcharacter    xx*120
 
vaxcharacter    my_linetype*8
vaxcharacter    my_platform*8
vaxcharacter    my_nac*8
vaxcharacter    my_actype*8
vaxcharacter*8  my_qty
vaxcharacter*8  my_item
 
vaxcharacter    cur_platform*8
vaxcharacter    cur_linetype*8
vaxcharacter    cur_item*8
vaxcharacter    tqty*4
 
integer         cur_qty
spaces = " "
 
sumfile = ""
kk = 0
call smovvn(atoid_dir, sumfile, kk)
call smovvn(infile, sumfile, kk)
 
open(unit    =   10,                            #open input file
     file    =   sumfile,
     status  =  'old',
     access  =  'sequential',
     recl    =   120,
     iostat  =   return_val)
 
if (return_val != 0)
{
    print *, "summary file not found"
    return
}
 
tmpfile = ""
kk = 0
call smovvn(atoid_dir, tmpfile, kk)
call smovvn(outfile, tmpfile, kk)
 
open(unit    =   11,                            #open output file
     file    =   tmpfile,
     status   =  'unknown',
     access  =  'sequential',
     recl    =   120,
     iostat  =   return_val)
 
if (return_val != 0)
{
    print *, "mission summary output file cannot be opened"
    return
}
 
cur_platform = " "
 
repeat
{
    #read ATO summary line
    read (10,9001,end=8002,err=8001) a_line
    9001 format (A)
    call Trim_Compress (a_line, t_line_v, kk)
    t_len = kk
	call smov(EOS, t_line, kk)
    call upper (t_line)
	t_line_v[kk:kk] = " "
 
9000    format(I4)
9002    format(1h ,A)
 
    if (t_len == 0) next        # skip Blank line
 
    call str_element (w1, 0, " ", t_line_v )
    call str_element (w2, 1, " ", t_line_v )
    call str_element (w3, 2, " ", t_line_v )
    call str_element (w4, 3, " ", t_line_v )
    call str_element (w5, 4, " ", t_line_v )
 
    my_platform = w1
    my_linetype = w2
    my_item     = w3
    my_qty      = w4
 
    if (my_platform != cur_platform)
    {
        if (cur_platform != " ")
        {
            write (unit=tqty, fmt=9000) cur_qty
            a_line = cur_platform // " " //_
                     cur_linetype // " " //_
                     cur_item     // " " //_
                     tqty         // char(EOS)
            write (11,9002) a_line[1:len_trim(a_line)]
        }
        cur_platform = my_platform
        cur_linetype = my_linetype
        cur_item = my_item
        cur_qty = 0
    }
    if (my_linetype != cur_linetype)
    {
        write (unit=tqty, fmt=9000) cur_qty
        a_line = cur_platform // " " //_
                 cur_linetype // " " //_
                 cur_item     // " " //_
                 tqty         // char(EOS)
        write (11,9002) a_line[1:len_trim(a_line)]
        cur_linetype = my_linetype
        cur_item = my_item
        cur_qty = 0
    }
    if (my_item != cur_item)
    {
        write (unit=tqty, fmt=9000) cur_qty
        a_line = cur_platform // " " //_
                 cur_linetype // " " //_
                 cur_item     // " " //_
                 tqty         // char(EOS)
        write (11,9002) a_line[1:len_trim(a_line)]
        cur_linetype = my_linetype
        cur_item = my_item
        cur_qty = 0
    }
    k = 1
    cur_qty = cur_qty + ctoi(%%ref(my_qty), k)
}
repeat
{
    break
 
    8001 continue       # Comes here for ERROR on open or READ
}
repeat
{
    break
 
    8002 continue       # Comes here for END
}
 
write (unit=tqty, fmt=9000) cur_qty
a_line = cur_platform // " " //_
         cur_linetype // " " //_
         cur_item     // " " //_
         tqty         // char(EOS)
write (11,9002) a_line[1:len_trim(a_line)]
 
close (unit=10)
close (unit=11)
 
return
end
 
