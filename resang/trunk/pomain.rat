 
#####   version 3.1 converted to run on the VAX11/780   dated-20mar82
 
#####   version 3.1  dated-  7apr81
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      PRTORD                       SMOV                        NONE
#$%      PUTORD                       SMOVH
#$%      FINIT                        SMOVHN
#$%      GETLIN                       SMOVI
#$%      FGTASK <FPRINT>              ECHOH
#$%      SYNBLD < PLAY >              ECHOR
#$%      ORDINT <GPLAYR>              WGCAT
#$%                                   OPEN
#$%                                   ANALYZ
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE SEE POMAIN.HIR
#$%    =================================
#$%
#$%
#$%
 
undefine read
undefine write
undefine err
 
include "bbcode.inc"
include "macros.inc"
include "ascii.inc"
include "plplay.inc"
include "hscmd.inc"
 
define (ForceCommon,
    implicit none       # implicit literal (c) # MJC 6/5/2K (E2145)
    literal rec[cmd$maxlength],nscn
    common /CForce/nscn,rec
    )
 
define ($yes,1)
define ($no,0)
 

program prtord
 
########################################################
#$%
#$% Purpose:   PRTORD produces a listing of the
#$%            orders entered and saved in a
#$%            file during the game execution.
#$%
#$% Called By: None
#$%
#$% Calls:     FINIT      PUTORD     ECHOFF
#$%
#$% Tables:    None
#$%
#$% Date:      FEB 82
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
ForceCommon
 
 
# begin logic   ############################################################
 
# call echoff
 
 call initr4
 
 call finit                             # get file names, old/new, etc.
 
 #$% print all prestored orders
 call putord
 
 call endr4
 end
 

 
 
subroutine putord
 
########################################################
#$%
#$% Purpose:   PUTORD translates the saved game
#$%            orders from lexical codes to text
#$%            and outputs the text data.
#$%
#$% Called By: PRTORD
#$%
#$% Calls:     FGTASK     SMOV       SMOVH
#$%            SMOVHN     SMOVI      SYNBLD
#$%
#$% Tables:    None
#$%
#$% Date:      JAN 82
#$%
#$% Author:    Dana Wills
#$%
#$% Modified:  Alex Vagus - 2/97 (H1059)
#$%            Added station number, so view and station
#$%            number are provided in the pga file.
#$%
#$%            Carol Kropp - 2/97 (H1059)
#$%            Adjusted formatting, so that columns are
#$%            formed, changed smovi calls to smovib and
#$%            smovh calls to smovv.
#$%
########################################################
 
ForceCommon
 
integer K,
        NREC,
        IVIEW,
        ISTATION,
        IND,
        J,
        ISNUMBER,
        M                               # MJC 5/31/2K (E2145)
BBDeclare  (CMD$ELM$Index)              # MJC 5/31/2K (E2145)
literal CSTRIP8                         # MJC 6/1/2K (E2145)
 
character itaskn[10],dest[arith($max$args,*,8)]
double precision cof
integer len,imin,itime,kargs,iseq,nord,ncnt
literal iaddr,xlex[cmd$elm$slots]
 
cmd$record$definition
 
9000 format ("1")
9003 format ("     ",250a1)
 
write (35,9000)
 
for (k=1; ; k=k+1)
   {
    nrec = k+1
 
    #$% get line of input from file with saved orders
    read (31,REC=nrec,ERR=8000) cmd$record
 
    ##type 9999,(cmd$record[m],m=16,21)
    ##9999 format (2x,12(z8.8,1x))
    #9999 format (2x,i4,2x,7(2z4.4,1x)/,8x,10(2z4.4,1x),/8x,10(2z4.4,1x))
 
    #$% get file
    iview = xcmd$view$i
    istation = xCMD$StationNumber$I     # av 2/97 (H1059)
 
    #$% if end of file, break
    if (iview <= 0) break
 
    for (cmd$elm$index=1; cmd$elm$index <= cmd$elm$slots; cmd$elm$index=cmd$elm$index+1)
        {
         xlex[cmd$elm$index] = xcmd$elm$word$c
        }
 
    ##type 9998,(xlex[m],m=8,11)
    ##9998 format (2x,6(z16.16,2x))
 
    #$% get game minute
    imin  = xlex[1]
    #$% get address
    iaddr = xlex[$stk$addressee + 1]
    #$% get time
    itime = xlex[$stk$start + 1]
    #$% get number of arguments
    kargs = xlex[$stk$length + 1]-6
    #$% get number of order in sequence
    iseq  = xlex[$stk$seq + 1]
    #$% get order number
    nord  = xlex[$stk$nord + 1]
    #$% get number of orders in the sequence
    ncnt  = xlex[$stk$cnt + 1]
 
    #$% if not the first order in a sequence, set ind = no
    if (iseq != 1) ind = $yes
    else           ind = $no
 
    len = 0
 
    #$% move record into array (order number, view, station amd game minute)
    call smovib (nrec,6,dest,len)           #E2355 from 5 sig digits to 6, ufl03
    call smovv  (")  v",dest,len)           # columns are formed - clk 2/97 (H1059)
    call smovib (iview,2,dest,len)
    call smovv  ("  s",dest,len)
    call smovib (istation,2,dest,len)
    call smovv  ("  m",dest,len)
    call smovi (imin,dest,len)
    call smovv ("  ",dest,len)
 
    j = 0
    cof = $blanklit
    #$% if more than one set of orders
    if (ncnt != 1)
       {
        #$% move number of order in sequence into array
	call smovi (iseq,cof,j)
	call smovv (" of ",cof,j)
	call smovi (ncnt,cof,j)
       }
 
    call smovh (cof,8,dest,len)
 
    #$% if refering back to the proir addressee (no current address given)
    if (iaddr == -1)
       {
        #$% move "FOR" and the last addressee into array
	call smovv (" FOR ",dest,len)
	call smovv ("(prior addressee)",dest,len)
       }
    #$% else if a new addressee is entered
    else if (iaddr == 0)
       {
	continue
       }
    #$% and addressee is a task number
    else if ($isNumeric(iaddr))
       {
        #$% format task number to X.X.X.X and move FOR and formatted
        #$% task number into array
	call fgtask (int(iaddr),itaskn)
	call smovv (" FOR ",dest,len)
	call smovhn (itaskn,10,dest,len)
       }
    else
       {
        #$% or if addressee is a name, move FOR and the name into the array
	call smovv (" FOR ",dest,len)
	call smovhn (iaddr,8,dest,len)
       }
 
    call smov ($space,dest,len)		    # move a space into the array
 
    call synbld (_                  # Build text from lex data
	       itime,               # game minute when to be executed
	       ind,                 # $yes/$no if time is phase dependant
	       nord,                # ordr number (code)
	       kargs,               # number of words in the lex array
	       xlex[8],             # lex code(s) array
	       dest,                # array to receive text (40 words)
	       len)                 # value for number of bytes in dest
				    # and incremented by those added
 
    call smovv ("     ",dest,len)
 
    write (35,9003) (dest[m],m=1,len)		# write order to file
   }
 
##if (1 == 2)
REPEAT          # jb E2143  (BRNCHINTOBLK)  7/13/00
    {
    BREAK       # jb E2143  (BRNCHINTOBLK)  7/13/00
    8000 continue				# end-of-file exit
    write (35,9004)
    9004 format ("0    ","Abnormal File Termination")
    }
 
close (unit = 31)				# close files
close (unit = 35)
 
return
end

 
subroutine finit
 
########################################################
#$%
#$% Purpose:   FINIT initializes and opens file with
#$%            game orders stored in it.
#$%
#$% Called By: PRTORD
#$%
#$% Calls:     ECHOH      ECHOR      GETLIN
#$%            ORDINT     WGCAT      OPEN
#$%
#$% Tables:    None
#$%
#$% Date:      JAN 82
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
 ForceCommon
 integer getarg3, ctoi
 integer irc, delete_file_version
 integer NARG,
         ISTAT,
         K,
         JJ,
         M                          # MJC 5/31/2K (E2145)
 character buf[100]
 vaxcharacter*20 v_cfile
 equivalence (cfile, v_cfile)
 
 character cfile[20]
 
 character xfile[20]
 vaxcharacter*20 v_Xfile
 equivalence (xfile, v_xfile)
 
cmd$record$definition
 
call help_pgm(1,
              "pgaord: Generate order history text",
              "pgaord Tags: PGA, Orders",
              "Usage: pgaord <scenario>",
              "",
              "",
              "",
              "",
              "Example: pgaord port")
 
narg = 1
 
istat = getarg3(narg, buf, 20)		# get game name
 
jj = 0					# generate system's file name
call smovhn (buf,$$Maxlit,cfile,jj)
 
call smovv  ("h.ord",cfile,jj)
call smov   ($null,cfile,jj)
 
#________________________________________________________________________
jj = 0					# generate output file's name
call smovhn (buf,$$Maxlit,xfile,jj)
 
 
call smovv ("x.ord",xfile,jj)
call smov  (EOS,    xfile,jj)
 
#$% open input file
open(unit            = 31,
     access          = 'direct',
     file            = v_cfile,
     recl            = cmd$maxlength*4,
     form            = 'unformatted',
     status          = 'OLD',
     err             = 8010)
 
REPEAT          # jb E2143  (BRNCHINTOBLK)  7/13/00
    {
    BREAK       # jb E2143  (BRNCHINTOBLK)  7/13/00
    8010
    #$% send message to user
    call echor
    call echov ("Sorry, could not open the file:")
    call echoh (cfile,ARB)
    call echor
    call exit
    }
 
call echov ("Input is from the file: ")
call echoh (cfile,ARB)
call echor
 
irc = delete_file_version (xfile)		# Delete file so can open new
 
open(unit         = 35,                      #open output file
     access       = 'sequential',
     form         = 'formatted',
     recl         = 250*4,
     status       = 'unknown',
     file         = v_xfile)
 
#$% senf message to user
call echor
call echov ("Output is to the file: ")
call echoh (xfile,ARB)
call echor
 
#$% read record
read (31,REC=1) cmd$record
 
#$% write record to file
write (35,9002) cmd$record[1],(m,cmd$record[m+1],m=1,cmd$record[1])
9002 format ("1",i3," Views",/,"0 View  Code"/,"  ----  ----",/,20(i6,i6,/))
 
return
end

 
subroutine getlin (nargs,args)
 
########################################################
#$%
#$% Purpose:   GETLIN gets a line of input.
#$%
#$% Called By: FINIT
#$%
#$% Calls:     ANALYZ
#$%
#$% Tables:    None
#$%
#$% Date:      JAN 82
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
integer nargs
literal args[80]
character line[80]
 
integer I                               # MJC 5/31/2K (E2145)
call getlnh(line,80)
 
# force input to uppercase
do i = 1, 80
   {
    if (line(i) >= $lita & line(i) <= $litz)
	line(i) = line(i) - ($lita - $LETA)
   }
 
# analyze the input for words....
call anlyz (line,args,nargs)
 
return
end
 

 
subroutine chkflt (_
                   itype,        # aircraft type name
                   istat,        # returned status $YES=ok(found it)
                   icnt)         # number of slots available
 
########################################################
#$%
#$% Purpose:   CHKFLT verifies that aircraft equipment to be
#$%            loaded is in aircraft inventory and that space
#$%            on board is available.
#$%
#$% Called By: HANLNC
#$%
#$% Calls:     CHKEQ
#$%
#$% Tables:    None
#$%
#$% Date:      FEB 82
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
integer lstflt,eq[2,16]
common /cckflt/ lstflt,eq
 
integer ISTAT,
        ICNT,
        MQTY,
        MNAME,
        ITYPE                            # MJC 5/31/2K (E2145)
 
#$% equipment to be loaded is in aircraft inventory
istat = $yes
 
#$% number of slots (space for equipment) available is 8
icnt = 8
 
return
 
entry chkeq (itype,mqty,mname,istat)		# istat vice istast 3/12/82
 
istat = $yes
 
return
end
