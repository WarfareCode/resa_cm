undefine read
undefine write
undefine err
 
define(DEBUG,#)
 
include "ascii.inc"
include "macros.inc"
include "bbctl.inc"
include "bbcode.inc"
include "bbacc.inc"
include "bbacn.inc"             # SMM 5/23/91
include "bbaml.inc"
include "bbbis.inc"             # clk & smm 7/3/91
include "bbbml.inc"             # jb  5/4/89
include "bbbom.inc"
include "bbboy.inc"
include "bbchf.inc"             # jb  7/9/90
include "bbcjc.inc"             # REH 04/88
include "bbcmc.inc"
include "bbcob.inc"
include "bbctm.inc"             # SMM 4/90
include "bbdac.inc"             # clk 3/92 - Destroyed AirCraft table
include "bbdeq.inc"
include "bbdss.inc"             # JFR 6/24/93 - BDA table (E1104)
include "bbemc.inc"
include "bbeph.inc"
include "bbirc.inc"             # clf 9/1/92 IR sensor characteristics
include "bbfom.inc"
include "bbesm.inc"
include "bbgnd.inc"             # REH 12/89
include "bbhfd.inc"
include "bbhfp.inc"
include "bbiff.inc"             # CML 3/91
include "bbjam.inc"
include "bbler.inc"
include "bbmc.inc"
include "bbmdr.inc"
include "bbmem.inc"
include "bbmrv.inc"             # REH 04/88
include "bbnam.inc"
include "bbnav.inc"
include "bbord.inc"
include "bbpai.inc"
include "bbpat.inc"
include "bbrad.inc"
include "bbrel.inc"
include "bbrpm.inc"
include "bbrth.inc"
include "bbrtl.inc"             ## tpa 7/29/83
include "bbsat.inc"
include "bbser.inc"
include "bbshc.inc"
include "bbshn.inc"
include "bbsob.inc"
include "bbson.inc"
include "bbsop.inc"
include "bbsos.inc"
include "bbspr.inc"
include "bbsqd.inc"             # 4/95 clk (E1394)
include "bbssc.inc"
include "bbssd.inc"
include "bbssr.inc"
include "bbsta.inc"             # joa 8/98 (E2018)
include "bbstr.inc"
include "bbsui.inc"
include "bbswb.inc"             # 3/4/91 clk & smm
include "bbswd.inc"             # 3/11/91 clk & smm
include "bbtor.inc"
include "bbtrp.inc"
include "bbunt.inc"
include "bbuvp.inc"
include "bbwet.inc"
include "plplay.inc"            # joa 11/95 (E1515)
 
define (BBimplicit,Implicit None)
 
define(NBRfiles,58)   # assign number of files to be loaded.
 

 
subroutine wgload               # load in the scenario files
 
#############################################################
#$%
#$% Purpose:   WGLOAD provides executive control over
#$%            the loading of the scenario files.
#$%
#$% Called By: START0
#$%
#$% Calls:     BBALOC     BBLOD1     BBLODM
#$%            BBTRIM     BBZAPT     ECHO
#$%            ECHOH      ECHOR      WGCAT
#$%            WGLAIR     WGLAML     WGLBML    WGLCMB
#$%            WGLCMP     WGLCMS     WGLCRU    WGLTRP
#$%            WGLEMC     WGLEMT     WGLFRC    WGLCTM
#$%            WGLHFD     WGLJAM     WGLMEM    WGLSWB
#$%            WGLNAV     WGLNOD     WGLRPM    WGLIFF
#$%            WGLRPT     WGLSAT     WGLSEN    WGLAIR_NOISE
#$%            WGLSNB     WGLSNR     WGLSOS    WGLBIS
#$%            WGLSST     WGLURP     WGLWEP
#$%            WGLWET     WGLXPO     WGLSER
#$%            WGLCJM     WGLMRV     WGLLER
#$%
#$% Tables:    MC         AML        TOR        SER        BIS
#$%            BOM        COB        PAI        SUI        DAC
#$%            NAV        JAM        SON        MRV        DSS
#$%            RAD        ESM        SOB        BML
#$%            SOP        HFP        CMC        TRP
#$%            SUI        EMC        ACC        CTM
#$%            PAT        REL        MEM        LER
#$%            WET        ORD        SSC        SWB
#$%            SAT        SSR        SSD        IFF
#$%            SPR        STR        RPM        ACN
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
#$% Modified:  Jonathan Richardson - 12/95 (E1104)
#$%            Allocate DSS table.
#$%
#$% Modified:  Jim Allen - 8/98 (E2018)
#$%            Reserve slots at end of UNT table for CM planning
#$%
#############################################################
 
BBcommon
 
character cfile[11]
vaxcharacter*11 v_cfile
equivalence (cfile, v_cfile)
 
integer    reccnt,recsz
literal    rec[1500],iname
integer    frc_pass                                  # jb  3/15/89
integer*4  air_pass                                  # reh 8/9/90
integer    aml_Pass, number_AML_defined              # dew 3/22/89
integer    bml_Pass, number_BML_defined              # dew 3/22/89
integer    number_of_AEGIS          # SMM 11/93 used in allocation of AEG table
integer     loop, ikey, ilen, ios, I_Switch_1, I_Switch_2, nPlanCM,
            nSTA, nUNT, nBOY, nNAM, nDAC, nSOP, nSOS, nHFP, nHFD,
            nSAT, nSPR, nSTR, nSSD, nSSR, nSWB, nSWD
BBdeclare  (unt$pointer, shc$pointer, shc$SOPindx$i, shc$SOPindxElec$i)
 
integer     mlen, finger_p1, finger_p2
VMSchar     msg*ARB
#external    nwiss$_WRONGARCH
 
common /scratch$pad/ rec               # common scratch area
 
data frc_pass / 0 /
data aml_pass / 0 /
data bml_pass / 0 /
data air_pass / 0 /
 
#----------------------------------------
 
    LitCharEquiv(cfiles, 3, NBRfiles)
                                 # [1,x] - key
                                 # [2,x] - extension name
                                 # [3,x] - record size
 
 
define (Data$fmt_cfile_name,
    DATA cfilesC[2,$use(Data_Count)])
 
define (Data$fmt_cfile_key,
    DATA cfiles[1,$use(Data_Count)])
 
define (Data$fmt_cfile_rec,
    DATA cfiles[3,$use(Data_Count)])
 
define (Data$Cfile,
     $incr(Data_Count)
     Data$fmt_cfile_name / @2 /
     Data$fmt_cfile_key / @1 /
     Data$fmt_cfile_rec / @3 /
)
 
#----------------------------------------
$set (Data_Count,0)
 
#data cfiles/_ #KEY, NAME,  RECSZ
Data$Cfile(    34, '.uvp', 16)
Data$Cfile(     7, '.sen', 16)
Data$Cfile(    16, '.cms', 16)
Data$Cfile(     4, '.jam', 16)
Data$Cfile(    30, '.cjm', 16)
Data$Cfile(    43, '.iff', 16)
Data$Cfile(    33, '.gnd', 16)
Data$Cfile(     1, '.wep', 16)
Data$Cfile(     2, '.cmb', 16)
Data$Cfile(     3, '.nav', 16)
Data$Cfile(     5, '.snr', 16)
Data$Cfile(     6, '.snb', 16)
Data$Cfile(    36, '.trp', 16)         # improved torpedo characteristics 4/18/90
Data$Cfile(    37, '.ctm', 16)         # countermeasure characteristics 4/19/90
Data$Cfile(    38, '.chf', 16)         # jb CHAFF characteristics       7/9/90
Data$Cfile(     8, '.cru', 16)
Data$Cfile(     9, '.air', 16)         # air noise, load $$ACN  5/23/91
Data$Cfile(     9, '.air', 16)
Data$Cfile(    15, '.shp', 16)         # ship characteristics to load $$SHC
Data$Cfile(    15, '.shr', 16)         # shore characteristics to load $$SHC
Data$Cfile(    15, '.sit', 16)         # site characteristics to load $$SHC          # KHC 6/8/92
Data$Cfile(    15, '.shp', 16)         # ship characteristics to load $$SHN
Data$Cfile(    15, '.trp', 16)         # improved torpedo, load $$SHN  4/18/90
Data$Cfile(    15, '.ctm', 16)         # countermeasure noise, load $$SHN 4/19/90
Data$Cfile(    18, '.aml',  8)
Data$Cfile(    32, '.bml',  4)         # jb    5/4/89
Data$Cfile(    17, '.emc', 16)
Data$Cfile(    19, '.wet', 16)
Data$Cfile(    10, '.cmp', 16)
Data$Cfile(    11, '.nod',  6)
Data$Cfile(    12, '.mem', 16)
Data$Cfile(    13, '.emt', 16)
Data$Cfile(    24, '.rpm', 16)         #smn002
Data$Cfile(    15, '.shp', 16)         # reh 8/9/90 load antenna blockage for ship
Data$Cfile(    15, '.shr', 16)         # 8/13/90 load antenna blockage for shore
Data$Cfile(    15, '.frc', 12)
Data$Cfile(     9, '.air', 16)         # 8/9/90 load antenna blockage for air
Data$Cfile(    18, '.aml',  8)
Data$Cfile(    32, '.bml',  4)         # jb    5/4/89
Data$Cfile(    14, '.xpo', arith($max$args,+,6))        # joa 11/95 (E1515)
Data$Cfile(    25, '.xsp', arith($max$args,+,6))        # joa 11/95 (E1515)
Data$Cfile(    26, '.xcp', arith($max$args,+,6))        # joa 11/95 (E1515)
Data$Cfile(    29, '.eph', 16)         ## 11/22/83 dew
Data$Cfile(    39, '.mdr', 16)         ## 6/90 reh
Data$Cfile(    44, '.fom', 23)         # 6/91 freq omission
Data$Cfile(    28, '.ton', 16)         ## 7/29/83 tpa
Data$Cfile(    20, '.sos', 16)
Data$Cfile(    21, '.hfd', 16)
Data$Cfile(    22, '.sat', 16)
Data$Cfile(    23, '.sst', 16)
Data$Cfile(    27, '.ser', 16)         ## 6/15/83 tpa
Data$Cfile(    31, '.mrv', 11)
Data$Cfile(    35, '.rth', 16)         # cml 4/3/90
Data$Cfile(    41, '.ler', 16)         # clk smm 2/21/91
Data$Cfile(    42, '.swb', 16)         # SMM & CLK 3/4/91
Data$Cfile(    45, '.bis', 16)         # clk & smm 7/3/91
Data$Cfile(    48, '.sqd',  4)
Data$Cfile(     0, '.zzz',  0)
 
DEBUG call echoh(cfile,10)
DEBUG call echov("<wgload:")
 
#$% for each file
for (loop=1; loop <= NBRfiles; loop=loop+1)
    {
    #$% save key, name, and record size of current files
    ikey  = cfiles[1,loop]
    iname = cfiles[2,loop]
    recsz = cfiles[3,loop]
 
    if (recsz == 0) next               # skip null entries
 
     #$% initialize length
     ilen=0
 
     call smovhn (scenario$name,6,cfile,ilen)     # move the parts of the
     call smovv  ("s",cfile,ilen)                 # file name into cfile
     call smovh  (iname,4,cfile,ilen)             # the VAX needs a null
     call smov   ($null,cfile,ilen)               # at the end      VAX00
 
 
DEBUG call echoh(cfile,10)
DEBUG call echo($colon)
 
    open(unit            = 31,               #open defined same as build files
         access          = 'DIRECT',         #VAX00
         form            = 'UNFORMATTED',
         file            = v_cfile,
         recl            = recsz*2,          #recl is in long words not quad words
#         carriagecontrol = 'NONE',
         iostat          = ios,
         status          = 'OLD',
         err             = 8001)
 
    mlen = 0
    read (31,REC=1,err=8011) reccnt, finger_p1, finger_p2
 
    REPEAT          # jb E2143 (BRNCHINTOBLK)   7/13/00
        {
        BREAK       # jb E2143 (BRNCHINTOBLK)   7/13/00
        8001
 
        call echor
        call echov ("Could not find the file: ")
        call echoh (cfile,ARB)
        call echor
 
        8011 reccnt = 1                 # empty/new file (??)
        }
 
    #$% begin the process of loading in the build files
    Switch (ikey)
        {
        case 1:                        ## load missile characteristics
            {
            call bbaloc ($$MC,"MC ",$yes,MC$slots,MC$entry)
            call bbzapt ($$MC)
            call wglwep (reccnt,recsz,rec,$$MC)
            call bbtrim ($$MC)
 
            call bbaloc ($$TOR,"TOR",$no,TOR$slots,TOR$entry)
            call bbzapt ($$TOR)
            call wglwep (reccnt,recsz,rec,$$TOR)
            call bbtrim ($$TOR)
 
            call bbaloc ($$BOM,"BOM",$no,BOM$slots,BOM$entry)
            call bbzapt ($$BOM)
            call wglwep (reccnt,recsz,rec,$$BOM)
            call bbtrim ($$BOM)
            }
        case 2:                        ## load comm buoy characteristics
            {
            call bbaloc ($$COB,"COB",$no,COB$slots,COB$entry)
            call bbzapt ($$COB)
            call wglcmb (reccnt,recsz,rec)
            call bbtrim ($$COB)
            }
        case 3:                        ## load navigation sensor charac
            {
            call bbaloc ($$NAV,"NAV",$no,NAV$slots,NAV$entry)
            call bbzapt ($$NAV)
            call wglnav (reccnt,recsz,rec)
            call bbtrim ($$NAV)
            }
        case 4:                        ## load jammer characteristics
            {
            call bbaloc ($$JAM,"JAM",$no,JAM$slots,JAM$entry)
            call bbzapt ($$JAM)
            call wgljam (reccnt,recsz,rec)
            call bbtrim ($$JAM)
            }
        case 5:                        ## load sonar characteristics
            {
            call bbaloc ($$SON,"SON",$no,SON$slots,SON$entry)
            call bbzapt ($$SON)
            call wglsnr (reccnt,recsz,rec)
            call bbtrim ($$SON)
            }
        case 45:                       ## load Bistatic pair info   7/3/91
            {
            call bbaloc ($$BIS,"BIS",$no,BIS$slots,BIS$entry)
            call bbzapt ($$BIS)
            call wglbis (reccnt,recsz,rec)
            call bbtrim ($$BIS)
            }
        case 48:      ## load aircraft squadron name information
            {
            call bbaloc ($$sqd, "SQD", $no, sqd$slots, sqd$entry)
            call bbzapt ($$sqd)
            call wglsqd (reccnt, recsz, rec)
            #call bbtrim ($$sqd)
            }
        case 6:                        ## load sonobuoy characteristics
            {
            call bbaloc ($$SOB,"SOB",$no,SOB$slots,SOB$entry)
            call bbzapt ($$SOB)
            call wglsnb (reccnt,recsz,rec)
            call bbtrim ($$SOB)
            }
        case 7:                        ## load radar characteristics
            {
            call bbaloc ($$RAD,"RAD",$no,RAD$slots,RAD$entry)
            call bbzapt ($$RAD)
            call wglsen (reccnt,recsz,rec,$$RAD)
            call bbtrim ($$RAD)
 
            call bbaloc ($$ESM,"ESM",$no,ESM$slots,ESM$entry)
            call bbzapt ($$ESM)
            call wglsen (reccnt,recsz,rec,$$ESM)
            call bbtrim ($$ESM)
 
            call bbaloc ($$IRC,"IRC",$no,IRC$slots,IRC$entry) # clf 9/1/92
            call bbzapt ($$IRC)
            call wglsen (reccnt,recsz,rec,$$IRC)
            call bbtrim ($$IRC)
            }
        case 8:                        ##load cruise missile characteristics
            {
            call bbaloc ($$CMC,"CMC",$no,CMC$slots,CMC$entry)
            call bbzapt ($$CMC)
            call wglcru (reccnt,recsz,rec)
            call bbtrim ($$CMC)
            }
        case 9:                        ##load aircraft characteristics
            {
            air_pass = air_pass + 1                   # reh  8/9/90
 
            SWITCH (air_pass)
                {
                case 1:
                    {
                    call bbaloc ($$ACC,"ACC",$no,ACC$slots,(ACC$MaxEntry)*-1)
                    call bbzapt ($$ACC)
                    call wglair (reccnt,recsz,rec)
                    call bbtrim ($$ACC)
                    }
                case 2:
                    {
                    call bbaloc ($$ACN,"ACN",$no,ACN$slots,ACN$Entry)
                    call bbzapt ($$ACN)
                    call wglair_noise (reccnt,recsz,rec)
                    call bbtrim ($$ACN)
                    }
                }
            }
        case 10:                                ##load pai charac
            {
            call bbaloc ($$PAI,"PAI",$yes,PAI$slots,PAI$entry)
            call bbzapt ($$PAI)
            call wglcmp (reccnt,recsz,rec)
            call bbtrim ($$PAI)
            }
        case 11:                                ##load comm paths
            {
            call bbaloc ($$PAT,"PAT",$no,PAT$slots,(PAT$MaxEntry)*-1)
            call bbzapt ($$PAT)
            call wglnod (reccnt,recsz,rec)
            call bbtrim ($$PAT)
            }
        case 44:                                ##load frequency omissions
            {
            call bbaloc ($$FOM,"FOM",$no,FOM$slots,FOM$Entry)
            call bbzapt ($$FOM)
            call wglfom (reccnt,recsz,rec)
            call bbtrim ($$FOM)
            }
        case 12:                                ##load membership matrix
            {
            call bbaloc ($$MEM,"MEM",$no,MEM$slots,(MEM$MaxEntry)*-1)
            call bbzapt ($$MEM)
            call wglmem (reccnt,recsz,rec)
            call bbtrim ($$MEM)
            }
        case 13:                        ##load recognized emmiter list for ESM
            {
            call bbaloc ($$REL,"REL",$yes,REL$slots,REL$entry)
            call bbzapt ($$REL)
            call wglemt (reccnt,recsz,rec)
            call bbtrim ($$REL)
            }
        case 14:                        ##load orders received from player
            {
            call wglxpo (reccnt,recsz,rec)
            }
 
        case 36:      # load torpedo characteristics
            {
            call bbaloc ($$TRP,"TRP",$no,TRP$slots,TRP$entry)
            call bbzapt ($$TRP)
            call wgltrp (reccnt,recsz,rec)
            call bbtrim ($$TRP)
            }
 
        case 37:      # load countermeasure characteristics
            {
            call bbaloc ($$CTM,"CTM",$no,CTM$slots,CTM$entry)
            call bbzapt ($$CTM)
            call wglctm (reccnt,recsz,rec)
            call bbtrim ($$CTM)
            }
 
        case 38:      # load CHAFF characteristics    # jb    7/9/90
            {
            call bbaloc ($$CHF,"CHF",$no,CHF$slots,CHF$entry)
            call bbzapt ($$CHF)
            call wglchf (reccnt,recsz,rec)
            call bbtrim ($$CHF)
            }
 
        case 15:                                      ##load forces assigned
            {
            frc_pass = frc_pass + 1                   # jb  3/15/89
            SWITCH (frc_pass)                         # jb  3/15/89
                {
                case 1:
                    {
                    call bbaloc ($$SHC,"SHC ",$yes,SHC$slots,(SHC$MaxEntry)*-1)
                    call bbzapt ($$SHC)
 
                    # load ship characteristics
                    call wglshipc (reccnt,recsz,rec)
                    }
                case 2:
                    {
                    # load shore base characteristics
                    call wglshrc (reccnt,recsz,rec)
                    #call bbtrim ($$SHC)
                    }
                case 3:                               # KHC 6/8/92
                    {
                    # load site characteristics
                    call wglsite (reccnt,recsz,rec)
                    call bbtrim ($$SHC)
                    }
                case 4:
                    {
                    call bbaloc ($$SHN,"SHN ",$yes,SHN$slots,SHN$entry)
                    call bbzapt ($$SHN)
 
                    # load ship Noise
                    call wglship_noise (reccnt,recsz,rec)
                    }
 
                case 5:     # use torpedo characteristics to load noise
                    {
                    call wgltrp_Noise (reccnt,recsz,rec)
                    }
 
                case 6:     # use countermeasure characteristics to load noise
                    {
                    call wglctm_Noise (reccnt,recsz,rec)
                    call bbtrim ($$SHN)
                    }
 
                case 9:             # was 6, 10/91
                    {
                    # Make a 'guess' of the total number of UNT's needed
 
                    nUNT = 3000 +                           # DEW 10/99 (E2160)
                           Simultaneous$ghosts + Simultaneous$cruise +
                           Simultaneous$boats + Simultaneous$flights
 
                    nUNT = min(UNT$slots, nUNT)
 
                    call bbaloc ($$UNT,"UNT ",$yes,nUNT,UNT$entry)
                    call bbzapt ($$UNT)
 
                    # Reserve #stations/3 at end of unt table for
                    #   plan cruise missile fire JA 8/98 (E2018)
                    nSTA = min(Default$Stations + Extra$Stations, STA$Slots)
                    nPlanCM = nSTA / 3
                    UNT$Size = UNT$Size - nPlanCM * UNT$Entry
 
                    # load forces
#                    number_bml_defined = 2    # REMOVE THIS!!!??? 5/4/89
                    call wglfrc (reccnt,recsz,rec,
                                    number_aml_defined,
                                    number_bml_defined,
                                    number_of_AEGIS,
                                    nPlanCM)
 
                    nUNT = UNT$Size / UNT$Entry
                    nBOY = min(BOY$Slots,BOY$Slots_per_UNT(nUNT))# DEW 10/99 (E2160)
                    call bbaloc ($$BOY,"BOY",$yes,nBOY,BOY$entry)
                    call bbzapt ($$BOY)
 
                    call wgltowed         # Deploy towed arrays
 
                    nNAM = min(NAM$Slots,NAM$Slots_per_UNT(nUNT))# DEW 10/99 (E2160)
                    call bbaloc ($$NAM,"NAM",$yes,nNAM,NAM$entry)
                    call bbzapt ($$NAM)
 
                    call wglurp        # Init each UNT's reporting policy
 
                    # added parameter for allocation of AEG table
                    call wglrpt(number_of_AEGIS) # init own,lcl,pnd & rmt tbls
                    }
 
                }
            }
        case 16:                        ## load comm suite characteristics
            {
            call bbaloc ($$SUI,"SUI",$no,SUI$slots,SUI$entry)
            call bbzapt ($$SUI)
            call wglcms (reccnt,recsz,rec)
            call bbtrim ($$SUI)
            }
        case 17:                                ##load emmission control plans
            {
            call bbaloc ($$EMC,"EMC",$no,EMC$slots,EMC$entry)
            call bbzapt ($$EMC)
            call wglemc (reccnt,recsz,rec)
            call bbtrim ($$EMC)
            }
        case 18:                        ##load ac maintenance log charac
            {
            aml_pass = aml_pass + 1                   # dew 3/22/89
            SWITCH (aml_pass)                         # dew 3/22/89
                {
                case 1:
                    {
                    number_aml_defined = reccnt - 1
                    }
                case 2:
                    {
                    call bbaloc ($$AML,"AML",$yes,AML$slots,AML$entry)
                    call bbzapt ($$AML)
                    call wglaml (reccnt,recsz,rec)
                    #call bbtrim ($$AML)
 
                    #$% clk 3/92 - added Destroyed AirCraft table
                    #$% clk 2/96 - rather than one DAC for every AML,
                    #$%            allocate 50% of the AML size + 100
                    #$%            (we were pushing max bb size again).
                    nDAC = INT ((AML$Size / AML$Entry) * 0.5) + 100
 
                    call bbaloc ($$DAC,"DAC",$yes,nDAC,DAC$entry)
                    call bbzapt ($$DAC)
 
                    # load the BDA tables after the DAC table - JFR 12/95 (E1104)
                    call bbaloc ($$DSS,"DSS",$yes,DSS$slots,DSS$entry)
                    call bbzapt ($$DSS)
                    }
                }
            }
        case 32:      ##load BOAT maintenance log charac -jb    5/4/89
            {
            bml_pass = bml_pass + 1
            SWITCH (bml_pass)
                {
                case 1:
                    {
                    number_bml_defined = reccnt - 1
                    }
                case 2:
                    {
                    call bbaloc ($$BML,"BML",$yes,BML$slots,BML$entry)
                    call bbzapt ($$BML)
                    call wglbml (reccnt,recsz,rec)
                    #call bbtrim ($$BML)
                    }
                }
            }
        case 19:                                ##load weather characteristics
            {
            call bbaloc ($$WET,"WET",$no,WET$slots,WET$entry)
            call bbzapt ($$WET)
            call wglwet (reccnt,recsz,rec)
            #call bbtrim ($$WET)    # don't trim weather table....
 
            wet$used = wet$size
            }
        case 20:                                ##load SOSUS probabilities
            {
            #call bbaloc ($$SOP,"SOP",$yes,SOP$slots,SOP$entb+sop$ents*40)
            #
            #Count the numbr of sosus targt types for the sop table definition.
            #This code was moved from wildsos.rat(subroutine wglsos) during the
            #VAX conversion.  The nbr$sosus$target$types must be determined
            #prior to calling bbaloc becas the size of the SOP table depends on
            #this value (i.e. nbr$sosus$target$types is part of SOP$entry.)
            #This code and the call to bbaloc replaces the line above.   8mar82
 
            nbr$sosus$target$types = 0
 
            for(unt$pointer$first;unt$pointer$ok;unt$pointer$next)
                {
                if (xunt$type$i != $sub$code)  next
 
                if (xunt$view$i < $firstorange$view)  next
 
                shc$pointer = xunt$Shcpntr$i         # reh, 3/89
 
                if (xshc$SOPIndx$i != 0) next
 
                nbr$sosus$target$types = nbr$sosus$target$types + 1
 
                shc$SOPIndx$i = nbr$sosus$target$types
                PUTshc$SOPIndx$i
 
                if (Xshc$NoiseIndx$i != Xshc$NoiseIndxElec$i)
                    {
                    nbr$sosus$target$types = nbr$sosus$target$types + 1
                    }
 
                shc$SOPIndxElec$i = nbr$sosus$target$types
                PUTshc$SOPIndxElec$i
                }
 
            call bbaloc ($$SOP,"SOP",$yes,SOP$slots,SOP$entry)
            call bbzapt ($$SOP)
            call wglsos (reccnt,recsz,rec)
            call bbtrim ($$SOP)
 
            nSOP = SOP$Size / SOP$Entry
            nUNT = UNT$Size / UNT$Entry
            nSOS = max(1,min(SOS$Slots,SOS$Slots_per_UNT(nUNT)))# DEW 10/99 (E2160)
            call bbaloc ($$SOS,"SOS",$yes,nSOS ,SOS$entry)   # Sosus
            call bbzapt ($$SOS)                              # Detections
 
            if (nSOS > 0)           # E2278 JOA 8/02 UFL02 - fix nSOP typo
                {
                call sosint        # initialize SOS detection free list
                sos$used = sos$size
                }
 
            call bbtrim ($$SOS)
            }
        case 21:                                ##load HFDF characteristics
            {
            call bbaloc ($$HFP,"HFP",$yes,HFP$slots,HFP$entry)
            call bbzapt ($$HFP)
            call wglhfd (reccnt,recsz,rec)
            call bbtrim ($$HFP)
 
            nHFP = HFP$SIZE / HFP$ENTRY
            nHFD = max(2,min(HFD$Slots,HFD$Slots_per_UNT(nUNT)*nHFP/2))# DEW 10/99 (E2160)
            call bbaloc ($$HFD,"HFD",$yes,nHFD,HFD$entry)  # HFDF Detections
            call bbzapt ($$HFD)
 
            if (nHFP > 0)
                {
                call intHFD        # initialize HFD detection free list
                hfd$used = hfd$size
                }
 
            call bbtrim ($$HFD)
            }
        case 22:                                ##load satalite characteristics
            {
            call bbaloc ($$SSC,"SSC",$yes,SSC$slots,SSC$entry)
            call bbzapt ($$SSC)
            call wglsat (reccnt,recsz,rec)
            call bbtrim ($$SSC)
            }
        case 23:                                ##load satellite table
            {
            call bbaloc ($$SAT,"SAT",$no ,SAT$slots,SAT$entry)
            call bbzapt ($$SAT)
            call wglsst (reccnt,recsz,rec)
            call bbtrim ($$SAT)
 
            nSAT = SAT$size / SAT$entry
            nUNT = UNT$size / UNT$entry
 
            nSPR = max( 1, min (SPR$slots, nSAT * 5 ) )
            call bbaloc ($$SPR,"SPR",$no ,nSPR ,SPR$entry)
            call bbzapt ($$SPR)
            if (nSAT == 0) call bbtrim ($$SPR)
 
            nSTR = max( 1, min (STR$slots, nSAT * 5 ) )
            call bbaloc ($$STR,"STR",$no ,nSTR,STR$entry)
            call bbzapt ($$STR)
            if (nSAT == 0) call bbtrim ($$STR)
 
            nSSD = min (SSD$Slots,SSD$Slots_per_UNT(nUNT))  # DEW 10/99 (E2160)
            call bbaloc ($$SSD,"SSD",$yes,nSSD,SSD$entry)
            call bbzapt ($$SSD)
            if (nSAT == 0) call bbtrim ($$SSD)
 
            nSSR = min (SSR$Slots,SSR$Slots_per_UNT(nUNT))  # DEW 10/99 (E2160)
            call bbaloc ($$SSR,"SSR",$yes,nSSR,SSR$entry)
            call bbzapt ($$SSR)
            if (nSAT == 0) call bbtrim ($$SSR)
            }
        case 24:                        ##load reporting policy matrix#smn00:
            {                                                           #smn002
            call bbaloc ($$RPM,"RPM",$yes,RPM$slots,RPM$entry)          #smn002
            call bbzapt ($$RPM)                                         #smn002
            call wglrpm (reccnt,recsz,rec)                              #smn002
            call bbtrim ($$RPM)                                         #smn002
            }
        case 25:                                ##load search plans
            {
            call wildsr (reccnt,recsz,rec)
            }
        case 26:                                ##load contingency plans
            {
            call wildcp (reccnt,recsz,rec)
            }
        case 27:                        ##load sonar envir data ## 6/15/83 TPA
            {
            call bbaloc ($$SER,"SER",$no,SER$slots,SER$entry)
            call bbzapt ($$SER)
            call wglser (reccnt,recsz,rec)
            call bbtrim ($$SER)
            }
        case 28:        ##load recognized emmiter list for RTL  ## TPA 7/19/83
            {
            call bbaloc ($$RTL,"RTL",$yes,RTL$slots,RTL$entry)
            call bbzapt ($$RTL)
            call wglTON(reccnt,recsz,rec)
            call bbtrim ($$RTL)
            }
        case 29:        ## load engagement Probabilities of Hit (dew 11/22/83)
            {
            call bbaloc ($$EPH,"EPH",$yes,EPH$slots,EPH$entry)
            call bbzapt ($$EPH)
            call wglEPH (reccnt,recsz,rec)
            call bbtrim ($$EPH)
            }
        case 30:        ## load Commjammer characteristics  # REH 04/88
            {
            call bbaloc ($$CJC,"CJC",$no,CJC$slots,CJC$entry)
            call bbzapt ($$CJC)
            call wglcjm (reccnt,recsz,rec)
            call bbtrim ($$CJC)
            }
        case 33:        ## load Ground Unit characteristics  # REH 12/89
            {
            call bbaloc ($$GND,"GND",$no,GND$slots,GND$entry)
            call bbzapt ($$GND)
            call wglgnd (reccnt,recsz,rec)
            call bbtrim ($$GND)
            }
        case 31:        ## load MuRho Table # REH 04/88
            {
            call bbaloc ($$MRV,"MRV",$no,MRV$slots,MRV$entry)
            call bbzapt ($$MRV)
            call wglmrv (reccnt,recsz,rec)
            call bbtrim ($$MRV)
            }
 
        case 34:                         ## load UAV Probability Data
            {
            call bbaloc ($$UVP,"UVP",$no,UVP$slots,UVP$entry)
            call bbzapt ($$UVP)
            call wgluvp (reccnt,recsz,rec)
            call bbtrim ($$UVP)
            }
        case 35:                         ## load ROTHR site data CML 4/3/90
            {
            call bbaloc ($$RTH,"RTH",$yes,RTH$slots,RTH$entry)
            call bbzapt ($$RTH)
            call wglROT (reccnt,recsz,rec)
            call bbtrim ($$RTH)
            }
 
        case 39:                         ## load sonobuoy median-detection-range
            {                            # 6/90
            call bbaloc ($$mdr,"MDR",$yes,mdr$slots,mdr$entry)
            call bbzapt ($$mdr)
            call wglmdr (reccnt,recsz,rec)
            call bbtrim ($$mdr)
            }
        case 41:                        ## load lidar environ. data  2/91
            {                           ## clk smm
            call bbaloc ($$LER,"LER",$no,LER$slots,LER$entry)
            call bbzapt ($$LER)
            call wgller (reccnt,recsz,rec)
            call bbtrim ($$LER)
            }
        case 42:                        ## load SWABS info
            {
             call bbaloc ($$SWB,"SWB",$no,SWB$slots,SWB$entry)
             call bbzapt ($$SWB)
             call wglswb (reccnt,recsz,rec)
             call bbtrim ($$SWB)
 
             nSWB = SWB$Size / SWB$Entry
             nUNT = UNT$Size / UNT$Entry
             nSWD = max(1,min(SWD$Slots,SWD$Slots_per_UNT(nUNT)))# DEW 10/99 (E2160)
             call bbaloc ($$SWD,"SWD",$yes,nSWD,SWD$entry)    # SWABS
             call bbzapt ($$SWD)                              # Detections
             if (nSWB > 0)
               {
                call swdint        # initialize SWD detection free list
                swd$used = swd$size
               }
             call bbtrim ($$SWD)
            }
        case 43:                        ## load iff characteristics data
            {                           ## cml  3/12/91
            call bbaloc ($$IFF,"IFF",$no,IFF$slots,IFF$entry)
            call bbzapt ($$IFF)
            call wgliff (reccnt,recsz,rec)
            call bbtrim ($$IFF)
            }
        }
 
    close (unit=31)                     #$% close file
    }
 
 
 
DEBUG call echov(":wgload>")
DEBUG call echor
 
return
end

 
subroutine getsr (loop,recsz,rec)       # get scenario record
 
##############################################################
#$%
#$% Purpose:   GETSR is used to get the scenario record.
#$%
#$% Called By: WGLAIR     WGLAML     WGLCMB    WGLBML
#$%            WGLCMP     WGLCMS     WGLCRU    WGLLER 2/91
#$%            WGLEMC     WGLEMT     WGLHFD
#$%            WGLJAM     WGLMEM     WGLNAV
#$%            WGLRPM     WGLSAT     WGLSEN
#$%            WGLSNB     WGLSNR     WGLSOS
#$%            WGLSST     WGLWEP     WGLWET
#$%
#$% Calls:     ECHOH      ECHOI      ECHOR
#$%            HLTSLF     TRACE
#$%
#$% Tables:    None
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
##############################################################
 
integer loop,recsz
literal rec[1500]
 
integer m, len, icnt                    # MJC 4/25/2000
 
#$% read record address
read (31,REC=loop,err=8011) (rec[m],m=1,recsz)
 
len = rec[1] + 1                        # length doesn't include VLI
rec[1] = len                            # update length
icnt = recsz
 
loop = loop + 1                         # inc record address
 
while (icnt < len)
   {
    #$% read record address
    read (31,REC=loop,err=8011) (rec[m],m=icnt+1,icnt+recsz)
    icnt = icnt + recsz
    loop = loop + 1                     # inc record address
   }
 
return
 
#$% display error messge
8011 call echov ("Error while reading scenario file")
     call echor
 
     #$% display record ID
     call echov ("REC ID= ")  ; call echoi (loop)     ; call echor
     call echov ("REC Lg= ")  ; call echoi (len )     ; call echor
     call echov ("REC[2&3]= "); call echoh (rec[2],16); call echor
 
#$% call to halt self
call hltslf
call trace
call hltslf
 
return
end
 

 
subroutine getsrS (lfc,name,recsz,reccnt,rec) # find Ship/Base scenario record
    # WARNING:  lfc and recsz are PROBABLY CONSTANTS:  DON'T CHANGE!
########################################################
#$%
#$% Purpose:   GETSRS is used to get the ship or
#$%            shorebase scenario record.
#$%
#$% Called By: WGLFRC
#$%
#$% Calls:     ECHOH      ECHOI      ECHOR
#$%
#$% Tables:    None
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
integer    recsz,reccnt,cur,lfc                # or else return rec[1] == 0
literal    rec[1500],name
 
integer    NXTREC, LEN, LOOP, M, ICNT     # MJC 4/25/2000
 
nxtrec(cur,len) = cur + (len+recsz-1)/recsz   # statment function
 
for (loop = 2; loop <= reccnt; loop = nxtrec(loop,len) )  #search file
   {
    read (lfc,REC=loop,err=8011) (rec[m],m=1,recsz)
 
    len = rec[1] + 1                    # length doesn't include VLI
    rec[1] = len                        # update length
    icnt = recsz
 
    if (rec[3] != name) next            # found it ?
 
    #$% increment loop
    loop = loop + 1
 
    while (icnt < len)                  # get the info
       {
        #$% read record
        read (lfc,REC=loop,err=8011) (rec[m],m=icnt+1,icnt+recsz)
        icnt = icnt + recsz
        loop = loop + 1
       }
 
    return                              # return the Ship/Base record
   }
 
rec[1] = 0
return
 
#$% display error message and display record ID to user
8011 call echov ("Error while reading Ship/Base scenario file")
     call echor
     call echov ("REC ID= ")  ; call echoi (loop)     ; call echor
     call echov ("REC Lg= ")  ; call echoi (len )     ; call echor
     call echov ("REC[2&3]= "); call echoh (rec[2],16); call echor
stop
end
 

 
 
subroutine gslotm (tbl$pointer,$$tbl,tbl$entry,istat)   # get slot w/error msg
    # WARNING: $$tbl and tbl$entry MAY BE CONSTANTS:  DON'T CHANGE!
######################################################################
#$%
#$% Purpose:   GSLOTM is used to get a slot with
#$%            an error message.
#$%
#$% Called By: WGLAIR     WGLCMB     WGLCMP
#$%            WGLCMS     WGLCRU     WGLEMC
#$%            WGLEMT     WGLESM     WGLFRC
#$%            WGLJAM     WGLMEM     WGLNAV
#$%            WGLNOD     WGLRAD     WGLRPM
#$%            WGLSAT     WGLSHP     WGLSNB
#$%            WGLSNR     WGLSST     WGLWEP
#$%
#$% Calls:     ECHOH      ECHOR
#$%
#$% Tables:    None
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
bbcommon
 
integer  tbl$pointer,$$tbl,tbl$entry,istat
 
#$% set status flag to NO for default
istat = $no
 
#$% reset tbl$pointer to next useable slot
tbl$pointer = tbl$last + 1
 
#$% if pointer is in alloted range
if (tbl$pointer$valid)
   {
    #$% set last table and increment entry
    tbl$last$to tbl$last + tbl$entry
    #$% set status flag to YES
    istat = $yes
   }
#$% otherwise send "table full" message to user
else
   {
    call echov ("No more slots available for ")
    call echoh (tbl$name,4)
    call echor
   }
 
return
end
 
subroutine badfld (_              # display unknown field
                   cfile,         # file type
                   cname,         # record name
                   cword)         # ????? fld
 
########################################################
#$%
#$% Purpose:   BADFLD is called to display an
#$%            "unknown field" message to the
#$%            user if the field is not found.
#$%
#$% Called By: WGLAIR     WGLCMB     WGLCMP
#$%            WGLESM     WGLJAM     WGLNAV
#$%            WGLRAD     WGLSAT     WGLSEN
#$%            WGLSHP     WGLSNB     WGLSNR
#$%
#$% Calls:     ECHOH      ECHOI
#$%
#$% Tables:    None
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
literal cname,cword
VMSchar*(*) cfile
 
#$% display message to user
call echov ("File: ")
call echovt (cFile)
call echov ("  Record: ")
call echoh (Cname,5)
call echov ("  Unknown Field: ")
 
#if (iabs(cword) < 20000000) call echoi (cword) else
call echohn (cword,5)
 
call echor
 
return
end
 
