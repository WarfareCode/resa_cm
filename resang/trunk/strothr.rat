 
#####   version 1.1  dated-  July 1987
 
##### File: STROTHR.RAT
###
###   date    prog     module              comments
### ========= ==== ================ ============================================
###
################################################################################
 
include "ascii.inc"
include "bbacc.inc"
include "bbcode.inc"
include "bbctl.inc"
include "bbrmt.inc"
include "bbshc.inc"
include "bbrvu.inc"
include "bbrth.inc"
include "bbown.inc"
include "stmain.inc"
include "bbunt.inc"
include "wgmdrot.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  2/29/00

Subroutine ROTSTA
##############################################################################
#$%
#$% Purpose:   ROTSTA generates the rothr status board.
#$%
#$% Called By:
#$%
#$% Calls:
#$%
#$% Tables:    None
#$%
#$% Date:      July 1987
#$%
#$% Author:    Richard Schauer
#$%
##############################################################################
 
BBcommon
STATUScommon
 
  call ROTTIT     # rothr title
 
  if (isect == 1)
    {
     call ROTSIT     # rothr site data  - all blue views & control
     Call ROTDSH     # dashed line
     $exit$on$overflow
     ikey = 1
     isect = 2
    }
 
  call ROTTRK     # rothr track data - if in right view
  call ROTDSH     # last dashed line
 
return
end
 

 
 
Subroutine ROTTIT				## Active Track Title
 
##############################################################################
#$%
#$% Purpose:   ROTTIT generates titles for the active track status board.
#$%
#$% Called By: ROTSTA
#$%
#$% Calls:     OUTH     OUTI
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
$prepare$next$line
 
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
$column 26 ; $OutV("ROTHR STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
define ($low$order$key,ikey)
 
Subroutine ROTSIT
 
############################################################################
#$%
#$% Purpose:   ROTSIT executes the subroutines that generate the active
#$%            track status board.
#$%
#$% Called By: ROTSTA
#$%
#$% Calls:
#$%
#$% Tables:    None
#$%
#$% Date:      July 1987
#$%
#$% Author:    Richard Schauer
#$%
############################################################################
BBcommon
STATUScommon
 
Integer iflag, RTH$Pointer  # jb E2145                   2/29/00
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
 
  $column 1     # jb \/ $outV; and concatenation:   2/29/00
  $OutV("SITE      BEARING      ACTIVE      DAMAGED"//"      CONDITION       NEXT TRANSITION")
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
 
  if ((iview < $FirstBlue$View ) | (iview > $LastBlue$View))
    {
     call ROTSITNUN
     RETURN
    }
 
  iflag = $yes
  repeat
    {
     call NXTROTSIT(RTH$Pointer,iflag)
     if (RTH$Pointer == 0) BREAK
 
     call ROTSITENT(RTH$Pointer)
     $exit$on$Overflow
    }
 
  if (iflag == $YES) call ROTSITNUN
  else
    {
     $test$next$line; $exit$on$overflow
     $prepare$next$line
    }
 
return
end
 

 
subroutine NXTROTSIT(nxtpnt,iflag)
 
############################################################################
#$%
#$% Purpose:   NXTROTSIT finds the next rothr base
#$%
#$% Called By: ROTSTA
#$%
#$% Calls:
#$%
#$% Tables:    RTH     UNT
#$%
#$% Date:      July 1987
#$%
#$% Author:    Richard Schauer
#$%
############################################################################
BBCommon
STATUScommon
 
literal  keys[1],lowest[1],isite[1],
            CSTRIP8                 # jb E2145  2/29/00
Integer nxtpnt,iflag,irsult,        # jb  E2145 2/29/00
        RTH$Pointer,RTH$UnitIndx$I, # jb  E2145 2/29/00
        UNT$Pointer                 # jb  E2145 2/29/00
 
  lowest[1] = $highest$ascii
  if (ikey == 1)
    keys[1] = $lowest$ascii
  else
    keys[1] = ikey
 
  nxtpnt = 0
 
  for (RTH$pointer$first; RTH$pointer$ok; RTH$pointer$next)
    {
     if (xRTH$InUse$i == $NO) next
 
     RTH$UnitIndx$i = XRTH$UnitIndx$i
     unt$pointer$to RTH$UnitIndx$i
     isite[1] = Xunt$name$c
 
     call COMPAR(1,isite,keys,irsult)
     if (irsult < 0) NEXT
     if (irsult == 0)
       {
        nxtpnt = RTH$pointer
        iflag = $NO
        RETURN
       }
 
     call COMPAR(1,isite,lowest,irsult)
     if (irsult > 0) NEXT
     lowest[1] = isite[1]
     nxtpnt = RTH$Pointer
     iflag = $NO
    }
 
 
  ikey = lowest[1]
 
return
end
 

 
subroutine ROTSITENT(RTH$pointer)
 
############################################################################
#$%
#$% Purpose:   ROTSITENT displays rothr base information
#$%
#$% Called By: ROTSTA
#$%
#$% Calls:
#$%
#$% Tables:    RTH     UNT
#$%
#$% Date:      July 1987
#$%
#$% Author:    Richard Schauer
#$%
############################################################################
BBCommon
STATUSCommon
 
LITERAL UNT$Name$C,  CSTRIP8                        # jb  E2145  2/29/00
REAL*4  RTH$NEXTTRANTIME$F                          # jb  E2145  2/29/00
integer othbr,GAME_DTG,
        RTH$Pointer,RTH$UnitIndx$I,                 # jb  E2145  2/29/00
        UNT$Pointer                                 # jb  E2145  2/29/00
 
  $test$next$line ; $exit$on$Overflow
  $save$line$count
  $update$keys
  $prepare$next$line
 
  $column 1
  RTH$UnitIndx$I = XRTH$UnitIndx$I
  unt$pointer$to RTH$UnitIndx$I
  unt$name$C = Xunt$name$C
  if (unt$name$C != $NO) $OutH(unt$name$C,$$MAXname)    # jb E2141  2/29/00
 
  $column 13
  Othbr = int(XRTH$Othbr$F * 180 / $PI)
  $Outiz(othbr,3)
 
  $column 26
  if (XRTH$Active$I == $YES)
    $OutV("YES")        # jb  ($outV vice $outH)  2/29/00
  else
    $OutV("NO ")        # jb  ($outV vice $outH)  2/29/00
 
  $column 38
  if (XRTH$Damaged$I == $YES)
    $OutV("YES")        # jb  ($outV vice $outH)  2/29/00
  else
    $OutV("NO ")        # jb  ($outV vice $outH)  2/29/00
 
  $column 51
  if (XRTH$DayNight$I == day$rth)
    $OutV("DAY  ")      # jb  ($outV vice $outH)  2/29/00
  else
    $OutV("NIGHT")      # jb  ($outV vice $outH)  2/29/00
 
  $column 70
  rth$NextTranTime$f = Xrth$NextTranTime$f
  $Outiz(Game_DTG(rth$NextTranTime$f),6)
  $OutV("Z")        # jb  ($outV vice $outH)  2/29/00
 
return
end
 

 
define ($low$order$key,ikey2)
 
Subroutine ROTTRK
 
############################################################################
#$%
#$% Purpose:   ROTTRK executes the subroutines that generate the active
#$%            track status board.
#$%
#$% Called By: ROTSTA
#$%
#$% Calls:     ROTTRKHED     ROTENT
#$%            NXTROT     ROTNUN
#$%
#$% Tables:    RMT
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
############################################################################
BBcommon
STATUScommon
 
Integer ifound, lstsec, RMT$Pointer # jb E2145                   2/29/00
 
  call ROTTRKHED
 
  $exit$on$overflow
  ifound = $no
  lstsec = 0
 
  repeat
    {
     call NXTROTTRK(rmt$pointer)
     if (rmt$pointer == 0) break
 
     ifound = $yes
 
     call ROTENT(rmt$pointer)
     $exit$on$overflow
    }
 
  if (ifound == $no)  call ROTNUN
  else
    {
     $test$next$line ; $exit$on$overflow
     $prepare$next$line
    }
 
return
end
 

 
 
Subroutine ROTTRKHED
 
##############################################################################
#$%
#$% Purpose:   ROTTRKHED generates headings for the active track status board.
#$%
#$% Called By: ROTTRK
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##############################################################################
BBcommon
STATUScommon
 
## jb  E2141    MSG!, MSG2, MSG3 modified:      2/29/00
string MSG1 "                              ROTHR TRACKS "
string MSG2 "SITE      TRACK  INIT'L LAST   LAT    LONG    SIZE COURSE SPEED REPORT "
string MSG3 "                  TIME  TIME                                      TIME "
##           01234567890123456789012345678901234567890123456789012345678901234567890
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $column  1 ; $OutH(MSG1,42)       # jb E2141 (42 vice 43)
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $column  1 ; $OutH(MSG2,70)# jb E2141 (70 vice 79)
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $column  1 ; $OutH(MSG3,70)# jb E2141 (70 vice 78)
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
 
return
end
 

 
 
Subroutine NXTROTTRK(nxtpnt)
 
###########################################################################
#$%
#$% Purpose:   NXTTRK locates the next active track entry for display.
#$%
#$% Called By: ROTTRK
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    RVU     RMT     UNT
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
##########################################################################
BBcommon
STATUScommon
 
literal itrk[3],keys[3],lowest[3],
            CSTRIP8                                     # jb E2145  2/29/00
integer kk,nxtpnt,lstrmt,irsult,                        # jb E2145  2/29/00
        RMT$Pointer,RMT$Detector$I,RMT$TrackNumber$I,   # jb E2145  2/29/00
        RVU$Pointer,    UNT$Pointer                     # jb E2145  2/29/00
 
  lowest[1] = $highest$ascii
  lowest[2] = $highest$ascii
  lowest[3] = '99999999'
 
  keys[2] = 'O'
  if (ikey == 1)
    keys[1] = $lowest$ascii
  else
    keys[1] = ikey
  keys[3] = ikey2
  nxtpnt = 0
 
  if (iview == $neutral$view) return
 
  RVU$pointer$to iview
  rmt$pointer$to xRVU$LastRmtIndx$i
  lstrmt = rmt$pointer
 
  for (rmt$pointer$to xRVU$FirstRmtIndx$i;rmt$pointer<=lstrmt;rmt$pointer$next)
    {
     if (xrmt$InUse$i    == $no) next
     if (Xrmt$OverHoriz$I    != $YES)      next
     rmt$Detector$I = Xrmt$Detector$I
     if (rmt$Detector$I == $no) next
 
     rmt$TrackNumber$i = xrmt$TrackNumber$i
     if (rmt$TrackNumber$i == 0) next            # means data is garbage
 
     UNT$POINTER$TO rmt$detector$i
 
     itrk[1] = Xunt$Name$C
     itrk[2] = 'O'
     kk = 0; call smovv ("        ", itrk[3], kk)
     kk = 0; call smoviz (rmt$TrackNumber$i,3,itrk[3],kk)
 
     call COMPAR(3,itrk,keys,irsult)
 
     if (irsult <  0) next                       # less than keys
     if (irsult == 0)                            # found exact match
       {
	nxtpnt = rmt$pointer
	return
       }
 
     call COMPAR(3,itrk,lowest,irsult)
     if (irsult > 0) next                        # larger than lowest found
     lowest[1] = itrk[1]                         # at this point, have
     lowest[2] = itrk[2]                         # best candidate so far
     lowest[3] = itrk[3]
     nxtpnt = rmt$pointer
    }
 
##  kk    = 1       # jb  Deleted   2/29/00
  ikey  = lowest[1]
  ikey2 = lowest[3]
 
return
end
 

 
 
Subroutine ROTENT(rmt$pointer)
 
#####################################################################
#$%
#$% Purpose:   ROTENT gets the active track data for display.
#$%
#$% Called By: ROTTRK
#$%
#$% Calls:     IDHED      OUTH       OUT
#$%            OUTIZ      OUTIB      SMOVIB
#$%            SMOVIZ     SMOVLL     SMOVH
#$%            TRUBRG
#$%
#$% Tables:    RVU     RMT     UNT
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
#####################################################################
BBcommon
STATUScommon
 
Literal icode,       # jb E2145 (name, removed) 3/16/00
        UNT$Name$C,  CSTRIP,CSTRIP8                     # jb E2145  2/29/00
REAL*4  RMT$ApparentLAT$F,RMT$ApparentLON$F,            # jb E2145  2/29/00
        UNT$TrueLatitude$F,UNT$TrueLongitude$F,         # jb E2145  2/29/00
        RMT$FirstDetTime$F,RMT$LastDetTime$F,           # jb E2145  2/29/00
        RMT$TimeReported$F                              # jb E2145  2/29/00
Integer itseq   # jb To receive 4 bytes of Literal ikey2     E2145  2/29/00
Integer GAME_TIME,
        kk, RVU$Pointer, UNT$Pointer,                   # jb E2145  2/29/00
        RMT$Pointer,RMT$Detector$I,                     # jb E2145  2/29/00
        RMT$Composition$I,RMT$Detectee$I,RMT$Class$I,   # jb E2145  2/29/00
        RMT$Course$I,RMT$Speed$I,                       # jb E2145  2/29/00
        OWN$Pointer,OWN$NbrAC$I                         # jb E2145  2/29/00
 
  $test$next$line ; $exit$on$overflow
  $save$line$count
 
  kk=0; call smovh (ikey2,4,itseq,kk)	# itseq = ikey2
  $update$keys
  $prepare$next$line
 
  RVU$pointer$to iview
  icode = xRVU$trackcode$c
  rmt$detector$i = xrmt$detector$i
 
  $column 1
 
  if (rmt$detector$i != $no)
    {
     UNT$POINTER$TO rmt$detector$i
     UNT$NAME$C = XUNT$NAME$C
     if (UNT$NAME$C != $NO) $OutH(UNT$Name$c,$$MAXname) # jb E2141  2/29/00
    }
 
  $column 10 ; $OutH(icode,1) ; $OutV("O") ; $OutH(itseq,3) # jb E2141 2/29/00
 
  rmt$FirstDetTime$f = xrmt$FirstDetTime$f
  IBYTE = 18    # jb E2141 (18 vice 15)     2/29/00
  call SMOVIZ(Game_Time(rmt$FirstDetTime$f),4,IPAGE[1,LINCNT],IBYTE)
 
  rmt$LastDetTime$f = xrmt$LastDetTime$f
  IBYTE = 24    # jb E2141 (24 vice 23)     2/29/00
  call SMOVIZ(Game_Time(rmt$LastDetTime$f),4,IPAGE[1,LINCNT],IBYTE)
 
  rmt$apparentlat$f = xrmt$apparentlat$f
  IBYTE = 30    # jb E2141 (30 vice 29)     2/29/00
  call SMOVLL(rmt$apparentlat$f,"NS",IPAGE[1,LINCNT],IBYTE)
 
  rmt$apparentlon$f = xrmt$apparentlon$f
  IBYTE = 37
  call SMOVLL(rmt$apparentlon$f,"EW",IPAGE[1,LINCNT],IBYTE)
 
  IBYTE = 46    # jb E2141  (46 vice 48)        2/29/00
  rmt$Class$I = Xrmt$Class$I
  if (rmt$Class$I == $Surface$code)
    {
     $OutV("SHIP")      # jb  outV vice outH    2/29/00
    }
  else
    {
     rmt$Composition$i = Xrmt$Composition$i
     if (rmt$Composition$i == 1)
       $OutV("  1 ")    # jb  outV vice outH    2/29/00
     else if (rmt$Composition$i == 2)
       $OutV("FEW ")    # jb  outV vice outH    2/29/00
     else # must be 3 or Many
       $OutV("MANY")    # jb  outV vice outH    2/29/00
    }
 
  IBYTE = 52    # jb E2141  (52 vice 58)        2/29/00
  rmt$Course$I = Xrmt$Course$i
  call SMOVIZ(rmt$Course$i,3,IPAGE[1,LINCNT],IBYTE)
 
  IBYTE = 59    # jb E2141  (59 vice 66)        2/29/00
  rmt$Speed$i = Xrmt$Speed$i
  call SMOVIB(rmt$Speed$i,3,IPAGE[1,LINCNT],IBYTE)
 
  IBYTE = 65    # jb E2141  (65 vice 74)        2/29/00
  rmt$TimeReported$f = Xrmt$TimeReported$f
  call SMOVIZ(Game_Time(rmt$TimeReported$f),4,IPAGE[1,LINCNT],IBYTE)
 
  linlen[lincnt] = IBYTE
 
  if (mside == $Control$code)
    {
     $test$next$line ; $exit$on$overflow
     $prepare$next$line
 
     rmt$detectee$i = xrmt$detectee$i
     UNT$POINTER$TO rmt$detectee$i
     UNT$NAME$C = XUNT$NAME$C
        # jb \/ 9 vs 7;  E2141      2/29/00
     $column 9 ; $OutV("(")     # jb  ($outV vice $outH)  2/29/00
     if (UNT$NAME$C != 0) $OutH(UNT$NAME$C,$$MAXname) # jb E2141 2/29/00
     else               { $OutV("M") ; $OutIZ(rmt$detectee$i,4) }
     $OutV(")") # jb  ($outV vice $outH)  2/29/00
 
     UNT$POINTER$TO rmt$detectee$i
     UNT$TrueLatitude$f = Xunt$TrueLatitude$f
     UNT$TrueLongitude$f = Xunt$TrueLongitude$f
     $column 30 ; $OutV("(") ; $OutLL(unt$TrueLatitude$f,"NS")  # jb 2/29/00
     $column 37 ; $OutLL(unt$TrueLongitude$f,"EW") ; $OutV(")") # jb 2/29/00
 
     if (rmt$Class$I != $Surface$code)
       {
        own$pointer$to rmt$detectee$i
        own$NbrAC$I = Xown$NbrAC$I
        $column 46 ; $OutV("(") # jb  ($outV vice $outH)  2/29/00
        call SMOVIB(own$NbrAC$i,2,IPAGE[1,LINCNT],IBYTE)
        $OutV(")")  # jb  ($outV vice $outH)  2/29/00
       }
    }
 
return
end
 

Subroutine ROTNUN
 
#############################################################################
#$%
#$% Purpose:   ROTNUN generates a message when there is no active track
#$%            data for display.
#$%
#$% Called By: ROTTRK
#$%
#$% Calls:     ROTDSH     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
#############################################################################
BBcommon
STATUScommon
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
 
  $column 1 ; $OutV("No ROTHR tracks for this view") #jb $outV vice $outH  2/00
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
 
return
end
 

Subroutine ROTSITNUN
 
#############################################################################
#$%
#$% Purpose:   ROTSITNUN generates a message when there is no ROTHR site
#$%            data for display.
#$%
#$% Called By: ROTTRK
#$%
#$% Calls:     ROTDSH     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
#############################################################################
BBcommon
STATUScommon
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
 
  $column 1 ; $OutV("No ROTHR Sites") # jb  ($outV vice $outH)  2/29/00
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
 
return
end
 

 
 
Subroutine ROTDSH
 
############################################################################
#$%
#$% Purpose:   ROTDSH outputs appropriately spaced dashes in the track
#$%            status board.
#$%
#$% Called By: ROTNUN
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
############################################################################
BBcommon
STATUScommon
 
string IDASH      "-------------------------------------------------------------------------------"
 
  $test$next$line ; $exit$on$overflow
  $prepare$next$line
  $column 1 ; $OutH(idash,79)
 
return
end
 
