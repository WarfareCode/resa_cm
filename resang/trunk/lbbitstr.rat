include "macros.inc"
define m32bits '37777777777'o
 
Subroutine bmov (_	# Move bit string to destination bit string that may cross word boundary
                 inbstr,# Source bit string: in: integer*4 array
                 inlen, # Length of source bit string in bits: in: integer*4
                 outbstr, # Out bit string: out: integer*4 array
                 outlen)# Current length of out bit string in bits (1 origin): inout: integer*4
integer inbstr[10]
integer inlen
integer outbstr[0:10]
integer outlen
integer iw, isb, ieb, iwlen,inword
integer ow, owsb, osb, oweb, owrem, owlen
integer mask[0:32]
 
data mask / 0,
	    m1bits,
	    m2bits,
	    m3bits,
	    m4bits,
	    m5bits,
	    m6bits,
	    m7bits,
	    m8bits,
	    m9bits,
	    m10bits,
	    m11bits,
	    m12bits,
	    m13bits,
	    m14bits,
	    m15bits,
	    m16bits,
	    m17bits,
	    m18bits,
	    m19bits,
	    m20bits,
	    m21bits,
	    m22bits,
	    m23bits,
	    m24bits,
	    m25bits,
	    m26bits,
	    m27bits,
	    m28bits,
	    m29bits,
	    m30bits,
	    m31bits,
	    m32bits/
    		
# For each word in input bit string
iw = 0					# Current word in ibstr
for (isb=0; isb < inlen; isb = isb + 32)
{
    ieb = min (31, inlen - isb - 1)	# input bitstr end bit in word
 
    iw = iw + 1
 
    iwlen = ieb + 1
 
    inword = iand(inbstr[iw],mask[iwlen]) # Extract bit string from word
 
    osb = outlen
 
    ow = ishft (osb, -5)		# Equivalent to division by 32
 
    owsb = iand(osb, 31)		# Starting bit within word
 
    owrem = 32 - owsb			# Remaining bits in word
	
    owlen = min (iwlen, owrem)
 
    # Move input bit string to output bit string
    # arg 1 - input bit str; 2 - output bit str; 3 - start bit(0 orig);4 bit
    # length mask
    $$insert(inword, outbstr[ow], owsb, mask[owlen])
 
    if (inlen > owrem)			# Remainder goes in next word
    {
	ow = ow + 1
	inword = ishft (inword, -owlen)
	owlen = iwlen - owrem
	owsb = 0
	$$insert(inword, outbstr[ow], owsb, mask[owlen])
    }
 
    outlen = outlen + iwlen
}
 
return
end
	

 
Integer function bsubstr(_	# Bit substring
                 inbstr,  # Source bit string: in: integer*4 array
                 inst,    # Start bit (1 origin) : in: integer*4
                 inlen)   # Length of source bit stringin bits: in: integer*4
#+
# Returns extracted bit string in integer word right justified
#-
 
integer inbstr[0:10]
integer inlen
integer bout, boutt
integer iwsb, iw, iwrem, iwlen,is,inst
 
integer mask[0:32]
 
data mask / 0,
	    m1bits,
	    m2bits,
	    m3bits,
	    m4bits,
	    m5bits,
	    m6bits,
	    m7bits,
	    m8bits,
	    m9bits,
	    m10bits,
	    m11bits,
	    m12bits,
	    m13bits,
	    m14bits,
	    m15bits,
	    m16bits,
	    m17bits,
	    m18bits,
	    m19bits,
	    m20bits,
	    m21bits,
	    m22bits,
	    m23bits,
	    m24bits,
	    m25bits,
	    m26bits,
	    m27bits,
	    m28bits,
	    m29bits,
	    m30bits,
	    m31bits,
	    m32bits/
    		
is = inst - 1			# Zero origin
 
iw = ishft (is, -5)		# Equivalent to division by 32
 
iwsb = iand(is, 31)		# Starting bit within word
 
iwrem = 32 - iwsb		# Remaining bits in word
 
iwlen = min (inlen, iwrem)
 
bout = $$extract(inbstr[iw], iwsb, mask[iwlen])
 
if (inlen > iwrem)
{
    iw = iw + 1
    iwlen = inlen - iwrem
    iwsb = 0
    boutt = $$extract(inbstr[iw], iwsb, mask[iwlen])
    $$insert(boutt, bout, iwrem, mask[iwlen])
}
 
return[ bout ]
end
