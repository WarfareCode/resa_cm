######################################################################
#$%
#$%   This file contains the force procedures for entering data into
#$% the force data base for the Rothr Model.
#$%
######################################################################
 
 
#####   version 1.0  dated-  9sep86
 
 
include "bbcode.inc"
include "orders.inc"
include "plplay.inc"
include "frmain.inc"
include "ascii.inc"
define (ForceImplicit, Implicit None)                # MJC 6/12/2K (E2145)

subroutine ferothr (nargs, args)
 
#####################################################################
#$%
#$% Purpose:   FEROTHR processes entered ROTHR site data.
#$%            Up to 8 sites can be entered.  The sites must exist as
#$%            shore bases and be a blue force.
#$%
#$% Date:      August 86
#$%
#$% Author:    Richard Schauer
#$%
######################################################################
 
ForceCommon
integer KFORCE,
        KROTHRA,
        KROTAIRA,
        III,
        IXIX,
        KROTSURFA                                    # MJC 6/8/2K (E2145)
 
integer nargs,found,dirs[16]
literal args[$max$args],name
data dirs/16*-1/
 
name = args[3]
 
call echov("Rothr site ")
call echohn(name,$$MAXname) # jb E2141 $$MAXname vice 5  1/4/00
 
if (nrothr >= $rothr)
  {
   call echov (" was not entered, rothr table full. ")
   call echo($bell)
   call echor
   return
  }
found = $NO
 
## this searches for the force to see if it exists as a blue shore base
 
for (force$index = 1; force$index <= nforce; force$index = force$index + 1)
  if (force$name == name)
    {
     if (force$task >= 50000)  # it's orange or neutral
       {
        call echov(" is not blue, order ignored.")
        call echor
        RETURN
       }
     if (force$class == 0)  # it's a shore base
       {
        found = $YES
        BREAK
       }
     else
       {
        call echov(" is not a shore base! Rothr data ignored!")
        call echor
        RETURN
       }
    }
if (found == $NO)
  {
   call echov(" not found, rothr site not entered.")
   call echor
   return
  }
 
## see if rothr entry exists already
 
found = $NO
for (rothr$pointer$first; rothr$pointer$valid; rothr$pointer$next)
  if (rothr$basename == name)
    {
     found = $YES + $YES
     BREAK
    }
 
if (found == $NO) ## get the first available slot in the rothr table
  {
   for (rothr$pointer$first; rothr$pointer$valid; rothr$pointer$next)
     if (rothr$inuse == $NO)
       {
        found = $YES
        BREAK
       }
  }
 
if (found == $NO) # no more room left
  {
   call echov("not entered.  All sites filled")
   call echor
   return
  }
else if (found == $YES)
  {
   call echov(" has been entered. ")
   call echor
   nrothr = nrothr + 1
  }
else
  {
   call echov(" has been updated.")
   call echor
  }
 
## enter data in rothr table
 
rothr$basename = name
rothr$othbr = args[4]
rothr$power = args[5]
rothr$gain = args[6]
rothr$freq = args[7]
rothr$noise = args[8]
rothr$task = force$task
 
if (found == $YES + $YES) return # only an update, no reinitialization
 
## initialize rothr dwell illumination data sub tables for air and surface
 
for (airdir$pointer$first; airdir$pointer$valid; airdir$pointer$next)
  {
   iii = 1
   set_airdir_slot(dirs,iii,0,16)
  }
 
for (surfdir$pointer$first; surfdir$pointer$valid; surfdir$pointer$next)
  {
   iii = 1
   set_surfdir_slot(dirs,iii,0,16)
  }
 
return
end
 
 

subroutine fedir (nargs, args)
 
#####################################################################
#$%
#$% Purpose:   FEDIR processes entered DIR data for a ROTHR site.
#$%
#$% Date:      August 86
#$%
#$% Author:    Richard Schauer
#$%
#$% Record of Modifications:
#$%
#$%   Programmer          Date         Modification
#$%
#$%   C. M. Leaf         3/1/90        Added the last two arguements
#$%                                    to the macros set_airdir_slot
#$%                                    and set_surfdir_slot.  This
#$%                                    was done to reflect changes
#$%                                    made to the ENTER DIR order.
#$%
######################################################################
 
ForceCommon
PlayCommon
integer KROTHRA,
        KROTAIRA,
        IXIX,
        KROTSURFA                                    # MJC 6/8/2K (E2145)
 
integer nargs,found,argsptr,start,finish
literal args[$max$args],name
 
name = args[3]
found = $NO
call echov ("Rothr base ")
call echohn(name,$$MAXname) # jb E2141 $$MAXname vice 5  1/4/00
 
for (rothr$pointer$first; rothr$pointer$valid; rothr$pointer$next)
  if (rothr$basename == name)
    {
     found = $YES
     BREAK
    }
if (found == $NO)
  {
   call echov ("not found.  Please enter the site first!")
   call echor
   return
  }
 
if (args[4] == $lex$air$)
  {
   call echov(", air PCA ring #")
   call echoi(int(args[5]))
   if ((args[5] < 1) | (args[5] > airdir$slots))
     {
      call echov (" is invalid!")
      call echor
      return
     }
   airdir$pointer$to args[5]
    argsptr = 7
#   argsptr = 6
   if (args[6] == $lex$day$)     #   store the values in
     {                           #   work$file$i[$halfquad,airdir$address]
      start=0                    #                to
      finish=8                   #   work$file$i[$halfquad,airdir$address+7]
     }
   else                          #   store the values in
     {                           #   work$file$i[$halfquad,airdir$address+8]
      start=8                    #                to
      finish=16                  #   work$file$i[$halfquad,airdir$address+15]
     }
   set_airdir_slot(args,argsptr,start,finish)
   call echov (" has been entered.")
   call echor
  }
else
  {
   call echov (", surface PCA ring #")
   call echoi (int(args[5]))
   if ((args[5] < 1) | (args[5] > surfdir$slots))
     {
      call echov (" is invalid!")
      call echor
      return
     }
   surfdir$pointer$to args[5]
    argsptr = 7
#   argsptr = 6
   if (args[6] == $lex$day$)     #   store the values in
     {                           #   work$file$i[$halfquad,surfdir$address]
      start=0                    #                to
      finish=8                   #   work$file$i[$halfquad,surfdir$address+7]
     }
   else                          #   store the values in
     {                           #   work$file$i[$halfquad,surfdir$address+8]
      start=8                    #                to
      finish=16                  #   work$file$i[$halfquad,surfdir$address+15]
     }
   set_surfdir_slot(args,argsptr,start,finish)
   call echov (" has been entered.")
   call echor
  }
return
end
 

 
subroutine fdrothr (nargs,args)
 
#####################################################################
#$%
#$% Purpose:   FDROTHR controls the deletion of ROTHR sites.
#$%
#$% Called By: FRDELET
#$%
#$% Calls:     ECHOH    ECHOR
#$%
#$% Tables:    NONE
#$%
#$% Date:      AUGUST 86
#$%
#$% Author:    Richard Schauer
#$%
#####################################################################
 
Forcecommon
integer KROTHRA,
        KROTAIRA,
        IXIX,
        KROTSURFA                                        # MJC 6/8/2K (E2145)
 
integer nargs,found,dirs[16],start,finish,iii,jjj,kkk
literal args[$max$args]
data dirs/16*-1/
 
if (args[3] != $lex$ALL$)     # must be a specific rothr site
  {
   found = $NO
   for (rothr$pointer$first; rothr$pointer$valid; rothr$pointer$next)
     if (rothr$basename == args[4])
       {
        found = $YES
        BREAK
       }
   call echov("Rothr site ")
   call echohn(args[4],$$MAXname) # jb E2141 $$MAXname vice 5  1/4/00
   if (found != $YES)
     {
      call echov (" not found!")
      call echor
      return
     }
   start = rothr$pointer$index
   finish = start
   call echov(" deleted")
   call echor
   nrothr = nrothr - 1
  }
else
  {
   start = 1
   finish = nrothr
   call echov("All rothr sites deleted")
   call echor
   nrothr = 0
  }
 
kkk = start
 
for (iii = start; iii <= finish; )
  {
   rothr$pointer$to kkk
   kkk = kkk + 1                 # advance pointer index
   if (rothr$InUse == $NO) NEXT  # this is for deleting all sites
   iii = iii + 1                 # advance number deleted
   rothr$InUse = $NO
   for (airdir$pointer$first; airdir$pointer$valid; airdir$pointer$next)
     {
      jjj = 1
      set_airdir_slot(dirs,jjj,0,16)
     }
   for (surfdir$pointer$first; surfdir$pointer$valid; surfdir$pointer$next)
     {
      jjj = 1
      set_surfdir_slot(dirs,jjj,0,16)
     }
  }
 
return
end
 
 

 
Subroutine flrothr
 
###############################################################
#$%
#$% Purpose:   FLROTHR loads ROTHR site data
#$%            that was previously defined.
#$%
#$% Date:      AUGUST 86
#$%
#$% Author:    Richard Schauer
#$%
###############################################################
 
ForceCommon
integer krec,iptr,mrec
literal rothrdata[16]
integer LFCS,
        ISTAT,
        IROTHR,
        KROTHRA,
        M,
        KROTAIRA,
        IXIX,
        KROTSURFA                                # MJC 6/8/2K (E2145)
 
call FDopen ($read,scenario$name,$lits,rothr$file,32*4,lfcS,istat)
 
read (lfcS,rec=1,err=8010) mrec
mrec = mrec - 1
nrothr = 0
krec = 2
 
for (irothr = 1; irothr <= mrec; irothr = irothr + 1)
  {
   rothr$pointer$to irothr
   read (lfcS,rec=krec,err=8010) (rothrdata[m],m=1,7)
   krec = krec + 1
 
   rothr$basename = rothrdata[1]
   rothr$othbr    = rothrdata[2]
   rothr$power    = rothrdata[3]
   rothr$gain     = rothrdata[4]
   rothr$freq     = rothrdata[5]
   rothr$noise    = rothrdata[6]
   rothr$task     = rothrdata[7]
 
   for (airdir$pointer$first; airdir$pointer$valid; airdir$pointer$next)
     {
      read (lfcS,rec=krec,err=8010) (rothrdata[m],m=1,16)
      krec = krec + 1
      iptr = 1
      set_airdir_slot(rothrdata,iptr,0,16)
     }
   for (surfdir$pointer$first; surfdir$pointer$valid; surfdir$pointer$next)
     {
      read (lfcS,rec=krec,err=8010) (rothrdata[m],m=1,16)
      krec = krec + 1
      iptr = 1
      set_surfdir_slot(rothrdata,iptr,0,16)
     }
 
   nrothr = nrothr + 1
  }
 
8010  continue
call FDclos (lfcS)
 
return
end
 
 

 
subroutine fprothr (nargs,args)
 
####################################################################
#$%
#$% Purpose:   FPEPH prints all data for the ROTHR sites.
#$%
#$% Date:      AUGUST 86
#$%
#$% Author:    Richard Schauer
#$%
#############################################################
 
ForceCommon
integer KROTHRA,
        KROTAIRA,
        IXIX,
        KROTSURFA                                    # MJC 6/8/2K (E2145)
 
integer nargs,iii,dirs[16],start,finish,jjj,kkk
literal args[$max$args]
 
9000 format (/)
#001 format (//"    ------ ",a5,x,a8,a1,x,a5," --- Rothr Sites ------",/)
9001 format (//"    ------ ",a5,x,a17," --- Rothr Sites ------",/) # jb mdate 1/00
 
9003 format (/,"                  Day table"//"                         Night table",/)
9004 format (/,x,a5,":",x,a5)
9005 format (x,a5,":",x,i5)
9006 format (i5,x,8(i4),4x,8(i4))
#xxxxxb11nn22nn33nn44nn55nn66nn77nn88nnbbbb11nn22nn33nn44nn55nn66nn77nn88nn
 
#$% write header record
write (35,9001) scenario$name,mdate   # jb delete ',mtime'     1/4/00
 
start = 0
 
if ((args[2] == $lex$ALL$) | (args[3] == $lex$ALL$)) # Print all or
  {                                                  # Print Rothr All
   start = 1
   finish = nrothr
  }
else   # specific rothr site to be printed
  {
   for (rothr$pointer$first; rothr$pointer$valid; rothr$pointer$next)
     if (args[4] == rothr$basename)
       {
        start = rothr$pointer$index
        finish = start
        BREAK
       }
   if (start == 0) # can't find what user wants
     {
      call echov ("Can't find Rothr site.")
      call echo($bell)
      call echor
      RETURN
     }
  }
 
kkk = start   # set pointer index to start
 
for (jjj = start; jjj <= finish; )
  {
 
   rothr$pointer$to kkk
   kkk = kkk + 1                    # advance pointer index
   if (rothr$InUse == $NO) NEXT
   jjj = jjj + 1                    # advance number printed
 
   write (35,9004) "Base ",rothr$basename
   write (35,9005) "OTHBR",rothr$othbr
   write (35,9005) "Power",rothr$power
   write (35,9005) "Gain ",rothr$gain
   write (35,9005) "Freq.",rothr$freq
   write (35,9005) "Noise",rothr$noise
 
   write (35,9004) "DIRs ","Air  "
   write (35,9003)
 
   for (airdir$pointer$first; airdir$pointer$valid; airdir$pointer$next)
     {
      iii = 1
      get_airdir_slot(dirs,iii)
      write (35,9006) airdir$pointer$index,(dirs[iii],iii=1,16)
     }
 
   write (35,9004) "DIRs ","surf "
   write (35,9003)
 
   for (surfdir$pointer$first; surfdir$pointer$valid; surfdir$pointer$next)
     {
      iii = 1
      get_surfdir_slot(dirs,iii)
      write (35,9006) surfdir$pointer$index,(dirs[iii],iii=1,16)
     }
   write (35,9000)
  }
write (35,9000)
 
return
end
 

 
subroutine FVRroth (istat)
 
######################################################################
#$%
#$% Purpose:   FVRroth verifies data associated with the ROTHR sites.
#$%
#$% Date:      AUGUST 86
#$%
#$% Author:    Richard Schauer
#$%
######################################################################
 
ForceCommon
literal dirs[16]
integer krothr,iii
integer ISTAT,
        KROTHRA,
        FOUND,
        KFORCE,
        KROTAIRA,
        IXIX,
        KROTSURFA                                    # MJC 6/8/2K (E2145)
 
istat = $YES
 
call echor
call echov ("Verifying Rothr site data...")
 
krothr = 0
 
for (rothr$pointer$first; rothr$pointer$valid; rothr$pointer$next)
  {
   if (rothr$InUse == $NO) NEXT
   krothr = krothr + 1
 
   # search to see if shore base still exists and still is a shore base
 
   found = $NO
   for (force$index = 1; force$index <= nforce; force$index = force$index + 1)
     {
      if ((force$name == rothr$basename) & (force$task == rothr$task))
        {
         if (force$class == 0)
           {
            found = $YES
            BREAK
           }
         else
           {
            call echor
            call echov("Site is not designated as a shore base -> ")
            call echoh(rothr$basename,$$MAXname) # jb E2141 (vice 5) 1/4/00
            call echor
            istat = $NO
           }
        }
     }
   if (found == $NO)
     {
      call echor
      call echov("Shore base not found -> ")
      call echoh(rothr$basename,$$MAXname) # jb E2141 (vice 5) 1/4/00
      call echor
      istat = $NO
     }
   # search to see if all dir sites are entered
   for (airdir$pointer$first; airdir$pointer$valid; airdir$pointer$next)
     {
      iii = 1
      get_airdir_slot(dirs,iii)
      if (dirs[1] == -1)
        {
         call echor
         call echov("Daytime losses for air PCA ring #")
         call echoi(airdir$pointer$index)
         call echov(" for ")
         call echoh(rothr$basename,$$MAXname) # jb E2141 (vice 5) 1/4/00
         call echov(" not initialized yet.")
         call echor
         istat = $NO
        }
      if (dirs[9] == -1)
        {
         call echor
         call echov("Nighttime losses for air PCA ring #")
         call echoi(airdir$pointer$index)
         call echov(" for ")
         call echoh(rothr$basename,$$MAXname) # jb E2141 (vice 5) 1/4/00
         call echov(" not initialized yet.")
         call echor
         istat = $NO
        }
     }
   for (surfdir$pointer$first; surfdir$pointer$valid; surfdir$pointer$next)
     {
      iii = 1
      get_surfdir_slot(dirs,iii)
      if (dirs[1] == -1)
        {
         call echor
         call echov("Daytime losses for surface PCA ring #")
         call echoi(surfdir$pointer$index)
         call echov(" for ")
         call echoh(rothr$basename,$$MAXname) # jb E2141 (vice 5) 1/4/00
         call echov(" not initialized yet.")
         call echor
         istat = $NO
        }
      if (dirs[9] == -1)
        {
         call echor
         call echov("Nighttime losses for surface PCA ring #")
         call echoi(surfdir$pointer$index)
         call echov(" for ")
         call echoh(rothr$basename,$$MAXname) # jb E2141 (vice 5) 1/4/00
         call echov(" not initialized yet.")
         call echor
         istat = $NO
        }
     }
  }
if (krothr != nrothr)
  {
   call echor
   call echov("Number of sites is ambiguous, all sites may not be saved!")
   call echo($BELL)
  }
return
end
 

 
subroutine fsavRR                                       # save action
 
######################################################################
#$%
#$% Purpose:   FVRroth saves the ROTHR sites to a data file.
#$%
#$% Date:      AUGUST 86
#$%
#$% Author:    Richard Schauer
#$%
######################################################################
 
Forcecommon
literal rothrdata[16]
integer m
integer LFCS,
        ISTAT,
        NREC,
        KROTHRA,
        KROTAIRA,
        IXIX,
        KROTSURFA                                    # MJC 6/8/2K (E2145)
 
call FDopen ($write,scenario$name,$lits,rothr$file,32*4,lfcS,istat)
 
nrec = 2
 
for (rothr$pointer$first; rothr$pointer$valid; rothr$pointer$next)
  {
   if (rothr$InUse == $NO) NEXT
   rothrdata[1] = rothr$basename
   rothrdata[2] = rothr$othbr
   rothrdata[3] = rothr$power
   rothrdata[4] = rothr$gain
   rothrdata[5] = rothr$freq
   rothrdata[6] = rothr$noise
   rothrdata[7] = rothr$task
 
   write(lfcS,rec=nrec) (rothrdata[m],m=1,7)
   nrec = nrec + 1
 
   for (airdir$pointer$first; airdir$pointer$valid; airdir$pointer$next)
     {
      m = 1
      get_airdir_slot(rothrdata,m)
      write(lfcS,rec=nrec) (rothrdata[m],m=1,16)
      nrec = nrec + 1
     }
 
   for (surfdir$pointer$first; surfdir$pointer$valid; surfdir$pointer$next)
     {
      m = 1
      get_surfdir_slot(rothrdata,m)
      write(lfcS,rec=nrec) (rothrdata[m],m=1,16)
      nrec = nrec + 1
     }
 
  }
nrothr = nrothr + 1
write (lfcS,rec=1) $count_w_fingerprint(nrothr)  # write record count
call FDclos (lfcS)
 
return
end
