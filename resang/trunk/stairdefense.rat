 
include "ascii.inc"             # include ascii constants
include "bbacc.inc"
include "bbads.inc"
include "bbcmc.inc"
include "bbcode.inc"            # blackboard defines
include "bbctl.inc"
include "bbdeq.inc"
include "bbrmt.inc"
include "bbrvu.inc"
include "bbunt.inc"
include "bbvue.inc"
include "stmain.inc"
 
 
define ($low$order$key,ikey2)
 
define (BBImplicit, Implicit None)
 
Subroutine AirDefense_STA
##############################################################################
#$%
#$% Purpose:   AirDefense_STA is the main calling routine for the Air Defense
#$%            ASTAB.
#$%
#$% Called By: Format_Astab   STDISP
#$%
#$% Calls:     AirDefense_Title   AirDefense_Data
#$%
#$% Date:      Dec 1993
#$%
#$% Author:    Susan Miller
#$%
##############################################################################
BBcommon
STATUScommon
 
 # call for display air defense status board titles
 call AirDefense_Title
 
 # call for air defense status board data
 call AirDefense_Data
 
return
end

 
Subroutine AirDefense_Title
##############################################################################
#$%
#$% Purpose:   AirDefense_Title generates titles for the Air Defense status
#$%            board.
#$%
#$% Called By: AirDefense_STA
#$%
#$% Calls:     OUT...
#$%
#$% Date:      Dec 1993
#$%
#$% Author:    Susan Miller
#$%
##############################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
 # go to next line
 $prepare$next$line
 
 # display air defense status board titles
 $column  1
 $OutV("View: ")
 $OutH(nmvue,5)
 
 $column 16
 $OutV("AIR DEFENSE STATUS BOARD [")
 $OutI(iboard)
 
 $outv("] - Page ")
 $OutIB(kpage,2)
 
 $column 61
 $OutV("Game Time: ")
 $OutIZ(Game_DTGs(igmin),8)
 
return
end

 
Subroutine AirDefense_Data
############################################################################
#$%
#$% Purpose:   AirDefense_Data executes the subroutines that generate the
#$%            air defense status board.
#$%
#$% Called By: AirDefense_STA
#$%
#$% Calls:     AirDefense_header
#$%
#$% Tables:    ADS
#$%
#$% Date:      Dec 1993
#$%
#$% Author:    Susan Miller
#$%
############################################################################
BBcommon
STATUScommon
 
Integer Cont_Ind      # jb    E2145   4/19/00
Common  Cont_Ind
 
Integer ADS$Pointer # jb    E2145   4/11/00
integer ifound, lstsec
 
 # call for air defense status board headings
 call AirDefense_header
 
 # exit if status board full
 $exit$on$overflow
 
 # initialize test flag
 ifound = $no
 lstsec = 0
 
IF  (IKEY != 1)
    Cont_Ind = 1
ELSE
    Cont_Ind = 0
 
 repeat
   {
    # get next air defense track entry
    call Next_ADS_entry(ADS$Pointer)
 
    # if no air defense tracks, break loop
    if (ADS$Pointer == 0) break
 
    # set flag
    ifound = $yes
 
    # get air defense track data, if total_entries = VUE$NumberADSEntries$I
    # then this is the first one in the list
    call ADS_entry(ADS$Pointer)
 
    # exit if status board full
    $exit$on$overflow
   }
 
 # if no active tracks found, display message
 if (ifound == $no)  call No_entries
 
return
end # AirDefense_Data

 
Subroutine AirDefense_header
 
##############################################################################
#$%
#$% Purpose:   AirDefense_header generates headings for the air defense status
#$%            board.
#$%
#$% Called By: AirDefense_Data
#$%
#$% Date:      DEC 1993
#$%
#$% Author:    Susan Miller
#$%
#$% Modified:  Susan Miller - 7/97 (E1587)
#$%            Updated strings MSG2 and ctl_MSG2 to reflect additional
#$%            result codes.
#$%
##############################################################################
BBcommon
STATUScommon
 
integer ilen
 
 
#$%==========================================================================
#$% jb These six strings replaced:  see below   E2141   3/7/00
#            01234567890123456789012345678901234567890123456789012345678901234567890123456789
#string MSG1 " REPORT   ENGAGED SAM   SAM    SAM  ASSIGN TARGET INTERCEPT RESULT              "
#string MSG2 "  TIME      BY    TYPE REMAIN DESIG TRACK  CLASS    TIME    H/M/U               "
#string MSG3 "--------- ------ ----- ------ ----- ------ ------ --------- ------              "
#            XXXXXX:XX  XXXXX XXXXX  000   XXXXX  XXXXX  XXXXX XXXXXX:XX    H
#
#                01234567890123456789012345678901234567890123456789012345678901234567890123456789
#string ctl_MSG1 " REPORT   ENGAGED SAM   SAM    SAM  ASSIGN TARGET INTERCEPT RESULT TARGET TARGET"
#string ctl_MSG2 "  TIME      BY    TYPE REMAIN DESIG TRACK  CLASS    TIME    H/M/U   NAME   TYPE "
#string ctl_MSG3 "--------- ------ ----- ------ ----- ------ ------ --------- ------ ------ ------"
#                XXXXXX:XX  XXXXX XXXXX  000   XXXXX  XXXXX  XXXXX XXXXXX:XX    H    XXXXX  XXXXX
#$%=========================================================================
 
#$% jb E2141 The strings below replace those above  3/7/00 & 10/30/00
# move headings to IPAGE for display
#            01234567890123456789012345678901234567890123456789012345678901234567890123456789
string MSG1 "REPORT ENGAGED    SAM    SAMS   SAM     ASSGN    TGT  INTCP HIT/ "
string MSG2 " TIME    BY:     TYPE:   LEFT   NAME    TRACK   CLASS TIME  MISS "
string MSG3 "------ -------- -------- ---- -------- -------  ----- ------ ---  "
#            XXXXXX XXXXXXXX XXXXXXXX  000 XXXXXXXX XXXXXXX  XXXXX XXXXXX  H
 
#                01234567890123456789012345678901234567890123456789012345678901234567890123456789
string ctl_MSG1 "REPORT ENGAGED    SAM    SAMS   SAM     ASSGN   TGT  INTCPT H/ TARGET   TARGET "
string ctl_MSG2 " TIME    BY:     TYPE:   LEFT   NAME    TRACK  CLASS  TIME  M   NAME     TYPE  "
string ctl_MSG3 "------ -------- -------- ---- -------- ------- ----- ------ - -------- --------"
#                XXXXXX XXXXXXXX XXXXXXXX  000 XXXXXXXX XXXXXXX XXXXX XXXXXX H XXXXXXXX XXXXXXXX
 
 # set line lengths:
 
 if (mside == $Control$code)
    {
     ilen = 0; call smovh (ctl_MSG1,ARB,Ipage[1,2],ilen)
     LINLEN[2] = ilen   # jb E2141  3/13/00
     ilen = 0; call smovh (ctl_MSG2,ARB,Ipage[1,3],ilen)
     LINLEN[4] = ilen   # jb E2141  3/13/00
     ilen = 0; call smovh (ctl_MSG3,ARB,Ipage[1,4],ilen)
    }
 else
    {
     ilen = 0; call smovh (MSG1,ARB,Ipage[1,2],ilen)
     LINLEN[2] = ilen   # jb E2141  3/13/00
     ilen = 0; call smovh (MSG2,ARB,Ipage[1,3],ilen)
     LINLEN[3] = ilen   # jb E2141  3/13/00
     ilen = 0; call smovh (MSG3,ARB,Ipage[1,4],ilen)
     LINLEN[4] = ilen   # jb E2141  3/13/00
    }
 
 # set line counter
 LINCNT = 4
 
return
end

 
Subroutine Next_ADS_entry (nxtpnt)
 
##############################################################################
#$%
#$% Purpose:   Next_ADS_entry first counts the number of entries this particular
#$%            view has by following the linked list and keeping count in the
#$%            variable num_of_entries.  The last entry in the list will be the
#$%            most recent entry and should be the first one displayed on the
#$%            ASTAB.
#$%
#$% Called By: AirDefense_Data
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    ADS
#$%
#$% Date:      Jan 1994
#$%
#$% Author:    Susan Miller
#$%
#$% Modified:  Susan Miller - 7/97 (E1587)
#$%            When there are multiple entries for one time, then the
#$%            entries are displayed in ascending order by the number of
#$%            SAMs remaining (vice alphabetically by SAM name).
#$%
##############################################################################
BBcommon
STATUScommon
 
Literal CSTRIP8      # jb    E2145   4/19/00
Integer nxtpnt,
        kk, irsult,  # jb    E2145   3/20/00
       Cont_Ind      # jb    E2145   4/19/00
Common Cont_Ind
LITERAL itrk[2],keys[2],highest[2]
Integer ADS$Pointer # jb    E2145   4/11/00
 
 
#$% initialize save array
highest[1] = $lowest$ascii
highest[2] = $lowest$ascii
 
#$% if first entry save highest - else save key
if (ikey  == 1)
    {
     keys[1] = $highest$ascii
     Cont_Ind = 0
    }
else
    {
     keys[1] = ikey
     Cont_Ind = 1
    }
 
#$% save key
if (cont_ind == 1)
    {
     cont_ind = 0
     ikey2 = nkey2
    }
 
keys[2] = ikey2
 
#$% initialize pointer
nxtpnt = 0
 
#$% if view is CONTROL view, return
if (iview == $neutral$view) return
 
#$% search ADS detection tables
for (ADS$pointer$first; ADS$pointer$valid; ADS$pointer$next)
   {
    #$% if none get next entry
    if ((xADS$FiringUNTName$C == 0) | (xADS$SAMUNTName$C == 0)) next
 
    # if the view is not a match, get the next one
    if (xADS$View$I != iview) next
 
    #$% save SAM name and initial report time
    itrk[1] = $BLANKLIT
    itrk[2] = $BLANKLIT
    kk=0; call smoviz (int(xADS$InitialReportTime$f),5,itrk[1],kk)
    kk=0; call smoviz ((10000 - xADS$NbrSAMsRemaining$I),5,itrk[2],kk)
 
    #$% compare track to keys
    call COMPAR(2,itrk,keys,irsult)
 
    # if keys are less than track or if found exact match (which
    # only happens if it is the same slot), get next
    if (irsult >= 0) next        # greater than keys
 
    #$% compare track numbers to lowest
    call COMPAR(2,itrk,highest,irsult)
 
    if (irsult < 0) next        # larger than lowest found
 
    highest[1] = itrk[1]
    highest[2] = itrk[2]
 
    #$% save pointer
    nxtpnt = ADS$Pointer
   } # end for loop thru ADS table
 
#$% save highest
ikey  = highest[1]
ikey2 = highest[2]
 
return
end # Next_ADS_entry

# smm 7/97 (E1587)
# Added $unsuccessful definition, changing values for
# $miss, $hit, $detonation, and $attemptedhit definitions.
define($miss,1)
define($hit,2)
define($unsuccessful,4)     # SMM #E1414 6/95
define($detonation,5)       # DIS ghost         # SMM 3/22/95
define($attemptedhit,6)     # ALSP ghost
 
Subroutine ADS_entry(ADS$Pointer)
 
#####################################################################
#$%
#$% Purpose:   ADS_entry
#$%
#$% Called By: AirDefense_Data
#$%
#$% Calls:     IDHED      OUTH       OUT
#$%            OUTIZ      OUTIB      SMOVIB
#$%            SMOVIZ     SMOVLL     SMOVH
#$%            TRUBRG
#$%
#$% Tables:    ADS
#$%
#$% Date:      Jan 1994
#$%
#$% Author:    Susan Miller
#$%
#$% Modified:  Susan Miller 3/22/95
#$%            Added handling of ADS$Result other than hit or miss based
#$%            upon whether the target is a ghost.
#$%
#$%            Susan Miller - 7/97 (E1587)
#$%            Added display of "U" for unsuccessful launches.  Moved
#$%            extraction of ADS$Result$I up and display of intercept
#$%            time only if the ADS$Result$I is not unsuccessful.
#$%
#####################################################################
BBcommon
STATUScommon
 
Literal CSTRIP8      # jb    E2145   4/19/00
literal ADS$FiringUNTName$C, CMC$Type$C, ADS$SAMUNTName$C, ACC$Type$C
literal ADS$TrackNumber$C, ADS$TargetUNTName$C, ADS$TargetClass$C
real    ADS$InitialReportTime$f, ADS$InterceptTime$f
integer ADS$Pointer, ADS$NbrSAMsRemaining$I
integer ADS$TargetACCPointer$I, ADS$TargetCMCPointer$I # jb E2145  4/19/00
integer ADS$Result$I, ADS$AircraftFlag$I, CMC$Pointer, ACC$Pointer
Integer Game_DTG, I_SWITCH_1               # jb E2145  3/20/00
 # test and exit on overflow, save line count
 $test$next$line ; $exit$on$overflow
 $save$line$count
 
 # increment keys
 $update$keys
 
 # go to next line
 $prepare$next$line
 
 # display the initial record time of this engagement
 ADS$InitialReportTime$f = xADS$InitialReportTime$f
 $column 1
 $OutIZ(Game_DTG(ADS$InitialReportTime$f),6)
 
 # display the RESA name of platform that fired the advanced SAM
 $column 8      # jb E2141  (8 vs 11)   3/7/00
 ADS$FiringUNTName$C = xADS$FiringUNTName$C
 if (ADS$FiringUNTName$C != $no) $OutH(ADS$FiringUNTName$C,$$MAXname) # jb 3/00
 
 # display the type of SAM that was fired
 $column 17     # jb E2141  (17 vs 18)   3/7/00
 CMC$Pointer$To xADS$SAMCMCIndex$I
 CMC$Type$C = xCMC$Type$C
 if (CMC$Type$C != 0) $OutH(CMC$Type$C,$$MAXname)   # jb E2141  ($$..)  3/7/00
 
 # display the number of same type SAMs remaining on the firing platform
 $column 26     # jb E2141  (26 vs 24)   3/7/00
 ADS$NbrSAMsRemaining$I = MIN(xADS$NbrSAMsRemaining$I,9999) # jb E2141 3/7/00
 $outIB(ADS$NbrSAMsRemaining$I,4) # jb E2141  (4 vs 5)   3/7/00
 
 # display the RESA name assigned to this SAM
 $column 31
 # present the SAM name
 ADS$SAMUNTName$C = xADS$SAMUNTName$C
 if (ADS$SAMUNTName$C != $no) $OutH(ADS$SAMUNTName$C,$$MAXname) # jb E2141 3/00
 
 # display the track number this SAM is assigned to intercept
 $column 40    # jb E2141  (40 vs 38)   3/7/00
 ADS$TrackNumber$C = xADS$TrackNumber$C
 if(ADS$TrackNumber$C !=0) $OutH(ADS$TrackNumber$C,$$MaxLit) # jb E2172 10/30/00
 
 # display the track class  jb 11/6/00 47 vice 48   E2141
 $column 47    # jb E2141 (46 vs 44 @ 3/7/00; E2172, 48 @ 10/30/00)
 ADS$TargetClass$C = xADS$TargetClass$C
 if (ADS$TargetClass$C != 0) $OutH(ADS$TargetClass$C,$$MAXname) # jb E2141 3/00
 
 #  intercept time of the SAM (seconds) jb 54 vice 57   E2141 11/6/00
 $column 54    # jb E2141  55 vs 51 @ 3/7/00; E2172  57 @ 10/30/00)
 ADS$InterceptTime$f = xADS$InterceptTime$f
 ADS$Result$I = xADS$Result$I          # do not display a time for
 if (ADS$Result$I != $unsuccessful)    # failed launched - smm 7/97 (E1587)
     $OutIZ(Game_DTG(ADS$InterceptTime$F),6)
 
 # display the result, H for hit or M for miss jb 61 vice 64   E2141 11/6/00
 $column 61    # jb E2141  62 @ 3/7/00;  E2172 64 @ 10/30/00
 ADS$Result$I = xADS$Result$I
 switch (ADS$Result$I)
    {
     case $miss:          $OutV("M")
     case $hit:           $OutV("H")
     case $unsuccessful:  $OutV("U")
     case $detonation:    $OutV("D")
     case $attemptedhit:  $OutV("A")
     default:             $OutV(" ")    # jb E2141  3/7/00
    }
 
 # if this is the control view, display the target name and type
 if (mside == $Control$code)    # jb 63 vice 66   E2141 11/6/00
    {
     # display the RESA name for the target for the control view only
     $column 63     # jb E2141,64 @ 3/7/00; E2172, 66 @ 10/30/00
     # get the target name
     ADS$TargetUNTName$C = xADS$TargetUNTName$C
     if (ADS$TargetUNTName$C != $no) $OutH(ADS$TargetUNTName$C,$$MAXname) # 3/00
 
     # display the missile or aircraft type of the target for the control view
     $column 72     # jb E2141, 73 @ 3/7/00;  E2172, 75 @ 10/30/00
     ADS$AircraftFlag$I = xADS$AircraftFlag$I # jb 72 vice 75   E2141 11/6/00
     if (ADS$AircraftFlag$I == $yes)
        {
         ADS$TargetACCPointer$I = xADS$TargetACCPointer$I
         ACC$Pointer = ADS$TargetACCPointer$I
         if (ACC$Pointer$Valid)
            {
             ACC$Type$C = xACC$Type$C
             $OutH(ACC$Type$C,$$MAXname)    # jb E2141  ($$MAXname) 3/7/00
            }
        }
     else
        {
         ADS$TargetCMCPointer$I = xADS$TargetCMCPointer$I
         CMC$Pointer = ADS$TargetCMCPointer$I
         if (CMC$Pointer$Valid)
            {
             CMC$Type$C = xCMC$Type$C
             $OutH(CMC$Type$C,$$MAXname)    # jb E2141  ($$MAXname) 3/7/00
            }
        }
    } # end if this the control view
 
return
end # ADS_entry

 
Subroutine No_entries
 
#############################################################################
#$%
#$% Purpose:   No_entries generates a message when there are no entries
#$%            for display.
#$%
#$% Called By: AirDefense_Data
#$%
#$% Date:      Dec 1993
#$%
#$% Author:    Susan Miller
#$%
#############################################################################
BBcommon
STATUScommon
 
#$% test if status board full; go to next line
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% display "No active track" message
$column 1 ; $OutV("No entries for this view")
 
return
end # No_entries
