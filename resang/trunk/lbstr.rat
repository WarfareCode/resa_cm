## lbstr.rat   - Fortran character routines
 
include "ascii.inc"

 
Subroutine STR_Trim (Destination, Source, Dest_Len)
implicit none
VaxCharacter*(*)    Source, Destination
Integer*4           Dest_Len
 
VaxCharacter*1      A_Char
Integer*4           S, D, S_Len, D_Len
Integer             length_trimmed
 
# Remove Trailing spaces and tabs
 
d_len = len(destination)
s_len = length_trimmed(source)
 
D = min(d_len, s_len)
Destination = Source[1:D]
Dest_Len = D
 
end
 

 
Subroutine Trim_Compress (Source, Destination, Dest_Len)
implicit none
VaxCharacter*(*)    Source, Destination
Integer*4           Dest_Len
 
VaxCharacter*1      A_Char
Integer*4           S, D, S_Len, D_Len
# Remove Leading, Trailing, and multiple embedded spaces and tabs
 
D = 0
Destination = ""
d_len = len(destination)
s_len = len(source)
 
for (S = 1; S <= S_Len; S=S+1)
    {
    A_Char = Source[S:S]
    if (A_Char == char($tab     ) ) A_Char = ""
    if (A_Char == char($linefeed) ) A_Char = ""
 
    if (A_Char == "")
        {
        if      (D == 0)                  next      # Skip leading blank space
        else if (destination[D:D] == "") next      # Reduce multiple spaces
        }
 
    D = D + 1
    Destination[D:D] = A_Char
 
    if (D >= D_Len) break
    }
 
if (D > 0)
	if (Destination[D:D] == "") D = D - 1              # Eliminate Trailing Space
 
Dest_Len = D
 
end

 
Subroutine STR_upcase (Destination, Source)
implicit none
VaxCharacter*(*)    Source, Destination
 
VaxCharacter*1      A_Char
Integer*4           S, D, S_Len, D_Len
# Convert lower case letters to upper case
 
D = 0
Destination = ""
d_len = len(destination)
s_len = len(source)
 
for (S = 1; S <= S_Len; S=S+1)
    {
    A_Char = Source[S:S]
    if (A_Char >= "a" & A_Char <= "z")
        {
        A_Char = char(ichar("A") + ichar(A_char) - ichar("a"))
        }
 
    D = D + 1
    Destination[D:D] = A_Char
 
    if (D >= D_Len) break
    }
 
return
end
 

# get length, without trailing white space (spaces & Tabs)
integer function length_Trimmed ( Text )
implicit none
VaxCharacter*(*)    Text
 
integer     ipos, kk, a_char, ichar
 
kk = 0
for (ipos = 1; ipos <= len(text); ipos = ipos + 1)
    {
    a_char = ichar(text[ipos:ipos])
 
    if (a_char == $NULL) break                  # stop on any null
 
    if (a_char == $TAB  |
        a_char == $SPACE ) next
 
    kk = ipos
    }
 
return (kk)
end
 

#$% get rid of imbedded spaces
subroutine remove_all_spaces( Text, Text_LEN)
implicit none
VaxCharacter*(*)    Text
Integer*4           Text_LEN
 
Integer*4           i
 
Text_LEN = 0
 
for ( i = 1; i <= LEN(Text); i = i + 1 )
    {
    if ( Text[i:i] != " " )
        {
        Text_LEN = Text_LEN + 1
        Text[Text_LEN:Text_LEN] = Text[i:i]
        }
    }
return
end

###    Name: str_element
###
###    Usage: This routine may be used in the same manner as the VAX/VMS
###            version 5.0 STR$ELEMENT library routine, the routine was
###            designed to perform on prior versions of VAX/VMS
###
###    Purpose: this routine extracts an element from a string in which the
###            elements are separated by a specified delimiter
###
###    Arguments:
###
###        Input:  in_string, the string from which the routine parses an
###                element
###                element_num, element number to extract
###                delimiter, the delimiter character which separates elements
###
###        Input/Output:  out_element, updated with value of element
###
###        Output:
###
###        Function Result:
###
###        COMMON:
###
###            Name            Source                   Use
###
###    Limitations: 1)  a single character may be passed as the delimiter string.
###                 2)  contiguous occurrences of the delimiter character within
###                    the in_string count as additional element(s).
###
###    Warnings:
###
###    Notes:
###
###    Author:
###
###        R. E. Hundt
###        Computer Sciences Corporation
###        4045 Hancock Street
###        San Diego CA 92110
###
###        (619) 225-8401
###
###    Customer:
###
###        Naval Ocean Systems Center
###        Code 413
###        San Diego CA 92152-5000
###
###        (619) 553-3972
###
###    Subprograms Required:
###
###    Tables Required: none
###
###    Algorithm:
###
###    Date Developed: 11/88
###
###    Record of Modifications:
###
###        Programmer          Date        Modification
###
###    Waivers:
subroutine str_element (out_element, element_num,delimiter,in_string)
 
 
implicit none
 
vaxcharacter*(*)     out_element
integer*4            element_num
vaxcharacter*(1)     delimiter
vaxcharacter*(*)     in_string
 
 
integer*2            begin_element
integer*2            end_element
integer*2            end_in_string
integer*2            element_count
integer*2            indx
 
end_in_string = LEN(in_string)
 
# if null terminated string was passed
if ( in_string (end_in_string:end_in_string) == char(0) )
    end_in_string = end_in_string - 1
 
#out_element_save = out_element
 
element_count = 0
 
begin_element = 1
end_element = 1
 
for ( indx = 1; indx <= end_in_string ; indx = indx + 1 )
    {
    if ( in_string(indx:indx) == delimiter )
        {
 
        element_count = element_count + 1
        if ( element_count == 1 )
            begin_element = 1
        else
            begin_element = end_element + 2
 
        end_element = indx - 1
        }
 
    # if element is found
    if ( element_count == element_num + 1 )
        {
        #check for multiple delimiters
        if ( in_string(indx:indx) != delimiter |
               in_string(indx - 1:indx - 1) != delimiter)
            {
            out_element = in_string(begin_element:end_element)
            }
        break
        }
 
    }
 
# if last element
if (element_count != 0)
    {
    if (element_count == element_num )
        {
        begin_element = end_element + 2
 
        out_element = in_string(begin_element:end_in_string)
        }
    }
 
# if first element and no delimiters
if (element_num == 0 & element_count == 0)
    {
    out_element = in_string(begin_element:end_in_string)
    }
 
end
