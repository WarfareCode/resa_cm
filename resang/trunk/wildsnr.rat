 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLSNR                        ECHO                       SON
#$%      GETSR  <WGLOAD>               ECHOH
#$%      GSLOTM <WGLOAD>               ECHOR
#$%      BADFLD <WGLOAD>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLSNR
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLSNR - GETSR *
#$%                                      - GSLOTM*
#$%                                      - BADFLD*
 

 
define(DEBUG,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbson.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit None)       # MJC 4/28/2000
 
subroutine wglsnr (reccnt,recsz,rec)    # load in the sonar scenario file
 
########################################################
#$%
#$% Purpose:   WGLSNR loads in the sonar scenario
#$%            file data.
#$%
#$% Called By: WGLFRC
#$%
#$% Calls:     BADFLD     ECHO       ECHOH
#$%            ECHOR      GETSR      GSLOTM
#$%
#$% Tables:    SON
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
 
integer reccnt,recsz,pnt
literal rec[1500]
 
integer LOOP, LEN, ISTAT, LPNT, K, kk,      # jb (kk) E2209 11/30/00
        SON$Pointer, SON$Towedarray$I,
        SON$MXR$Index, SON$MXR$range$I,
        SON$Variabledepth$I, SON$Activesonar$I,
        SON$Directpath$I, SON$Acousticcom$I,
        SON$Activelfa$I, SON$Centerfreq$I,
        SON$Freqindex$I, SON$Recognitiondiff$I,
        SON$SEC$Index, SON$SEC$di$I,
        SON$Sourcelevel$I, SON$Loendfreq$I,
        SON$Hiendfreq$I, SON$Horizbeam$I,
        SON$Vertbeam$I, SON$Convergencezone$I,
        SON$Bottombounce$I, SON$MOD$Index,
        SON$MOD$sigma$I, SON$MOD$angle$I,
        SON$MOD$sourcelevel$I, SON$SPD$Index,
        SON$SPD$noise$I, SON$Recdiffactive$I,
        SON$Systemloss$I, SON$Alert$I,
        SON$Falserate$I, SON$Cablelength$I,
        SON$Mtbf$I, SON$Timetorepair$I,
        SON$SPD$bbnoise$I, SON$SPD$bb300$I,
        SON$SPD$TN$Index, SON$SPD$TN$level$I,
        SON$Pulselengthsecs$I, SON$Searchangle$I,
        SON$Reporttimedelaymin$I, SON$Pulseintervalmin$I,
        SON$Pinginterval$I, SON$Integrationtime$I           # MJC 4/28/2000
real    SON$Stdevbrgerr$F                                   # MJC 4/28/2000
literal SON$Type$C                                          # MJC 4/28/2000
 
BBdeclare (SON$FullName$V)                  # jb  E2209    11/30/00
 
DEBUG call echov("<wglsnr:")
 
#    open(unit         = 31,
 
#$% if file is empty (no record count)
if (reccnt <= 1)
   {
    #$% display warning message to user and return
    call echov ("Sonar File Empty")
    call echor
    return
   }
 
for (loop = 2; loop <= reccnt; )        # for each record in the file
   {
    call getsr (loop,recsz,rec)         # get scenario record
    len = rec[1]                        # save length
 
    #$% get appropriate number of slots from sonar table
    call gslotm (son$pointer,$$son,son$entry,istat)
 
    #$% if table is full
    if (istat == $no)
       {
        #$% display warning message to user and return
        call echov ("Items from ")
        call echohn (rec[3],$$MaxLit)
        call echov (" and on are not loaded.")
        call echor
        return
       }
    #$% get sonar name and save
    son$type$c = rec[3]
    PUTson$type$c
 
    #$% if array word is TOWED
    if (rec[5] == 'TOWED')
       {
        #$% indicate that towed array is in use and save
        son$towedarray$i = $yes
        PUTson$towedarray$i
 
        SON$MXR$Index = 1    # CLK 12/8/92 (E1110) - default passive max range
        SON$MXR$Range$I = MIN (500, Passive$MaxRange)
        putSON$MXR$Range$I
       }
 
    #$% if array word is VDS
    else if (rec[5] == 'VDS')
       {
        #$% indicate that variable depth sonar is in use & save
        son$variabledepth$i = $yes
        PUTson$variabledepth$i
 
        #$% indicate that active sonar is in use & save
        son$activesonar$i = $yes
        PUTson$activesonar$i
 
        #$% indicate direct path mode is in use (default condition)
        #$% and save
        son$directpath$i      = $yes
        PUTson$directpath$i
 
       }
 
    #$% else if array word is AHULL
    else if (rec[5] == 'AHULL')         # check for Active, Hull mounted
       {
        #$% indicate that active sonar is in use & save
        son$activesonar$i = $yes
        PUTson$activesonar$i
 
        #$% indicate direct path mode is in use (default condition)
        #$% and save
        son$directpath$i      = $yes
        PUTson$directpath$i
 
       }
 
    #$% else if array word is PHULL
    else if (rec[5] == 'PHULL')
       {
        #$% indicate that active sonar is not in use & save
        son$activesonar$i = $no
        PUTson$activesonar$i
 
        SON$MXR$Index = 1    # CLK 12/8/92 (E1110) - default passive max range
        SON$MXR$Range$I = MIN (500, Passive$MaxRange)
        putSON$MXR$Range$I
       }
 
    #$% else if array word is COMM
    else if (rec[5] == 'COMM')
       {
        #$% indicate that acoustic comm is in use & save
        son$acousticcom$i = $yes
        PUTson$acousticcom$i
 
 
        #$% indicate that active sonar is not in use & save
        son$activesonar$i = $no         # ????
        PUTson$activesonar$i
       }
 
    #$% else if array word is LFA              # clk 7/8/91
    else if (rec[5] == 'LFA')
       {
        #$% indicate that it is an active LFA source
        son$ActiveLFA$i = $yes
        PUTson$ActiveLFA$i
        son$ActiveSonar$i = $yes
        PUTson$ActiveSonar$i
        putSON$SourceLevel$I (250)
        putSON$SearchAngle$I (360)
        putSON$FalseRate$I (0)
        putSON$PulseIntervalMin$I (1)
        putSON$ReportTimeDelayMin$I (0)
       }
 
 
    lpnt = 1                            # save dummy last word pointer
    for (pnt = 6; pnt <= len; )         # for each word in the record
       {
        if (pnt == lpnt)                # if ==, didnt process.... error
           {
            call badfld (_              # display unknown field
                         "Sonar     ",  # file type
                         rec[3],        # record name
                         rec[pnt])      # ????? fld
            #$% increment counter
            pnt = pnt + 1
           }
        lpnt = pnt
 
        #$% if array word is CFREQ
        if      (rec[pnt] == 'CFREQ')
           {
            #$% get center frequency and save
            son$centerFreq$i = rec[pnt+1]
            PUTson$centerFreq$i
 
            Call FRQINDX( _        # IFARG index (1-20)
                 son$centerFreq$I, # frequency (input)
                 son$FreqIndex$I ) #
            PUTson$FreqIndex$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is RD
        else if (rec[pnt] == 'RD')
           {
            #$% get reognition differential and save
            son$recognitiondiff$i = rec[pnt+1]
            PUTson$recognitiondiff$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is DI00
        else if (rec[pnt] == 'DI00')
           {
            #$% increment index in 10 deg sections up to 180 deg
            for (son$sec$index=1;
                 son$sec$index<=18;
                 son$sec$index=son$sec$index+1)
               {
                #$% compute value to position pointer in same relative
                #$% position in each group of slots
                k = pnt + son$sec$index
                #$% if section is greater than 60 and 120 deg, increment k
                if (son$sec$index >  6) k = k + 1
                if (son$sec$index > 12) k = k + 1
 
                #$% get sonar directivity for each increment of k & save
                son$sec$di$i = rec[k]
                PUTson$sec$di$i
               }
            #$% increment counter
            pnt = pnt + 3 * 7
           }
 
        #$% else if array word is LEVEL
        else if (rec[pnt] == 'LEVEL')
           {
            #$% get sonar source level and save
            son$sourcelevel$i = rec[pnt+1]
            PUTson$sourcelevel$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is LFREQ
        else if (rec[pnt] == 'LFREQ')
           {
            #$% get low end of freq band and save
            son$loendfreq$i = rec[pnt+1]
            PUTson$loendfreq$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is HFREQ
        else if (rec[pnt] == 'HFREQ')
           {
            #$% get high end of freq band and save
            son$hiendfreq$i = rec[pnt+1]
            PUTson$hiendfreq$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is HZBW
        else if (rec[pnt] == 'HZBW')
           {
            #$% get horizontal beamwidth and save
            son$horizbeam$i = rec[pnt+1]
            PUTson$horizbeam$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is VRBW
        else if (rec[pnt] == 'VRBW')
           {
            #$% get vertical beamwidth and save
            son$vertbeam$i = rec[pnt+1]
            PUTson$vertbeam$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is VERBW         ## 6/20/83 TPA
        else if (rec[pnt] == 'VERBW')
           {
            #$% get vertical beamwidth for TOWED array and save
            son$vertbeam$i = rec[pnt+1]
            PUTson$vertbeam$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is BRERR         ## 7/28/83 TPA
        else if (rec[pnt] == 'BRERR')
           {
            #$% get heading error and save
            SON$StDevBrgErr$F = rec[pnt+1]
            putSON$StDevBrgErr$F
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is MODE
        else if (rec[pnt] == 'MODE')
           {
            #$% if next word is CZ
            if      (rec[pnt+1] == 'CZ')
               {
                #$% indicate covergence zone mode in use and save
                son$convergencezone$i = $yes
                PUTson$convergencezone$i
               }
            #$% else if array word is BB
            else if (rec[pnt+1] == 'BB')
               {
                #$% indicate bottom bounce mode in use and save
                son$bottombounce$i    = $yes
                PUTson$bottombounce$i
               }
            #$% else if no mode given
            else
               {
                #$% indicate direct path mode in use and save
                son$directpath$i      = $yes
                PUTson$directpath$i
               }
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is VDSDP # 11/26/90 trs
        else if (rec[pnt] == 'VDSDP')
           {
            #$% indicate direct path mode is in use (default condition)
            #$% and save
            son$directpath$i      = $yes
            PUTson$directpath$i
 
            SON$MOD$index = $ON$DP
 
            #$% get direct path sigma, angle, and sourcelevel then save
            SON$MOD$Sigma$I = rec[pnt+1]
            putSON$MOD$Sigma$I
 
            SON$MOD$Angle$I = rec[pnt+2]
            putSON$MOD$Angle$I
 
            SON$MOD$SourceLevel$I = rec[pnt+3]
            putSON$MOD$SourceLevel$I
 
            #$% increment counter
            pnt = pnt + 4
           }
 
        #$% else if array word is AHLDP # 11/26/90 trs
        else if (rec[pnt] == 'AHLDP')
           {
            #$% indicate direct path mode is in use
            #$% and save
            son$directpath$i      = $yes
            PUTson$directpath$i
 
            SON$MOD$index = $ON$DP
 
            #$% get direct path sigma, angle, and sourcelevel then save
            SON$MOD$Sigma$I = rec[pnt+1]
            putSON$MOD$Sigma$I
 
            SON$MOD$Angle$I = rec[pnt+2]
            putSON$MOD$Angle$I
 
            SON$MOD$SourceLevel$I = rec[pnt+3]
            putSON$MOD$SourceLevel$I
 
            #$% increment counter
            pnt = pnt + 4
           }
 
        #$% else if array word is AHLBB # 11/26/90 trs
        else if (rec[pnt] == 'AHLBB')
           {
            #$% indicate bottom bounce mode in use and save
            son$bottombounce$i    = $yes
            PUTson$bottombounce$i
 
            SON$MOD$index = $ON$BB
 
            #$% get direct path sigma, angle, and sourcelevel then save
            SON$MOD$Sigma$I = rec[pnt+1]
            putSON$MOD$Sigma$I
 
            SON$MOD$Angle$I = rec[pnt+2]
            putSON$MOD$Angle$I
 
            SON$MOD$SourceLevel$I = rec[pnt+3]
            putSON$MOD$SourceLevel$I
 
            #$% increment counter
            pnt = pnt + 4
           }
 
        #$% else if array word is AHLCZ # 11/26/90 trs
        else if (rec[pnt] == 'AHLCZ')
           {
            #$% indicate covergence zone mode in use and save
            son$convergencezone$i = $yes
            PUTson$convergencezone$i
 
            SON$MOD$index = $ON$CZ
 
            #$% get direct path sigma, angle, and sourcelevel then save
            SON$MOD$Sigma$I = rec[pnt+1]
            putSON$MOD$Sigma$I
 
            SON$MOD$Angle$I = rec[pnt+2]
            putSON$MOD$Angle$I
 
            SON$MOD$SourceLevel$I = rec[pnt+3]
            putSON$MOD$SourceLevel$I
 
            #$% increment counter
            pnt = pnt + 4
           }
 
        #$% else if array word is RMAX or RMAXS
        else if (rec[pnt] == 'RMAX' | rec[pnt] == 'RMAXS')
           {
            #$% loop thru max range for 4 different environments
            for (SON$MXR$index=1;
                 SON$MXR$index<=SON$MXR$slots;
                 SON$MXR$index=SON$MXR$index+1)
               {
                k = pnt + SON$MXR$index
                #$% get max range for environment and save
                SON$MXR$Range$I = rec[k]
                putSON$MXR$Range$I
               }
            #$% increment counter
            pnt = pnt + 5
           }
 
        #$% else if array word is RMAX1 (maximum passive sensor range)
        else if (rec[pnt] == 'RMAX1')       # CLK 12/8/92 (E1110)
          {
           SON$MXR$Index = 1                # use the 1st env. entry
           SON$MXR$Range$I = rec[pnt+1]     # get max detection range
           putSON$MXR$Range$I               # and save
           pnt = pnt + 2                    # increment counter
          }
 
        #$% else if array word is SN
        else if (rec[pnt] == 'SN')
           {
            #$% loop thru self noise at 6 speeds
            for (SON$SPD$index=1;
                 SON$SPD$index<=SON$SPD$slots;
                 SON$SPD$index=SON$SPD$index+1)
               {
                k = pnt + SON$SPD$index
                #$% get noise for speed index & save
                SON$Spd$Noise$I = rec[k]
                putSON$Spd$Noise$I
               }
            #$% increment counter
            pnt = pnt + 7
           }
 
        #$% else if array word is RDA     11/26/90 trs
        else if (rec[pnt] == 'RDA')
           {
            #$% get recognition differential for active sonar and save
            SON$RecDiffActive$I = rec[pnt+1]
            putSON$RecDiffActive$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is LOSS    11/26/90 trs
        else if (rec[pnt] == 'LOSS')
           {
            #$% get recognition differential for active sonar and save
            SON$SystemLoss$I = rec[pnt+1]
            putSON$SystemLoss$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is ALERT   11/26/90 trs
        else if (rec[pnt] == 'ALERT')
           {
            #$% get recognition differential for active sonar and save
            SON$Alert$I = rec[pnt+1]
            putSON$Alert$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is FCRTE   11/26/90 trs
        else if (rec[pnt] == 'FCRTE')
           {
            #$% get recognition differential for active sonar and save
            SON$FalseRate$I = rec[pnt+1]      # jb        12/19/90
            putSON$FalseRate$I                # jb        12/19/90
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is CABLE
        else if (rec[pnt] == 'CABLE')
           {
            #$% get cable length and save
            son$cablelength$i = rec[pnt+1]
            PUTson$cablelength$i
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is MNFAL
        else if (rec[pnt] == 'MNFAL')
           {
           son$MTBF$i = rec[pnt+1]                 # REH 05/18/88
           PUTson$MTBF$i                           # REH 05/18/88
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is MNRPR
        else if (rec[pnt] == 'MNRPR')
           {
           son$TimeToRepair$i = rec[pnt+1]         # REH 05/18/88
           PUTson$TimeToRepair$i                   # REH 05/18/88
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is BBN
        else if (rec[pnt] == 'BBN')
           {
            #$% increment speed index from one to number of slots in use
            for (son$spd$index=1;
                 son$spd$index<=son$spd$slots;
                 son$spd$index=son$spd$index+1)
               {
                #$% get broadband noise for each speed increment & save
                son$spd$BBNoise$i = rec[pnt+son$spd$index]
                PUTson$spd$BBNoise$i
               }
            #$% increment counter
            pnt = pnt + 7
           }
 
        #$% else if array word is BBN3                  #       12/14/83
        else if (rec[pnt] == 'BBN3')
           {
            #$% increment speed index from one to number of slots in use
            for (son$spd$index=1;
                 son$spd$index<=son$spd$slots;
                 son$spd$index=son$spd$index+1)
               {
                #$% get broadband noise for each speed increment & save
                son$spd$BB300$i = rec[pnt+son$spd$index] #      12/14/83
                PUTson$spd$BB300$i                       #      12/14/83
               }
            #$% increment counter
            pnt = pnt + 7
           }
 
        #$% else if array word is NBN1
        else if (rec[pnt] == 'NBN1')
           {
            #$% increment speed index up number of entries
            for (son$spd$tn$index=1;
                 son$spd$tn$index<=son$spd$tn$slots;
                 son$spd$tn$index=son$spd$tn$index+1)
               {
                #$% compute value to position pointer in same relative
                #$% position in each group of slots
                k = pnt + (son$spd$tn$index-1) * 7              # 12/30/83
 
                #$% increment speed index up number of entries
                for (son$spd$index=1;
                     son$spd$index<=son$spd$slots;
                     son$spd$index=son$spd$index+1)
                   {
                    #$% get narrow band noise from each slot and save
                    son$spd$tn$level$i = rec[k+son$spd$index]
                    PUTson$spd$tn$level$i
                   }
               }
 
            #$% increment counter
            pnt = pnt + 20 * 7
           }
 
        #$% else if array word is PULSE          # clk 7/8/91
        else if (rec[pnt] == 'PULSE')
           {
            #$% get pulse length (seconds) for active LFA source and save
            SON$PulseLengthSecs$I = rec[pnt+1]
            putSON$PulseLengthSecs$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is ANG            # clk 7/8/91
        else if (rec[pnt] == 'ANG')
           {
            #$% get effective search angle for active LFA source and save
            SON$SearchAngle$I = rec[pnt+1]
            putSON$SearchAngle$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is RINTV          # clk 7/8/91
        else if (rec[pnt] == 'RINTV')
           {
            #$% get time delay for reports for active LFA source and save
            SON$ReportTimeDelayMin$I = rec[pnt+1]
            putSON$ReportTimeDelayMin$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is PINTV          # clk 7/8/91
        else if (rec[pnt] == 'PINTV')
           {
            #$% get Quite time : Ping interval for active LFA source and save
            SON$PulseIntervalMin$I = rec[pnt+1]
            putSON$PulseIntervalMin$I
 
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is PINTS   JFR 11/16/93
        else if (rec[pnt] == 'PINTS')
           {
            #$% Minimum ping time for active sonar
            SON$PingInterval$I = rec[pnt+1] # JFR 11/16/93
            putSON$PingInterval$I           # JFR 11/16/93
            #$% increment counter
            pnt = pnt + 2
           }
 
        #$% else if array word is TINTG   JFR 11/16/93
        else if (rec[pnt] == 'TINTG')
           {
            #$% Minimum integration time for passive sonar
            SON$IntegrationTime$I = rec[pnt+1] # JFR 11/16/93
            putSON$IntegrationTime$I           # JFR 11/16/93
 
            #$% increment counter
            pnt = pnt + 2
           }
 
         else if(rec[pnt] == 'NOMEN')  # jb E2209  11/29/00
           {
           SON$Fullname$V = ""
           kk = 0
           call vmovh (rec[pnt+1], 24, SON$Fullname$V, kk)
           putSON$Fullname$V
           pnt = pnt + 4
           }
         else if(rec[pnt] == 'UDB')  # jb E2209  11/29/00
           {
           if      (rec[pnt+1] == 'YES') putSON$UDB$i ($YES)
           else if (rec[pnt+1] != 'NO')  putSON$UDB$i (!$NO)
           pnt = pnt + 2
           }
 
       }                                # loop for next word in record
 
#   son$last$to son$pointer + son$entry - 1
 
   }                                    # loop for next record
 
DEBUG call echo ($GREAT)
 
return
end

 Subroutine FRQINDX ( _           #INDex for FReQuency
                     IFREQ,       #frequency (input)
                     son$FreqIndex$I )
 
 #######################################################
 #$%
 #$% Purpose:   This adaptation of INDFRQ (in WGMDSNR.rat)
 #$%            determines son$FreqIndex$I for insertion
 #$%            into the BBSON slots
 #$%
 #$% Called By: FRQDET  PSCHAR
 #$%
 #$% Calls:     None
 #$%
 #$% Tables:    BBSON
 #$%
 #$% Date:      FEB 81; Adapted 12/5/90 by Joe Bryant
 #$%
 #$% Author:    Ron Williams
 #$%
 #######################################################
 
 integer ifreq, son$FreqIndex$I
 
 integer I, IBELOW, IABOVE,
         IFBELO, IFABOV         # MJC 4/28/2000
 
 integer IFARG[20]
 real*4  MTH$ALOG2, FLG2        # jb;  For MTH$ALOG2        8/22/88
 
 data (IFARG[I],I=1,20) / 10,15,20,30,40,60,80,100,125,250,315,630,900,
                          1250,1600,2000,2500,3500,5000,10000 /
 IBELOW = 1                                     #initialize
 IABOVE = 20                                    #initialize
 
## I = INT(1.9 * QKLG2(FLOAT(IFREQ)) - 5.3)  # jb (Old way) 9/1/88
 FLG2 = FLOAT(IFREQ)                               # jb       8/22/88
 FLG2 = MTH$ALOG2(FLG2)               # jb replace WKLG2      8/22/88
 I = INT(1.9 * FLG2 - 5.3)        #compute a close starting-  8/22/88
 
 if(I < 1)  I = 1                               #   point but make sure
 else if(I > 20)  I = 20                        #     within correct limits
 
 repeat                                         #continue until done
 
    {
     if(IFREQ < IFARG[I])                       #if index reprsnts higher freq
 
       {
        IABOVE = I                              #adjust ceiling
 
        I = I - 1                               #decrease index for next try
       }
 
     else if(IFREQ > IFARG[I])                  #if index reprsnts lower freq
 
       {
        IBELOW = I                              #adjust floor
 
        I = I + 1                               #increase index for next try
       }                                        #endif
 
     else                                       #if frequency matches
       {
        IBELOW = I
 
        IABOVE = I
       }
 
    }   # endrepeat
 
 until(IABOVE <= IBELOW + 1)                    #done when frequency pinched
 
 IFBELO = IFARG[IBELOW]                         #get frequency below
 
 IFABOV = IFARG[IABOVE]                         #get frequency above
 
# if(IFABOV -son$centerFreq$I < son$centerFreq$I -IFBELO) # jb    12/5/90
# son$centerfreq$i is passed in, but the local variable is ifreq - clk 1/96
 if(IFABOV - IFREQ < IFREQ - IFBELO) # jb    12/5/90
        son$FreqIndex$I = min(IABOVE,20)        # jb    12/5/90
 else   son$FreqIndex$I = max(IBELOW,1)         # jb    12/5/90
 
 return
 end
