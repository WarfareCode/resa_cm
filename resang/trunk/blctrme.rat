 
 
##			File BLCTRME.rat
 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine ctrme
      ##################################################
      #$%
      #$% Purpose:   CTRME allows the user to inter-
      #$%            act with the countermeasure
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      APRIL 90
      #$%
      #$% Author:    Susan Miller
      #$%
      ##################################################
 
#
#     New COUNTERMEASURE
#
##      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT NONE         # jb    E2145   4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENSIONS
####
##############################################################################
 
define (zdccom,  6)     # The number of entries in the defCOM table.
define (zdctyp,  8)     # The size of the defTYP table.
define (zdcfld, 60)     # The size of the defFLD table.		
define (zdsarg,  5)     # The size of entries in the defARG table.
define (zdcarg,  7)     # The number of entries in the defARG table.
define (zdcfmt,  4)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      LitCharEquiv(once,  10)
 
      integer    oncect[10]
 
      character line[ARB]
 
      integer    m
 
 ##     Note:  See also declarations in BLSUB1.rin..
 
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("     Cou","ntermeas","ures"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of countermeasure
 DATA$com("BBN  ",  1)      # Countermeasure broadband noise
 DATA$com("LIFE ",  1)      # Countermeasure life in minutes
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("NBN  ",- 6)      # Countermeasure broadband noise
 
 $set (Data_Count,0)
 DATA$typ("     ",  0)      # rec type 1
 DATA$typ("     ",  1)      #
 DATA$typ("     ",  0)      # rec type 2
 DATA$typ("     ",  1)      #
 
 
 $set (Data_Count,0)
 
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","counterm","easure  ","        ")
 DATA$fld1("BBN  ", 1, 2,"dB   ", 1,"Counterm","easure b","roadband"," noise  ")
 DATA$fld2("NBN  ", 2, 3,"Hz   ", 1,"dB   ", 1,"Counterm","easure n","arrowban","d noise ")
 DATA$fld3("NOMEN", 3,-4,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("LIFE ", 1, 2,"MINUT", 1,"Counterm","easure l","ife in m","inutes  ")
 
 $set (Data_Count,0)
 DATA$arg5N("NAME ",6000,0,0, 0)          # Alphanumeric -- Anything
 DATA$arg5N("MINUT",2002, 1,   120, 0)    # Numeric Range 1 -> 120
 DATA$arg5N("dB   ",2002, 0,   300, 0)    # Numeric Range 0 -> 300
 DATA$arg5N("Text ",9024)                 # Alphanumeric string (24 bytes)
 DATA$arg5N("...  ",9000)                 # Alphanumeric string filler
 DATA$arg5C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg5N("Hz   ",2002, 0,   300, 0)    # Numeric Range 0 -> 300
 
 DATA  onceC/"NBN  ",            # define fields required at least once
            9*"*****"/
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 3,"A5,I9,I9",")"," "," ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    There must be one occurrence of NBN
#
#
9901 format (1x,a5," is required to have AT LEAST ONE entry.")
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
		  #***********************************************************
		  #***********************************************************
		  if (argtyp<=0)          #*** SPECIAL ***
		   {
		   #
		   # increment PTRCNT for each additional input word processed
		   #
		   # on error: increment VERR and NEXT to the next loop
		   #
		    #*********************************************************
		    if (argn==1)                          # Special Test 1
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==2)                     # Special Test 2
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==3)                     # Special Test 3
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    #*********************************************************
 
		    next
 
		   }
 
 
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
for (ptr=1; onceC[ptr] != "*****"; ptr=ptr+1)
  {
   oncect[ptr] = -1
  }
 
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
   {
    for (k=1; onceC[k] != "*****"; k=k+1)
      {
       if (work[ptr]==once[k])                # Match ?
         {
          if (oncect[k] < 0) oncect[k] = 0
          if (lcomp_v(work[ptr+2],"*REQ*") != 0)         #     is it filled in?
            {
             oncect[k] = oncect[k] + 1
            }
         }
      }
   }
 
 
# test results ......
 
 
for (ptr=1; onceC[ptr] != "*****"; ptr=ptr+1)
  {
   if (oncect[ptr] == 0)
     {
      print 9901,once[ptr]
      serr = serr + 1
     }
  }
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
