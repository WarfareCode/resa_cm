#####                   FILE: STASSAULT.RAT
###
###                     dated 31-JUL-1989
###
###    Record of Modifications:
###
###    Programmer          Date            Modification
###    ==========          ====            ============
###
###    Robert Hundt        6-DEC-1989      Initial creation
###
### =====================================================================
 
#$%      MODULE                        UTILITY                   DATA
#$%    SUBROUTINES                   SUBROUTINES                TABLES
#$%    ===========                   ===========                ======
#$%
#$%      ASSAULT_ASTAB                   OUTH                      ALZ
#$%      ASSAULT_TITLE                   OUTIZ
#$%      ASSAULT_GEN                     OUT
#$%      ASSAULTHEADER                   SMOVH
#$%      NEXT_ASSAULT                    SMOVLL
#$%      ASSAULT_ENTER                   SMOVIB
#$%      NO_ASSAULTS                     SMOVIZ
#$%      COMPAR<STATUS>
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1. <filename> indicates where file is located.
#$%
#$%    2. Utility subroutines not shown on flowchart.
#$%
#$%    3. * indicates no other subroutines called.
#$%
#$%
#$%    FLOWCHART FOR ASSAULT_ASTAB
#$%    ==========================
#$%
#$%    STDISP<STATUS> - ASSAULT_ASTAB - ASSAULT_TITLE *
#$%                                  - ASSAULT_GEN   - ASSAULT_HEADER *
#$%                                                  - NO_ASSAULTS    *
#$%                                                  - NEXT_ASSAULT   - COMPAR *
#$%                                                  - ASSAULT_ENTER  *
#$%
 
include "ascii.inc"                          # ascii constants
include "bbcode.inc"                         # blackboard defines
include "bbctl.inc"
include "bbalz.inc"
include "bbgnd.inc"
include "stmain.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145      1/24/00
define ($low$order$key,ikey)
 
 
Subroutine ASSAULT_ASTAB
 
#########################################################################
#$%
#$% Purpose:   ASSAULT_ASTAB controls display of the amphibious assault
#$%            status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     ASSAULT_TITLE    ASSAULT_GEN
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 1989
#$%
#$% Author:    R. Hundt
#$%
#########################################################################
 
BBcommon
STATUScommon
 
call ASSAULT_TITLE                  # displays amphibious assault title
 
call ASSAULT_GEN                    # generates amphibious assault data
 
return
end
 
 

Subroutine ASSAULT_TITLE
 
########################################################################
#$%
#$% Purpose:   ASSAULT_TITLE generates the title for the amphibious
#$%            assault status board.
#$%
#$% Called By: ASSAULT_ASTAB
#$%
#$% Calls:     OUTH,outV     OUTIZ
#$%
#$% Tables:    None
#$%
#$% Date:      6 DEC 1989
#$%
#$% Author:    R. Hundt
#$%
########################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
$prepare$next$line
 
$column 1
$OutV("View: ")
$OutH(nmvue,5)
$column 20 ; $OutV("AMPHIBIOUS ASSAULT BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61; $OutV("Game Time: ");  $OutIZ(Game_DTGs(igmin),8)
 
return
end
 
 

Subroutine ASSAULT_GEN
 
##############################################################################
#$%
#$% Purpose:   ASSAULT_GEN executes the subroutines that generate the assault
#$%            status board.
#$%
#$% Called By: ASSAULT_ASTAB
#$%
#$% Calls:     ASSAULT_HEADER    ASSAULT_ENTER
#$%            NEXT_ASSAULT      NO_ASSAULTS
#$%
#$% Tables:    ALZ
#$%
#$% Date:      6 DEC 1989
#$%
#$% Author:    R. Hundt
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer ifound, ishow_eq, ALZ$Pointer   # jb D2145  1/24/00
 
call ASSAULT_HEADER                        # generate headings for displays
 
$exit$on$overflow                          # exit if status board full
 
ifound = $no                               # initialize test flag
 
ALZ$pointer = 0
 
repeat
   {
    call NEXT_ASSAULT (ALZ$pointer, ishow_eq)  # get next landing zone entry
 
    if (ALZ$pointer == 0) break                # if none, break loop
 
    ifound = $yes
 
    call ASSAULT_ENTER(ALZ$pointer, ishow_eq)  # get landing zone data
 
    $exit$on$overflow                      # exit if status board full
   }
 
if (ifound == $no) call NO_ASSAULTS
 
return
end
 
 

Subroutine ASSAULT_HEADER
 
###########################################################################
#$%
#$% Purpose:   ASSAULT_HEADER generates the heading for the assault status
#$%            board.
#$%
#$% Called By: ASSAULT_GEN
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      6 DEC 1989
#$%
#$% Author:    R. Hundt
#$%
###########################################################################
BBcommon
STATUScommon
 
Integer ilen        # jb E2145      1/24/00
#                     1         2         3         4         5         6         7
#            1234567890123456789012345678901234567890123456789012345678901234567890123456789
 
string MSG2 "LANDING                                                                        "
string MSG3 "ZONE                   PERSONNEL      EQUIPMENT       VEHICLES      WEAPONS     "
string MSG4 "-------                ---------      ---------       --------      -------     "
 
ilen = 0;  call smovh(MSG2,ARB,IPAGE[1,2],ilen)
LINLEN[2] = ilen    # jb    E2141   3/1/00
ilen = 0;  call smovh(MSG3,ARB,IPAGE[1,3],ilen)
LINLEN[3] = ilen    # jb    E2141   3/1/00
ilen = 0;  call smovh(MSG4,ARB,IPAGE[1,4],ilen)
LINLEN[4] = ilen    # jb    E2141   3/1/00
 
LINCNT = 4                                        # set line count
 
return
end
 
 

Subroutine NEXT_ASSAULT (nxtpnt, ishow_eq)
 
####################################################################
#$%
#$% Purpose:   NEXT_ASSAULT locates the next assault data for display.
#$%
#$% Called By: ASSAULT_GEN
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    ALZ
#$%
#$% Date:      6 DEC 1989
#$%
#$% Author:    R. Hundt
#$%
####################################################################
BBcommon
StatusCommon
 
literal zone[1],keys[1],lowest[1],
        ALZ$Name$C,  CSTRIP8        # jb E2145      1/24/00
Integer nxtpnt,ishow_eq,irsult,     # jb E2145      1/24/00
        ALZ$Pointer,ALZ$VU$Index    # jb E2145      1/24/00
 
#$% initialize search array
lowest[1] = $highest$ascii
 
#$% if only one key, save lowest, otherwise save key
if (ikey  == 1) keys[1] = $lowest$ascii
else            keys[1] = ikey
 
nxtpnt = 0                                    # initialize pointer to zero
 
ishow_eq = $no
 
#$% search ALZ table
FOR_ALL_VALID (ALZ)
    {
    #$% get Name of landing zone, if none this entry, get next
    ALZ$Name$C = xALZ$Name$C
    if  (ALZ$Name$C == 0 ) next
 
    if (iView > $lastblue$view)     iside = $ORANGE$code
    else if(iView > $neutral$view)  iside = $BLUE$code
    else                            iside = $NEUTRAL$code
 
    #$% if not same side as station or ?, get next
    if (xALZ$Side$i != iside) next
 
    zone[1] = ALZ$Name$c
 
    call COMPAR(1,zone,keys,irsult) # compare first element of arrays zone to keys, for one element
 
    #$% if already processed
    if (irsult <  0)                     # zone array less than keys array
        {
        next                             # we've already processed this zone
        }
 
    # get here when still searching
    call COMPAR(1,zone,lowest,irsult)            # compare zone and lowest
 
    #$% if this zone is greater than lowest yet found on current ALZ search
    if (irsult > 0) next
 
    #$% save lowest
    lowest[1] = zone[1]                         # at this point, have
                                                # best candidate so far.
    nxtpnt = ALZ$pointer                        # save pointer
 
    }
ikey  = lowest[1]                               # save lowest key
 
#$% set index to station view number
ALZ$VU$Index = iview
 
#$% set pointer to lowest alpha ALZ name
ALZ$Pointer = nxtpnt
 
#$% if this view has not LANDED/WITHDRAWN at this land zone
#$$ but allow control view to see land zone
if ( xALZ$VU$BeenHere$i == $yes | iview == $neutral$view )
    {
    ishow_eq = $yes                 #$% don't reveal to ASTAB
    }
 
return
end
 
 

Subroutine ASSAULT_ENTER(alz$pointer, ishow_eq)
 
#############################################################################
#$%
#$% Purpose:   ASSAULT_ENTER gets the assault data for display on the status
#$%            board.
#$%
#$% Called By: ASSAULT_GEN
#$%
#$% Calls:     SMOVH      SMOVIZ     SMOVIB
#$%            SMOVLL     OUT
#$%
#$% Tables:    ALZ  GND
#$%
#$% Date:      6 DEC 1989
#$%
#$% Author:    R. Hundt
#$%
#############################################################################
BBcommon
STATUScommon
 
Define($Max$Categories$Per$Line,2)   # ie. no more than this number of
                                     # PERSONNEL, EQUIPMENT, VEHICLES Etc.
                                     # on a line
 
Literal PERS  [ ALZ$GU$Slots ]
Literal EQPT  [ ALZ$GU$Slots ]
Literal VEHIC [ ALZ$GU$Slots ]
Literal WEAP  [ ALZ$GU$Slots ]
Literal ALZ$Name$C,GND$Name$C,  CSTRIP8  # jb E2145  1/24/00
Integer i,icount, ishow_eq, I_SWITCH_1,         # jb E2145  1/24/00
        iPERS_count,iEQPT_count,iVEHIC_count,iWEAP_count,   # jb    1/24/00
        ALZ$Pointer,ALZ$GU$Index,ALZ$GU$Indx$I,ALZ$GU$Quantity$I, # jb 1/00
        GND$Pointer,GND$Category$I, kk
integer lcomp_v
 
integer*4 PERS_QTY  [ ALZ$GU$Slots ]
integer*4 EQPT_QTY  [ ALZ$GU$Slots ]
integer*4 VEHIC_QTY [ ALZ$GU$Slots ]
integer*4 WEAP_QTY  [ ALZ$GU$Slots ]
 
#$% number of category types on the output line
logical*1 PERS_On_Line
logical*1 EQPT_On_Line
logical*1 VEHIC_On_Line
logical*1 WEAP_On_Line
 
DO i = 1, ALZ$GU$Slots
    {
    PERS  [ i ] = $BLANKLIT
    EQPT  [ i ] = $BLANKLIT
    VEHIC [ i ] = $BLANKLIT
    WEAP  [ i ] = $BLANKLIT
 
    #$% set quantities to null
    PERS_QTY [ i ] = 0
    EQPT_QTY [ i ] = 0
    VEHIC_QTY [ i ] = 0
    WEAP_QTY [ i ] = 0
    }
 
iPERS_count  = 0
iEQPT_count  = 0
iVEHIC_count = 0
iWEAP_count  = 0
 
PERS_On_Line  = 0
EQPT_On_Line  = 0
VEHIC_On_Line = 0
WEAP_On_Line  = 0
 
$test$next$line
$exit$on$overflow                              # exit if status board full
$save$line$count
$update$keys
 
$prepare$next$line                             # go to next line
 
#$% move unit name to IPAGE array
IBYTE = 0
ALZ$NAME$C = XALZ$NAME$C
call SMOVH(ALZ$NAME$C,$$MAXname,IPAGE[1,LINCNT],IBYTE) # jb E2141 $$ 1/24/00
 
#$% if we don't display equipments
if ( ishow_eq ==$no )
    {
    LINLEN[LINCNT] = IBYTE
    return
    }
 
#$% load local arrays with ground unit data
FOR ( ALZ$GU$Index = 1; ALZ$GU$Index$OK; ALZ$GU$Index = ALZ$GU$Index + 1 )
    {
    ALZ$GU$Indx$i = xALZ$GU$Indx$i
    ALZ$GU$Quantity$i = xALZ$GU$Quantity$i
 
    #$% if subtable slot is used
    IF ( ALZ$GU$Quantity$i != 0 & ALZ$GU$Indx$i != 0 )
        {
        GND$Pointer$To ALZ$GU$Indx$i           # index into the GND table
 
        GND$Name$C = xGND$Name$C
        GND$Category$i = xGND$Category$i
 
        #$% update local ground category arrays
        Switch ( GND$Category$i )
            {
            CASE $EQPT$Code  :
                {
                iEQPT_count = iEQPT_count + 1
                EQPT [ iEQPT_count ] = GND$Name$C
                EQPT_QTY [ iEQPT_count ] = ALZ$GU$Quantity$i
                }
            CASE $PERS$Code  :
                {
                iPERS_count = iPERS_count + 1
                PERS [ iPERS_count ] = GND$Name$C
                PERS_QTY [ iPERS_count ] = ALZ$GU$Quantity$i
                }
            CASE $VEHIC$Code :
                {
                iVEHIC_count = iVEHIC_count + 1
                VEHIC [ iVEHIC_count ] = GND$Name$C
                VEHIC_QTY [ iVEHIC_count ] = ALZ$GU$Quantity$i
                }
            CASE $WEAP$Code  :
                {
                iWEAP_count = iWEAP_count + 1
                WEAP [ iWEAP_count ] = GND$Name$C
                WEAP_QTY [ iWEAP_count ] = ALZ$GU$Quantity$i
                }
            } # end switch
        } # end subtable slot used
    } # end loop thru GND subtable
 
FOR ( icount = 1;  icount <= ALZ$GU$Slots;  icount =  icount + 1 )
    {
    IF (PERS_QTY [ icount ] != 0 )
        {
        $column 21
        call SMOVIB(PERS_QTY [ icount ],5,IPAGE[1,LINCNT],IBYTE)
        $column 28
        call SMOVHN(PERS [ icount ],$$MaxLit,IPAGE[1,LINCNT],IBYTE)
        }
 
 
    #$% begin updating page with ground unit equipment data
    IF (EQPT_QTY [ icount ] != 0 )
        {
        $column 36
        call SMOVIB(EQPT_QTY [ icount ],5,IPAGE[1,LINCNT],IBYTE)
        $column 44
        call SMOVHN(EQPT [ icount ],$$MaxLit,IPAGE[1,LINCNT],IBYTE)
        }
 
    #$% begin updating page with ground unit vehicle data
    IF (VEHIC_QTY [ icount ] != 0 )
        {
        $column 52
        call SMOVIB(VEHIC_QTY [ icount ],5,IPAGE[1,LINCNT],IBYTE)
        $column 59
        call SMOVHN(VEHIC [ icount ],$$MaxLit,IPAGE[1,LINCNT],IBYTE)
        }
 
 
    IF (WEAP_QTY [ icount ] != 0 )
        {
        $column 65
        call SMOVIB(WEAP_QTY [ icount ],5,IPAGE[1,LINCNT],IBYTE)
        $column 71
        call SMOVH(WEAP [ icount ],$$MAXname,IPAGE[1,LINCNT],IBYTE) # jb E2141
        }
 
 
    LINLEN[LINCNT] = IBYTE
 
    IF ( lcomp_v(PERS [ icount ], "        ") == 0 &
         lcomp_v(EQPT [ icount ], "        ") == 0 &
         lcomp_v(VEHIC [ icount ],"        ") == 0 &
         lcomp_v(WEAP [ icount ], "        ") == 0  )
        {
        IF ( icount != 1 )
            {
            lincnt = lincnt - 1
            }
        break
        }
    $test$next$line
    $exit$on$overflow                   # exit if status board full
#    $save$line$count
 
    $prepare$next$line                  # go to next line
 
    IBYTE = 5
 
    }
return
end
 
 

Subroutine NO_ASSAULTS
 
############################################################################
#$%
#$% Purpose:   NO_ASSAULTS generates a message when there is no assault data
#$%            for display.
#$%
#$% Called By: ASSAULT_GEN
#$%
#$% Calls:     OUTV
#$%
#$% Tables:    None
#$%
#$% Date:      6 DEC 1989
#$%
#$% Author:    R. Hundt
#$%
############################################################################
BBcommon
STATUScommon
 
$test$next$line
$exit$on$overflow
 
$prepare$next$line
 
$column 1
$OutV("No Landing Zones in this view")  # jb  (outV vice outH)  3/1/00
 
return
end
