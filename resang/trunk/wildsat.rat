##	FILE:	WILDSAT.rat
 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLSAT                        ECHOH                      SSC
#$%      WGLSST                        ECHOI                      RAD
#$%      GETSR  <WGLOAD>               ECHOR                      ESM
#$%      GSLOTM <WGLOAD>                                          SAT
#$%      EQFIND <WGLOAD>                                          UNT
#$%      BADFLD <WGLOAD>
#$%      SATTRK <WCOMMN>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLSAT
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLSAT - GETSR *
#$%                                      - GSLOTM*
#$%                                      - EQFIND*
#$%                                      - BADFLD*
#$%                             - WGLSST - GETSR *
#$%                                      - GSLOTM*
#$%                                      - SATTRK*
 

 
define(DEBUG,#)
define(DEBUGL,)
 
define(SAT$Name$C,SAT$SatelliteName$C)
define(putSAT$Name$C,putSAT$SatelliteName$C)
 
include "bbctl.inc"
include "bbcode.inc"
include "bbrad.inc"
include "bbesm.inc"
include "bbsat.inc"
include "bbssc.inc"
include "bbunt.inc"
include "ascii.inc"
include "wimain_eq.inc"                 # MJC 4/28/2000
 
 
define(BBImplicit, Implicit NONE)       # MJC 4/28/2000
 
Subroutine wglsat (reccnt,recsz,rec)    #load in the satellite scenario file
 
########################################################
#$%
#$% Purpose:   WGLSAT loads in the satellite scenario
#$%            file data which originated in BUILD.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOH      ECHOR      BADFLD
#$%            EQFIND     GETSR      GSLOTM
#$%
#$% Tables:    SSC        RAD        ESM
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
 
EqErr$Common                            # MJC 4/28/2000
 
integer reccnt,recsz,pnt
literal rec[1500]
 
#common /eqerr/ cfile,cname,cflg        # MJC 4/28/2000
 
integer ILEN, LOOP,
        LEN, ISTAT,
        ESM$Pointer,
        RAD$Pointer,
        SSC$Sensorindx$I,
        SSC$Pointer,
        SSC$Swathwidth$I,
        SSC$Dutycycle$I,
        SSC$Radarsensor$I               # MJC 4/28/2000
real    SSC$Horizbeamwidth$F,
        SSC$Vertbeamwidth$F             # MJC 4/28/2000
literal SSC$Type$C                      # MJC 4/28/2000
 
DEBUG call echov("<wglsat:")
 
ilen = 0
call smovv ("Satellite ", cfile, ilen)
cflg = $yes
 
#$% if file is empty
if (reccnt <= 1)
   {
    #$% send warning message to user and return
    call echov ("Satellite File Empty")
    call echor
    return
   }
 
for (loop = 2; loop <= reccnt; )        #for each record in the file
   {
    call getsr (loop,recsz,rec)        #get scenario record
    len = rec[1]                       #save length
 
    #$% get slots for satallite characteristics
    call gslotm (ssc$pointer,$$ssc,ssc$entry,istat)
 
    #$% if table is full
    if(istat == $no)
      {
       #$% send warning message to user and return
       call echov ("Satellites from ")
       call echohn (rec[3],$$MaxLit)
       call echov (" and on are not loaded.")
       call echor
       return
      }
 
    SSC$TYPE$C = REC[3]
    PUTSSC$TYPE$C
 
    cname = rec[3]
 
    DEBUGL  call echov ("Loading Satellite ")
    DEBUGL  call echohn (rec[3],$$MaxLit)
    DEBUGL  call echor
 
    #$% for each record in the satellite characteristics table
    for(pnt = 4; pnt <= len; pnt = pnt+2)
       {
	if(rec[pnt] == 'SWATH')
	   {
            #$% get satellite swath width entry and save
	    SSC$SWATHWIDTH$I = REC[pnt+1]
	    PUTSSC$SWATHWIDTH$I
	   }
	else if(rec[pnt] == 'DUTY')
	   {
            #$% get satellite duty cycle and save
	    SSC$DUTYCYCLE$I = REC[pnt+1]
	    PUTSSC$DUTYCYCLE$I
	   }
	else if(rec[pnt] == 'HORBW')
	   {
            #$% compute satellite horizontal beamwidth and save
#	    SSC$HORIZBEAMWIDTH$F = REC[pnt+1] * (.01*$pi/180.)
	    SSC$HORIZBEAMWIDTH$F = REC[pnt+1] * ($pi/180.) #	10/3/83
	    PUTSSC$HORIZBEAMWIDTH$F
	   }
	else if(rec[pnt] == 'VERBW')
	   {
            #$% compute satellite vertical beamwidth and save
#	    SSC$VERTBEAMWIDTH$F = REC[pnt+1] * (.01*$pi/180.)
	    SSC$VERTBEAMWIDTH$F = REC[pnt+1] * ($pi/180.) #	10/3/83
	    PUTSSC$VERTBEAMWIDTH$F
	   }
	else if(rec[pnt] == 'SENSR')
	   {
         #$% check if sensor name is InfraRed       Alex V.  July 1993
         if(rec[pnt+1] == 'IR')
           {
             #$% set satellite sensor to infrared and save
             SSC$RADARSENSOR$I = $IR$SENSOR
             PUTSSC$RADARSENSOR$I
           }
         #$% it may be either radar or esm
         else
           {
             #$% for future reference. So, I don't have to figure this clfg thing
             #$% it turns out that cflg is common to "eqfind" which is set
             #$% at the end of the routine if no equiment is found
             #$% who ever did that was probably in a hurry or had a bad day.
             cflg = $no
             #$% get radar equipment on satellite
             call eqfind($$rad,rad$entry,rec[pnt+1],rad$pointer)
 
             #$% if there is radar equipment
             if(rad$pointer != 0)
               {
                #$% set sensor index to radar pointer index and save
                SSC$SENSORINDX$I = RAD$POINTER$INDEX
                PUTSSC$SENSORINDX$I
 
                #$% set radar sensor indicator to radar and save
                SSC$RADARSENSOR$I = $RADAR$SENSOR
                PUTSSC$RADARSENSOR$I
               }
             #$% else if no radar equipment may be ESM
             else
               {
                #$% reset flag to YES
                cflg = $yes
                #$% find satellite ESM equipment
                call eqfind($$esm,esm$entry,rec[pnt+1],esm$pointer)
 
                #$% if ESM equipment found
                if(esm$pointer != 0)
                  {
                   #$% set satellite sensor index to ESM pointer index
                   #$% and save
                   SSC$SENSORINDX$I = ESM$POINTER$INDEX
                   PUTSSC$SENSORINDX$I
 
                   #$% set satellite radar sensor to esm and save
                   SSC$RADARSENSOR$I = $ESM$SENSOR
                   PUTSSC$RADARSENSOR$I
                  }
               }
           }
       }# end else if (rec[pnt] == 'SENSR')
 
      #$% else if none of the above are found
	else
	   {
            #$% display warning message to user that field is not valid
	    call badfld ('SATELLITE  ',rec[3],rec[pnt])
	   }
 
   }   #end for loop
    #$% set last pointer to updated position
    SSC$LAST$TO SSC$POINTER + SSC$ENTRY - 1
 }
 
return
end
 
 
 
Subroutine wglsst (reccnt,recsz,rec)
 
###################################################################
#$%
#$% Purpose:   WGLSST loads in the satellite scenerio file data
#$%            that originates in FORCE.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOH      ECHOR      ECHOI
#$%            GETSR      GSLOTM     SATTRK
#$%
#$% Tables:    SAT        SSC        UNT
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
######################################################################
 
BBcommon
EqErr$Common                            # MJC 4/28/2000
 
integer reccnt,recsz
literal rec[1500]
 
#common /eqerr/cfile,cname,cflg         # Replaced by EqErr$Common
                                        # MJC 4/28/2000
integer ILEN,
        LOOP,
        ISTAT,
        UNT$Pointer,
        SSC$Pointer,
        SAT$Pointer,
        SAT$Sscindx$I,
        SAT$Altitude$I,
        SAT$Orbiting$I,
        SAT$Grdtrkstation$I             # MJC 4/28/2000
real    SAT$Orbitalperiod$F,
        SAT$Northcrosstime$F,
        SAT$Tracklatitude$F,
        SAT$Tracklongitude$F,
        SAT$Ascendinglongitude$F,
        SAT$Orbitalinclination$F,
        SAT$Dutycyclefraction$F         # MJC 4/28/2000
literal SAT$Satellitename$C,
        CSTRIP8                         # MJC 4/28/2000
real*4  DMS2RAD                         # MJC 5/3/2000
 
ilen = 0
call smovv ("Satellite ",cfile,ilen)
cflg = $yes
 
#$% if file is empty
if (reccnt <= 1)
   {
    #$% send warning message to user and return
    call echov("Satellite Scenario File Empty.  ")
    call echor
    return
   }
 
#$% for each record in the file
for (loop=2;loop<=reccnt;)
   {
    #$% get scenerio record
    call getsr (loop,recsz,rec)
    #$% get slots for satellite data
    call gslotm (sat$pointer,$$sat,sat$entry,istat)
 
    if (istat == $no)
       {
        #$% display warning message to user and return
	call echov ("Satellite Dynamics from ")
	call echoi (int(rec[2]))
	call echov (" and on are not loaded.")
	call echor
 
	return
       }
 
    SAT$NAME$C = rec[2]
    PUTSAT$NAME$C
 
    for (SSC$POINTER$FIRST;SSC$POINTER$OK;SSC$POINTER$NEXT)
       {
	if (XSSC$TYPE$C == rec[3])
	   {
	    SAT$SSCIndx$i = SSC$POINTER$INDEX    # get SSC pointer index
	    PUTSAT$SSCINDX$I
 
	    break
	   }
       }
 
    SAT$DUTYCYCLEFRACTION$F = rec[9] * .01
    PUTSAT$DUTYCYCLEFRACTION$F
 
    Sat$Altitude$I = Rec[5]
    If (Sat$Altitude$I > $Hi_Sat$Altitude$I)
        Sat$Altitude$I = $Hi_Sat$Altitude$I
    Putsat$Altitude$I
 
    for (UNT$POINTER$FIRST;UNT$POINTER$OK;UNT$POINTER$NEXT)
       {
	if (XUNT$NAME$C == rec[10])    # find the ground station
	   {
	    SAT$GRDTRKSTATION$I = UNT$POINTER$INDEX
	    PUTSAT$GRDTRKSTATION$I
 
	    break
	   }
       }
 
    SAT$ORBITING$I = rec[13]
    PUTSAT$ORBITING$I
 
    if (sat$orbiting$i == $yes)
       {
        sat$OrbitalPeriod$f = rec[4]
        PUTsat$OrbitalPeriod$f
 
        SAT$ORBITALINCLINATION$F = DMS2rad(rec[6])
        PUTSAT$ORBITALINCLINATION$F
 
        sat$NorthCrossTime$f = rec[7]
        PUTsat$NorthCrossTime$f
 
        SAT$ASCENDINGLONGITUDE$F = DMS2rad(rec[8])
        PUTSAT$ASCENDINGLONGITUDE$F
 
        call SATTRK(_
                    -sat$NorthCrossTime$f,
		     sat$AscendingLongitude$f,
		     sat$OrbitalInclination$f,
		     sat$OrbitalPeriod$f,
		     sat$TrackLatitude$f,
		     sat$TrackLongitude$f)
       }
    else
       {
        sat$TrackLatitude$f  = DMS2rad(rec[11])
        sat$TrackLongitude$f = DMS2rad(rec[12])
       }
 
    PUTsat$TrackLatitude$f
    PUTsat$TrackLongitude$f
 
    #$% increment satellite pointer by appropriate entry size
    SAT$POINTER$NEXT
 
    #$% get last entry in satellite table
    SAT$LAST$TO SAT$POINTER - 1
   }
 
return
end
