 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 06-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 tpa     ship    added TRKS field
###
###
###
 
#####   version 3.0  dated- 22dec80
 
      include    "ascii.inc"
      include    "macros.inc"
 
# 
 
subroutine ship
 
########################################################################
#$%
#$% Purpose:   SHIP allows the user to interact
#$%            with ship characteristics data.
#$%
#$% Called By: BUILD
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 79
#$%
#$% Author:    Dana Wills
#$%
#$% Modified:  Carol Kropp - 11/95 (E1469)
#$%            Added JTIDS field to ships.
#$%
#$%            Jim Allen - 11/95 (E1422)
#$%            Added DOMAI to ships and boats.
#$%
#$%            Carol Kropp - 3/96 (E1561)
#$%            Added SOF and UGS fields (JTMD models).
#$%
#$%            Jim Allen - 4/96 (E1467)
#$%            Added characteristics for ships to do refueling operations
#$%            (SFUEL, AFUEl, LASF, LAAF, SFC, UNREP, SFRES, FHOSE, FUSTA,
#$%            JPSTA and VCRU).
#$%
#$%            Carol Kropp - 10/96 (E1695)
#$%            Added CEC field to ships.
#$%
#$%            Carol Kropp - 2/97 (E1760)
#$%            Changed UGS to be up to three entries.
#$%
#$%            Carol Kropp - 4/97 (E1764, E1765)
#$%            Added IUGS [ YES | NO ] field (JTMD models).
#$%            Added JSOF [ YES | NO ] field (JTMD models).
#$%
#$%            Susan Miller - 12/97 (E1660)
#$%            Changed aviation fuel units from pounds to gallons.
#$%
#$%            Carol Kropp =- 3/99 (E2033)
#$%            Increased the range of XSECT from 0-500 to -30-500.
#$%
#$%            Susan Miller - 4/99 (E2080)
#$%            Created new variable constant FEET1 to allow the entry
#$%            of antenna height up to 16,000.
#$%
########################################################################
 
#
#     New SHIP
#
#
      IMPLICIT NONE     # jb E2145  3/30/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom,  34)      # The number of entries in the defCOM table
define (zdctyp, 212)      # The size of the deftyptable.
define (zdcfld, 981)      # The size of the defFLD table.
define (zdsarg,  10)      # The size of entries in the defARG table.
define (zdcarg,  52)      # The number of entries in the defARG table.
define (zdcfmt,  16)      # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
 
 
      LitCharEquiv(once, 20)
 
      integer    oncect[20]    # 10/30/90 trs
      Integer    m
##-------------------------------------------------------------------
#$% jb E2145 - (Implicit NONE); see also declarations in BSSUB1.RIN 3/30/00
 
    LOGICAL*1 VALID_ANTENNA_COVERAGE  # jb E2145    3/30/00
##-------------------------------------------------------------------
      character  line[ARB]
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object(" Ships, ","Subs & B","oats"," ")
 
 $set (Data_Count,0)
 DATA$com("CLASS",  1)      # Class of the ship or sub
 DATA$com("CAT  ",  1)      # Type SURF/NSUB/DSUB/BOAT
 DATA$com("TYPE ",  1)      # Type of ship, boat or submarine
 DATA$com("VMAX ",  1)      # Maximum speed
 DATA$com("XSECT",  1)      # Radar cross section
 DATA$com("HDG  ",  1)      # Name of heading sensor
 DATA$com("SPD  ",  1)      # Name of speed sensor
 DATA$com("CLRNG",  1)      # Range at which a platform can be classfied
 DATA$com("DTRNG",  1)      # Range at which a platform can be detected
 DATA$com("TRKS ",  1)      # Number of local tracks
 DATA$com("BBN  ",  1)      # BB @2000 Hz noise at 05/10/15/20/25/30 knots
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("RDESM",-16)      # Name of sensor(s) carried
 DATA$com("ANT-H",-16)      # Restricted Horiz. Antenna coverage for radars, 8/8/90
 DATA$com("JAMMR",- 6)      # Name of jammer(s) carried
 DATA$com("GRND ",-60)      # Name of ground unt(s) carried #jb 60 2/8/00
 DATA$com("COMMS",-10)      # Name of communication suite(s) carried
 DATA$com("CJAMR",- 4)      # Name of communications Jammer # REH
 DATA$com("WEAP ",-50)      # Define names & qty of weapons carried 4/1/86
 DATA$com("MISS ",- 7)      # Define types and qty of cruise miss. carried
 DATA$com("NDCLS",- 1)      # Nuclear Damage Class
 DATA$com("UAVTG",- 1)      # Target Type Index
 DATA$com("TGSTR",- 1)      # Aspect Dependent Sonar X section
 DATA$com("IFF  ",- 3)      # Name of IFF system(s) carried   2/21/91
 DATA$com("NBN  ",- 6)      # Signature line frequencies
 DATA$com("NBN05", -6)      # 6 Tonal Frequencies & LEVELS AT  5 knots
 DATA$com("NBN10", -6)      # 6 Tonal Frequencies & LEVELS AT 10 knots
 DATA$com("NBN15", -6)      # 6 Tonal Frequencies & LEVELS AT 15 knots
 DATA$com("NBN20", -6)      # 6 Tonal Frequencies & LEVELS AT 20 knots
 DATA$com("NBN25", -6)      # 6 Tonal Frequencies & LEVELS AT 25 knots
 DATA$com("NBN30", -6)      # 6 Tonal Frequencies & LEVELS AT 30 knots
 DATA$com("HGT  ", -1)      # Height of platform   jms 11/17/92
 DATA$com("WIDTH", -1)      # Width of platform    jms 11/17/92
 
 $set (Data_Count,0)
 
 DATA$typ(   "NSUB ", 18)             # Nuc SUBMARINES        # removed BBN3 2/3/93 clk
 DATA$typ(         "DRATE",  1)           # Dive rate
 DATA$typ(         "KEEL ",  1)           # Keel depth
 DATA$typ(         "PSCOP",  1)           # Periscope depth       tpa 4/83
 DATA$typ(         "DR   ",  1)           # Name of navaigational sensor
 DATA$typ(         "OMEGA",  1)           # Name of navaigational sensor
 DATA$typ(         "DEPTH",  1)           # Max Depth of sub in ft
 DATA$typ(         "VCRU ",  1)           # Sub cruise speed
 DATA$typ(         "NAV  ",- 1)           # Name of navaigational sensor
 DATA$typ(         "TORP ",- 4)           # Name and qty of torpedoes
 DATA$typ(         "TRPDO",-10)           # Name and qty of enhanced torpedoes 4/90
 DATA$typ(         "WIRES",- 1)           # Wire info for comm
 DATA$typ(         "WBUOY",- 4)           # Wired Buoy info for comm
 DATA$typ(         "NBUOY",- 4)           # Non-Wired Buoy info for comm
 DATA$typ(         "CBUOY",- 4)           # Countermeasure buoy 4/90
 DATA$typ(         "HFDF ",- 1)           # HFDF name
 DATA$typ(         "DECM ",- 1)           # DECEPTION (RADAR) available?
 DATA$typ(         "BLIP ",- 1)           # BLIP enhancment available?
 DATA$typ(         "SONAR",- 6)           # Name of sonar(s) carried
 DATA$typ(   "DSUB ", 27)             # Diesel SUBMARINES    # removed BBD3 and BBN3 2/3/93 clk
 DATA$typ(         "DRATE",  1)           # Dive rate
 DATA$typ(         "KEEL ",  1)           # Keel depth
 DATA$typ(         "PSCOP",  1)           # Periscope depth       tpa 4/83
 DATA$typ(         "DR   ",  1)           # Name of navaigational sensor
 DATA$typ(         "OMEGA",  1)           # Name of navaigational sensor
 DATA$typ(         "BBD  ",  1)           # BB @2000 Hz noise at 05/10/15/20/25/30 knots
 DATA$typ(         "DEPTH",  1)           # Max Depth of sub in ft
 DATA$typ(         "VCRU ",  1)           # Sub economical cruise speed                     # joa 4/96 (E1467)
 DATA$typ(         "NBD  ",- 6)           # Signature line frequencies
 DATA$typ(         "NBD05", -6)           # 6 Tonal Frequencies & LEVELS AT  5 knots
 DATA$typ(         "NBD10", -6)           # 6 Tonal Frequencies & LEVELS AT 10 knots
 DATA$typ(         "NBD15", -6)           # 6 Tonal Frequencies & LEVELS AT 15 knots
 DATA$typ(         "NBD20", -6)           # 6 Tonal Frequencies & LEVELS AT 20 knots
 DATA$typ(         "NBD25", -6)           # 6 Tonal Frequencies & LEVELS AT 25 knots
 DATA$typ(         "NBD30", -6)           # 6 Tonal Frequencies & LEVELS AT 30 knots
 DATA$typ(         "NAV  ",- 1)           # Name of navaigational sensor
 DATA$typ(         "TORP ",- 4)           # Name and qty of torpedoes
 DATA$typ(         "TRPDO",-10)           # Name and qty of enhanced torpedoes 4/90
 DATA$typ(         "WIRES",- 1)           # Wire info for comm
 DATA$typ(         "WBUOY",- 4)           # Wired Buoy info for comm
 DATA$typ(         "NBUOY",- 4)           # Non-Wired Buoy info for comm
 DATA$typ(         "CBUOY",- 4)           # Countermeasure buoy 4/90
 DATA$typ(         "HFDF ",- 1)           # HFDF name
 DATA$typ(         "DECM ",- 1)           # DECEPTION (RADAR) available?
 DATA$typ(         "BLIP ",- 1)           # BLIP enhancment available?
 DATA$typ(         "SONAR",- 6)           # Name of sonar(s) carried
 DATA$typ(         "SUICI",- 1)           # Suicide sub yes/no
 DATA$typ(  "SURF ", 40)             # SURFACE SHIPS
 DATA$typ(         "NAV  ",  1)           # Name of navaigational sensor
 DATA$typ(         "LCHRT",  1)           # Standard flight deck launch rate
 DATA$typ(         "RECRT",  1)           # Standard flight deck recovery rate
 DATA$typ(         "WAVE ",  1)           # Wave height threshold
 DATA$typ(         "LACOM",  1)           # L/A ratio for comm equip
 DATA$typ(         "LASEN",  1)           # L/A ratio for sensors
 DATA$typ(         "LAWPN",  1)           # L/A ratio for weapon systems  4/8/86
 DATA$typ(         "LAFLD",  1)           # Probability of flooding
 DATA$typ(         "LASPD",  1)           # L/A ratio for speed
 DATA$typ(         "LAAIR",  1)           # L/A ratio of aircraft parked
 DATA$typ(         "RBOC ",  1)           # Firing rate and minutes
 DATA$typ(         "BUOY ",-10)           # Define names & qty of buoys carried
 DATA$typ(         "AIR  ",-24)           # Name and qty of aircraft
 DATA$typ(         "HFDF ",- 1)           # HFDF name
 DATA$typ(         "CHAFF",- 5)           # Types and qty of CHAFF            7/10/90
 DATA$typ(         "DECM ",- 1)           # DECEPTION (RADAR) available?
 DATA$typ(         "BLIP ",- 1)           # BLIP enhancment available?
 DATA$typ(         "SONAR",- 6)           # Name of sonar(s) carried
 DATA$typ(         "SWEEP",- 1)           # Capable of mine sweeping
 DATA$typ(         "DOMAI",- 1)           # LAND, WATER, or AMPHIB. Default AMPHIB - joa 11/95 (E1422)
 DATA$typ(         "SFUEL",- 1)           # Maximum ship fuel capacity in gallons            # joa 2/96 (E1467)
 DATA$typ(         "AFUEL",- 1)           # Maximum aviation fuel capacity in gallons        # joa 2/96 (E1467) # smm 12/97 (E1660)-gals
 DATA$typ(         "LASF ",- 1)           # Lethal area ratio for ship fuel supplies         # joa 2/96 (E1467)
 DATA$typ(         "LAAF ",- 1)           # Lethal area ratio for aviation fuel supplies     # joa 2/96 (E1467)
 DATA$typ(         "SFC  ",- 1)           # Ship fuel consumption(Gal/hr) for 7 speeds       # joa 2/96 (E1467)
 DATA$typ(         "UNREP",- 1)           # Flag ability to transfer fuel to another ship    # joa 2/96 (E1467)
 DATA$typ(         "SFRES",- 1)           # Percent of fuel reserved for burning             # joa 2/96 (E1467)
 DATA$typ(         "FHOSE",- 1)           # Number of hoses and pump transfer rate           # joa 2/96 (E1467)
 DATA$typ(         "FUSTA",- 1)           # Number of ship fuel refueling stations           # joa 4/96 (E1467)
 DATA$typ(         "JPSTA",- 1)           # Number of aviation fuel refueling stations       # joa 4/96 (E1467)
 DATA$typ(         "VCRU ",  1)           # Ship economical cruise speed                     # joa 4/96 (E1467)
 DATA$typ(         "TRPDO",-10)           # Name and qty of enhanced torpedoes 4/90
 DATA$typ(         "JTIDS", -1)           # JTIDS Capable Flag - clk 11/95 (E1469)
 DATA$typ(         "CEC",   -1)           # CEC  Capable Flag - clk 10/96 (E1695)
 DATA$typ(         "SOF",   -1)           # is this to represent a JTMD SOF team - clk 3/96 (E1561)
 DATA$typ(         "JSOF",  -1)           # is this to represent a JTMD Joint SOF team  - clk 4/97 (E1765))
 DATA$typ(         "UGS",   -3)           # is this to represent a JTMS UGS sensor      - clk 3/96 (E1561)
 DATA$typ(         "IUGS",  -1)           # is this to represent a JTMD IUGS array      - clk 4/97 (E1764)
 DATA$typ(         "SDOFF", -1)           # platform default target standoff range joa 2/05 per_sor
 DATA$typ(         "SHARE", -1)           # ALSP shared track
 DATA$typ(   "BOAT ", 17)             # SMALL BOATS                        5/8/89
 DATA$typ(         "NAV  ",  1)           # Name of navaigational sensor
 DATA$typ(         "LACOM",  1)           # L/A ratio for comm equip
 DATA$typ(         "LASEN",  1)           # L/A ratio for sensors
 DATA$typ(         "LAWPN",  1)           # L/A ratio for weapon systems
 DATA$typ(         "LAFLD",  1)           # Probability of flooding
 DATA$typ(         "LASPD",  1)           # L/A ratio for speed
 DATA$typ(         "LDELY",  1)           # Launch delay for this boat class
 DATA$typ(         "RPDLY",  1)           # Replenishisment delay for this boat
 DATA$typ(         "PBFAL",  1)           # Probability of boat failure
 DATA$typ(         "VCRU ",  1)           # Boat economical cruise speed
 DATA$typ(         "RANGE",  1)           # Range at cruise speed (Nmi)
 DATA$typ(         "FUEL ",  1)           # Amount of fuel carried at launch time
 DATA$typ(         "RBOC ", -1)           # Firing rate and minutes
 DATA$typ(         "SWEEP",- 1)           # Capable of mine sweeping
 DATA$typ(         "DOMAI",- 1)           # LAND, WATER, or AMPHIB. Default AMPHIB - joa 11/95 (E1422)
 DATA$typ(         "SDOFF", -1)           # platform default target standoff range joa 2/05 per_sor
 DATA$typ(         "TRPDO",-10)           # Name and qty of enhanced torpedoes 4/90
 
 
 $set (Data_Count,0)
 
DATA$fld1("CLASS", 1, 1,"NAME ", 1,"Class of"," the shi","p, boat ","or sub")
DATA$fld1("CAT  ", 1, 1,"CAT  ", 1,"Category"," (SURF/N","SUB/DSUB","/BOAT)")
DATA$fld1("TYPE ", 1, 1,"NAME ", 1,"Type of ","the ship",", boat o","r sub ")
DATA$fld3("NOMEN",3,-16,"Text ", 1,"...  ", 1,"...  ", 1,"Full nam","e     ","","")
DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
DATA$fld1("VMAX ", 1, 2,"KNOTS", 1,"Maximum ","speed   ","        ","      ")
DATA$fld1("DRATE", 1, 2,"ft/mn", 1,"Rate of ","dive    ","        ","      ")
DATA$fld1("XSECT", 1, 2,"dBM  ", 1,"Radar cr","oss sect","ion     ","      ")
DATA$fld1("HFDF ", 1, 1,"NAME ", 1,"HFDF nam","e       ","        ","      ")
DATA$fld1("TRKS ", 1, 2,"QTY1 ", 1,"Number o","f local ","tracks  ","      ")
DATA$fld1("BBN  ", 1, 9,"dB   ", 6,"BB noise"," 2000 Hz",", six sp","eeds  ")
DATA$fld1("BBD  ", 1, 9,"dB   ", 6,"Diesel B","BN 2000 ","Hz, 6 sp","eeds  ")
DATA$fld1("LACOM", 1, 2,"%    ", 1,"L/A rati","o for co","mm equip","      ")
DATA$fld1("LAAIR", 1, 2,"%    ", 1,"L/A rati","o for pa","rked air","craft ")
DATA$fld1("LASEN", 1, 2,"%    ", 1,"L/A rati","o for se","nsors   ","      ")
DATA$fld1("LAWPN", 1, 2,"%    ", 1,"L/A rati","o for we","apons   ","      ")
DATA$fld1("LAFLD", 1, 2,"%    ", 1,"L/A rati","o for fl","ooding  ","      ")
DATA$fld1("LASPD", 1, 2,"%    ", 1,"L/A rati","o for sp","eed     ","      ")
DATA$fld1("DECM ", 1, 1,"ANSWR", 1,"Deceptio","n availa","ble ?   ","      ")
DATA$fld1("SUICI", 1, 1,"ANSWR", 1,"Suicide ","sub?    ","        ","      ")
DATA$fld1("BLIP ", 1, 1,"ANSWR", 1,"BLIP enh","ancment ","availabl","e ?   ")
DATA$fld1("KEEL ", 1, 2,"FEET ", 1,"Keel dep","th when ","surfaced","      ")
DATA$fld1("PSCOP", 1, 2,"FEET ", 1,"Periscop","e depth ","        ","      ")
DATA$fld1("DEPTH", 1, 2,"FEET1", 1,"Max dive"," depth (","ft)     ","      ")
DATA$fld1("SONAR", 1, 1,"NAME ", 1,"Name of ","sonar(s)","        ","      ")
DATA$fld1("DOMAI", 1, 1,"LAW  ", 1,"Land, Am","phib or ","water   ","      ")
DATA$fld1("HDG  ", 1, 1,"NAME ", 1,"Name of ","heading ","sensor  ","      ")
DATA$fld1("LCHRT", 1, 2,"RATE ", 1,"Stand fl","t deck l","aunch ra","te    ")
DATA$fld1("RECRT", 1, 2,"RATE ", 1,"Stand fl","t deck r","ecovery ","rate  ")
DATA$fld1("WAVE ", 1, 2,"feet ", 1,"Wave hei","ght thre","shold   ","      ")
DATA$fld1("SPD  ", 1, 1,"NAME ", 1,"Name of ","speed se","nsor    ","      ")
DATA$fld1("DR   ", 1, 1,"NAME ", 1,"Name of ","dead rec","koning s","ensor ")
DATA$fld1("OMEGA", 1, 1,"NAME ", 1,"Name of ","omega se","nsor    ","      ")
DATA$fld1("NAV  ", 1, 1,"NAME ", 1,"Name of ","navigati","onal sen","sor   ")
DATA$fld1("CLRNG", 1, 2,"RANGE", 1,"Range at"," which c","an be cl","ass   ")
DATA$fld1("DTRNG", 1, 2,"RANGE", 1,"Range at"," which c","an be de","tected")
DATA$fld1("WIRES", 1, 2,"QTY  ", 1,"Wire inf","o for co","mm      ","      ")
DATA$fld3("BUOY ", 3, 4,"NAME ", 1,"BTYPE", 1,"QTY  ", 1,"Type & q","ty of bu","oys carr","ied   ")
DATA$fld3("WEAP ", 3, 4,"NAME ", 1,"WTYPE", 1,"QTY  ", 1,"Type & q","ty weapo","ns carri","ed    ")
DATA$fld2("NBN  ", 2, 3,"Hz   ", 1,"dB   ", 1,"NB Noise"," not spe","ed relat","ed    ")
DATA$fld2("NBN05", 2, 3,"Hz   ", 1,"dB   ", 1,"NB Noise"," at 5 kn","ots     ","      ")
DATA$fld2("NBN10", 2, 3,"Hz   ", 1,"dB   ", 1,"NB Noise"," at 10 k","nots    ","      ")
DATA$fld2("NBN15", 2, 3,"Hz   ", 1,"dB   ", 1,"NB Noise"," at 15 k","nots    ","      ")
DATA$fld2("NBN20", 2, 3,"Hz   ", 1,"dB   ", 1,"NB Noise"," at 20 k","nots    ","      ")
DATA$fld2("NBN25", 2, 3,"Hz   ", 1,"dB   ", 1,"NB Noise"," at 25 k","nots    ","      ")
DATA$fld2("NBN30", 2, 3,"Hz   ", 1,"dB   ", 1,"NB Noise"," at 30 k","nots    ","      ")
DATA$fld2("NBD  ", 2, 3,"Hz   ", 1,"dB   ", 1,"Diesel N","B Noise ","not spee","d rel ")
DATA$fld2("NBD05", 2, 3,"Hz   ", 1,"dB   ", 1,"Diesel N","B Noise ","at 5 kno","ts    ")
DATA$fld2("NBD10", 2, 3,"Hz   ", 1,"dB   ", 1,"Diesel N","B Noise ","at 10 kn","ots   ")
DATA$fld2("NBD15", 2, 3,"Hz   ", 1,"dB   ", 1,"Diesel N","B Noise ","at 15 kn","ots   ")
DATA$fld2("NBD20", 2, 3,"Hz   ", 1,"dB   ", 1,"Diesel N","B Noise ","at 20 kn","ots   ")
DATA$fld2("NBD25", 2, 3,"Hz   ", 1,"dB   ", 1,"Diesel N","B Noise ","at 25 kn","ots   ")
DATA$fld2("NBD30", 2, 3,"Hz   ", 1,"dB   ", 1,"Diesel N","B Noise ","at 30 kn","ots   ")
DATA$fld2("RBOC ", 2, 3,"qt/mn", 1,"QTY  ", 1,"RBOC Fir","ing rate"," & round","s (or 0)")
DATA$fld2("RDESM", 2, 5,"NAME ", 1,"FEET1", 1,"Name & H","eight of"," sensor(","s)    ")
DATA$fld2("JAMMR", 2, 5,"NAME ", 1,"FEET ", 1,"Name & H","eight of"," jammer ","      ")
DATA$fld2("COMMS", 2, 5,"NAME ", 1,"FEET ", 1,"Name & H","eight of"," commsui","te(s) ")
DATA$fld2("AIR  ", 2, 5,"NAME ", 1,"QTY  ", 1,"Type & q","ty of ai","rcraft  ","      ")
DATA$fld3("MISS ", 3, 4,"NAME ", 1,"MTYPE", 1,"QTY  ", 1,"Name, ty","pe & qty"," miss ca","rried ")
DATA$fld2("TORP ", 2, 5,"NAME ", 1,"QTY  ", 1,"Type & q","ty torpe","does car","ried  ")
DATA$fld2("TRPDO", 2, 5,"NAME ", 1,"QTY2 ", 1,"Type & q","ty enhan","ned torp","does  ")
DATA$fld2("WBUOY", 2, 5,"NAME ", 1,"QTY  ", 1,"Wire buo","ys info ","for comm","      ")
DATA$fld2("NBUOY", 2, 5,"NAME ", 1,"QTY  ", 1,"Non-Wire","d buoys ","info for"," comm ")
DATA$fld2("CBUOY", 2, 5,"NAME ", 1,"QTY  ", 1,"Counterm","easure  ","        ","      ")
DATA$fld2("CHAFF", 2, 5,"NAME ", 1,"QTY  ", 1,"CHAFF Ty","pe      ","        ","      ")
DATA$fld1("NDCLS", 1, 2,"DAMCL", 1,"NucDam C","lass SHP","1cv2cg3d","d4a5sb")
DATA$fld2("CJAMR", 2, 5,"NAME ", 1,"FEET ", 1,"Name & H","eight of"," CommJam","mer   ")
DATA$fld1("LDELY", 1, 2,"MIN1 ", 1,"Launch d","elay for"," boats  ","      ")
DATA$fld1("RPDLY", 1, 2,"MIN2 ", 1,"Replenis","hment de","lay     ","      ")
DATA$fld1("PBFAL", 1, 2,"%    ", 1,"Probabil","ity of b","oat fail","ure   ")
DATA$fld1("VCRU ", 1, 2,"KNOTS", 1,"Economic","al cruis","e speed ","      ")
DATA$fld1("RANGE", 1, 2,"NMILE", 1,"Range, N","autical ","Miles @ ","cruise")
DATA$fld1("FUEL ", 1, 2,"GALS ", 1,"Fuel car","ried at ","launch  ","      ")
DATA$fld1("SWEEP", 1, 1,"ANSWR", 1,"Capable ","of Mines","weeping ","      ")
DATA$fld2("GRND ", 2, 5,"NAME ", 1,"NGRND", 1,"Name & Q","uantity","of groun","d units")
DATA$fld1("UAVTG", 1, 2,"INDEX", 1,"Target T","ype Inde","x       ","      ")
DATA$fld7("TGSTR", 7,11,"dBX  ", 1,"dBX  ", 1,"dBX  ", 1,"dBX  ", 1,"dBX  ", 1,"dBX  ", 1,"dBX  ", 1,"Aspect D","ependent"," Tgt Str","ength")
DATA$fld3("ANT-H", 3,10,"NAME ", 1,"S-ANG", 1,"E-ANG", 1,"EM Devic","e Horiz ","Antenna ","coverage")
DATA$fld2("IFF  ", 2,5,"NAME ", 1,"FEET ", 1,"Name & H","eight of"," sensor(","s)    ")
DATA$fld1("HGT  ", 1, 2,"FEET ", 1,"Height o","f platfo","rm      ","      ")
DATA$fld1("WIDTH", 1, 2,"FEET ", 1,"Width of"," platfor","m       ","      ")
DATA$fld1("SFUEL", 1, 2,"SGAL ", 1,"Maximum ","ship fue","l capaci","ty    ")
DATA$fld1("AFUEL", 1, 2,"SGAL ", 1,"Max gals"," aviatio","n fuel c","apacity ")
DATA$fld1("LASF ", 1, 2,"%    ", 1,"Lethal a","rea rati","o for sh","ip fuel ")
DATA$fld1("LAAF ", 1, 2,"%    ", 1,"Lethal a","rea rati","o for ai","r fuel  ")
DATA$fld1("SFC  ", 1,13,"gal/h", 7,"Ship fue","l consum","ption at","0,5..30 ")
DATA$fld1("UNREP", 1, 1,"ANSWR", 1,"Capabili","ty of tr","ansferri","ng fuel ")
DATA$fld1("SFRES", 1,14,"RPct ", 1,"Percent ","ship fue","reserved","for burn")
DATA$fld1("SDOFF", 1,14,"RNM  ", 1,"Standoff"," range f","or targe","ts      ")
DATA$fld2("FHOSE", 2,15,"QTY3 ", 1,"gal/h", 1,"Number o","f fuel h","oses & p","ump rate")
DATA$fld1("FUSTA", 1, 2,"FUSTA", 1,"Refuelin","g statio","ns for s","hip     ")
DATA$fld1("JPSTA", 1, 2,"FUSTA", 1,"Refuelin","g statio","ns for a","ir      ")
DATA$fld1("JTIDS", 1, 2,"ANSWR", 1,"Platform"," is JTID","S capabl","e       ")
DATA$fld1("CEC",   1, 2,"ANSWR", 1,"Platform"," is CEC ","capable ","        ")
DATA$fld1("SOF",   1, 2,"ANSWR", 1,"Simulate","d JTMD F","leet SOF"," team   ")
DATA$fld1("JSOF",  1, 2,"ANSWR", 1,"Simulate","d JTMD J","oint SOF"," team   ")
DATA$fld1("UGS",   1, 2,"UTYPE", 1,"Simulate","d JTMD U","GS senso","r       ")
Data$fld1("SHARE", 1, 1,"ANSWR", 1,"Ghosted ","ALSP shc"," shares ","trks    ")
DATA$fld1("IUGS",  1, 2,"ANSWR", 1,"Simulate","d JTMD I","UGS arra","y       ")
 
 $set (Data_Count,0)
 DATA$arg10N("ALPHA",6000,0,0)              # Alphanumeric -- Anything
 DATA$arg10N("NAME ",6000, 0,        0)     # Alphanumeric -- Anything
 DATA$arg10C("CAT  ",8004,"SURF ","NSUB ","DSUB ","BOAT ") # Alphanumeric list -- SURF/SUB
 DATA$arg10C("LAW  ",8003,"LAND ","AMPHI","WATER") # Alphanumeric list --LAND,AMPHIB, WATER - joa 11/95 (E1422)
 DATA$arg10N("Text ",9024)                  # Alphanumeric string (24 bytes)
 DATA$arg10N("...  ",9000)                  # Alphanumeric string filler
 DATA$arg10C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg10N("KNOTS",2002, 1,      100)     # Numeric Range 1 -> 100
 DATA$arg10N("RANGE",2002, 0,      500)     # Numeric Range 0 -> 500
 DATA$arg10N("METRS",2002, 1,100000000)     # Numeric Range 1 -> 100000000
 DATA$arg10N("dB   ",2002, 0,      500)     # Numeric Range 0 -> 500
 DATA$arg10N("dBM  ",2002,-30,     500)     # Numeric Range-30-> 500  # clk 3/99 (E2033)
 DATA$arg10N("dBX  ",2002, 0,       60)     # Numeric Range 0 -> 60 #10/25/90
 DATA$arg10N("Hz   ",2002, 0,   999999)     # Numeric Range 0 -> infinity
 DATA$arg10N("QTY  ",2002, 0,    99999)     # Numeric Range 0 -> 99999
 DATA$arg10N("RATE ",2002, 1,        5)     # Numeric Range 1 -> 5
 DATA$arg10N("feet ",2002, 0,       30)     # Numeric Range 0 -> 30
 DATA$arg10N("qt/mn",2002, 0,       50)     # Numeric Range 0 -> 50
 DATA$arg10N("FEET ",2002, 0,     3000)     # Numeric Range 0 -> 3000
 DATA$arg10N("FEET1",2002, 0,    16000)     # Numeric Range 0 -> 16000 SMM 4/99 (E2080)
 DATA$arg10N("ft/mn",2002, 0,     1000)     # Numeric Range 0 -> 1000
 DATA$arg10N("NGRND",2002, 0,     1000)     # Numeric Range 0 -> 1000
 DATA$arg10N("MINUT",2002, 0,     4320)     # Numeric Range 0 -> 4320 (3 days)
 DATA$arg10N("DEGRS",2002,-180,    180)     # Numeric Range -180 -> 180
 DATA$arg10N("S-ANG",2002, 0,      359)     # Numeric Range 0 -> 359
 DATA$arg10N("E-ANG",2002, 0,      359)     # Numeric Range 0 -> 359
 DATA$arg10N("QTY1 ",2002, 0,     2000)     # Numeric Range 0 -> 250  # dew (E2124) 11/99
 DATA$arg10N("QTY2 ",2002, 0,      500)     # Numeric Range 0 -> 500  #4/90
 DATA$arg10N("%    ",2002, 0,      100)     # Numeric Range 0 -> 100
 DATA$arg10N("%2   ",2002, 0,       45)     # Numeric Range 0 -> 45
 DATA$arg10N("BIAS ",2002, 0,    65000)     # Numeric Range 0 -> 65000
 DATA$arg10C("ANSWR",8002,"YES  ","NO   ")  # Alphanumeric list -- YES/NO
 DATA$arg10C("TRANS",8002,"SEND ","RCVR ")  # Alphanumeric list -- SEND/RCVR
 DATA$arg10C("BTYPE",8003,"SONO ","COMM ","CM   ") # Alphanumeric list--SONO/COMM/CM
 DATA$arg10C("WTYPE",8008,"AAM  ","ASM  ","BOMB ","CIWS ","GUN  ","MINE ","SAM  ","TORP ")                   # unused SSM with MINE
 DATA$arg10C("MTYPE",8003,"CRUZ ","BALL ","SAM  ")               # E2180 - Remove ADCRU DEW 2/15/00
 DATA$arg10C("UTYPE",8008,"ACOUS","IR      ","MAGNT","SEISM")    # clk 3/96 (E1561)
 DATA$arg10N("DAMCL",2002, 1,        5)     # Numeric Range 1 -> 5
 DATA$arg10N("MIN1 ",2002, 0,      100)     # Numeric Range 0 -> 100    # 5/8/89
 DATA$arg10N("MIN2 ",2002, 0,      500)     # Numeric Range 0 -> 500    # 5/8/89
 DATA$arg10N("NMILE",2002, 1,    10000)     # Numeric Range 1 -> 10000  # 5/8/89
 DATA$arg10N("GALS ",2002, 1,    10000)     # Numeric Range 0 -> 10000  # 5/8/89
 DATA$arg10N("INDEX",2002, 1,       24)     # Numeric Range 1 -> 24
 DATA$arg10N("PROB ",-2002, 0.0,   1.0)     # FP Num Range 0.0 -> 1.0 clf 10/5/92
 DATA$arg10N("FPRNG",-2002, 0.00,100.00)    # FP Num Range 0.0 -> 100.0 jms 10/8/92
 DATA$arg10N("SGAL ",2002, 1,  9999999)     # Numeric Range 0 -> 9,999,999    # joa 2/96 (E1467)
 DATA$arg10N("PNDS ",2002, 1,  9999999)     # Numeric Range 0 -> 9,999,999    # joa 2/96 (E1467)
 DATA$arg10N("gal/h",-2002, 0.00,99999.00)  # FP Num Range 0.0 -> 99,999.0    # joa 2/96 (E1467)
 DATA$arg10N("RPct ",-2002, 0.00,100.00)    # FP Num Range 0.0 -> 100.0       # joa 2/96 (E1467)
 DATA$arg10N("RNM  ",-2002, 0.00,100.00)    # FP Num Range 0.0 -> 100.0       # joa 2/96 (E1467)
 DATA$arg10N("QTY3 ",2002, 0,       30)     # Numeric Range 0 -> 30           # joa 2/96 (E1467)
 DATA$arg10N("FUSTA",2002, 0,        4)     # Numeric Range 0 -> 4            # joa 4/96 (E1467)
 
 DATA  onceC/"NBN  ",            # define fields required at least once
            "NBD  ",
            18*"*****"/
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt(  2,"A5,A7)  ","        "," "," ")
 DATA$fmt(  2,"A5,I9)  ","        "," "," ")
 DATA$fmt(  3,"A5,I9,I7",")       "," "," ")
 DATA$fmt(  4,"A5,2A7,I","9)      "," "," ")
 DATA$fmt(  3,"A5,A7,I9",")       "," "," ")
 DATA$fmt( 11,"A5,5(A6,","I5))    "," "," ")
 DATA$fmt( 12,"A5,I6,5(","A6,I5)) "," "," ")
 DATA$fmt( 13,"A5,6(A6,","I5))    "," "," ")
 DATA$fmt(  7,"A5,6I6) ","        "," "," ")
 DATA$fmt(  4,"A5,A7,2I","6)      "," "," ")
 DATA$fmt(  8,"A5,7I4) ","        "," "," ")
 DATA$fmt(  5,"A5,4F9.3",")       "," "," ")
 DATA$fmt(  8,"A5,7F9.2",")       "," "," ")
 DATA$fmt(  2,"A5,F9.3)","        "," "," ")
 DATA$fmt(  3,"A5,I7,F9",".3)     "," "," ")
 DATA$fmt(  4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    There must be one occurrence of NBN__ AND NBD__
#
#
9901 format (1x,a5," is required to have AT LEAST ONE entry.")
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                    #*********************************************************
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==2)                     # Special Test 2
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
                   }
#********************************************************************
 
      include "blsub2.rin"                              # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
#
# set counters to zip....
 
for (ptr=1; lcomp_v(once[ptr], "*****") != 0; ptr=ptr+1)
  {
   oncect[ptr] = -1
  }
 
# scan the work area looking at all fields....
 
for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
    {
    for (k=1; lcomp_v(once[k], "*****") != 0; k=k+1)
        {
        if (work[ptr]==once[k])                # Match ?
            {
            if (oncect[k] < 0) oncect[k] = 0
            if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
                {
                oncect[k] = oncect[k] + 1
                }
            }
        }
 
    #$% if antenna coverage and has data to check
    if (work [ptr] == 'ANT-H' & work [ptr + 2] != '*REQ*')
        {
        if ( ! valid_antenna_coverage(work,
                                      INT(Work[1]), # length of work record
                                      work [ ptr + 2],
                                      ptr)
           )
            {
            serr = serr + 1
            }
        }
    }
 
 
# test results ......
 
 
for (ptr=1; lcomp_v(once[ptr],"*****") != 0; ptr=ptr+1)
  {
   if (oncect[ptr] == 0)
     {
      print 9901,once[ptr]
      serr = serr + 1
     }
  }
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
 

#$% validate antenna coverage entry
logical*1 function valid_antenna_coverage(work,
                                          Work_LEN,  # length of work record
                                          Antenna_Device,
                                          ANTEN_Ptr) # pointer to current coverage
 
IMPLICIT NONE     # jb E2145  3/30/00
    # jb - see also declarations in BLSUB1.RIN ...
 
integer*4   Work_LEN
literal     work[ Work_LEN ]
literal     Antenna_Device
integer*4   ANTEN_Ptr
 
integer*4   ptr         # jb E2145 - (different 'ptr' than in .RIN file)
 
logical*1   RDESM_Entry
logical*1   Duplicate_ANTEN
logical*1   Same_Angles
 
100 format (x,"Antenna coverage, device ",
                A5," not entered for ship or Invalid Device")
101 format (x,"Duplicate Device ",A5," for Antenna Coverage")
102 format (x,"Begin and End Angles Antenna Coverage are Same for ",A5)
 
 
valid_antenna_coverage = no
 
Duplicate_ANTEN = .false.
RDESM_Entry = .false.
Same_Angles = .false.
 
#$% if user entered same number for begin and end angles for coverage
if ( work [ ANTEN_ptr + 3 ] == work [ ANTEN_ptr + 4 ] )
    {
    Same_Angles = .true.
    }
 
for (ptr=2; ptr < work_LEN; ptr=ptr+ work[ptr+1]+2)
    {
    #$% make sure this antenna coverage entry has a corresponding RDESM entry
    if (work[ptr] == 'RDESM' &
        work[ptr+2] == Antenna_Device)
        {
        RDESM_Entry = .true.
        break
        }
    }
 
for (ptr=2; ptr < work_LEN; ptr=ptr+ work[ptr+1]+2)
    {
    #$% make sure device for this antenna coverage entry is not duplicated
    if (work[ptr] == 'ANT-H' &
        ptr != ANTEN_ptr &
        work[ptr+2] == Antenna_Device)
        {
        Duplicate_ANTEN = .true.
        break
        }
    }
 
if ( ! RDESM_Entry )
    {
    print 100, Antenna_Device
    }
 
if ( Duplicate_ANTEN )
    {
    print 101, Antenna_Device
    }
 
if ( Same_Angles )
    {
    print 102, Antenna_Device
    }
 
if ( ! Duplicate_ANTEN & RDESM_Entry & ! Same_Angles )
    {
    valid_antenna_coverage = yes
    }
 
return
end
