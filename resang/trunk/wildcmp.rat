 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLCMP                        ECHO                       PAI
#$%      GETSR  <WGLOAD>               ECHOH
#$%      GSLOTM <WGLOAD>               ECHOR
#$%      BADFLD <WGLOAD>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLCMP
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLCMP - GETSR *
#$%                                      - GSLOTM*
#$%                                      - BADFLD*
 

 
define(DEBUG,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbpai.inc"
include "bbsui.inc"
include "ascii.inc"
 
define (BBImplicit, Implicit None)      # MJC 4/26/2000
 
subroutine wglcmp (reccnt,recsz,rec)    # load in the commpair scenario file
 
########################################################
#$%
#$% Purpose:   WGLCMP loads in the commpair scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     BADFLD     ECHO       ECHOH
#$%            ECHOR      GETSR      GSLOTM
#$%
#$% Tables:    PAI
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
#$% Modifications:  modified call to get_commsuite_channel. Previously,
#$%             the call assumed that BEES analysis used only fixed frequency
#$%             (FF) commsuites. We are now adding a frequency hopping
#$%             model into BEES. The get_commsuite_channel routine is now
#$%             modified to handle a frequency hopper device. 4/91, reh
#$%
########################################################
 
BBcommon
 
integer     reccnt,recsz,pnt
literal     rec[1500]
 
literal     commr, comms
 
integer*4   Istat
 
integer     LOOP, LEN, LPNT, I_CHANNEL,
            SUI$Pointer, SUI2$Pointer,
            PAI$Pointer, PAI$Lifeofmessage$I,
            PAI$Lineofsight$I, PAI$Missionoverride$I,
            PAI$Freq$I, PAI$Crypto$I, PAI$Servicerate$I,
            PAI$Percentutilization$I, PAI$Maxcommrange$I,
            PAI$Sendspeedin$I, PAI$Sendspeedbelow$I,
            PAI$Receivespeedin$I, PAI$Receivespeedbelow$I,
            PAI$Wiretosend$I, PAI$Wiretoreceive$I,
            PAI$Masttosend$I, PAI$Masttoreceive$I,
            PAI$Buoytosend$I, PAI$Buoytoreceive$I,
            PAI$Emisendflag$I                                   # MJC 4/26/2000
real        PAI$Offcoursesend$F, PAI$Offcoursereceive$F,
            PAI$Offcourse$F, PAI$Linkjammersensitivity$F        # MJC 4/26/2000
literal     PAI$Type$C, PAI$Buoytosend$C,
            CSTRIP8                                             # MJC 4/26/2000
 
 
DEBUG call echov("<wglcmp:")
 
#    open(unit         = 31,
 
#$% if file empty, ie. no reccnt
if (reccnt <= 1)
   {
    #$% display error message to user
    call echov ("Commpair File Empty")
    call echor
    return
   }
 
for (loop = 2; loop <= reccnt; )        # for each record in the file
    {
    call getsr (loop,recsz,rec)         # get scenario record
    len = rec[1]                        # save length
 
    #$% call to get commpair slots from table
    call gslotm (pai$pointer,$$pai,pai$entry,istat)
 
    #$% if status indicates table is full
    if (istat == $no)
        {
        #$% display error message to user
        call echov ("Items from ")
        call echohn (rec[3],$$MaxLit)
        call echov (" and on are not loaded.")
        call echor
        return
        }
 
    #$% get commpair name and save
    pai$type$c = rec[3]
    PUTpai$type$c
 
    lpnt = 1                            # save dummy last word pointer
    for (pnt = 4; pnt <= len; )         # for each word in the record
        {
        if (pnt == lpnt)                # if ==, didnt process.... error
            {
            call badfld (_              # display unknown field
                         "Commpair  ",  # file type
                         rec[3],        # record name
                         rec[pnt])      # ????? fld
 
            #$% increment pointer
            pnt = pnt + 1
            }
        lpnt = pnt
 
        #$% if record pointer indicates LIFE
        if      (rec[pnt] == 'LIFE')
            {
            #$% get max time allowed for msg delivery and save
            pai$lifeofMessage$i = rec[pnt+1]
            PUTpai$lifeofMessage$i
 
            #$% invcrement pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates LOS
        else if (rec[pnt] == 'LOS')
            {
            #$% if next pointer indicates YES, set line of sight to YES
            if (rec[pnt+1] == 'YES') pai$lineofSight$i = $yes
            #$% else set line of sight to NO
            else                       pai$lineofSight$i = $no
            #$% save line of sight
            PUTpai$lineofSight$i
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates MISSN
        else if (rec[pnt] == 'MISSN')
            {
            #$% if next pointer is YES, set mission override to YES
            if (rec[pnt+1] == 'YES') pai$MissionOverride$i = $yes
            #$% else set mission override to NO
            else                       pai$MissionOverride$i = $no
            #$% save mission override
            PUTpai$MissionOverride$i
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates COMMS
        else if (rec[pnt] == 'COMMS')
            {
            #$% get the sending name for later use
            comms = rec[ pnt + 1 ]
 
            #$% call to find commsuite equipment  # REH 04/88
            call eqfind ( $$sui, sui$entry, rec [ pnt + 1 ], sui$pointer )
 
            if ( sui$pointer != 0 )
                {
                PUTpai$SendSuitePntr$I ( sui$pointer )
                }
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates COMMR
        else if (rec[pnt] == 'COMMR')
            {
            #$% get the sending name for later use
            commr = rec[ pnt + 1 ]
 
            #$% call to find commsuite equipment  # REH 04/88
            call eqfind ( $$sui, sui$entry, rec [ pnt + 1 ], sui$pointer )
 
            if ( sui$pointer != 0 )
                {
                PUTpai$RecvSuitePntr$I ( sui$pointer )
                }
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates FREQ
        else if (rec[pnt] == 'FREQ')
            {
            #$% get frequency of commpair and save
            pai$freq$i = rec[pnt+1]
            PUTpai$freq$i
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates CRYPT
        else if (rec[pnt] == 'CRYPT')
            {
            #$% if next pointer indicates YES
            if (rec[pnt+1] == 'YES')
                {
                #$% set communication encrypted to yes and save
                pai$crypto$i = $yes
                PUTpai$crypto$i
                }
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates MU
        else if (rec[pnt] == 'MU')
            {
            #$% get rate of messages/hour and save
            pai$serviceRate$i = rec[pnt+1]
            PUTpai$serviceRate$i
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates RHO
        else if (rec[pnt] == 'RHO')
            {
            #$% get path utilization factor and save
            pai$percentutilization$i = rec[pnt+1]
            PUTpai$percentutilization$i
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates RANGE
        else if (rec[pnt] == 'RANGE')
            {
            #$% if next pointer indicates ACOUS set max comm range to zero
            if (rec[pnt+1] == 'ACOUS') pai$maxCommRange$i = 0
            #$% else get max comm range
            else                       pai$maxCommRange$i = rec[pnt+1]
            #$% save max comm range
            PUTpai$maxCommRange$i
 
            #$%  increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates SPEED
        else if (rec[pnt] == 'SPEED')
            {
            #$% if next pointer indicates SEND
            if (rec[pnt+1] == 'SEND')
                {
                #$% get speed for sending in the layer (acoustic) & save
                pai$sendspeedin$i = rec[pnt+2]
                PUTpai$sendspeedin$i
 
                #$% get speed for sending below the layer (acoustic) & save
                pai$sendspeedBelow$i = rec[pnt+3]
                PUTpai$sendspeedBelow$i
                }
            #$% must be receive if not send
            else
                {
                #$% get in-layer receive speed (acoustic) and save
                pai$Receivespeedin$i = rec[pnt+2]
                PUTpai$Receivespeedin$i
 
                #$% get below layer receive speed (acoustic) and save
                pai$ReceivespeedBelow$i = rec[pnt+3]
                PUTpai$ReceivespeedBelow$i
                }
 
            #$% increment pointer
            pnt = pnt + 4
            }
 
        #$% else if record pointer indicates WIRE
        else if (rec[pnt] == 'WIRE')
            {
            #$% if next pointer indicates SEND
            if (rec[pnt+1] == 'SEND')
                {
                #$% indicate "needs wire to send" as yes and save
                pai$wiretosend$i = $yes
                PUTpai$wiretosend$i
                }
            else
                {
                #$% else indicate "needs wire to receive" as yes and save
                pai$wiretoReceive$i = $yes
                PUTpai$wiretoReceive$i
                }
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates MAST
        else if (rec[pnt] == 'MAST')
            {
            #$% if next pointer is SEND
            if (rec[pnt+1] == 'SEND')
                {
                #$% set "needs mast to send" indcator to yes and save
                pai$Masttosend$i = $yes
                PUTpai$masttosend$i
                }
            else
                {
                #$% else set "needs mast to receive" indicator to yes and save
                pai$masttoReceive$i = $yes
                PUTpai$masttoReceive$i
                }
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates WBUOY
        else if (rec[pnt] == 'WBUOY')
            {
            #$% if next pointer is SEND
            if (rec[pnt+1] == 'SEND')
                {
                #$% set "needs buoy to send" indicator to yes & save
                pai$buoytosend$i = $yes
                PUTpai$buoytosend$i
 
                pai$buoytosend$C = rec[pnt+2]
                PUTpai$buoytosend$C
                }
            else
                {
                #$% else set "needs buoy to receive" to yes and save
                pai$buoytoReceive$i = $yes
                PUTpai$buoytoReceive$i
 
                #pai$buoytoReceive$C = rec[pnt+2]
                #PUTpai$buoytoReceive$C
                }
 
            #$% increment pointer
            pnt = pnt + 3
            }
 
        #$% else if record pointer indicates ARC
        else if (rec[pnt] == 'ARC')
            {
            #$% next pointer indicates SEND
            if (rec[pnt+1] == 'SEND')
                {
                #$% get deg off course for sending and save
                pai$OffCourseSend$f = rec[pnt+2]* $Pi/180.
                PUTpai$OffCourseSend$f
                }
            else
                {
                #$% else get deg off course for receiving and save
                pai$OffCourseReceive$f = rec[pnt+2]* $Pi/180.
                PUTpai$OffCourseReceive$f
                }
 
            #$% increment pointer
            pnt = pnt + 3
            }
 
        #$% else if record pointer indicates RCVRC
        else if (rec[pnt] == 'RCVRC')
            {
            #$% get heading deviation and save
            pai$OffCourse$f = rec[pnt+1]* $Pi/180.
            PUTpai$OffCourse$f
 
            #$% increment pointer
            pnt = pnt + 2
            }
 
        #$% else if record pointer indicates JMRSN     # REH 4/88
        else if (rec[pnt] == 'JMRSN')
            {
            #$% the Jammer sensitivity was entered as an integer value in the
            #$% build phase, it is normalized to a usable value here.
            pai$LinkJammerSensitivity$f = ( rec[pnt+1] / 10 )
            #$% save link jammer sensitivity
            PUTpai$LinkJammerSensitivity$f
 
            #$%  increment pointer
            pnt = pnt + 2
            }
        } # loop for next word in record
 
    #   pai$last$to pai$pointer + pai$entry - 1
 
    # begin 12/9/90 trs
    # if using EMI, verify that the COMMPAIR and COMMSUITE frequencies
    #  are aligned.
    if (EMI$granularity != 0)
        {
        SUI$Pointer = xpai$SendSuitePntr$I
        SUI2$Pointer = xpai$RecvSuitePntr$I
 
        #$% set up default, 4/91
        PAI$EMISendFlag$i = $yes
        putPAI$EMISendFlag$i
 
#       This validation commented out to allow assorted devices to talk
#                                                                 # DEW 7/2/91
 
#        if (SUI$Pointer$OK &   # new test added for BEES frequency hopers, 4/91
#            SUI2$Pointer$OK )
#            {
#            #$% if either device is a BEES frequency hoppers
#            if ( ( xSUI$DeviceType$i == $FrequencyHopper  &
#                   xSUI$EMIFlag$i == $BEESProcessing ) |
#                 ( xSUI2$DeviceType$i == $FrequencyHopper &
#                   xSUI2$EMIFlag$i == $BEESProcessing ) )
#                {
#                #$% if hoppers are not the same device
#                if ( SUI$Pointer != SUI2$Pointer )
#                    {
#                    call echor
#                    call echov("Warning: During EMI Analysis, COMMPAIR ")
#                    call echohn(xPAI$Type$c,$$MaxLit)
#                    call echov(" will not send data using ")
#                    call echohn(commr,$$MaxLit)
#                    call echov(" and ")
#                    call echohn(comms,$$MaxLit)
#                    call echor
#
#                    PAI$EMISendFlag$i = $no
#                    putPAI$EMISendFlag$i
#                    }
#                }
#            }
 
        call get_Commsuite_Channel ( _
                       xPAI$RecvSuitePntr$I,  # in
                       PAI$Pointer,         # in
                       I_Channel,           # out, 0 if not fixd freq
                       IStat)               # out, 0 if Fixd freq. align err.
 
        if (IStat == $no)
            {
            call echor
            call echov("Warning: During EMI Analysis, COMMSUITE ")
            call echohn(commr,$$MaxLit)
            call echov(" will not receive data using ")
            call echohn(Xpai$type$c,$$MaxLit)
            call echor
            call echov("   (SUITE-PAIR Frequency Alignment Error)")
            call echor
 
            PAI$EMISendFlag$i = $no
            putPAI$EMISendFlag$i
            }
        else   # good frequency
            {
            putPAI$RecvChannel$I (I_Channel)
            }
 
        call get_Commsuite_Channel ( _
                           xPAI$SendSuitePntr$I,  # in
                           PAI$Pointer,         # in
                           I_Channel,           # out, 0 if not fixed freq
                           IStat)               # out, 0 if freq. align err.
 
        if (IStat == $no)
            {
            call echor
            call echov("Warning: During EMI Analysis, COMMSUITE ")
            call echohn(comms,$$MaxLit)
            call echov(" will not send data using ")
            call echohn(Xpai$type$c,$$MaxLit)
            call echor
            call echov("   (SUITE-PAIR Frequency Alignment Error)")
            call echor
 
            PAI$EMISendFlag$i = $no
            putPAI$EMISendFlag$i
            }
        else   # good frequency
            {
            putPAI$SendChannel$I (I_Channel)
            }
        }
    # end   12/9/90 trs
    }                                    # loop for next record
 
DEBUG call echo ($GREAT)
 
return
end
