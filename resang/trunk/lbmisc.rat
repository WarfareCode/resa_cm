#  LBMISC.RAT
# This file contains miscellaneous routines....
 
include "macros.inc"
include "ascii.inc"
include "parallel.inc"
 
define($PI,3.141592654)
 
 

Subroutine Get_Qualifier ( Params,      # (in) string returned by READ_ARGUMENT
                           N,           # (in) Which Param to return
                           Param)       # (out) The specified Qualifiers
Implicit None
 
Integer*4           N, K
VaxCharacter*(*)    Params, Param
VaxCharacter*80     work1
 
work1 = ""
call str_element (work1, N , "-", params)
call Trim_Compress (work1, Param, K)
 
end
 

Subroutine Read_Arguments ( Max_Args,           # (in) Number of args to read
                            Args,               # (out) Array of arguments
                            Arg_Lens,           # (out) Length of each
                            Params)             # (out) Misc Qualifiers
Implicit None
 
Integer*4           Max_Args, Arg_Lens[Max_Args]
VaxCharacter*(*)    Args[Max_Args], Params
 
VaxCharacter    Buf*200
character       BufC[200]
equivalence     (Buf, BufC)
 
VaxCharacter    Temp*64
Integer*4       N, P, Buf_Len, param_len
 
# clear them all out
 
for (N = 1; n <= Max_Args; n=n+1)
    {
    Args[N]     = ""
    Arg_Lens[N] = 0
    }
 
Params = ""
Param_len = 0
 
call getmsg(BufC)
 
# type *,"GET Foriegn == ",buf_len," >",buf[1:buf_len],"<"
 
temp = "*"
N = 0
for (P = 1; temp != ""; P = P + 1)
    {
    temp = ""
    call str_element (temp, P, " ", buf)
 
    if (temp[1:1] == "-")
        {
        call vmovvn (temp,params,param_len)     # add param to end
        }
    else if (n < Max_Args)
        {
        N = N + 1
        call Trim_Compress (Temp, Args[N], Arg_Lens[N])
        }
    }
 
 
if (param_len != 0)
    {
    temp = params[1:param_len]
    print *,"  Command Qualifiers: "//temp
    }
 
end
 
 

 
real function ctof (buf,ipos)
implicit none
character   buf[ARB]
integer     ipos, ctoi, ifract
real        whole
integer     isign, ipower, isave
 
call skipbl (buf,ipos)
 
if (buf[ipos] == $MINUS)
    {
    isign = -1
    ipos = ipos+1
    }
else if (buf[ipos] == $PLUS)
    {
    isign = +1
    ipos = ipos+1
    }
else
    {
    isign = +1
    }
 
whole = ctoi (buf,ipos)
ifract = 0
 
ipower = 0
 
if (buf[ipos] == $PERIOD)
    {
    ipos = ipos + 1
 
    if (buf[ipos] >= $DIG0 & buf[ipos] <= $DIG9)
        {
        isave = ipos
 
        ifract = ctoi (buf,ipos)
 
        ipower = ipos - isave
        }
    }
 
ctof = isign * (whole + ifract/10.0 ** ipower)
 
return
end
 

 
integer function Base_10_to_Base_8 (base_10_number)
##############################################################################
#$%
#$% Purpose:   Convert the specified base 10 number into base 8 display
#$%            format.
#$%
#$% Called by:
#$%
#$% Calls:     INT
#$%
#$% Tables:    none
#$%
#$% Date:      25 January 1997  (E1732)
#$%
#$% Author:    Carol L. Kropp
#$%
##############################################################################
implicit none
integer  base_10_number
 
integer  quint, quad, cubed, squared, single, zero
integer  temp
 
  quint   = INT (base_10_number / 32768)                # 8**5
  temp    = quint * 32768
 
  quad    = INT ((base_10_number - temp) / 4096)        # 8**4
  temp    = temp + (quad * 512)
 
  cubed   = INT ((base_10_number - temp) / 512)         # 8**3
  temp    = temp + (cubed * 512)
 
  squared = INT ((base_10_number - temp) / 64)          # 8**2
  temp    = temp + (squared * 64)
 
  single  = INT ((base_10_number - temp) / 8)           # 8**1
  temp    = temp + (single * 8)
 
  zero    = INT (base_10_number - temp)  # 8**0
 
  Base_10_to_Base_8 = (quint * 100000) + (quad * 10000) + (cubed * 1000) +
                      (squared * 100) + (single * 10) + zero
 
return
end

 
integer function Base_8_to_Base_10 (base_8_number)
##############################################################################
#$%
#$% Purpose:   Convert the specified base 8 number into base 10 storage
#$%            format.
#$%
#$% Called by:
#$%
#$% Calls:     INT
#$%
#$% Tables:    none
#$%
#$% Date:      Feb 1998 (E1907)
#$%
#$% Author:    Stephanie Paden/Susan Miller
#$%
##############################################################################
implicit none
integer  base_8_number
 
integer  thousands, hundreds, tens, ones
integer  temp
 
  thousands = INT (base_8_number / 1000)           # 10**3
  temp      = (thousands * 1000)
 
  hundreds  = INT ((base_8_number - temp) / 100)   # 10**2
  temp      = temp + (hundreds * 100)
 
  tens      = INT ((base_8_number - temp) / 10)    # 10**1
  temp      = temp + (tens * 10)
 
  ones      = INT (base_8_number - temp)           # 10**0
  temp      = temp + ones
 
  Base_8_to_Base_10 = (thousands * 512) + (hundreds * 64) +
                      (tens * 8) + (ones)
 
return
end

 
subroutine help_pgm (needarg,
                     descr_str,
                     tags_str,
                     usage_str1, usage_str2, usage_str3, usage_str4, usage_str5,
                     example_str)
###########################################################
#$%
#$% Purpose:   Check for help arguments preceded by -- h,d,u
#$%            Display description or usage or both
#$%			   Other routine will validate and process arguments
#$%
###########################################################
integer			needarg
integer         getarg3, almostequal_hv, length
character       buf[100]
integer         iarg,  help_flags
vmschar*(*)     descr_str, tags_str, usage_str1, usage_str2, usage_str3, usage_str4, usage_str5, example_str
define (help_descr,  1)
define (help_tags,   2)
define (help_usage,  4)
define (help_example,8)
define (help_all, 15)
define(help$descr, istrip(help_flags,0,M1bits))
define(help$tags, istrip(help_flags,1,M1bits))
define(help$usage, istrip(help_flags,2,M1bits))
define(help$example, istrip(help_flags,3,M1bits))
 
iarg = 0
help_flags = NO
while (getarg3(iarg+1, buf, 100) != EOF)
{
	if (length(buf) == 0) break
	call upper (buf)
	if      (almostequal_hv(buf, "--HELP")        == YES)  help_flags = help_all
	else if (almostequal_hv(buf, "--DESCRIPTION") == YES)  help_flags = help_flags | help_descr
	else if (almostequal_hv(buf, "--TAGS")        == YES)  help_flags = help_flags | help_tags
	else if (almostequal_hv(buf, "--USAGE")       == YES)  help_flags = help_flags | help_usage
	else if (almostequal_hv(buf, "--EXAMPLE")     == YES)  help_flags = help_flags | help_example
	iarg = iarg + 1
}
 
 
if ((iarg == 0) & (needarg != 0))	#  Program name with no arguments but arguments should be present
{
	help_flags = help_all
}
 
if (help$descr != 0)
{
	call echov(descr_str)
	call echor
}
 
if (help$tags != 0)
{
	call echov(tags_str)
	call echor
}
 
if (help$usage != 0)
{
	call echov(usage_str1)
    call echor
	if (usage_str2 != "")
	{
		call echov(usage_str2)
   		call echor
	}
	if (usage_str3 != "")
	{
		call echov(usage_str3)
   		call echor
	}	
	if (usage_str4 != "")
	{
		call echov(usage_str4)
   		call echor
	}	
	if (usage_str5 != "")
	{
		call echov(usage_str5)
   		call echor
	}		
}
 
if (help$example != 0)
{
	call echov(example_str)
    call echor
}
 
if (help_flags != 0)
{
 	call exit
}
 
return
end
