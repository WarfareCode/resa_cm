include "alsp.inc"
include "alsp_resa.inc"
include "gcgam.inc"
 
define (BBImplicit, Implicit None)
 
define ($not_mapped,  -1)
define ($debug1,       #)
 
define (ERR, -3)
 
define (output_unit, 10)
 
undefine write   # use the standard fortran write statement
 
# Check for non-generic outgoing mapping of all federation objects in RESA
# Federation object types include air, sea, cm, weapons
# Outgoing Federation objects with a generic mapping are output.
 
# This is a standalone program that maps the BB currently being used in a federation
 
program Check_outgoing_enumerations
BBCommon
 
integer   game_number
VMSchar*30  bbname
character   bbmsg[ARB]
integer   error
integer nl
 
call initR4
 
game_number = 0
call who_am_i (game_number, bbname)
BBmap (bbname)
call check_version (error, bbmsg)
 
if (bbmsg[1] != EOS)
    call remark (bbmsg)
if (error == YES)
    call exit
 
call help_pgm(0,
              "enumout: Check outgoing enumerations",
              "enumout Tags: Enumerations",
              "Usage: enumout",
              "",
              "",
              "",
              "",
              "Example: enumout")
 
call Initialize_ALSP_Mapping
 
call Init_Collection_File
 
nl = 0
call check_outgoing_aircraft_enums(nl)
call check_outgoing_sea_enums(nl)
call check_outgoing_emitter_enums(nl)
call check_outgoing_sonar_enums(nl)
call check_outgoing_missile_enums(nl)
call check_outgoing_weapon_enums(nl)
call check_outgoing_sonobuoy_enums(nl)
call check_outgoing_torpedo_enums(nl)
 
 
call echov ("Number of unmapped outgoing enumerations = ")
call echoi (nl)
call echor
 
close (output_unit)
 
end

 
subroutine who_am_i (igame, bbname)
###########################################################
#$%
#$% Purpose:   WHO_AM_I allows user to start a game using
#$%            a command line input
#$%
###########################################################
implicit none
VMSchar*(*) BBname
character  buf[30]
integer    igame, ctoi
integer    ic, k
 
#call read_pNAME_INDEX(igame)    # get game index from process name
igame = 0
 
 
if (igame == ERR)
    {
    call REMARK_v ("Missing Game Index")
    call exit                # exit program
    }
 
call make_CSF_bb_name (igame,$$BBNAME,bbname)
 
end
 

 
Subroutine Init_Collection_File
#########################################################################
#$%
#$% Purpose:    Init_Collection_File will open the data collection file
#$%             and write the enumeration information.
#$%
#########################################################################
BBcommon
 
integer    name_len
integer    return_val, msg_len
character  file_name[ARB]
vaxcharacter*ARB v_file_name
Equivalence  (file_name, v_file_name)
 
character  msg[80]
vaxcharacter*80 v_msg
Equivalence  (msg, v_msg)
 
name_len = 0
call smovhn (Scenario$Name, $$MaxLit, file_name, name_len)
call smovv  ("_check_outgoing_enums.dat", file_name, name_len)
call smov   (EOS, file_name, name_len)
open (unit   = output_unit,  file   = v_file_name,
      iostat = return_val, recl = 120*4,   status = 'unknown')
if (return_val != 0)
{
 call echov ("Output file not opened")
 call echor
 call exit
}
 
call echov ("Output file is ")
call echohn (file_name,30)
call echor
 
return
end
 

Subroutine check_outgoing_aircraft_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$Aircraft_Common
 
literal cstrip8
 
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer nl
integer array_index
integer acc$pointer
integer find_acc_ref
 
for (ACC$Pointer$First; ACC$Pointer$OK; ACC$Pointer$Next)
{
    array_index = xACC$ALSPMapIndx$I
    if (array_index == aircraft_unit_type [1, 1]) # If default outgoing mapping
    {
        msg_len = 0
        call smovv ("Default map for Aircraft: ", msg, msg_len)
        call smovhn(Xacc$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_acc_ref(acc$pointer) == $yes)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
 
}   # end of loop through ACC table
 
return
end
 

Subroutine check_outgoing_sea_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$sea_Common
 
literal cstrip8
literal class_name
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer nl
integer i
integer shc$pointer
integer enum_index
integer find_shc_ref
 
for (SHC$Pointer$First; SHC$Pointer$OK; SHC$Pointer$Next)
{
    if (XSHC$Category$i == $Shorebase$code) next
 
    for (i = 1; i <= number_of_sea_maps; i = i + 1)
    {
        enum_index = sea_unit_mappings [1, i]
        class_name = sea_unit_mappings [2, i]
 
        if (xSHC$Type$C == class_name)
          break
    }
 
    if (i > number_of_sea_maps)
    {
        msg_len = 0
        call smovv ("No map for Ship Class: ", msg, msg_len)
        call smovhn(XSHC$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_shc_ref(shc$pointer) == $yes)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}   # end of loop through RESA ship classes
 
return
end
 

Subroutine check_outgoing_emitter_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$emitter_Common
 
integer nl
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  JAM$Pointer, RAD$Pointer
integer  mapping_index
integer  find_eq_ref
literal  literal_emitter_name
literal  cstrip8
 
for (JAM$Pointer$First; JAM$Pointer$OK; JAM$Pointer$Next)
{
    for (mapping_index = 1; mapping_index <= number_of_emitter_maps;
                          mapping_index = mapping_index + 1)
    {
        literal_emitter_name = alsp_emitter_list [2, mapping_index]
        if (xJAM$Type$C == literal_emitter_name)
        {
            break
        }
    }
    if (mapping_index > number_of_emitter_maps)
    {
        msg_len = 0
        call smovv ("No map for Jammer: ", msg, msg_len)
        call smovhn(XJam$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(jam$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
for (RAD$Pointer$First; RAD$Pointer$OK; RAD$Pointer$Next)
{
    for (mapping_index = 1; mapping_index <= number_of_emitter_maps;
                          mapping_index = mapping_index + 1)
    {
        literal_emitter_name = alsp_emitter_list [2, mapping_index]
        if (xRAD$Type$C == literal_emitter_name)
        {
            break
        }
    }
    if (mapping_index > number_of_emitter_maps)
    {
        msg_len = 0
        call smovv ("No map for Radar: ", msg, msg_len)
        call smovhn(XRAD$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(rad$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
return
end

Subroutine check_outgoing_sonar_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$sonar_Common
 
integer nl
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  SON$Pointer
integer  mapping_index
integer  find_eq_ref
literal  literal_sonar_name
literal  cstrip8
 
for (SON$Pointer$First; SON$Pointer$OK; SON$Pointer$Next)
{
	if (xSON$ActiveSonar$i != $YES) next		# Skip passive

    for (mapping_index = 1; mapping_index <= number_of_sonar_maps;
                          mapping_index = mapping_index + 1)
    {
        literal_sonar_name = alsp_sonar_list [2, mapping_index]
        if (xSON$Type$C == literal_sonar_name)
        {
            break
        }
    }
    if (mapping_index > number_of_sonar_maps)
    {
        msg_len = 0
        call smovv ("No map for Sonar: ", msg, msg_len)
        call smovhn(XSON$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(son$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
return
end

Subroutine check_outgoing_sonobuoy_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$sonobuoy_Common
 
integer nl
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  SOB$Pointer
integer  mapping_index
integer  find_eq_ref
literal  literal_sonobuoy_name
literal  cstrip8
 
for (SOB$Pointer$First; SOB$Pointer$OK; SOB$Pointer$Next)
{
	if (xSOB$ActiveSonar$i != $YES) next		# Skip passive

    for (mapping_index = 1; mapping_index <= number_of_sonobuoy_maps;
                          mapping_index = mapping_index + 1)
    {
        literal_sonobuoy_name = sonobuoy_unit_mappings [2, mapping_index]
        if (xSOB$Type$C == literal_sonobuoy_name)
        {
            break
        }
    }
    if (mapping_index > number_of_sonobuoy_maps)
    {
        msg_len = 0
        call smovv ("No map for Sonobuoy: ", msg, msg_len)
        call smovhn(XSOB$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(sob$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
return
end
 

Subroutine check_outgoing_torpedo_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$torpedo_Common
 
integer nl
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  TRP$Pointer
integer  mapping_index
integer  find_eq_ref
literal  literal_torpedo_name
literal  cstrip8
 
for (TRP$Pointer$First; TRP$Pointer$OK; TRP$Pointer$Next)
{
    for (mapping_index = 1; mapping_index <= number_of_torpedo_maps;
                          mapping_index = mapping_index + 1)
    {
        literal_torpedo_name = torpedo_unit_mappings [2, mapping_index]
        if (xTRP$Name$C == literal_torpedo_name)
        {
            break
        }
    }
    if (mapping_index > number_of_torpedo_maps)
    {
        msg_len = 0
        call smovv ("No map for Torpedo: ", msg, msg_len)
        call smovhn(XTRP$Name$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(trp$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
return
end
 

Subroutine check_outgoing_missile_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$missile_Common
 
integer nl
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  i             # loop control variable
integer  enum_index    # alsp common enumeration index
integer  find_eq_ref
literal  missile_name  # the RESA recognized missile type name
integer  CMC$Pointer, indx  # SMM 3/00
literal  cstrip8	    # SMM 3/00
 
 
for (CMC$Pointer$First; CMC$Pointer$OK; CMC$Pointer$Next)
{
    for (i = 1; i <= number_of_missile_maps ; i = i + 1)
    {
        enum_index = missile_unit_mappings [1, i]
        missile_name = missile_unit_mappings [2, i]
 
        if (xCMC$Type$C == missile_name)
          break
    }
 
    if (i > number_of_missile_maps)
    {
        msg_len = 0
        call smovv ("No map for Missile: ", msg, msg_len)
        call smovhn(XCMC$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(cmc$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
return
end
 

Subroutine check_outgoing_weapon_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$weapon_Common
 
literal cstrip8
 
integer nl
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer index
integer mc$pointer, bom$pointer, tor$pointer
integer bom$type$i
integer find_eq_ref
 
for (BOM$Pointer$First; BOM$Pointer$OK; BOM$Pointer$Next)
{
    bom$type$i = Xbom$type$i
    if (bom$type$i != $CruiseMissile$Code &
        bom$type$i != $AAM$Code           &
        bom$type$i != $ASM$Code           &
        bom$type$i != $SAM$Code           &
        bom$type$i != $Mine$Code          &
        bom$type$i != $Bomb$Code          &
        bom$type$i != $Gun$Code) next
 
    for (index = 1; index <= number_of_weapon_maps; index = index + 1)
    {
        if (weapon_type [2, index] == XBOM$Name$C)    # if the name matches,
        {                                                # check the weapon type
            if (weapon_type [3, index] == XBOM$Type$i)    # if DEQ$Ident codes match,
            {                                             # a proper match has been found!
                break
            }
        }
    }        # end of loop through weapon mappings
 
    if (index > number_of_weapon_maps)
    {
        msg_len = 0
        call smovv ("No map for bomb: ", msg, msg_len)
        call smovhn(XBOM$Name$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(bom$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
for (MC$Pointer$First; MC$Pointer$OK; MC$Pointer$Next)
{
    for (index = 1; index <= number_of_weapon_maps; index = index + 1)
    {
        if (weapon_type [2, index] == XMC$Name$C)    # if the name matches,
        {                                                # check the weapon type
            if (weapon_type [3, index] == XMC$Type$i)    # if DEQ$Ident codes match,
            {                                             # a proper match has been found!
                break
            }
        }
    }        # end of loop through weapon mappings
 
    if (index > number_of_weapon_maps)
    {
        msg_len = 0
        call smovv ("No map for weapon: ", msg, msg_len)
        call smovhn(XMC$Name$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(mc$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
for (TOR$Pointer$First; TOR$Pointer$OK; TOR$Pointer$Next)
{
    if (xTOR$Ident$I != $Gun$Code) next     # Only interested in guns
 
    for (index = 1; index <= number_of_weapon_maps; index = index + 1)
    {
        if (weapon_type [2, index] == XTOR$Type$C)    # if the name matches,
        {                                                # check the weapon type
            break
        }
    }        # end of loop through weapon mappings
 
    if (index > number_of_weapon_maps)
    {
        msg_len = 0
        call smovv ("No map for gun: ", msg, msg_len)
        call smovhn(XTOR$Type$c, 8, msg, msg_len)
        nl = nl + 1
		if (find_eq_ref(tor$pointer) == $YES)
			call smovv ("   referenced in scenario",msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
}
 
 
return
end
 

Integer function find_acc_ref(bbpntr)
BBcommon
integer bbpntr
integer found_ac
BBDeclare(aml$pointer)
 
found_ac = $NO
 
for (aml$pointer$first; aml$pointer$ok; aml$pointer$next)
{
	if (Xaml$ACCpntr$i == bbpntr)
	{
		found_ac = $YES
		break
	}
}
 
return(found_ac)
end
 

 
Integer function find_shc_ref(bbpntr)
BBcommon
integer bbpntr
integer found_shc
BBDeclare(unt$pointer)
 
found_shc = $NO
 
for (unt$pointer$first; unt$pointer$ok; unt$pointer$next)
{
	if (Xunt$SHCpntr$i == bbpntr)
	{
		found_shc = $YES
		break
	}
}
 
return(found_shc)
end
 

 
Integer function find_eq_ref(bbpntr)
BBcommon
integer bbpntr
integer found_eq
BBDeclare(unt$pointer, deq$pointer, deq$pntr$i)
BBDeclare(acc$pointer, acc$eq$index, acc$eq$pntr$i)
 
found_eq = $NO
 
for (unt$pointer$first; unt$pointer$ok; unt$pointer$next)
{
	FOR_DEQ_Chain
	{
		deq$pntr$i = Xdeq$pntr$i
		if (deq$pntr$i == bbpntr)
		{
			found_eq = $YES
			break
		}
	}
}
 
for (acc$pointer$first; acc$pointer$ok; acc$pointer$next)
{
	for (acc$eq$index = 1; acc$eq$index <= Xacc$NbrEqItems$i; acc$eq$index = acc$eq$index + 1)
	{
		acc$eq$pntr$i = Xacc$eq$pntr$i
		if (acc$eq$pntr$i == bbpntr)
		{
			found_eq = $YES
			break
		}
	}
}
 
return(found_eq)
end
 
 
 

 
Block Data ALSP_Enumerations
 
#
#   This module actually include the ALSP Enumeration data file (RIN)
#   and allows the 5 common blocks to be populated.
#
#   # E2151 - DEW 9/30/99
 
alsp$aircraft_common
alsp$emitter_common
alsp$missile_common
alsp$sea_common
alsp$weapon_common
alsp$sonar_common
alsp$torpedo_common
alsp$sonobuoy_common
alsp$mine_common
alsp$countermeasure_common

include "alsp_enumeration_data_jlcctc.rin"
 
end
