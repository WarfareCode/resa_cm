
undefine read
undefine write
undefine err

include "bbcode.inc"         
include "macros.inc"         
include "ascii.inc"         
include "hscmd.inc"         
include "orders.inc"         
include "plplay.inc"         

define (ForceCommon,
    literal rec[28],nscn
    logical absolute_mode, control_station
    integer nviews, lastBlueView, side4view[$Max$Views$per$game]
    common /CForce/nscn,rec,absolute_mode, control_station,
                   nviews, lastBlueView, side4view
    )

define ($yes,1)
define ($no,0)


program preord

########################################################
#$%
#$% Purpose:   PREORD produces a file of
#$%            orders in prescript format.
#$%
#$% Called By: None
#$%
#$% Calls:     FINIT      PUTORD     ECHOFF
#$%
#$% Tables:    None
#$%
#$% Date:      
#$%
#$% Author:    
#$%
#$% Modified:
#$%             Jim Allen 01/03 (E2334)
#$%             Terminate scramble sequence with STOP rather than BT
#$%
########################################################

Implicit None
ForceCommon

# begin logic   ############################################################

# call echoff

 call initr4

 call finit                             # get file names, old/new, etc.

 call putord

 call endr4
 end



subroutine putord                       

########################################################
#$%
#$% Purpose:   PUTORD translates the saved game
#$%            orders from lexical codes to text
#$%            and outputs the text data.
#$%
#$% Called By: PRTORD
#$%
#$% Calls:     FGTASK     SMOV       SMOVH
#$%            SMOVHN     SMOVI      SYNBLD
#$%
#$% Tables:    None
#$%
#$% Date:      
#$%
#$% Author:    
#$%
########################################################

Implicit None
ForceCommon

character itaskn[10],dest[arith($max$args,*,8)],dest2[arith($max$args,*,8)]
integer len,len2,imin,itime,kargs,iseq,nord,ncnt
literal iaddr,xlex[cmd$elm$slots],beginord, beginord2
integer idiff,ilastmin
integer M,K,NREC,IVIEW,
        IND,I_SWITCH_1,ISNUMBER                             # MJC 5/17/2K (E2145)
integer isize, getwrd, iword, istrt
character  temp[100]

BBDeclare (CMD$ELM$Index)                                   # MJC 5/17/2K (E2145)
literal CSTRIP8                                             # MJC 5/24/2K (E2145)

cmd$record$definition

9003 format (200a1)

imin = 0
ilastmin = 0

len = 0
call smovv ("GO",dest,len)
write (35,9003) (dest[m],m=1,len) # put a "GO" at the start of the file

if (! absolute_mode)
{
    len = 0
    call smovv ("* +1",dest,len)
    write (35,9003) (dest[m],m=1,len) # put a "+1" AFTER THE GO
}

call echor

for (k=1; ; k=k+1)
   {
    nrec = k+1

    if (mod(k,10) == 0)
      {
       call echor
       call echo(27)
       call echov("[2AProcessing order #")
       call echoi(k)
       call echor
      }

    #$% get line of input from file with saved orders
    read (31,REC=nrec,ERR=8000) cmd$record

    iview = xcmd$view$i
    #$% if end of file, break
    if (iview <= 0) break    

    for (cmd$elm$index=1; cmd$elm$index <= cmd$elm$slots; cmd$elm$index=cmd$elm$index+1)
        {
         xlex[cmd$elm$index] = xcmd$elm$word$c
        }

    # skip pause orders in creating prescript file
    if (xlex[8] == $lex$PAUSE$) NEXT 

    # skip GO orders in creating prescript file
    if (xlex[8] == $lex$GO$) NEXT 

    # skip TIME orders in creating prescript file
    if (xlex[8] == $lex$TIME$) NEXT 

    #$% get game minute
    imin  = xlex[1]
    #$% get address
    iaddr = xlex[$stk$addressee + 1]
    #$% get time
    itime = xlex[$stk$start + 1]
    #$% get number of arguments
    kargs = xlex[$stk$length + 1]-6
    #$% get number of order in sequence
    iseq  = xlex[$stk$seq + 1]
    #$% get order number
    nord  = xlex[$stk$nord + 1]
    #$% get number of orders in the sequence
    ncnt  = xlex[$stk$cnt + 1]

    if (iseq == 1)
      {
      beginord  = xlex[8]
      beginord2 = xlex[9]
      }

    if (iseq != 1) ind = $yes
    else           ind = $no

    if (imin > ilastmin)
      {
       idiff = imin - ilastmin
       ilastmin = imin
       if (k > 1)        # if not first time through...    
         {
          if ( ! absolute_mode)
            {
              len = 0
              call smovv ("* +",dest,len)
              call smovi (idiff,dest,len)
              call smovv ("     (game minute: ",dest,len)
              call smovi (imin,dest,len)
              call smovv (")",dest,len)
            }
          else
            {
              len = 0
              call smovv ("* ",dest,len)
              call smovi (imin,dest,len)
            }
           write (35,9003) (dest[m],m=1,len) # write time spec to file
         }
      }           

    len = 0

    if (nord == ALLMISSION$order) # not processed through synbld, do it here...
      {
       beginord = $lex$allmission$
       call smovv("ALLMISSION ",dest,len)
       switch (iaddr)
         {
          case $lex$AEW$       : call smovv ("AEW ",dest,len)
          case $lex$EW$        : call smovv ("EW ",dest,len)
          case $lex$ASW$       : call smovv ("ASW ",dest,len)
          case $lex$TANKER$    : call smovv ("TANKER ",dest,len)
          case $lex$CAP$       : call smovv ("CAP ",dest,len)
          case $lex$DECOY$     : call smovv ("DECOY ",dest,len)
          case $lex$JAMMER$    : call smovv ("JAMMER ",dest,len)
          case $lex$RECONN$    : call smovv ("RECONN ",dest,len)
          case $lex$RELAY$     : call smovv ("RELAY ",dest,len)
          case $lex$RESCUE$    : call smovv ("RESCUE ",dest,len)
          case $lex$SEARCH$    : call smovv ("SEARCH ",dest,len)
          case $lex$STRCAP$    : call smovv ("STRCAP ",dest,len)
          case $lex$STTANKER$  : call smovv ("STTANKER ",dest,len)
          case $lex$STRIKE$    : call smovv ("STRIKE ",dest,len)
          case $lex$SURCAP$    : call smovv ("SURCAP ",dest,len)
          case $lex$SURVEILLANCE$: call smovv ("SURVEILLANCE ",dest,len)
          case $lex$AD$        : call smovv ("AD",dest,len)
          case $lex$AI$        : call smovv ("AI",dest,len)
          case $lex$ALFT$      : call smovv ("ALFT",dest,len)
          case $lex$BAI$       : call smovv ("BAI",dest,len)
          case $lex$CAS$       : call smovv ("CAS",dest,len)
          case $lex$ESCORT$    : call smovv ("ESCORT",dest,len)
          case $lex$FY$        : call smovv ("FY",dest,len)
          case $lex$MP$        : call smovv ("MP",dest,len)
          case $lex$OCA$       : call smovv ("OCA",dest,len)
          case $lex$SM$        : call smovv ("SM",dest,len)
          case $lex$SW$        : call smovv ("SW",dest,len)
          case $lex$TASMO$     : call smovv ("TASMO",dest,len)
          case $lex$TEW$       : call smovv ("TEW",dest,len)
          case $lex$WW$        : call smovv ("WW",dest,len)
         }
       write (35,9003) (dest[m],m=1,len)
       NEXT
      }       

    #$% addressee is a task number
    if ((iaddr > 0) & (ind == $no))
      {
       if ($isNumeric(iaddr))       
         {
          #$% format task number to X.X.X.XX and move FOR and formatted 
          #$% task number into array
          call fgtask (int(iaddr),itaskn)
          call smovv ("FOR ",dest,len)
          call smovhn (itaskn,10,dest,len)
          call smov ($space,dest,len)
         }
       else 
         {
          #$% or if addressee is a name, move FOR and the name into the array
          call smovv ("FOR ",dest,len)
          call smovhn (iaddr,$$MaxName,dest,len) # SMM 11/99 e2141
          call smov ($space,dest,len)
         }
       }

    if (ind == $yes & (beginord == $lex$LAUNCH$ | beginord == $lex$SCRAMBLE$))
      {                                            # check for null load command
       if (xlex[8] == $lex$LOAD$ & kargs == 1) 
         {
         # do we need a STOP here ?

         if ((iseq == ncnt) )   # this is the Nth of N commands in the sequence
            {
            len = 0
            call smovv("STOP",dest,len)

            write (35,9003) (dest[m],m=1,len)
            }

         NEXT
         }
      }

    #$% SMM 12/92
    #$% if the order is INTELL, it requires a FOR <addressee> on the
    #$% previous line of the order, but not directly in front of the order
    #$% if it is directly in front, order option is INFORM, not INTELL
    if (beginord == $lex$INTELL$)
      {
       if (len != 0)
          write (35,9003) (dest[m],m=1,len) # write order to file
       len = 0      # reset length of dest
      }

    call synbld (_                  # Build text from lex data
	       itime,               # game minute when to be executed
	       ind,                 # $yes/$no if time is phase dependant
	       nord,                # ordr number (code)
	       kargs,               # number of words in the lex array
	       xlex[8],             # lex code(s) array
	       dest,                # array to receive text (40 words)
	       len)                 # value for number of bytes in dest
				    # and incremented by those added

    if (control_station)        # Alter blue/orange orders for control station
    {
        if (nord == DefineLanding$order)  # Delete Landing same as define landing
        {
            #DEFINE LANDING (zone) <zone-name>
            # (centered at) <latitude> <longitude>
            # (probability of landing) <percent>
            # (bounded by) <latitude> <longitude>
            # (point 2) <latitude> <longitude>
            # (point 3) <latitude> <longitude>
            # (point 4)
            #   [ | <latitude> <longitude> (point 5)
            #     [ | <latitude> <longitude> (point 6)
            #         [ | <latitude> <longitude> ] ] ]
            # [ BLUE | ORANGE ];

            # DELETE LANDING (zone) <zone-name> [ BLUE | ORANGE ];

            # Get side from view
            
            # If blue build text "BLUE <view>"
            if (side4view[iview] == $blue$code)
            {
                call smovv ("BLUE", dest, len)    
            }
            # If orange build text "ORANGE <iview - lastBlueView>
            if (side4view[iview] == $orange$code)
            {
                call smovv ("ORANGE", dest, len)    
            }
        }

        if (nord == DefineROUTE$order)  
        {
            #DEFINE ROUTE (named) <route-name> (for view)
            #             [ NEUTRAL | [ BLUE | ORANGE ] (view number) <view> ];
            # Get side from view
            
            # If blue build text "BLUE <view>"
            if (side4view[iview] == $blue$code)
            {
                call smovv ("BLUE ", dest, len)    
                call smovi (iview - 1, dest, len)
            }
            # If orange build text "ORANGE <iview - lastBlueView>
            if (side4view[iview] == $orange$code)
            {
                call smovv ("ORANGE ", dest, len)    
                call smovi (iview - lastBlueView, dest, len)
            }
        }

        if (nord == DefineSPA$order)  
        {
            #DEFINE SPA (named) <name> (for)
            #    [ BLUE | ORANGE ] (view number) <view>
            #    (point 1) <latitude> <longitude>
            #    (point 2) <latitude> <longitude>
            #    (point 3) <latitude> <longitude>
            #    (point 4)
            #       [ | <latitude> <longitude> (point 5)
            #           [ | <latitude> <longitude> (point 6)
            #               [ | <latitude> <longitude> ] ] ]
            #    [ | EFFECTIVE (zulu time) <zulu>];

         istrt = 1
         iword = 0                      # Current word in order
         len2 = 0
         while (istrt < len)
         {
             isize = getwrd(dest, istrt, temp)
             iword = iword + 1
             if (iword == 4)            # Between name and point 1
             {
                if (side4view[iview] == $blue$code)
                {
                    call smovv ("BLUE ", dest2, len2)    
                    call smovi (iview - 1, dest2, len2)
                    call smov ($SPACE, dest2, len2)
                }
                # If orange build text "ORANGE <iview - lastBlueView>
                if (side4view[iview] == $orange$code)
                {
                    call smovv ("ORANGE ", dest2, len2)    
                    call smovi (iview - lastBlueView, dest2, len2)
                    call smov ($SPACE, dest2, len2)
                }
             }
             call smovh (temp, isize, dest2, len2)
             call smov ($SPACE, dest2, len2)
         } # End while
         len = 0
         call smovh (dest2, len2, dest, len)    # copy modified order to orig
        }    # end DEFINE SPA order

    }      # end If control station order

#    call smovv ("     ",dest,len)

    write (35,9003) (dest[m],m=1,len)		# write order to file

    if (ind == $no & beginord == $lex$launch$ & beginord2 == $lex$boat$ ) 
        {   # if the LAUNCH BOAT had no sortie plan, we need a STOP
        if (iseq == ncnt) ind = $yes    # force this for the next test...
        }

    if ((iseq == ncnt) & (ind == $yes) )
      {
       len = 0

       if (beginord == $lex$LAUNCH$ | beginord == $lex$SCRAMBLE$)
         {
          if (xlex[8] == $lex$BINGO$  | 
              xlex[8] == $lex$MOOR$   | 
              xlex[8] == $lex$SEARCH$  )
            NEXT
          call smovv("STOP",dest,len)
         }
       else if ((beginord == $lex$ALLMISSION$)                      | 
                (beginord == $lex$define$ & beginord2 == $lex$pim$)  ) 
         {
          call smovv("STOP",dest,len) 
         }
       else if (beginord == $lex$define$ & beginord2 == $lex$route$) 
         {
          if (nord != repeat$order & nord != moor$order & nord != bingo$order)
              call smovv("STOP",dest,len) 
#          continue
         }
       else
         {
         call smovv ("BT",dest,len)
         }

       if (len != 0) write (35,9003) (dest[m],m=1,len)

       beginord  = 0
       beginord2 = 0
      }
   }

call echov("A total of ")
call echoi(k)
call echov(" orders were processed.")
call echor

REPEAT          # jb E2143 (BRNCHINTOBLD)   7/13/00
    {
    BREAK      # jb E2143 (BRNCHINTOBLD)   7/13/00
    8000 continue				# end-of-file exit    
    write (35,9004)
    9004 format ("0    ","Abnormal File Termination")
    }

close (unit = 31)				# close files
close (unit = 35)

return
end


subroutine finit

########################################################
#$%
#$% Purpose:   FINIT initializes and opens file with
#$%            game orders stored in it.
#$%
#$% Called By: PRTORD
#$%
#$% Calls:     ECHOH      ECHOR      GETLIN
#$%            ORDINT     WGCAT      OPEN
#$%
#$% Tables:    None
#$%
#$% Date:      JAN 82
#$%
#$% Author:    Dana Wills
#$%
########################################################

 Implicit None
 ForceCommon
 integer ctoi
 integer irc, delete_file_version

 integer ISTAT,K,JJ                       # MJC 5/17/2K (E2145)
 integer cupper
 integer i, code

 character cfile[20]
 vaxcharacter*20 v_cfile
 equivalence (cfile, v_cfile)

 character xfile[20]
 vaxcharacter*20 v_xfile
 equivalence (xfile, v_xfile)

cmd$record$definition

 Integer*4           Arg_Lens[4], n
 VaxCharacter*64    Args[4], Param, Script, Params
integer getarg3, clower
character buf[20,3], c
integer narg

 call help_pgm(3,
              "pgapre: Geneate prescript from order history",
              "pgapre Tags: PGA, Prescript",
              "Usage: pgapre -c -a <scenario>",
              "-c transform blue/orange orders into equivalent control orders",
              "-a Absolute time. Absence of -a will produce relative time",
              "<scenario> is name of scenario",
              "",
              "Example: pgapre -c -a port")

absolute_mode = .false.             # joa 8/01 E2229
control_Station = .false.
for (narg = 1; narg <= 3; narg = narg + 1)
{
	istat = getarg3(narg, buf[1,narg], 20)		# get arguments
	if (buf[1,narg] == EOS) break				# fewer than 3 arguments
	if (buf[1,narg] == $MINUS)
	{
		c = clower(buf[2, narg])
		if      (c == $litc) control_Station = .true. 
		else if (c == $lita) absolute_mode   = .true. 
	}
	else
	{
		call fold (buf[1,narg])
		jj = 0					# generate system's file name
		call smovhn (buf[1,narg],$$Maxlit,cfile,jj)
		call smovv  ("h.ord",cfile,jj)
		call smov   ($null,cfile,jj) 

		jj = 0					# generate system's file name
		call smovhn (buf[1,narg],$$Maxlit,xfile,jj)
		call smovv  ("x.pre",xfile,jj)
		call smov   ($null,xfile,jj) 
	}
}

#$% open input file                     
open(unit            = 31,              
     access          = 'direct',
     file            = v_cfile,
     recl            = cmd$maxlength*4,
     form            = 'unformatted',
     status          = 'OLD',
     err             = 8010)

REPEAT          # jb E2143 (BRNCHINTOBLD)   7/13/00
    {
    BREAK      # jb E2143 (BRNCHINTOBLD)   7/13/00
    8010
    #$% send message to user
    call echor
    call echov ("Sorry, could not open the file: ")
    call echoh (cfile,ARB)
    call echor
    call exit
    }
 call echov ("Input is from the file: ")
 call echoh (cfile,ARB)
 call echov ("                         ")
 call echor

irc = delete_file_version (xfile)		# Delete file so can open new

open(unit         = 35,                      #open output file
     access       = 'sequential',
     form         = 'formatted',
     recl         = 250*4,      
     status       = 'unknown',
     file         = v_xfile)

#$% senf message to user
call echov ("Output is to the file: ")
call echoh (xfile,ARB)
call echor

#$% read 1st record that contains header information
read (31,REC=1) cmd$record

nviews = cmd$record[1]         # Number of views in scenario

for (i=1; i <= nviews; i = i + 1)
{
    code = cmd$record[i+1]
    if      (code >= 90) side4view[i] = $neutral$code
    else if (code >= 50) side4view[i] = $orange$code
    else
    {
        side4view[i] = $blue$code
        lastBlueView = i
    }
}


return
end


subroutine getlin (nargs,args)

########################################################
#$%
#$% Purpose:   GETLIN gets a line of input.
#$%
#$% Called By: FINIT
#$%
#$% Calls:     ANALYZ
#$%
#$% Tables:    None
#$%
#$% Date:      JAN 82
#$%
#$% Author:    Dana Wills
#$%
########################################################

Implicit None
integer nargs                                                           
literal args[80]
character line[80]

integer I                                   # MJC 5/17/2K (E2145)

call getlnh(line,80)

# force input to uppercase
do i = 1, 80
   {
    if (line(i) >= $Lita & line(i) <= $litz)
	line(i) = line(i) - ($lita - $LETA)
   }

# analyze the input for words....
call anlyz (line,args,nargs)

return
end



subroutine chkflt (_             
                   itype,        # aircraft type name
                   istat,        # returned status $YES=ok(found it)
                   icnt)         # number of slots available

########################################################
#$%
#$% Purpose:   CHKFLT verifies that aircraft equipment to be
#$%            loaded is in aircraft inventory and that space
#$%            on board is available.
#$%
#$% Called By: HANLNC
#$%
#$% Calls:     CHKEQ
#$%
#$% Tables:    None
#$%
#$% Date:      FEB 82
#$%
#$% Author:    Dana Wills
#$%
########################################################

Implicit None
integer lstflt,eq[2,16]
common /cckflt/ lstflt,eq

integer ISTAT,ICNT,ITYPE,MQTY,MNAME               # MJC 5/17/2K (E2145)
#$% equipment to be loaded is in aircraft inventory
istat = $yes

#$% number of slots (space for equipment) available is 8
icnt = 8

return

entry chkeq (itype,mqty,mname,istat)		# istat vice istast 3/12/82

istat = $yes

return
end  
