##    			File WILDRPT.rat
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 19-feb-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw     wglcor  New- Allocate and Initialize COR table.
###
 
###
### mod to version 3.0          dated 02-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 dew     wglown  New- Allocate and Initialize OWN table.
###             wgllcl  New- Allocate and Initialize LCL table.
###             wglpnd  New- Allocate and Initialize PND table.
###             wglrmt  New- Allocate and Initialize RMT table.
###
### 002 rjw     wglown  supplied code to load OWN table
###             iniown
###             iowpos
###             iowexp
###
 
#####   new file after version 3.0
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLRPT                        ECHOH                      OWN
#$%      WGLRMT                        ECHOI                      COR
#$%      WGLLCL                        ECHOR                      LCL
#$%      WGLPND                                                   PND
#$%      WGLCOR                                                   RMT
#$%      WGLOWN                                                   VUE
#$%      BBTRIM <WCOMMN>                                          INV
#$%      BBALOC <WCOMMN>                                          UNT
#$%      BBLODM <WCOMMN>                                          POS
#$%      BBZAPT <WCOMMN>                                          DYN
#$%      BBLOD1 <WCOMMN>                                          ACC
#$%      RPPOS1 <REPIN >
#$%      RPINV1 <REPIN >                                          AML
#$%                                                               PAT
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLRPT <<<>>> NOTE:  Now WILDRPT.rat!
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLRPT - WGLOWN - BBALOC*
#$%                                               - BBLOD1*
#$%                                               - BBLODM*
#$%                                               - BBZAPT*
#$%                                               - RPPOS1*
#$%                                               - RPINV1*
#$%                                      - BBTRIM*
#$%                                      - WGLCOR - BBALOC*
#$%                                               - BBLOD1*
#$%                                               - BBZAPT*
#$%                                      - WGLLCL - BBALOC*
#$%                                               - BBLOD1*
#$%                                               - BBZAPT*
#$%                                      - WGLPND - BBALOC*
#$%                                               - BBLOD1*
#$%                                               - BBZAPT*
#$%                                      - WGLRMT - BBLOD1*
#$%                                               - BBALOC*
#$%                                               - BBLODM*
#$%                                               - BBZAPT*
 

 
define($debug1,#)
##define($debug1,)
 
include "bbctl.inc"
include "bbcode.inc"
include "bblcl.inc"
include "bbown.inc"
include "bbinv.inc"
include "bbcor.inc"
include "bbpnd.inc"
include "bbrmt.inc"
include "bbunt.inc"
include "bbboy.inc"
include "bbacc.inc"
include "bbvue.inc"
include "bbaeg.inc"                 # SMM 11/93 advanced air defense model
include "bbads.inc"                 # SMM 1/94 advanced air defense model
 
define (BBimplicit,Implicit None)
 
Subroutine WGLRPT(number_of_AEGIS)
 
########################################################
#$%
#$% Purpose:   WGLRPT initializes tables required
#$%            for reporting policy.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     WGLOWN     WGLCOR     WGLLCL
#$%            WGLPND     WGLRMT     BBTRIM
#$%
#$% Tables:    OWN        COR        LCL
#$%            PND        RMT
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
#$% Modified:  Susan Miller 11/93 added call to wglaeg and wglads
#$%            for improved air defense model.
########################################################
 
BBcommon
 
integer number_of_AEGIS
integer number_of_views
 
call wglown
 
call bbtrim ($$own)
 
call wglcor
 
call wgllcl
 
call wglpnd
 
call wglrmt
 
call wglAEG (number_of_AEGIS)
 
# size of table dependent upon the number of views that are defined in this game
number_of_views = min($last$view,VUE$slots)
call wglADS (number_of_views)
 
return
end
 
 
 
Subroutine WGLRMT
 
########################################################
#$%
#$% Purpose:   WGLRMT initializes remote detection
#$%            (RMT) table.
#$%
#$% Called By: WGLRPT
#$%
#$% Calls:     BBALOC     BBLODM     BBZAPT
#$%            BBLOD1
#$%
#$% Tables:    VUE        RMT
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
integer     islots
BBdeclare  (vue$pointer)
 
#$% set vue pointer to last view
vue$pointer$to $last$view
islots = min(rmt$slots, Xvue$LastRmtIndx$i)
 
#$% call to allocate space in BB; map in RMT table and add zeros
call bbaloc ($$RMT,"RMT",$yes,islots,RMT$entry)
call bbzapt ($$RMT)
 
#$% update number of remote tracks in use
rmt$used = rmt$size
 
return
end
 
 
 
Subroutine WGLLCL
 
########################################################
#$%
#$% Purpose:   WGLLCL initializes a free chain in
#$%            the LCL table.
#$%
#$% Called By: WGLRPT
#$%
#$% Calls:     BBALOC     BBLOD1     BBZAPT
#$%
#$% Tables:    LCL
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
integer     nUNT, nLCL, i
BBdeclare  (LCL$pointer, LCL$NextIndx$I)
 
#$% call to allocate space in BB; map LCL table, and add zeros
 
nUNT = (UNT$Size / UNT$entry)
nLCL = min(LCL$Slots, LCL$Slots_Per_UNT(nUNT) )
 
call bbaloc ($$LCL,"LCL", $yes, nLCL, LCL$entry)
call bbzapt ($$LCL)
 
#$% update local detection tracks in use
lcl$used = lcl$size
 
#$% for each slot in the local detections table
for (i=1; i < nLCL; i=i+1)
   {
    #$% set local detection pointer to i
    lcl$pointer$to i
 
    #$% set local detection "next index" pointer to one more than lcl pointer
    #$% and save
    lcl$nextindx$i = i + 1
    putlcl$nextindx$i
   }
 
#$% set lcl pointer to number of slots in use
lcl$pointer$to (nLCL)
 
#$% set lcl next index pointer to zero and save
lcl$nextindx$i = 0
putlcl$nextindx$i
 
#$% set first free pointer to initial position
local$first$free = 1
 
return
end
 

 
 
Subroutine WGLPND
 
########################################################
#$%
#$% Purpose:   WGLPND initializes a free chain
#$%            in the PND table.
#$%
#$% Called By: WGLRPT
#$%
#$% Calls:     BBALOC     BBLOD1     BBZAPT
#$%
#$% Tables:    PND
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
#$% Modified:  Carol Kropp - 2/96 (E1558)
#$%            PND was too small for a 2K unit game.
#$%            was: nPND = min(pnd$slots,
#$%                            (UNT$Size / UNT$entry) * 8 + 2000)
#$%
########################################################
 
BBcommon
integer     nPND, I, nUNT
BBdeclare  (PND$pointer, PND$NextIndx$I)
 
#$% call to allocate space in BB; map in PND table, and add zeros
 
 
nUNT = unt$size/unt$entry
nPND = min(PND$Slots, PND$Slots_per_UNT(nUNT) )             # DEW 10/99 (E2160)
 
call bbaloc ($$PND,"PND",$yes, nPND, PND$entry)
call bbzapt ($$PND)
 
#$% update size of pending queue for awaiting comm reports
pnd$used = pnd$size
 
#$% loop through all pending queue slots
for (i=1; i < nPND; i=i+1)
   {
    #$% set pending queue pointer to each value of i
    pnd$pointer$to i
 
    #$% set pending queue next index to one more than pending queue pointer
    #$% and save
    pnd$nextindx$i = i + 1
    putpnd$nextindx$i
   }
 
#$% set pending queue pointer to number of slots
pnd$pointer$to nPND
 
#$% set next index to initial value and save
pnd$nextindx$i = 0
putpnd$nextindx$i
 
#$% set first free index to initial value
pending$first$free = 1
 
return
end
 

 
 
Subroutine WGLCOR
 
########################################################
#$%
#$% Purpose:   WGLCOR initializes a free chain
#$%            in the Corners of Barriers Table.
#$%
#$% Called By: WGLRPT
#$%
#$% Calls:     BBALOC     BBLOD1     BBZAPT
#$%
#$% Tables:    COR
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
integer     nBOY, nCOR, I
BBdeclare  (COR$pointer, COR$NextIndx$I)
 
#$% call to allocate space in BB; map in COR table, and add zeros
 
nBOY = BOY$Size / BOY$Entry
nCOR = min( COR$slots, nBOY)
 
call bbaloc ($$COR,"COR",$yes,nCOR,COR$entry)
call bbzapt ($$COR)
 
#$% update number of corners in use
cor$used = cor$size
 
#$% for each corner slot
for (i=1; i < cor$slots; i=i+1)
   {
    #$% set cor pointer to each value of i
    cor$pointer$to i
 
    #$% set next index to one more than cor pointer and save
    cor$nextindx$i = i + 1
    putcor$nextindx$i
   }
 
#$% set cor pointer to number of slots
cor$pointer$to nCOR
 
#$% set next index to initial value and save
cor$nextindx$i = 0
putcor$nextindx$i
 
#$% set first free index to initial value
corner$first$free = 1
 
return
end
 

Subroutine WGLOWN
 
########################################################
#$%
#$% Purpose:   WGLOWN initializes a free chain in
#$%            the OWN and INV (inventory) tables.
#$%
#$% Called By: WGLRPT
#$%
#$% Calls:     BBALOC     BBLOD1     BBZAPT
#$%            BBLODM     ECHOR      ECHOH
#$%            ECHOI      RPPOS1     RPINV1
#$%
#$% Tables:    OWN        INV        UNT
#$%            POS        ACC
#$%            AML        PAT
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
external fndown,addinv
integer     nSlots, nINV, I, iUnit, noRoom, iFirst, nUNT
BBdeclare  (UNT$pointer)
BBdeclare  (INV$pointer, INV$NextIndx$I)
BBdeclare  (OWN$pointer, OWN$FirstInvIndx$I)
 
nUNT = unt$size/unt$entry
nSlots = min(OWN$Slots, OWN$Slots_per_UNT(nUNT) )           # DEW 10/99 (E2160)
 
#$% call to allocate space in BB; map in OWN table, and add zeros
call bbaloc ($$OWN,"OWN",$yes,nslots,OWN$entry)
call bbzapt ($$OWN)
 
#$% update number slots in use
own$used = own$entry * nslots
 
nINV = min(inv$Slots, inv$Slots_per_UNT(nSlots) )       # DEW 10/99 (E2160)
 
#$% call to allocate space in BB; map in INV table, and add zeros
call bbaloc ($$INV,"INV",$no,nINV,INV$entry)
call bbzapt ($$INV)
 
#$% update inventory slots in use
inv$used = inv$size
 
#$% for each inventory slot entry
for ( i = 1 ; i < nINV ; i = i + 1 )                  # Initialize INV free
   {
    #$% set inventory to each value of i
    inv$pointer$to i
 
    #$% set next index to one more than inv pointer
    inv$nextindx$i = i + 1
    putinv$nextindx$i
   }
 
#$% set pointer to number of slots
inv$pointer$to nINV
 
#$% initialize next index pointer and save
inv$nextindx$i = 0
putinv$nextindx$i
 
#$% initialize first free
Inventory$First$Free = 1
 
                                    # Initialize OWN,INV
 
#$% for each platform entered
for (unt$pointer$first; unt$pointer$ok; unt$pointer$next)
   {
    #$% get unit pointer index number
    iunit = unt$pointer$index
 
    $debug1 call echor
    $debug1 call echov("Unit #")
    $debug1 call echoi(iunit)
    $debug1 call echov("  ")
    $debug1 call echohn(xunt$name$c,$$MaxLit)
 
    #$% enter UNT, POS and DYN table info on own unit
    call RPPOS1(unt$pointer,FNDOWN,own$pointer,iunit,noroom)
 
    $debug1 itype = xown$type$i
    $debug1 itype1 = xunt$type$i
    $debug1 lat = xown$latitude$f
    $debug1 lat1 = xunt$Truelatitude$f
    $debug1 call echor
    $debug1 call echov(" Type (OWN) = ")
    $debug1 call echoi(itype)
    $debug1 call echov(" Type (UNT) = ")
    $debug1 call echoi(itype1)
    $debug1 call echov(" LAT (OWN) = ")
    $debug1 call echof(lat,5)
    $debug1 call echov(" LAT (UNT) = ")
    $debug1 call echof(lat1,5)
 
    #$% if table is full, break
    if (noroom != $no)  break
 
    $debug1 call echov("  Own #")
    $debug1 call echoi(own$pointer$index)
 
    #$% initialize ifirst to call prinv1
    ifirst = 0
 
    #$% enter unit's deployable inventory table
    call RPINV1(unt$pointer,ADDINV,inv$pointer,ifirst,noroom)
 
    $debug1 call echov("  Inv #")
    $debug1 call echoi(inv$pointer$index)
 
    #$% initialize first inventory index and save
    own$FirstInvIndx$i = ifirst
    PUTown$FirstInvIndx$i
   }
 
return
end
 
define (BBImplicit, Implicit None)
 
Subroutine WGLAEG(number_of_AEGIS)
 
########################################################
#$%
#$% Purpose:   WGLAEG initializes a free chain in
#$%            the AEG table.
#$%
#$% Called By: WGLRPT
#$%
#$% Calls:     BBALOC     BBLOD1     BBZAPT
#$%
#$% Tables:    AEG
#$%
#$% Date:      NOV 1993
#$%
#$% Author:    Susan Miller
#$%
########################################################
 
BBcommon
 
integer number_of_AEGIS
integer nAEG, i, AEG$Pointer, AEG$NextIndex$i
 
#$% call to allocate space in BB; map AEG table, and add zeros
if (number_of_AEGIS == 0) number_of_AEGIS = 5
else number_of_AEGIS = number_of_AEGIS + 2
 
nAEG = min(AEG$slots,(number_of_AEGIS * 250))
 
call bbaloc ($$AEG,"AEG", $yes, nAEG, AEG$entry)
call bbzapt ($$AEG)
 
#$% update detection tracks in use
AEG$used = AEG$size
 
#$% for each slot in the AEGIS Track Table
for (i=1; i < nAEG; i=i+1)
   {
    #$% set AEGIS Track pointer to i
    AEG$pointer$to i
 
    #$% set AEGIS Track "next index" pointer to one more than AEG pointer
    #$% and save
    AEG$NextIndex$i = i + 1
    putAEG$NextIndex$i
   }
 
#$% set AEG pointer to number of slots in use
AEG$pointer$to (nAEG)
 
#$% set AEG next index pointer to zero and save
AEG$nextindex$i = 0
putAEG$nextindex$i
 
#$% set first free pointer to initial position
AEGIS$first$free = 1
 
return
end

 
Subroutine WGLADS(number_of_views)
 
########################################################
#$%
#$% Purpose:   WGLADS initializes a free chain in
#$%            the ADS table.
#$%
#$% Called By: WGLRPT
#$%
#$% Calls:     BBALOC     BBLOD1     BBZAPT
#$%
#$% Tables:    ADS
#$%
#$% Date:      JAN 1994
#$%
#$% Author:    Susan Miller
#$%
########################################################
 
BBcommon
 
integer number_of_views
integer nADS, i, ADS$Pointer, ADS$NextIndex$i
 
#$% call to allocate space in BB; map ADS table, and add zeros
nADS = min(ADS$slots,(number_of_views * MaxADSslots$per$view))
 
call bbaloc ($$ADS,"ADS", $yes, nADS, ADS$entry)
call bbzapt ($$ADS)
 
#$% update Air Defense Status in use
ADS$used = ADS$size
 
#$% for each slot in the Air Defense Status table
for (i=1; i < nADS; i=i+1)
   {
    #$% set Air Defense Status pointer to i
    ADS$pointer$to i
 
    #$% set Air Defense Status "next index" pointer to one more than ADS pointer
    #$% and save
    ADS$NextIndex$i = i + 1
    putADS$NextIndex$i
   }
 
#$% set ADS pointer to number of slots in use
ADS$pointer$to (nADS)
 
#$% set ADS next index pointer to zero and save
ADS$NextIndex$I = 0
putADS$NextIndex$I
 
#$% set first free pointer to initial position
ADS$First$Free = 1
 
return
end
