### file: lbutil.rat
###
### Modifications:
###     12/93 Tom Smith     Modified a number of RATFOR library routines to use
###                         VMScharacter as input params:
###                             REMARK_V, INDEX_V, EQUAL_HV
###     1/94  Dane Wills    Modified a number EQUAL_HV and ALMOSTEQUAL_HV
###
###     12/95 Dane Wills    Added changes provided by RESA for DTED use
###
###     9/99  Dane Wills    Merged [BEES]LBUTIL.RAT into [RESA] to acquire
###                         error processing, Implicit NONE, and other changes
###                         as well as E2143 (Block IFs for entry points).
###                         (A few new routines were shuffled to the end of
###                          the file to more closely match RESA's version)
 
define($Log_E_of_10,2.302585092994) # Log(10.0) = 2.302585092994    DEW 8/13/96
 
include "ascii.inc"
include "macros.inc"
include "bbcode.inc"
include "bbctl.inc"
include "bbsta.inc"
include "bbsbi.inc"
#include "secdef.inc"
 
define($debug,#)
undefine(write)
 

 
subroutine geterr_fort (ierr,msg)               # get FORTRAN Error Messages
IMPLICIT NONE                   # jb  4/21/98
integer         ierr,kk,
                I_SWITCH_1      # jb  4/21/98
character       msg[MAXLINE]
 
kk = 0
 
switch (ierr)
    {
    case 29: call smovV ("File not found"                ,msg,kk) #jb V 12/93
    case 30: call smovV ("Open Failure"                  ,msg,kk) #jb V 12/93
    case 38: call smovV ("Error during Write"            ,msg,kk) #jb V 12/93
    case 39: call smovV ("Error during Read"             ,msg,kk) #jb V 12/93
    case 42: call smovV ("No such device"                ,msg,kk) #jb V 12/93
    case 43: call smovV ("File Name specification error" ,msg,kk) #jb V 12/93
    case 45: call smovV ("Keyword value error in Open"   ,msg,kk) #jb V 12/93
 
#   case 99: call smovV ("XXXXXXXXXXXX"                  ,msg,kk) #jb V 12/93
 
    default:
        {
        call smovV ("Fortran Run-Time Error #"           ,msg,kk) #jb V 12/93
        call smovi (ierr                                 ,msg,kk)
        call smovV (", See Table 5-1 FORTRAN Users Guide",msg,kk); #jb V 12/93
        }
    }
 
call smov (EOS,msg,kk)
 
return
end
 

 
Subroutine stmov(strng,ilen,dest,len)
IMPLICIT NONE       # jb  4/21/98
 
Integer istmov,len,ilen  # jb  4/21/98
character  strng[arb],dest[arb]
 
for (istmov = 1; istmov <= ilen ; istmov = istmov + 1)
   {
    len = len + 1
    if (strng[istmov] == 0) break
    dest[len] = strng[istmov]
   }
 
return
end
 

 
integer function almostequal (str1,str2)        # compare two strings for the
IMPLICIT NONE       # jb  4/21/98
Integer i           # jb  4/21/98
character       str1[ARB], str2[ARB]            # length of the first argument
                                                # (till the first NULL)
for (i=1; str1[i] != EOS; i=i+1)
    {
    if (str1[i] != str2[i]) return NO
    }
 
return YES
 
end

integer function almostequal_hv (str1,vstr2) # compare two strings for the
IMPLICIT NONE                               # for the length of the first argument
character   str1[ARB]                       # (till the first NULL)
character   str2[MAXCARD]
VMSchar*(*) vstr2
Integer     istat, almostequal
 
call fs2rs (vstr2, str2)
istat = almostequal (str1,str2)
 
return (istat)
end

 
integer function almostequal_vh (vstr1,str2) # compare two strings for the
IMPLICIT NONE                               # for the length of the first argument
character   str1[MAXCARD],str2[ARB]         # (till the first NULL)
VMSchar*(*) vstr1
Integer     istat, almostequal
 
call fs2rs (vstr1, str1)
istat = almostequal (str1,str2)
 
return (istat)
end

 
# name: equal_hv
#
# purpose: compare hollerith string to VMScharacter string.
#
# 12/93 Tom Smith   Modified from RLIB version of EQUAL to accomodate passing
#                   of quoted string.
#
# 1/94  Dane Wills  Modified to be faster
#
 
Integer Function Equal_HV (str1, str2)
 
implicit none
 
Character           Str1[ARB]
VMScharacter*(*)    Str2
Integer             I
 
if (str1[len(str2)+1] != EOS) return NO      # Look ahead for same length
 
for (i=1; str1[i] == ichar(str2[i:i]); i=i+1)
    {
    if (i == len(str2) )
        {
        return YES
        }
    }
 
return NO
end
 

subroutine upper_v (vstr)
VMSchar*(*) vstr
integer     kk
 
for (kk = 1; kk <= len(vstr); kk = kk + 1)
    {
    if ("a" <= vstr[kk:kk] & vstr[kk:kk] <= "z")
        {
        vstr[kk:kk] = char( ichar(vstr[kk:kk]) - ichar(" ") )
        }
    }
 
return
end
 


 
## lcomp - compare 2 8-character fields
 
integer function lcomp (name1,name2)
IMPLICIT NONE       # jb  4/21/98
Integer  i          # jb  4/21/98
character name1[ARB],name2[ARB]
 
for (i=1; i <= $$MaxLit; i=i+1)
    {
    if      (name1[i] < name2[i]) return (-1)
    else if (name1[i] > name2[i]) return (+1)
    }
 
return ( 0 )
end

integer function lcomp_V (Name1, string1)
# and           litcmp_V (Name1, string1)
 
IMPLICIT    NONE
character   name1[ARB]
VMSchar     string1*(*)
integer     lcomp, result, litcmp_v, kk
character   local_str[9]
literal		local_lit
equivalence (local_str, local_lit)
entry litcmp_V (Name1, string1)
 
# call existing LCOMP routine with second (string) argument passed
# by reference (not descriptor)
local_lit = $BLANKLIT
kk = 0
call smovvt(string1, local_str, kk)
#call smov  (EOS, local_str, kk)
result = lcomp (name1, local_str)
 
return (result)
end
 

integer function lcomp_Vb (Name1, string1)
 
 
IMPLICIT    NONE
character   name1[ARB]
VMSchar     string1*(*)
integer     lcomp, result, litcmp_v, kk
character   local_str[9]
string      blank_str "        "
 
 
# call existing LCOMP routine with second (string) argument passed
# by reference (not descriptor) ... Also, NULL terminate the string.
 
kk = 0
call smovvt(string1, local_str, kk)
if (kk < $$maxlit)
	call smovh (blank_str,$$maxlit-kk, local_str, kk)
call smov  (EOS, local_str, kk)
result = lcomp (name1, local_str)
 
return (result)
end
 
 

 
Literal Function ialfa(i)
IMPLICIT NONE           # jb  4/21/98
 
Integer  i,j,k          # jb  4/21/98
character char
 
k = iabs(i)
ialfa = $BLANKLIT
 
for (j = 5; j>0; j = j - 1)
    {
     char = mod(k,10) + DIG0
     call ipbyte(ialfa,j,char)
     k = k/10
     if (k < 1) break
    }
 
if (i < 0 & k == 0 & j > 1) call ipbyte(ialfa,j-1,MINUS)
 
return
end

 
subroutine anlyz (line,iout,n)
IMPLICIT NONE           # jb  4/21/98
 
# This program accepts an input line of arbitrary character length and
# outputs the array iout in the form of literals (single 8 character words or
# as binary numbers depending upon the character of the input line.  in
# addition it passes (via n) the number of valid arguments returned in iout.
 
character       line[ARB], work[ARB]
literal         iout[20], tmp, reslt, pwr  # jb Removed total  1/21/99
integer         getwrd, ctoi,              # jb Removed nnn[5] 1/21/99
                k,n,icol,itmp,iwrd,ilen,I_SWITCH_1 # jb 4/21/98
 
n=0
icol = 1
iwrd = 1
work[iwrd] = EOS
iout[1]    = $BLANKLIT
 
repeat
    {
    if (work[iwrd] == EOS)
        {
        ilen = getwrd(line,icol,work)
        iwrd = 1
        if (ilen == 0) break
        call upper (work)
        }
 
    n = n + 1
 
    switch (work[iwrd])
        {
        case BIGA-BIGZ:
            {
            iout[n] = $BLANKLIT
            k = 0
            call smovhn (work[iwrd],$$MaxName,iout[n],k)
            work[iwrd] = EOS
            }
 
        case DIG0-DIG9,PERIOD:
            {
            iout[n] = ctoi (work,iwrd)
            if (work[iwrd] == PERIOD)
              {
               itmp = iwrd + 1
               tmp = ctoi (work, itmp)
               pwr = -itmp + iwrd + 1
               reslt = tmp * exp($Log_E_of_10 * pwr) # jb   8/28/96
##               reslt = tmp * (10.0**pwr)  # (line above faster?)
               iout[n] = iout[n] + reslt
               iwrd = itmp                            # 11/19/90 trs
              }
            }
 
        case MINUS:
            {
            iwrd = iwrd + 1
            iout[n] = ctoi (work,iwrd)  #   * -1
            if (work[iwrd] == PERIOD)
              {
               itmp = iwrd + 1
               tmp = ctoi (work, itmp)
##                 iout[n] = iout[n] + (tmp * (10**(-itmp + iwrd + 1)))
               iout[n] = iout[n] +   # jb (EXP( vice 10**)      8/28/96
                     (tmp * exp($Log_E_of_10 *(-itmp + iwrd + 1)) )
               iwrd = itmp                            # 11/19/90 trs
              }
            iout[n] = iout[n] * -1
            }
 
        default:
            {
            n = n - 1
            work[iwrd] = EOS
            }
        }
    }
 
iout[n+1] = $BLANKLIT
iout[n+2] = 0
 
return
end

 
subroutine order1(name,ix,num)
#     program to order "name" by inserting correct number in
#     indexer file "ix".  "num" is the number of valid items to
#     be ordered
 
IMPLICIT NONE           # jb  4/21/98
 
literal name[1200]
integer ix[1200],
        i,j,num,litcmp     # jb    4/22/98
 
ix[1] = 1
 
if (num <= 1) return
 
for (i=2; i <= num; i=i+1)
    {
    j=i-1
    repeat
        {
         if( litcmp(name[i],name[ix[j]]) .ge. 0) break
         ix[j+1] = ix[j]
         j = j-1
        } until (j <= 0)
 
    ix[j+1] = i
    }
 
return
end
 
 
## litcmp - compare 2 literals, stop on a NULL
 
integer function litcmp (str1, str2)
IMPLICIT NONE           # jb  4/22/98
 
character str1[ARB], str2[ARB]
integer i
 
for (i=1; i <= $$MaxLit & str1[i] == str2[i]; i=i+1)
    {
    if (str1[i] == EOS)
        {
        litcmp = 0
        return
        }
    }
 
if (i > $$MaxLit)           litcmp = 0
else if (str1[i] == EOS)    litcmp = -1
else if (str2[i] == EOS)    litcmp = +1
else if (str1[i] < str2[i]) litcmp = -1
else                        litcmp = +1
 
return
end
 

## litinc - increment a literal
 
subroutine litinc (str1)
IMPLICIT NONE           # jb  4/21/98
 
character str1[ARB]
 
str1[$$MaxLit] = str1[$$MaxLit] + 1
 
return
end

 
Integer function isnumber (arg) # jb Integer 4/22/98
IMPLICIT NONE                   # jb  4/22/98
 
character arg[$$MaxLit]
Integer   i            # jb  4/22/98
for (i=1; i<=$$MaxLit; i=i+1)   # search for non-ASCII characters
    {
    if (arg[i] < BLANK) return YES
    if (arg[i] > 127  ) return YES
    }
 
return NO                       # if all are ASCII, return NO
end

Integer function is_all_ascii (arg) # jb Integer 4/22/98
IMPLICIT NONE                       # jb  4/22/98
 
character arg[$$MaxLit]
Integer   i            # jb  4/22/98
 
for (i=1; i<=$$MaxLit; i=i+1)   # search for non-ASCII characters
    {
    if (arg[i] < BLANK) return NO
    if (arg[i] > 127  ) return NO
    }
 
return YES                      # if all are ASCII, return YES
end

Integer function is_alpha_numeric (arg) # jb Integer 4/22/98
IMPLICIT NONE                           # jb  4/22/98
 
character arg[$$MaxLit]
 
# must be UPPERcase letter
# followed by 0..4 letters/numbers
# followed trailing spaces
#
# For the AXP implementation....  a few special tests are required.
# A valid frequency has been found that generates a valid Ascii name.
#    13452.800 == 'RG333343'
#
# I have chosen to decide it is not a valid NAME if there are more than
# 5 digits in the name...
#                           Blame me,  DEW 2/25/98
 
integer     i, n_cnt
 
n_cnt = 0
 
if (arg[1] < $LETA | arg[1] > $LETZ) return NO
 
for (i=2; i<=$$MaxLit; i=i+1)         # search for non-ASCII characters
    {
    if (arg[i-1] == $SPACE & arg[i] != $SPACE) return NO   # no embedded spaces
 
    if (i > $$MaxName & arg[i] != $SPACE) return no
 
    if (arg[i] >= $DIG0 & arg[i] <= $DIG9)
        {
        n_cnt = n_cnt+1
        next
        }
    if (arg[i] >= $LETA & arg[i] <= $LETZ) next
    if (arg[i] == $MINUS) next
 
    if (arg[i] != $SPACE) return NO        # Trailing blanks only
    }
 
if (n_cnt > 5) return NO
 
 
return YES      # if Alpha_Numeric rules fullfilled, return YES
end

 
integer function iextract_s (iword,ipos,imask,sign_ext)
IMPLICIT NONE           # jb  4/22/98
 
integer iword[ARB],sign_ext,
        ipos, imask, isize,         # jb  4/22/98
        ipos1,iwrd1, isiz1,isign,   # jb  4/22/98
        idest,iwrd2, isiz2          # jb  4/22/98
 
#isize= int(0.5 + log(imask+1.0) / log(2.0) )
isize = int(0.5 + log(imask+1.0) / 0.6931472)
 
iwrd1 = ipos/32 + 1
ipos1 = ipos - (iwrd1-1)*32
isiz1 = min(isize,(32 - ipos1))
 
iwrd2 = iwrd1 + 1
isiz2 = isize - isiz1
 
idest = 0
call mvbits (iword(iwrd1),ipos1,isiz1, idest,    0)
if (isiz2 > 0)
    call mvbits (iword(iwrd2),    0,isiz2, idest,isiz1)
 
if (sign_ext == YES)                                    # sign extension ?
    {
    isign = iand(idest,not(imask/2))
 
    if (isign != 0)
        idest = idest .or. .not. imask
    }
 
return (idest)
end
 

 
subroutine insert_s (ivalue,iword,ipos,imask)
#IMPLICIT NONE # jb  4/22/98  NOTE: NO CALLS IN DOC.ALL???
               # How should ivalue be declared?
 
integer iword[ARB],  ivalue,        # jb ivalue 1/21/99
        ipos, imask, isize,         # jb  4/22/98
        ipos1,iwrd1, isiz1,         # jb  4/22/98
              iwrd2, isiz2          # jb  4/22/98
 
#isize= int(0.5 + log(imask+1.0) / log(2.0) )
isize = int(0.5 + log(imask+1.0) / 0.6931472)
 
iwrd1 = ipos/32 + 1
ipos1 = ipos - (iwrd1-1)*32
isiz1 = min(isize,(32 - ipos1))
 
iwrd2 = iwrd1 + 1
isiz2 = isize - isiz1
 
call mvbits (ivalue,    0,isiz1, iword(iwrd1),ipos1)
if (isiz2 > 0)
    call mvbits (ivalue,isiz1,isiz2, iword(iwrd2),    0)
 
#define(call_idress,@2=ior(iand(@2,%NOT%(ishft(@4,@3))),ishft(iand(@1,@4),@3)))
#define($$Insert   ,@2=ior(iand(@2,%NOT%(ishft(@4,@3))),ishft(iand(@1,@4),@3)))
#define($$Insert_s ,call insert_s(@1,@2,@3,@4)) # Span word boundaries
 
return
end
 
 
 
 

 
Subroutine COMPAR(ndim,i,j,result)
 
##############################################################################
#$%
#$% Purpose:   COMPAR determines the lexicographic ordering of two arrays.
#$%
#$% Called By: NXTAVA     NXTBOG     NXTCAP
#$%            NXTDAM     NXTRCN     NXTESM
#$%            NXTFLT     NXTHFD     NXTPAS
#$%            NXTRPT     NXTSHP     NXTSHR
#$%            NXTSOS     NXTSSR     NXTSAT
#$%            NXTSUB     NXTTRK
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$% Author:    F. Jones
#$%
#$% Modified:  2 Mar 1998 - Dane Wills
#$%            Enhanced to work on AXP Open VMS systems....
#$%
##############################################################################
 
# Checks whether array i is less than array j in lexicographic ordering:
#        result = -1 means i < j  (i.e., result <, =, or > 0 iff
#        result =  0 means i = j         i <, =, or > j, respectively)
#        result =  1 means i > j
 
IMPLICIT NONE            # jb  4/22/98
 
integer result,ndim,
        n,litcmp2       # jb  4/22/98
literal i[ndim],j[ndim]
 
#$% zero result flag
result = 0
 
#$% for each entry
for (n=1 ; n<=ndim ; n=n+1)
    {
    # Is this element numeric (binary) or Alpha-numeric (ascii)
    # Let the next routine figure it out.....
 
    #$% compare i to j, if result does not equal zero, break
    result = litcmp2(i[n],j[n])
    if (result < -1)    # non-standard????
        {
        # We have a real*8 binary to compare.....
 
        if      (i[n] < j[n]) result = -1
        else if (i[n] > j[n]) result =  1
        else                  result =  0
        }
 
    if (result != 0) break
    }
 
return
end
 

## litcmp2 - compare 2 literals, may be Binary or Text... (do not stop on NULL)
 
integer function litcmp2 (str1, str2)
IMPLICIT NONE            # jb  4/22/98
 
character str1[ARB], str2[ARB]
integer i, result
 
# Is this element numeric (binary) or Alpha-numeric (ascii)
# HOW:      if any byte (1-8) is null, pick numeric else, assume text
# ACTION:   If numeric, return to caller, w/non-standard result...
 
# look for nulls
for (i=1; i <= $$MaxLit; i=i+1)
    {
    if (str1[i] == EOS | str2[i] == EOS)
        {
        return (-2)
        }
    }
 
for (i=1; i <= $$MaxLit & str1[i] == str2[i]; i=i+1)
    {
    if (str1[i] == EOS)
        {
        return (0)
        }
    }
 
if (i > $$MaxLit)           result = 0
else if (str1[i] == EOS)    result = -1
else if (str2[i] == EOS)    result = +1
else if (str1[i] < str2[i]) result = -1
else                        result = +1
 
return (result)
end
 

## abs_equal - compare 2 "things", may be anything ... for the given length
 
logical function abs_equal (str1, str2, max_len)
IMPLICIT NONE
 
integer     max_len, i
character   str1[max_len], str2[max_len]
 
for (i=1; i <= Max_len; i=i+1)
    {
    if (str1[i] != str2[i] ) return (.FALSE.)
    }
 
return (.TRUE.)
end
 

##
## index_v - find character  c  in string  str
##          Modified version of RLIB index - Tom Smith 12/93
##
integer function index_v(str, vchar)
implicit none
 
character        str[ARB]
VMScharacter*(*) vchar
 
for (index_v = 1; str[index_v] != EOS; index_v = index_v + 1)
    if (str[index_v] == ichar(vchar[1:1]))
        return
index_v = 0
return
end

##
## index_vv - find character  c  in character-string  str
##          Modified version of RLIB index - Tom Smith 12/93
##
integer function index_vv(vstr, vchar)
implicit none
## character c          # jb  Removed  1/21/99
VMScharacter*(*) vstr
VMScharacter*(*) vchar
## integer vlen         # jb  Removed  1/21/99
 
for (index_vv = 1; index_vv <= len(vstr); index_vv = index_vv + 1)
    if (vstr[index_vv:index_vv] == vchar[1:1])
        return
index_vv = 0
return
end
 

##
##  remark_v - print message; assure NEWLINE
##          Modified version of RLIB remark - Tom Smith 12/93
##
subroutine remark_v (vline)
implicit none
VMScharacter*(*) vline
integer kk
character local_str[200]
kk = 0
call smovvt(vline, local_str, kk)
call smov  (EOS, local_str, kk)
call remark (local_str)
 
return
end

##
##  putlin_v - put out line by adjusting args to PUTLIN
##          Modified version of RLIB putlin - D Wills 10/99
##
 
#subroutine putlin_v (vline, f)
#implicit none
#VMScharacter*(*) vline
#integer     f
#integer kk
#character local_str[200]
#kk = 0
#call smovvt(vline, local_str, kk)
#call smov  (EOS, local_str, kk)
 
#call putlin (local_str, f)
 
#return
#end

##
##  trnlog_v - return vax logical for a VMScharacter string to a character array
##          Modified version of RLIB trnlog - Tom Smith 12/93
##
integer function trnlog_v(vin, out)
implicit none
VMScharacter*(*)    vin
integer             trnlog, length, vlen
character           out[ARB]
integer kk
character local_str[200]
kk = 0
call smovvt(vin, local_str, kk)
call smov  (EOS, local_str, kk)
 
out[1] = EOS
if (trnlog (local_str, out) == YES)
	vlen = length(out)
else
{							# Original environment name if not found
	kk = 0
	call smovvt(vin, out, kk)
	call smov  (EOS, out, kk)
	vlen = length(out)
}
return (vlen)
end

##
##  trnlog_vv - return VMScharacter string to a VMScharacter string
##              Modified version of RLIB trnlog - Dane Wills 7/98
##
integer function trnlog_vv(vin, vout)
implicit none
VMScharacter*(*)    vin
VMScharacter*(*)    vout
 
character           out[ARB]
integer             vlen, trnlog_v  # jb  Removed  k    1/21/99
 
vlen = trnlog_v(vin, out)
 
vlen = 0
vout = ""
call vmovhn(out,ARB,vout,vlen)
 
return (vlen)
end

## error_v - print vax string message and terminate execution
##          Modified version of RLIB error - Tom Smith 1/94
subroutine error_v (line)
IMPLICIT NONE           # jb  4/22/98
 
VMScharacter*(*) line
 
call remark_v (line)
call endr4
end
 

## prompt_v - read line from unit, prompting if a terminal channel
##          Modified version of RLIB prompt - Tom Smith 1/94
 
integer function prompt_v (vprompt, line, int)
IMPLICIT NONE           # jb  4/22/98
 
VMScharacter*(*) vprompt
 
character        line(ARB)
integer          int, prompt
 
prompt_v = prompt ( %%ref( vprompt ), line , int)
 
return
end
 

 
Integer*4 Function Put_Error_Line (Line)
IMPLICIT NONE           # jb  4/22/98
 
VMScharacter*(*)    Line
 
Print *,Line
 
return (.FALSE.)
end

integer function Is_Valid_Build_String (str, len)
VMSchar*(*) str
integer     len
integer     mm, t_len
 
# Must start with a Capital letter,
# ..then any upper/lower case leters or numbers
# ....and any parens, dashes, or spaces (one at a time)
# i.e. Two spaces, two dashes, two left or two right parens in a row
#      are not allowed.
 
Is_Valid_Build_String = YES
 
# compute length wothout trailing spaces
for (t_len = len; t_len > 2; t_len = t_len - 1)
    {
    if (str[t_len:t_len] != " ") break
    }
 
for (mm = 1; mm <= t_len; mm = mm + 1)
    {
    if (str[mm:mm] >= "A" & str[mm:mm] <= "Z") next
 
    if (mm > 1)         # second position...
        {
        if (str[mm:mm] >= "a" & str[mm:mm] <= "z") next
        if (str[mm:mm] >= "0" & str[mm:mm] <= "9") next
 
        if (str[mm:mm] != str[mm-1:mm-1])
            {
            if (str[mm:mm] == "" | str[mm:mm] == "-") next
            if (str[mm:mm] == "(" | str[mm:mm] == ")") next
            }
        }
 
    Is_Valid_Build_String = NO
    break
    }
 
return
end

subroutine Move_str_lit (str, name)
VMSchar     str*($$MaxLit)
Literal     name
Integer*4   kk
 
kk = 0
name = $BLANKLIT
call smovv (str[1:$$maxName], name, kk)
 
return
end
 

Integer*4 Function Error_Handler (Sigargs, Mechargs)
 
return(0)
end
 

integer function delete_file_version (cfile2)
 
#############################################################
#$%
#$% Purpose:     DELETE_FILE_VERSION deletes a file (cfile2)
#$%
#$% Called by:   REMOTE_INIT
#$%
#$% Calls:       SMOV   SMOVH   SMOVHN    GETRR   SET_EXIT_MSG
#$%              EXIT
#$%
#$% Author:      D. WILLS
#$%
#$% Date:        SEPTEMBER 1982
#$%
##############################################################
implicit none
integer         rc, rc2
character       cfile2[ARB],
                command[60]
 
integer KK
 
#$% make up string in command array
kk = 0
call smovv  ("rm ",command,kk)
call smovhn (CFILE2,    ARB,command,kk)
call smov   (EOS,           command,kk)
 
#$% spawn a subprocess from array named "command" & get a return code status
#$% ie. delete all versions of cfile2
call do_sys_command (command, rc2)
return(rc2)
end                     # End of subroutine delete_rid (cfile2)
 

define(SIGKILL,9)		# Kill process (can't be ignored) POSIX compliant
integer function kill_process (pid)
 
#############################################################
#$%
#$% Purpose:     DELETE_FILE_VERSION deletes a file (cfile2)
#$%
#$% Called by:   pl_stop_script
#$%
#$% Calls:       kill (intrinsic)
#$%
#$% Author:      J. Allen
#$%
#$% Date:        November 2013
#$%
##############################################################
USE IFPORT
implicit none
integer         pid, sig, rc
 
sig = SIGKILL
rc = kill(pid, sig)
return(rc)
end

subroutine kill_workstation_processes(ista) # Kill astab windows using saved PID
 
BBcommon
integer ista
BBdeclare (sta$pointer, sta$NbrASTABS$i, sta$SBIIndex$i,
           sta$GeoPid$i, sta$AstabPid$i, sta$IOPid$i,
		   sbi$pointer, sbi$pid$i)
integer nsbi
integer irc
 
STA$Pointer$to ista
 
sta$GeoPid$i = Xsta$GeoPid$i
if (sta$GeoPid$i > 0)
{
	irc = kill_process(sta$GeoPid$i)
	if (irc == 0) PUTsta$GeoPid$i(0)
}
 
sta$AstabPid$i = Xsta$AstabPid$i
if (sta$AstabPid$i > 0)
{
	irc = kill_process(sta$AstabPid$i)
	if (irc == 0) PUTsta$AstabPid$i(0)
}
 
 
sta$NbrASTABS$i = xsta$NbrASTABS$i      ## get number of ASTABs for view
sta$SBIIndex$i = Xsta$SBIIndex$i        ## set the index
 
for (nsbi = 1; nsbi <= sta$NbrASTABS$i; nsbi = nsbi + 1)
{
    #$% set status board information pointer
    sbi$pointer$to (sta$SBIIndex$i + nsbi - 1)
	sbi$pid$i = Xsbi$pid$i
	if (sbi$pid$i > 0)
	{
		irc = kill_process(sbi$pid$i)
		if (irc == 0) PUTsbi$pid$i(0)
	}
}
 
sta$IOPid$i = Xsta$IOPid$i
PUTsta$IOPid$i(0)
if (sta$IOPid$i > 0)
{
	irc = kill_process(sta$IOPid$i)
 
}
 
return
end
 

integer function copy_file (cfile1,cfile2)

#############################################################
#$%
#$% Purpose:     COPY_FILE copies one file (cfile2) into 
#$%              another (cfile1)
#$%
#$% Called by:   REMOTE_INIT
#$%
#$% Calls:       SMOV   SMOVH   SMOVHN    DO_SYS_COMMAND
#$%
#$% Author:      D. WILLS
#$%
#$% Date:        SEPTEMBER 1982
#$%
##############################################################
BBimplicit      # jb  E2145 7/24/00

integer         rc, rc2
character       cfile1[ARB], 
                cfile2[ARB], 
                command[80],
                syserr[200]
integer KK

#$% make up string in command array
kk = 0
call smovv  ("cp ",command,kk)
call smovhn (CFILE1,  ARB,command,kk)
call smovv  (" ",command,kk)
call smovhn (CFILE2,  ARB,command,kk)
call smov   (EOS,         command,kk)

#$% spawn a subprocess from array named "command" & get a return code status
#$% ie. copy cfile2 to cfile1
call do_sys_command (command, rc2)

return (rc2)
end             # End of subroutine copy_rid (cfile1,cfile2)

 
