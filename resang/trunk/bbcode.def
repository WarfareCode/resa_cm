###    Record of Modifications:
###
###        Programmer         Date         Modification
###
###        G. G. Gustafson    12/14/87     Added Communication Jammer Code
###                                        $CommunicationJammer$Code with a
###                                        value of 31.
###
###        G. G. Gustafson     2/18/88     Added Communication Jammer Skip
###                                        Routine Flag Skip$Comms_Jamming
###
###        R. E. Hundt         3/07/88     Added code value for Force 
###                                        Command: ENTERCOMJAMMER$order
###
###        D. E. Wills         3/26/88     Added variables for Data Collection
###
###        D. E. Wills         4/19/89     Added variables for EMI and Misc
###
##                                              7/13/1983  - jb
###        J. O. Allen        12/13/93     Varible length time step
## Section 4 Variables
##

define(Scenario$Name           ,CBB[041-20])## 
define(Environment$name        ,CBB[043-21])## Name of current Environment file
define(EnvironmentGood$Name    ,CBB[045-22])## 
define(EnvironmentFair$Name    ,CBB[047-23])## 
define(EnvironmentPoor$Name    ,CBB[049-24])## 
define(Test$Name               ,CBB[051-25])## The name of the current model
define(Restore$Name            ,CBB[053-26])## RAINFORM DMD name  (11/7/85)
define(Control$Password        ,CBB[055-27])## Passwords for 
define(Orange$Password         ,CBB[057-28])##   player programs
define(Blue$Password           ,CBB[059-29])##     for each side...
define(TechControl$Password    ,CBB[061-30])## Password for tech control - joa 11/97 (E1825)
define(LIDAR$File$Name         ,CBB[063-31])## Name of LIDAR probability file
define(Simulator$Name          ,CBB[065-32])## Name of Simulator, i.e. RESA
define(Environment$SubDir      ,CBB[067-33])##

define($Wargame$PID            ,081) ##
define(Wargame$PID_1           ,IBB[081]) ##
define(Wargame$PID_2           ,IBB[082]) ##
define(Wargame$PID_3           ,IBB[083]) ##
define(Wargame$PID_4           ,IBB[084]) ##
define(Wargame$PID_5           ,IBB[085]) ##
define(Wargame$PID_6           ,IBB[086]) ##

define(Data$base$highwater     ,IBB[098]) ##
define(Data$base$Version       ,FBB[099]) ##

define(Game$Index              ,IBB[100]) ##
define(Halt$Forks              ,IBB[101]) ##
define(Displacement$Factor     ,IBB[102]) ##

        ## 7 VARiables for RSM Update @ Game-Cycle by Wargame-EXTRACTER
define(Game$Minute             ,IBB[103]) ## Current Game Minute [RSM Updat]
define(Zulu$StartTime          ,IBB[104]) ## Zulu time of game min zero
define(Status$Minute           ,IBB[105]) ##
define(cycle$game$rate         ,FBB[106]) ## Achieved time ratio for this cycle
define(Reference$Time$F        ,((60.0/Length$of$Minute)*60.0)) ## 
define(Review$Fast             ,IBB[107]) ## is the review  FAST mode (yes/no)
define(RSM$Busy                ,IBB[107]) ## is RSM database being updated? 
define(Game$Pause              ,IBB[108]) ## is the game in hold (yes/no)
define(Review$Pause            ,$% s/b Game$Pause) # Old Name
define(Lock$Station            ,IBB[109]) ## Restricts Station Input (when YES)

define(Auto$LogOut             ,IBB[110]) ## logout on halt$request

        ### 5 Variables for Table-Flags for Wargame-EXTRACTER
define(Rmt$Changed             ,IBB[111])
define(Hfd$Changed             ,IBB[112])
define(Ssr$Changed             ,IBB[113])
define(Nam$Changed             ,IBB[114])
define(PIM$Changed             ,IBB[115]) ##    PIM vice DUP    12/19/83
define(RESA$Worldwide$Elevation,IBB[116])
define(Last$PreOrder$Disk      ,IBB[117]) ##
define(Minutes$To$Old          ,IBB[118]) ##
define(Minutes$To$Yellow       ,IBB[119]) ##
define(Next$Comm$Disk          ,IBB[120]) ##
define(Next$Comm$MsgNbr        ,IBB[121]) ##
define(Next$Node$Disk          ,IBB[122]) ##
define(Random$Seed             ,IBB[123]) ##
define(Sliding$Mean            ,IBB[124]) ##
define(Wargam$Status           ,IBB[125]) ## $Busy or $Idle
define(Wind$Direction          ,IBB[126]) ##
define(Wind$Force              ,IBB[127]) ##
define($Neutral$View           ,IBB[128]) ## VUE index for Neutral
define($First$View,$Neutral$view)         ## VUE Index
define($FirstBlue$View         ,IBB[129]) ## VUE Index
define($LastBlue$View          ,IBB[130]) ## VUE Index
define($FirstOrange$View       ,IBB[131]) ## VUE Index
define($LastOrange$View        ,IBB[132]) ## VUE Index
define($Last$View,$LastOrange$View)       ## VUE Index
define(Replay$Thru$Minute      ,IBB[133]) ## If this is Replay, Till When.
define(Sync$A                  ,IBB[134]) ## used to control starting sync.
define(Sync$B                  ,IBB[135]) ## used to control starting sync.
define(Cycle$Start$time        ,IBB[136]) ## Clock time, cycle start (millisec)
define(Cycle$Stop$time         ,IBB[137]) ## Clock time, cycle end (millisec)
define(Read$Request            ,IBB[138]) ## indicates when read is ok
define(Read$Count              ,IBB[139]) ## indicates how many are reading
define(Execution$mode          ,IBB[140]) ## Type of start-up 0=new,1=Continue,
                                          ##                 2=review,3=restart
define(Record$from$minute      ,IBB[141]) ## Recording is done from this point
define(Next$order$id           ,IBB[142]) ## dsk add. of next order hist rec
define(Next$record$disk        ,IBB[143]) ## disk address of next record record
define(Save$Last               ,IBB[144]) ## time of the last bb save
define(Last$save,Save$Last)               ##
define(Save$Interval           ,IBB[145]) ## number of minutes between auto saves
define(Time$between$saves,Save$Interval)  ##
define(Save$Request            ,IBB[146]) ## Flag to ind user requested save
define(Detached$mode           ,IBB[147]) ## Is Wargam to run detatched? yes/no
define(Time$between$Records    ,FBB[148]) ## number of minutes between RECORDS-JFR 1/13/94 for VTS PGA
define(Plot$Status             ,IBB[149]) ##
define(Plot$Time               ,IBB[150]) ##
define(Layer$Depth             ,IBB[151]) ## Sonic Layer Depth, env. file
define(Passive$MaxRange        ,IBB[152]) ## Max Rng for Passive Sonr Detectns
define(Active$MaxRange         ,IBB[153]) ## Max Rng for Active Sonar Detectns
define(Acoustic$Range          ,IBB[154]) ## Maximum Acoustic Comm Range
define(Mast$Depth$Max          ,IBB[155]) ## Max Depth for Mast Use
define(Wire$Depth$Max          ,IBB[156]) ## Max Depth for Wire Use
define(Ducting$Strength        ,IBB[157]) ## Ducting Strength
define(Clutter$Factor          ,IBB[158]) ## Clutter Factor
define(Next$order$to$execute   ,IBB[159]) ## disk id next hist order to execute
define($TMA$Criteria           ,IBB[160]) ## time required to establish TMA

# Note - was previously $ESM$Criteria, but that was never used.
define(ESM$DefaultMaxRange     ,IBB[161])  # Default Max Range for ESM sensors - clk 5/26/93

define(Mast$Survival$Speed     ,IBB[162]) ##
define(Wire$Survival$Speed     ,IBB[163]) ##
define(Buoy$Survival$Speed     ,IBB[164]) ##
define(Mast$Deploy$Time        ,IBB[165]) ## time required to Deploy a mast in minutes
define(Mast$Retreive$Time      ,IBB[166]) ## time required to Retreive a mast in minutes
define(Wire$Deploy$Time        ,IBB[167]) ## time required to Deploy a wire in minutes
define(Wire$Retreive$Time      ,IBB[168]) ## time required to Retreive a wire in minutes
define(Buoy$Deploy$Time        ,IBB[169]) ## time required to Deploy a buoy in minutes
define(Buoy$Retreive$Time      ,IBB[170]) ## time required to Retreive a buoy in minutes
define(History$File$Error      ,IBB[171]) ## errors incurred during a restart
                                          ## of Wargame
define(Record$Status$Flag      ,IBB[172]) ## controls RECORD progrm
define(DET$tracks              ,IBB[173]) ## number of tracks maximum
define(Buoy$Depth$Max          ,IBB[174]) ## Max Depth for Buoy Use
define(Write$Request           ,IBB[175]) ## indicates when write is ok
define(Write$Count             ,IBB[176]) ## indicates how many are writing
define(Save$Versions           ,IBB[177]) ## indicates how SAVE files to keep
define(Versions$to$keep,Save$Versions)    ## indicates how SAVE files to keep
define(last$bb$page            ,IBB[178]) ## last page used in BB (rel zero)
define(Large$Screen$View       ,IBB[179]) ## View to be put to special display
define(Large$Screen$View       ,$% Fix Me [large-screen-view]%) # phasing out use

define(Last$order$to$execute   ,IBB[180]) ## order id of the last history recrd
define(Next$PlanOrder$id       ,IBB[181]) ## order id for next plan explosion
define(Time$Tags               ,IBB[182]) ## Should time tags be sent each min
define(Max$BB$Words            ,IBB[183]) ## Total number of words
define(Order$Minute            ,IBB[184]) ## Game Time orders should be executed
define(Segment$Count           ,IBB[185]) ## Number of segments defined
define(Continue$ok             ,IBB[186]) ## current game continuable (Y/N) ?
define(Night$Factor            ,FBB[187]) ## Mod prob of successful lnch/recvry
define(SeaState$Factor         ,FBB[188]) ## Mod prob of successful lnch/recvry
define(Wind$Max$Fixed          ,IBB[189]) ## Max allwbl wind over flight deck
                                          ##  for launching fixed wing aircraft
define(Wind$Min$Fixed          ,IBB[190]) ## Min allwbl wind over flight deck
                                          ##  for launching fixed wing aircraft
define(Wind$Max$Helo           ,IBB[191]) ## Max allwbl wind over flight deck
                                          ##  for launching helicopters
define(Launch$Wind$Factor$Fixed,FBB[192]) ## Mod prob of successful launch
define(Launch$Fatigue$Factor   ,FBB[193]) ## Mod prob of successful launch
define(Launch$Wind$Factor$Helo ,FBB[194]) ## Mod prob of successful launch
define(Recover$Engage$Factor   ,FBB[195]) ## Mod prob of successful recovery
define(BingoRcvr$CumProb       ,FBB[196]) ## Accum prob of sys failure outcome
                                          ## for successful recovery
define(BingoCrash$CumProb      ,FBB[197]) ## Accum prob of sys failure outcome
                                          ## for successful recovery
define(BingoMayday$CumProb     ,FBB[198]) ## Accum prob of sys failure outcome
                                          ## for ditch with a mayday
define(BingoNoMayday$CumProb   ,FBB[199]) ## Accum prob of sys failure outcome
                                          ## for ditch without a mayday
define(Fatigue$Rate            ,FBB[200]) ## Fatigue factor prob of succ launch
                                          ##
define(HFDF$Time$Track         ,IBB[201]) ## Time limit for track update in minutes
define(HFDF$Time$Ellipse$air   ,IBB[202]) ## Time lim for ellipse update of airin minutes
define(HFDF$First$Track        ,IBB[203]) ## Index to 1st track (on chain)
define(HFDF$Last$Track         ,IBB[204]) ## Index to last track
define(HFDF$First$Free         ,IBB[205]) ## Index to 1st open slot (on chain)
define(HFDF$Last$Free          ,IBB[206]) ## Index to last open slot
define(HFDF$MobileDetectRange  ,IBB[207]) ##
define(HFDF$MobileDetectProb   ,FBB[208]) ##
define(HFDF$BaseLatitude       ,FBB[209]) ##
define(HFDF$BaseLongitude      ,FBB[210]) ##
define(HFDF$BWidth$Blue$Mobile ,FBB[211]) ##
define(HFDF$TrackCounter       ,IBB[212]) ##
define(HFDF$TimeLimit          ,IBB[213]) ##

define(Sosus$Time$Track        ,IBB[214]) ## Time limit for track update in minutes
define(Sosus$Time$Ellipse      ,IBB[215]) ## Time limit for ellipse update in minutes
define(Sosus$First$Track       ,IBB[216]) ## Index to 1st track (on chain)
define(Sosus$Last$Track        ,IBB[217]) ## Index to last track
define(Sosus$First$Free        ,IBB[218]) ## Index to 1st open slot (on chain)
define(Sosus$Last$Free         ,IBB[219]) ## Index to last open slot
define(Nbr$Sosus$Target$Types  ,IBB[220]) ##

define(Sun$Longitude           ,FBB[221]) ## long of sun for current game min
define(Sun$Latitude            ,FBB[222]) ## lat of sun (cnstnt for scenario)
define(Julian$Day              ,IBB[223]) ## Day of the year
define(Weather$BaseLatitude    ,FBB[224]) ## lat of SW crnr of 50 deg sq regn
define(Weather$BaseLongitude   ,FBB[225]) ## lon of SW crnr of 50 deg sq regn
define(Halt$Request            ,IBB[226]) ## yes/no

define(Sosus$TrackCntr         ,IBB[227]) ## keeps track of Sosus tracks
define(Sosus$Glimpse$Interval  ,IBB[228]) ## the glimpse interval in minutes

define(HFDF$Time$Ellipse$ship  ,IBB[229]) ## Time lim for ellipse updt of ship in minutes
define(HFDF$BWidth$Blue$Fixed  ,FBB[230]) ##
define(HFDF$BWidth$Orange$Mobile,FBB[231])##
define(HFDF$BWidth$Orange$Fixed,FBB[232]) ##

define(CHAFF$Life              ,IBB[233]) ## Minutes of life
define(CHAFF$Width             ,IBB[234]) ## Miles wide
define(CHAFF$Thickness         ,IBB[235]) ## Feet thick
define(reconn$delay            ,IBB[236]) ## time delay for film developing
define(Save$Time$Used          ,IBB[237]) ## seconds used to process save
define(CUDB$Interval           ,IBB[238]) ## Common User DB save interval
define(CUDB$Set$Size           ,IBB[239]) ##    nbr of files to cycle
define(CUDB$Last               ,FBB[240]) ##    time of last save
define(CUDB$Last$Version       ,IBB[241]) ##    cycle number of last save
define(CUDB$Time$Used          ,IBB[242]) ##    seconds used in last save
define(CUDB$In$Process         ,IBB[243]) ##    save in process? ($yes/$no)
define(CUDB$Dyna$Only          ,IBB[244]) ##    save only Dynamics? (yes/no)
define(CUDB$Enabled            ,IBB[245]) ##    Allow/Disallow CUDB save
define(Local$First$Free        ,IBB[246]) ## Index to first free LCL tbl slot
define(Pending$First$Free      ,IBB[247]) ## Index to first free PND tbl slot
define(Inventory$First$Free    ,IBB[248]) ## Index to first free INV tbl slot
define(Corner$First$Free       ,IBB[249]) ## Index to first free COR tbl slot
define(SOSUS$View              ,IBB[250]) ## VUE index to receive SOSUS info
define(Game$Designation        ,IBB[251]) ## Game designation (slot) at CSF 
define(Remote$Node$Number      ,IBB[252]) ## Number of this Remote site
define(Sonar$Noise$Factor      ,FBB[253]) ## Sonar factor for WGMDSNR.RAT
define(Refresh$Request         ,IBB[254]) ## Request Remote DB Refresh 
define(Correlate$ESM           ,IBB[255]) ## YES/NO
define(Correlate$Sonar         ,IBB[256]) ## YES/NO
define(Cycle$Mid$time          ,IBB[257]) ## Clock time, w/out Extract(millisec)
define(Maintain$Track$History  ,IBB[258]) ## YES/NO
define(Sonar$Sigma             ,FBB[259]) ## 
define(Sonobuoy$depth          ,IBB[260]) ## depth for sonobuoy barriers
define(Level$Fltops            ,IBB[261]) ## Detail of FlightOps Model

define(Nuclear$Capable         ,IBB[262]) ## YES/NO            3/21/85
define(NucDet$Count            ,IBB[263]) ## 0-10 or 15         4/1/85
define(Log$Engage              ,IBB[264]) ## YES/NO            7/16/85
define(Engage$File$Error       ,IBB[265]) ##
define(Scope$DBM               ,IBB[266]) ## P'scope Xsection   9/25/85 
define(Save$DMD                ,IBB[267]) ## Save RAINFORM DMD (Y/N) 11/7/85
define(Restore$DMD             ,IBB[268]) ## Restore RAINFORM DMD (Y/N) 11/7/85
define(Restore$Time            ,IBB[269]) ## RAINFORM DMD Version (Time) 11/7/85
define(Save$Time               ,IBB[270]) ## RAINFORM time to save a DMD 12/3/85
define(Level$AA                ,IBB[271]) ## Detail of SAM eng.Model 12/13/86

define(rgair$late              ,IBB[272]) ## Time late to clear FOTC ASTAB(air)
define(rgsurf$late             ,IBB[273]) ## Time late to clear FOTC ASTAB(surf)
define(rgsub$late              ,IBB[274]) ## Time late to clear FOTC ASTAB(sub)
define(rgunk$late              ,IBB[275]) ## Time late to clear FOTC ASTAB(unk)

define(Ducting$Factor          ,FBB[276]) ## Ducting Factor (1.0 ... 1.35)
define(COMJAM$DetectProb       ,FBB[277]) ## Pb for Freq Hopping CommJammer

define(Analytical$Run          ,IBB[278]) ## C2 model analysis -- DEW 4/26/88

define(DEQ$First$Free          ,IBB[279]) ## Indx to 1st chain slot jb 3/8/89

define(Simultaneous$flights    ,IBB[280]) ## maximum simultaneous flights
define(Simultaneous$cruise     ,IBB[281]) ## maximum simultaneous cruise miss
define(Simultaneous$boats      ,IBB[282]) ## maximum simultaneous small boats
define(SH$Loaded               ,IBB[283]) ## number of ships loaded
define(CM$Loaded               ,IBB[284]) ## number of cruise missles loaded

define(Provide$Replay          ,IBB[285]) ## Don't do anything to louse it up
define(Utilize$Parallel        ,IBB[286]) ## Mutually exclusive of Replay
define(Level$Radar             ,IBB[287]) ## select level of ops (codes TBD)
define(EMI$Granularity         ,IBB[288]) ## 0 == EMI Off
define(EMI$Analysis            ,IBB[289]) ## 
define(VM$Range$Bearing        ,IBB[290]) ## 0 == Off, 1 == On, 2 == Auto
define(Level$BoatOps           ,IBB[292]) ## select level of Boat ops (TBD)
define(ETX$First$Free          ,IBB[293]) ## Index to 1st open slot (on chain)
define(Max$BB$Words$save       ,IBB[294]) ## Total number of words to SAVE
define(last$bb$page$save       ,IBB[295]) ## last page used (rel zero) to SAVE
define(EMI$TimeSlice           ,IBB[296]) ## (per second)
define(Time$Range$Bearing      ,IBB[297]) ## Time of last range/bearing calc
define(Max$Range$Bearing       ,IBB[298]) ## Highest UNT index for R/B
define(Number$Radar$Detections ,IBB[299]) ## used for allocation of DTX table
define(Number$Comm$Transmitted ,IBB[300]) ## used for allocation of CTX table
define(EMI$Phasing$Mode        ,IBB[301]) ## used in power summing EMI
define(Level$Visual            ,IBB[302]) ## Detail of Visual Model (freq'cy)

define(EOIR$Range$Max          ,IBB[303]) ## used as max range for EOIR calcs
define(EOIR$Swath$Angle        ,IBB[304]) ## 180 degrees is side to side
define(EOIR$Damage$Destroyed   ,IBB[305]) ## When Current VMAX is less than this
define(EOIR$Damage$Severe      ,IBB[306]) ## % of Original VMAX... then there
define(EOIR$Damage$Moderate    ,IBB[307]) ## is this much damage. For example:
define(EOIR$Damage$Minor       ,IBB[308]) ## Dest=25%, Sev=50%, Mod=75%, Min=90%
define(UAV$Engagement$Ceiling  ,IBB[309]) ## Max Alt at which UAV can be shot at
                                          ## by SAMs

                                          ## ROTHR added by Cindy Leaf 3/8/90
define(Rothr$Radical$Percent   ,FBB[310]) ## Rothr Radical Maneuver Percent
define(Rothr$Min$Air$Doppler   ,IBB[311]) ## Rothr Minimum Air Doppler
define(Rothr$Min$Surf$Doppler  ,IBB[312]) ## Rothr Minimum Surface Doppler
define(Rothr$Max$Range         ,IBB[313]) ## Maximum Range for Rothr
define(Rothr$Last$Air$DIR      ,IBB[314]) ## Last Air Dwell Illumination Region (DIR) for Rothr
define(Rothr$Last$Surface$DIR  ,IBB[315]) ## Last Surface DIR for Rothr

define(Neutral$Torpedo$Count   ,IBB[316])
define(Blue$Torpedo$Count      ,IBB[317])
define(Orange$Torpedo$Count    ,IBB[318])
define(Neutral$Cruise$Count    ,IBB[319])
define(Blue$Cruise$Count       ,IBB[320])
define(Orange$Cruise$Count     ,IBB[321])
define(Within$Parallel$Mode    ,IBB[322])
define(EXL$First$Free          ,IBB[323]) ## Indx to 1st chain slot 6/21/90
define(CHAFF$LOWfreq           ,IBB[324]) ## Chaff effectiveness 'floor'
define(EMI$IntraPlatform       ,IBB[325]) ## 0 == Intra-Platform EMI Off
define(Bogey$Tote$Composition  ,IBB[326]) ## 0 == Few/Many else 1...N
define(Level$Antenna           ,IBB[327]) ## Yes/No Process Cutouts
define(CounterMeasure$Factor   ,FBB[328]) ## Adjustment factor for CM being Hit
define(Number$Intra$Occurrences,IBB[329]) ## used for allocation of ITX table
define(Environment$DefaultLevel,IBB[330]) ## 0=BEST; 1<GOOD; 2<FAIR; 3<POOR
define(Level$REJ               ,IBB[331]) ## 0 = one device type per Unit
define(Level$ActiveSonar       ,IBB[332]) ## 0=OLD; 2=NEW, ALERT 75% of time;
                                           # 1=NEW, ALERT based on LCL srch
define(False$Strength          ,IBB[333]) ## Default = 40 in WIINIT    2/19/91
define(MAD$Detection$Range     ,IBB[334]) ##                        SM 1/10/91
define(MAD$Performance$Factor  ,FBB[335]) ##                        SM 1/10/91
define(MAD$Max$Detection$Range ,IBB[336]) ##                        SM 1/10/91
define(False$SUB$Pointer       ,IBB[337]) ##jb Active Sonar FLS target 2/14/91
define(Neutral$False$Count     ,IBB[338]) ##jb Keep!/For FLSsub Naming 2/20/91
define(SWABS$B_View            ,IBB[339]) ##VUE index for Blue SWABS info 
define(SWABS$O_View            ,IBB[340]) ##VUE index for Orange SWABS info
define(SWABS$First$Free        ,IBB[341]) ## Index to 1st open slot (on chain)
define(SWABS$Last$Free         ,IBB[342]) ## Index to last open slot
define(SWABS$TrackCntr         ,IBB[343]) ## number of SWABS tracks
define(SWABS$First$Track       ,IBB[344]) ## Index to 1st open slot (on chain)
define(SWABS$Last$Track        ,IBB[345]) ## Index to last open slot
define(Level$IFF               ,IBB[346]) ## Level of IFF model detail 3/12/91
define(Extra$Stations          ,IBB[347]) ## Additional number of Stations

define(Main$BattleUnit         ,IBB[348])  ## MBU index, for Engagement Log
define(Simultaneous$Ground     ,IBB[349])  ## maximum simultaneous ground units
define(Record$LCL$CRUISE       ,IBB[350])  ## Yes if recording Un-Corr tracks
define(Record$LCL$AIRCRAFT     ,IBB[351])  ## Yes if recording Un-Corr tracks
define(Record$LCL$SMALL        ,IBB[352])  ## Yes if recording Un-Corr tracks
define(Record$LCL$SHIPS        ,IBB[353])  ## Yes if recording Un-Corr tracks
define(Record$LCL$GROUND       ,IBB[354])  ## Yes if recording Un-Corr tracks
define(Record$LCL$Tracks       ,IBB[354])  ## Each Bit corresponds to UNT$Type
define(Number$LCL$Record       ,IBB[355])  ## used for allocation of LDX table

define(Track$Time$Tag          ,IBB[356]) ## should time tags be added to track 

# the following fields may be added for JC3S integration  (DEW 7/22/91)
define(CBI$default             ,FBB[357]) ## CBI default value - JFR 7/8/91
define(origin$latitude         ,FBB[358]) ## for terrain init - JFR 7/9/91
define(origin$longitude        ,FBB[359]) ## for terrain init - JFR 7/9/91
define(origin$elevation        ,FBB[360]) ## for terrain init - JFR 7/9/91
define(terrain$orientation     ,FBB[361]) ## for terrain init - JFR 7/9/91
define(default$attrition       ,FBB[362]) # default lanchester coeff. JFR 7/9/91

define(veq$first$free          ,IBB[363]) # Index to 1st open slot (on chain)
define(vml$first$free          ,IBB[364]) # Index to 1st open slot (on chain)
define(oeq$first$free          ,IBB[365]) # Index to 1st open slot (on chain)

define(Max$Bistatic$Range      ,IBB[366]) ## max Bistatic sonar range 7/3/91
define(Bistatic$Ops$Level      ,IBB[367]) ## level of operations for bistatic
define(Nmbr$Bistatic$Sources   ,IBB[368]) ## # of bistatic source transmitters
define(Bistatic$First$Free     ,IBB[369]) ## Index to 1st open slot (on chain)
define(Bistatic$Last$Free      ,IBB[370]) ## Index to last open slot
define(Bistatic$First$Track    ,IBB[371]) ## Index to 1st open slot (on chain)
define(Bistatic$Last$Track     ,IBB[372]) ## Index to last open slot

define(Minute$to$randomize     ,IBB[373])
define(Random$tbl$entry        ,IBB[374])
define(Random$tbl$slots        ,10)
define(Random$tbl$maxsize      ,Random$tbl$slots)
define(Random$tbl$base         ,375)
define(Random$tbl$seed         ,IBB[Random$tbl$base + 
                                    min(@1,Random$tbl$slots) - 1])

# Note that the random table occupies IBB[375] to IBB[384]    ## DEW 4/26/88

define(no$comm$delay           ,IBB[386])
define(CIWS$Busy               ,IBB[387]) # is CIWS now processing? jb 7/21/91
define(SBD$First$Free          ,IBB[388]) ## Index to 1st open slot (on chain)
define(SBD$Last$Free           ,IBB[389]) ## Index to last open slot
define(SBD$First$Track         ,IBB[390]) ## Index to 1st used slot (on chain)
define(SBD$Last$Track          ,IBB[391]) ## Index to last used slot
define(Random$Count            ,IBB[392]) ## Count of the number calls to RANDOM
define(EMI$Record$Level        ,IBB[393]) ## 0==Record impact, 1==Record Any EMI

define(Game$WasPaused          ,IBB[394]) ## is the game in hold (yes/no)
define(Record$LCL$Friendly     ,IBB[395]) ## Record Friends (as well as foes)

define(terrain$Process         ,IBB[396]) # Terrain proceesing flag JFR 8/27/91
define(terrain$spacing         ,IBB[397]) # Terrain spacing for LOS JFR 10/31/91
define(terrain$air             ,IBB[398]) # LOS enabled for aircraftJFR 10/31/91
define(terrain$ships           ,IBB[399]) # LOS enabled for ships JFR 10/31/91
define(terrain$ground          ,IBB[400]) # LOS enabled for ground JFR 10/31/91
define(terrain$all             ,IBB[401]) # LOS enabled for all JFR 10/31/91

define(ISAR$ID$MaxRange        ,FBB[402]) # clk 4/28/92
define(ISAR$ID$Probability     ,FBB[403]) # clk 4/28/92
define(FLIR$Vert$FOView        ,IBB[404]) ## jb  Vert. field of view, deg. 5/92
define(FLIR$Horiz$FOView       ,IBB[405]) ## jb Horiz. field of view, deg. 5/92

######################################################################
# Air-to-air upgrade algorithm variables                      clk 3/92
define(level$Air$Engagement    ,IBB[406]) # Level of air engagement processing    clk 3/92

define(PSI$Ratio               ,FBB[407]) # Prob of Successful Intercept ratio    clk 3/92               
define(PSI$Min                 ,FBB[408]) # Prob of Successful Intercept minimum  clk 3/92               
define(PSI$Low                 ,FBB[409]) # Prob of Successful Intercept < 1000 ft & AEM < 100   clk 3/92
define(PSI$LowPD               ,FBB[410]) # Prob of Successful Intercept < 1000 ft & AEM >= 100  clk 3/92
define(PSI$Nite                ,FBB[411]) # Prob of Successful Intercept at night w/ AEM < 100   clk 3/92
define(PSI$NitePD              ,FBB[412]) # Prob of Successful Intercept at night w/ AEM >= 100  clk 3/92
define(PSI$Hold                ,IBB[413]) # # of minutes to reform flight after intercept occurs   clk 3/92
                                          
define(DayContEngage$Prob$Blue     ,FBB[414]) # Probability of continuing   clk 3/92
define(DayContEngage$Prob$Orange   ,FBB[415]) # engagement after successful    
define(NightContEngage$Prob$Blue   ,FBB[416]) # intercept and AAM firing during
define(NightContEngage$Prob$Orange ,FBB[417]) # day or night for Blue or Orange
                                              
define(Tail$Chase              ,IBB[418]) # Time limit (in minutes) for tail chases       clk 3/92
define(ReactToAttack$Prob      ,FBB[419]) # Reaction to attack probability   clk 3/92
define(Next$Empty$DACSlot      ,IBB[420]) # Next empty DAC table slot        clk 3/92

define(Target$Scale$Blue           ,FBB[421]) # two sided scaling  SMM 3/26/92
define(Target$Scale$Orange         ,FBB[422]) # two sided scaling  SMM 3/26/92
define(Target$Scale                ,FBB[423]) # target difficulty mult  SMM 3/26/92
define(Speed$Scale                 ,IBB[424]) # target difficulty mult  SMM 3/26/92
define(Night$Scale                 ,FBB[425]) # target difficulty mult  SMM 3/26/92
define(Altitude$Scale              ,IBB[426]) # target difficulty mult  SMM 3/26/92
define(AirToAir$Prob$Launch$Blue   ,FBB[427]) # two sided scaling  SMM 3/26/92
define(AirToAir$Prob$Launch$Orange ,FBB[428]) # two sided scaling  SMM 3/26/92

define(MaxCruiseMissile$Speed      ,FBB[429]) # max missile speed thres SMM 4/3/92
######################################################################
#$% Variables added for ALSP                  # clk 5/5/92
define(ALSP$Game                   ,IBB[430]) # flag for if ALSP game
define(ALSP$Active                 ,IBB[431]) # flag for if ALSP active
define(ALSP$ConfedTime             ,IBB[432]) # simulation time of ALSP confed.
define(ALSP$Air$Name               ,IBB[433]) # current created air ghost name
define(ALSP$ID$Count               ,IBB[434]) # current ALSP id number
define(ALSP$BlueGhost$View         ,IBB[435]) # view for blue ghosts
define(ALSP$OrangeGhost$View       ,IBB[436]) # view for orange ghosts

define(level$ESM                   ,IBB[437]) # level of processing for ESM # khc 9/92

define(Minutes$To$Close$Files,IBB[438])    # min. between close of postgame history files  SMM 9/92
define(Last$Close$Time       ,IBB[439])    # time of last pga file save                    SMM 9/92
define(Postgame$Save$Number  ,IBB[440])    # number used in Postgame history file names    SMM 9/92

define(MineField$CheckFrequency,IBB[441])  # (E1023) clk 3/93 - number of minutes
                                           # between mine model checks for a unit
# number of Interactive plans currently saved in file SMM 4/93 per #E1114
define(Total$Plans$Defined,IBB[442])
define(Max$Plans$Allowed,IBB[443])  # max allowed to be defined

define(IR$Threshold            ,IBB[444]) ## for IR SURVSAT    6/7/93  av
define(Blue$adcru$count        ,IBB[445]) ## for adcru naming  8/93    Alex v.
define(Orange$adcru$count      ,IBB[446]) ## for adcru naming  8/93    Alex V.

define(ALSP$Unit$Name          ,IBB[447]) # current created non-air ghost name

define(DIS$Blue$View,  ALSP$BlueGhost$View)   # view for blue ghosts   6/29/92
define(DIS$Orange$View,ALSP$OrangeGhost$View) # view for orange ghosts 6/29/92

define(JTIDS$Capable$Game      ,IBB[448]) # flag for RESA/LSE JTIDS interface - clk 12/95 (E1469)
define(JTIDS$Interface$State   ,IBB[449]) # flag for RESA/LSE JTIDS interface - clk 12/95 (E1469)

define(RESA$State              ,IBB[450]) ## for DIS           5/20/92 clf
define(RTU$Interface$State     ,IBB[451]) ## for DIS           5/20/92 clf
define(RTU$State               ,IBB[451]) ## for SERCES        5/20/92 clf
define(RTU$PID                 ,IBB[452]) ## for DIS           7/09/92 clf
define(Level$IR                ,IBB[453]) ##                  11/17/92 clf
define(RTU$Passive             ,IBB[454]) ## DIS              12/01/92 clf
define(DIS$Game                ,IBB[455]) # flag for if DIS game
define(jecewsi$game            ,IBB[456]) # flag for jecewsi game - jFR 8/26/94


#---------------------------------------------------------------------------
# Variable time step        Alex V. 9/93

define(PreviousGame$Time        ,FBB[457])      # Previous min in sim cycle
define(time$step                ,FBB[458])      # Float min in sim cycle
define(time$spec                ,FBB[459])      # 
define(cycle$count              ,IBB[460])      # Number of cycles from beg
define(game$time                ,FBB[461])      # Float min since sim beg
define(game$rate                ,FBB[462])
define(Model$Interval           ,FBB[463])      # Current model time interval
                                                # game$time -model$lastexecutetime
define(Ir$recurrence            ,IBB[464])
define(motion$recurrence        ,IBB[465])
define(flight$recurrence        ,IBB[466])
define(rej$recurrence           ,IBB[467])
define(ActiveSonar$recurrence   ,IBB[468])
define(eoir$recurrence          ,IBB[469])
define(visual$recurrence        ,IBB[470])
define(engage$recurrence        ,IBB[471])
define(sosus$recurrence         ,IBB[472])
define(swabs$recurrence         ,IBB[473])
define(survsat$recurrence       ,IBB[474])
define(rothr$recurrence         ,IBB[475])
define(comms$recurrence         ,IBB[476])
define(message$recurrence       ,IBB[477])
define(mad$recurrence           ,IBB[478])
define(lidar$recurrence         ,IBB[479])
define(PassiveSon$recurrence    ,IBB[480])

define(Motion$LastExecuteTime   ,FBB[481])
define(Flight$LastExecuteTime   ,FBB[482])
define(Rej$LastExecuteTime      ,FBB[483])
define(ActiveSonar$LastExecuteTime,FBB[484])
define(Eoir$LastExecuteTime     ,FBB[485])
define(Visual$LastExecuteTime   ,FBB[486])
define(Engage$LastExecuteTime   ,FBB[487])
define(Sosus$LastExecuteTime    ,FBB[488])   
define(Swabs$LastExecuteTime    ,FBB[489])  
define(Survsat$LastExecuteTime  ,FBB[490])
define(Rothr$LastExecuteTime    ,FBB[491])
define(Comms$LastExecuteTime    ,FBB[492])
define(Message$LastExecuteTime  ,FBB[493])
define(Mad$LastExecuteTime      ,FBB[494])
define(Lidar$LastExecuteTime    ,FBB[495]) 
define(PassiveSon$LastExecuteTime,FBB[496]) 
define(Ir$LastExecuteTime       ,FBB[497])
define(Average$game$rate        ,FBB[498]) ## Average cycle$game$rate
define(cycle$time                ,IBB[499])
define(Last$Time$between$Records ,FBB[500]) ## Last time PGA collected RECORDS-JFR 1/13/94 for VTS PGA
define(Test$Mode                ,IBB[501]) ## $ON if simulation in test mode
define(Fixed$RandomValue        ,FBB[502]) ## Value returned by random & random2

define(AEGIS$First$Free        ,IBB[503]) ## Indx to 1st free AEG slot SMM 11/93
define(Blue$adSAM$count        ,IBB[504]) ## for advanced SAM naming SMM 12/93
define(Orange$adSAM$count      ,IBB[505]) ## for advanced SAM naming SMM 12/93
define(ADS$First$Free          ,IBB[506]) ## indx to 1st free ADS slot SMM 1/94
define(MaxADSslots$per$view    ,IBB[507]) ## max ADS slots per view SMM 1/94
define(Start$Time              ,Start$Year) ## Start$Time is 5 element array beginning with START$YEAR
define(Start$Year              ,FBB[508]) ## Simulation year that simulation started
define(Start$Month             ,FBB[509]) ## Simulation year that simulation started
define(Start$Day               ,FBB[510]) ## Simulation year that simulation started
define(Start$Hour              ,FBB[511]) ## Simulation year that simulation started
define(Start$Minute            ,FBB[512]) ## Simulation year that simulation started
define(Orders$LastExecuteTime  ,FBB[513]) ## Last time order processing model executed
define(terrain_masking_flag    ,IBB[514]) ## ON means detection models use terrain
define(shoreline_crossing_flag ,IBB[515]) ## ON means LAND and WATER unit are
                                          ## checked for crossing shoreline

define(GunvsCM$Factor          ,IBB[516]) ## gun vs CM degradation factor SMM 6/94
define(ReportC2Data            ,IBB[517]) ## Flag tripped when it is time to report
                                          ## data collected for WPC C2 System.  clk 10/94
define(TMS$Recording           ,IBB[518]) # flag to indicate TMS participation - clk 7/95 (E1419)
define(TMS$Data$Available      ,IBB[519]) # flag to indicate that data has been recorded - clk 7/95 (E1419)

define(JTMD$Participating$Game ,IBB[520]) # flag for if JTMD models are to be used - clk 3/96 (E1561)
define(JTMD$LastExecuteTime    ,FBB[521]) # records time when JTMD models last executed

define(DIS$Entity_Id$Count     ,IBB[522]) # Last assigned DIS Entity Id (3rd part of DIS Id) - clk 5/96 (E1498)
define(RTU$JTMDLog$ReadCount   ,IBB[523]) # Number of contacts read from the JTMD Contact Report Log File - clk 5/96 (E1498)

define(CEC$Interface$State     ,IBB[524]) # flag for RESA - CEC Model Interface - clk 10/96 (E1695)

define(ShipFuelConsumption$Flag,IBB[525]) ## On means surface ships burn fuel - joa 2/96 (E1467)
define(AirFuelConsumption$Flag ,IBB[526]) ## On means aircraft,helos burn fuel - joa 2/96 (E1467)
define(BoatFuelConsumption$Flag,IBB[527]) ## On means boats burn fuel - joa 2/96 (E1467)
define(ALSP$BlueAirSupportGhost$View,IBB[528]) ## view for blue airsupport ghosts JOA 9/09 (E2304)
define(Max$DAC$CruiseMissile   ,IBB[529]) ## num of CMs allowed in DAC table SMM 1/96
define(DAC$CruiseMissile$Number,IBB[530]) ## num of CM stored in DAC table SMM 1/96
define(Simultaneous$Ghosts     ,IBB[531]) ## maximum simultaneous Ghosted Tracks/Units dew 10/99 (E2160)
define(Number$Track$Alloc      ,IBB[532]) ## number tracks that can be allocated 100-65000  dew (E2172)
define(ALSP$Review             ,IBB[533]) ## yes means process alsp log 
define(AutoEngageTBM$Flag      ,IBB[534]) ## yes means SAM automatically engage TBM
define(AutoEngageAircraft$Rng  ,IBB[535]) ## Range where aircraft over land are automatically engaed.
define(BoatSystemFailure$Flag  ,IBB[536]) ## On means process boat system failure joa 9/02 (E2306)
define(AircraftSystemFailure$Flag,IBB[537]) ## On means process aircraft system failure joa 9/02 (E2306)
define(AircraftMaintenance$Flag,IBB[538]) ## On means process aircraft maintenance joa 9/02 (E2306)
# 539 available
define(JQUAD$FEED              ,IBB[540]) ## yes means start jquad feed [prod.jquad] 
define(ALSP$LOGGING            ,IBB[541]) ## On means write alsp log
define(Neutral$Sonobuoy$Count  ,IBB[542])
define(Blue$Sonobuoy$Count     ,IBB[543])
define(Orange$Sonobuoy$Count   ,IBB[544])
define(Neutral$Commbuoy$Count  ,IBB[545])
define(Blue$Commbuoy$Count     ,IBB[546])
define(Orange$Commbuoy$Count   ,IBB[547])
define(Neutral$Chaff$Count     ,IBB[548])
define(Blue$Chaff$Count        ,IBB[549])
define(Orange$Chaff$Count      ,IBB[550])
define(Neutral$PassiveBarrier$Count ,IBB[551])
define(Blue$PassiveBarrier$Count    ,IBB[552])
define(Orange$PassiveBarrier$Count  ,IBB[553])
define(Neutral$TowedArray$Count,IBB[554])
define(Blue$TowedArray$Count   ,IBB[555])
define(Orange$TowedArray$Count ,IBB[556])
define(Neutral$VDS$Count       ,IBB[557])
define(Blue$VDS$Count          ,IBB[558])
define(Orange$VDS$Count        ,IBB[559])
define(AlspActor$Number         ,IBB[560])
define(AlspConfederation$Number ,IBB[561])
#define($PRESCRIPT$EF$RESA_wakeup,IBB[562])
define($swar_wakeup            ,IBB[562])
define(current_ord$pointer     ,IBB[563])   # zero if not in order processing
define(ALSP$CORID$Count        ,IBB[564])   # current ALSP correlation id number
define(BASE$PORT               ,IBB[565])   # 10000 to 29000, thousands only
                                            # user enters as 10 - 29


#----------------------------------------------------------------------
# All skip and trace variables are from the following points in IBB

define ($first$skip,800)
define ($first$trace,900)

#----------------------------------------------------------------------
# This macro defines four macros each time it is invoked....
# For example:              define$skip$trace (bbtrim     ,1)
# generates the following:  define ($$skip$bbtrim,801)
#                           define ($$trace$bbtrim,901)
#                           define (skip$bbtrim,ibb[801])
#                           define (trace$bbtrim,ibb[901])
 
define (define$skip$trace,
    arith (def,:,ine($$skip$@1,arith(@2,+,$first$skip)))
    arith (def,:,ine($$trace$@1,arith(@2,+,$first$trace)))
    arith (def,:,ine(skip$@1,ibb[$$skip$@1]))
    arith (def,:,ine(trace$@1,ibb[$$trace$@1]))
    )
# Note:  The arith operator ':' will remove spaces, and re-process the line

define$skip$trace (bbtrim       ,1)
define$skip$trace (bistatic     ,2)
define$skip$trace (boatops      ,3)
define$skip$trace (comm         ,4)
define$skip$trace (comms_jamming,5)
define$skip$trace (corlat       ,6)
define$skip$trace (cpu          ,7)
define$skip$trace (damage       ,8)
define$skip$trace (datacollect  ,9)
define$skip$trace (detect       ,10)
define$skip$trace (emi          ,11)
define$skip$trace (engage       ,12)
define$skip$trace (eoir         ,13)
define$skip$trace (ir           ,13)                   # clf 8/18/92
define$skip$trace (exmsgs       ,14)
define$skip$trace (extract      ,15)
define$skip$trace (failure      ,16)
define$skip$trace (fltops       ,17)
define$skip$trace (hfdf         ,18)
define$skip$trace (iff          ,19)
define$skip$trace (intemi       ,20)
define$skip$trace (lidar        ,21)
define$skip$trace (mad          ,22)
define$skip$trace (minefields   ,23)
define$skip$trace (motion       ,24)
define$skip$trace (parallel     ,25)
define$skip$trace (radar        ,26)
define$skip$trace (reconn       ,27)
define$skip$trace (record       ,28)
define$skip$trace (remove       ,29)
define$skip$trace (reporting    ,30)
define$skip$trace (repout       ,31)
define$skip$trace (rothr        ,32)
define$skip$trace (saves        ,33)
define$skip$trace (smarttorp    ,34)
define$skip$trace (sonar        ,35)
define$skip$trace (sosus        ,36)
define$skip$trace (survsat      ,37)
define$skip$trace (swabs        ,38)
define$skip$trace (urb          ,39)
define$skip$trace (visual       ,40)
define$skip$trace (wgordp       ,41)
define$skip$trace (random       ,42)
define$skip$trace (jecewsi      ,43) # For jecewsi testing messages - JFR 11/23/94
define$skip$trace (lcldel       ,44) # next 3 were never defined and caused 
define$skip$trace (dummy        ,45) # error messages when compiling SMM 2/95
define$skip$trace (update       ,46)
define$skip$trace (jtmd_models  ,47)


# ^^^ Insert new Skip/Trace names above this line.... ^^^

#------------------------------------------------------------
# The following macros are for backward compatability (and are phasing out)

define(skip$MOTMAN             ,skip$motion)
define(skip$FAILUR             ,skip$failure)
define(skip$SONMOD             ,skip$sonar)
define(skip$REJMOD             ,skip$radar)
define(skip$VISMOD             ,skip$visual)
define(skip$SATMOD             ,skip$survsat)
define(skip$COMMOD             ,skip$comm)
define(skip$SAVFOR             ,skip$saves)
define(skip$HFDMOD             ,skip$hfdf)
define(skip$SOSMOD             ,skip$sosus)
define(skip$REPIN              ,skip$reporting)

#------------------------------------------------------------

define($$$$LastTable,IBB[$$BB$BeginTables-1])   # used by BBTEST


# Section 5 Constants

# Table 0.0          Global time and distance constants
define ($sec$to$min         ,(1./60.))
define (min$to$sec          ,60)
define ($Seconds$Per$Minute ,60.)
define ($Seconds$Per$Hour   ,3600.)
define ($Seconds$Per$Day    ,86400.)
define ($Minutes$Per$Millisecond,(1./(60.*1000.)))
define ($Minutes$Per$Second ,(1./60.))
define ($Minutes$Per$Hour   ,60.)
define ($Minutes$Per$Day    ,1440.)
define ($Hours$Per$Day      ,24.)
define ($Hours$Per$Minute   ,(1./60.))
define ($Hours$Per$Second   ,(1./3600.))
define ($Days$Per$Hour      ,(1./24.))
define ($Days$Per$Minute    ,(1./(24.*60.)))
define ($Feet$Per$Nmi       ,6076.115)

define ($Nmi$Per$Degree     ,60)

# Table 1.0          LCL or RMT$DETECTIONTYPE$I

define($ActiveVisual$Code,0)           # Type                 # smn002
define($ActiveNonVisual$Code,1)        # Type                 # smn002
define($PassiveSonar$Code,2)           # Type                 # smn002
##define($ESM$Code,3)     # VALID here; defined in Ident, below )
#define($Visual$Code,4)   #    $Visual$Code is not used

# Table 1.0.1        LCL$LastDetType$I RMT$LastDetType$I, LDX$LastDetType$I

define($Radar$Type      ,1)     # $Type suffixes are used here to avoid
define($Sonar$Type      ,2)     # conflict with the other "code"s below
define($Mad$Type        ,3)
define($Visual$Type     ,4)
define($Lidar$Type      ,5)
define($Bistatic$Type   ,6)     # 7/3/91
define($LFASteal$Type   ,7)     # 7/12/91 clk
define($EOIR$Type       ,8)     # jb  5/7/92
define($IR$Type         ,8)     # clf 8/18/92
define($ISAR$Type       ,9)     # DEW 5/7/92
define($HFDF$Type      ,10)     # SMM 10/92     PER #H1063    
define($SURVSAT$Type   ,11)     # PER #H1063   defined here for use in HSDET
define($ROTHR$Type     ,12)     # PER #h1063   defined here for use in HSDET

# Table 1.1          DEQ$IDENT$I
                     # I = (jam$category$i)  JFR 8/2/94

define($Null$Code,0)                   # Ident
define($Radar$Code,1)                  # Ident
define($Sonar$Code,2)                  # Ident
define($ESM$Code,3)                    # Ident & Type
define($Jammer$Code,4)                 # Ident
define($CruiseMissile$Code,5)          # Ident
define($AAM$Code,6)                    #   " (etc...)
define($ASM$Code,7)
define($SAM$Code,8)
define($Commbuoy$Code,9)
define($Sonobuoy$Code,10)
define($Mine$Code,11)
define($Bomb$Code,12)
define($Torpedo$Code,13)
define($CommSuite$Code,14)
define($Wire$Code,15)
define($Wbuoy$Code,16)
define($RBOC$Code,17)
define($DECM$Code,18)
define($Blip$Code,19)
define($Aircraft$Code,20)
define($NavSensor$Code,21)
define($CIWS$Code,22)
define($AcousticComm$Code,23)
define($PasSonar$Code,24)
define($TowedArray$Code,25)
define($VDS$Code,26)
define($ActiveBarrier$Code,27)
define($PassiveBarrier$Code,28)
define($HFDF$Code,29)
define($Gun$Code,30)
define($CommunicationJammer$Code,31)               # ggg 12/14/87 ( I - JFR 8/8/94 for jewcewsi)
define($Fuel$Code,32)                              # dew 3/17/89
define($BOAT$Code,33)                              # jb shc$eq$ident 5/8/89
define($GND$Code,34)        # jb GND:  EQPT,VEHIC,WEAP,PERS         11/8/89
define($EOIR$code,35)                              # reh 2/2/90
define($IR$code,35)                                # clf 8/18/92
define($SmartTorpedo$Code,36)                      #    4/18/90
define($Countermeasure$Code,37)                    #    4/19/90
define($CHAFF$Code,38)                             # jb  7/9/90   
define($MAD$Code,39)                               # SMM CLK 1/9/91
define($LIDAR$Code,40)                             # smm clk 2/7/91
define($IFF$Code,41)                               # cml 3/12/91
define($SSM$Code,42)                               # jfr 7/8/91
define($HHM$Code,43)                               # jfr 7/8/91
define($vehicle$code,44)                           # jfr 7/8/91
define($mogas$code,45)                             # jfr 7/8/91
define($diesal$code,46)                            # jfr 7/8/91
define($otherfuel$code,47)                         # jfr 7/8/91
define($ASMD$Code,48)                              # jms 4/20/93
define($AdvancedSAM$Code,49)                       # smm - improved air defense model
define($RadComJammer$code,50)                      # (I) JFR 8/2/94 for jecewsi
define($RadarJammer$code,51)                       # (I) JFR 8/2/94 for jecewsi
define($TV$code,999)                               # clf 1/12/93


# Table 2.0             # a)MRK$TYPE$I, a)RMT$TARGETID$I, a)LCL$TARGETID$I,
                        # a)PND$TARGETID$I,  & b)VUE$PLOTTYPE$I

define($Neutral$Code, 0)        #  a   b (Blue/Orange)
define($Friendly$Code,1)        #  a   b (Blue/Orange)
define($Enemy$Code,   2)        #  a   b (Blue/Orange)
define($Unknown$Code, 3)        #  a   b (Blue/Orange)
define($Other$Code,   4)        #      b (Blue/Orange)
define($Own$Code,     5)        #      b (all)
define($All$Code,     6)        #      b (all)
define($Blue$Code,    1)        #      b (Control)
define($Orange$Code,  2)        #      b (Control)
define($red$code,     7)        #  JFR 10/29/91

# Table 3.0             # A = (unt$type$i, own$type$i, arc$unittype)
                        # B = (lcl$Class$i, rmt$Class$i)
                        # C = (rad$radartype$i)
                        # D = (nuc burst, forwarded to NDtar$Burst$i)
                        # E = (sta$PlotEsm)             6/18/86
                        # F = (tor$targetCode$i - new improved torpedo model)
                        # G = (iff$function$i)   cml 3/12/91
                        # H = (mfd$targettype$I)
                        # I = (DAC$CLASSID$I) - JFR 10/7/93 (for BDA codes)

define($Null$Code               ,0)             # A, B, C,        E     
define($TRANSPONDER$Code        ,0)             #                   G
define($INTERROGATOR$Code       ,1)             #                   G
define($Air$Code                ,1)             # A, B, C, D, E
define($ShipAndSub$Code         ,1)             # F, H
define($Sub$Code                ,2)             # A, B, F, H
define($SubSurface$Code         ,2)             #              D
##define($Ship$Code             ,2)             # A1    (formerly DYN)
define($Surface$Code            ,3)             # A, B, C,     D, E, H
define($SamSite$Code            ,3)             # A        #    4/12/84
define($SurfaceWithAC$Code      ,4)             # A     (to be Removed DEW)
define($BDA$ESMcode             ,4)             # I # JFR 10/7/93 (E1104)
define ($SatIr$code             ,4)             #       C                    Infrared survsat AV 6/93
define($BDA$SonarCode           ,5)             # I # JFR 10/7/93 (E1104)
define($CruiseMissile$Code      ,5)             # A,    C
define($All$Code                ,6)             #
define($Shorebase$Code          ,7)             # A
define($AirBase$Code            ,7)             # A, B, C  #    4/12/84
define($PIM$Code                ,8)             # A
define($Bearing$Code            ,8)             #
define($CommBuoy$Code           ,9)             #
define($SonoBuoy$Code           ,10)            #
define($FireControl$Code        ,11)            # C
define($Approach$Code           ,12)            # C  1/6/86 <SCC>
define($LandingZone$Code        ,13)            # A

# the following codes may be added for JC3S integration  (DEW 7/22/91)
define($ground$code             ,14)            # JFR 7/8/91
define($site$code               ,15)            # JFR 7/10/91
define($Mechanized$code         ,16)            # JFR 7/17/91
define($AirDefense$code         ,17)            # JFR 7/17/91
define($Armor$code              ,18)            # JFR 7/17/91
define($Reconnaissance$code     ,19)            # JFR 7/17/91
define($Medical$code            ,20)            # JFR 7/17/91
define($AT$code                 ,21)            # JFR 7/17/91
define($Signal$code             ,22)            # JFR 7/17/91
define($Engineering$code        ,23)            # JFR 7/17/91
define($Maintenance$code        ,24)            # JFR 7/17/91
define($Artillery$code          ,25)            # JFR 7/17/91
define($Transportation$code     ,26)            # JFR 7/17/91
define($Chemical$code           ,27)            # JFR 7/17/91
define($SSbattery$code          ,28)            # JFR 7/17/91
define($Service$code            ,29)            # JFR 7/17/91
define($RocketLauncher$code     ,30)            # JFR 7/17/91
define($Infantry$code           ,31)            # JFR 7/17/91

define($SAMissile$Code          ,32)    # SMM 12/93 advanced SAM

# Table 3.0.1                   # unt$formation$i

define($onroad$formation,1)           # JFR 7/8/91
define($column$formation,2)           # JFR 7/8/91  
define($line$formation,3)             # JFR 7/8/91
define($wedge$formation,4)            # JFR 7/8/91
define($vee$formation,5)              # JFR 7/8/91
define($circle$formation,6)           # JFR 7/8/91
define($echelonleft$formation,7)      # JFR 7/8/91
define($echelonright$formation,8)     # JFR 7/8/91

# Table 3.0.2                   # arc$UnitSize$i

define($Division$code         ,1)  # JFR 7/17/91
define($DivisionHQ$code       ,2)  # JFR 7/17/91
define($Brigade$code          ,3)  # JFR 7/17/91
define($BrigadeHQ$code        ,4)  # JFR 7/17/91
define($Regiment$code         ,5)  # JFR 7/17/91
define($RegimentHQ$code       ,6)  # JFR 7/17/91
define($Battalion$code        ,7)  # JFR 7/17/91
define($BattalionHQ$code      ,8)  # JFR 7/17/91
define($Company$code          ,9)  # JFR 7/17/91
define($CompanyHQ$code        ,10)  # JFR 7/17/91
define($Platoon$code          ,11)  # JFR 7/17/91
define($Squad$code            ,12)  # JFR 7/17/91


# Table 3.1                     # lcl$ClassScore$i, rmt$ClassScore$i

define($Null$Code       ,0)             #
define($POSSB$Code      ,1)             #             7/13/83
define($PROBSB$Code     ,2)             #             7/13/83
define($SonFP1$Code      ,3)            # SonFngrprnt 7/13/83   (E1142)
define($SonFP2$Code     ,4)             # 2 fingerprints held - JFR 5/10/93
define($SonFP3$Code     ,5)             # 3 fingerprints held - JFR 5/10/93
define($SonFP4$Code     ,6)             # 4 fingerprints held - JFR 5/10/93

# Table 3.2                     # SUI$SelectivityCode$i, RAD$SelectivityCode$i

define($Average_Selectivity$Code     ,0)
define($Poor_Selectivity$Code        ,1)
define($Good_Selectivity$Code        ,2)
define($Excellent_Selectivity$Code   ,3)

# Table 3.2.2                   # SUI$TransmissionType$i 6/90
define($DigitalVoice$Code,1)
define($AnalogVoice$Code,2)
define($DigitalData$Code,3)
define($AnalogData$Code,4)

# Table 3.2.3           # SUI$DeviceType$i   4/91
define($FrequencyHopper,1)
define($FixedMode,2)

# Table 3.2.4           # SUI$EMIFlag$i   4/91
define($nonBEESProcessing,0)     
define($BEESProcessing,1) 

# Table 3.3                     # unt$SubType$I    4/30/90

# Subtypes of Surface Units are:
define($Standard$SubCode           ,0)
define($SmallBoat$SubCode          ,1)

# Subtypes for aircraft are:
define($Standard$SubCode           ,0)
define($Helo$SubCode               ,1)

# Subtypes of Submarine Units are:
define($Standard$SubCode           ,0)
define($Torpedo$SubCode            ,1)
define($CtrMeasure$SubCode         ,2)
define($FalseContact$SubCode       ,3)    # jb    12/18/90
define($MarkerSub$SubCode          ,4)    # clk 1/94 - for "ZZ" subs

# Subtypes of Sites are:
define($HideSite$SubCode           ,4)    # khc   06/11/92

# Table 3.4                     # unt$SuperType$I    5/1/90

define ($SuperType,ishft(@1,3))    # This is the width of the UNT$SubType field

define ($Surface$SuperCode    ,($SuperType($Surface$code) ) )
define ($SmallBoat$SuperCode  ,($SuperType($Surface$code) + $SmallBoat$SubCode))

define ($Submarine$SuperCode  ,($SuperType($Sub$code) ) )
define ($Torpedo$SuperCode    ,($SuperType($Sub$code) + $Torpedo$SubCode))
define ($CtrMeasure$SuperCode ,($SuperType($Sub$code) + $CtrMeasure$SubCode))
define($FalseContact$SuperCode,($SuperType($Sub$code) +$FalseContact$SubCode))
define($MarkerSub$SuperCode   ,($SuperType($Sub$code) + $MarkerSub$SubCode))   # clk 1/94

define ($FixedWing$SuperCode     ,($SuperType($Air$code)))                  # joa 2/96 (E1467)
define ($Helo$SuperCode          ,($SuperType($Air$code) + $Helo$SubCode))  # joa 2/96 (E1467)

# Table 4.1

define($Near$Code,0)
define($Far$Code,1)

define($Passive$Code,0)
define($Active$Code,1)

define($Old$Code,0)
define($Current$Code,1)

define($DontRogerMsg$Code,0)
define($RogerMsg$Code,1)

define($Circle$Code,0)
define($XMark$Code,1)
define($Grid$Code,2)
define($CIRNUC$Code,3)
define($RECTANGLE$Code,4)                       # jb    6/30/87
define($BistaticEllipse$Code,5)                     # cml 8/13/91



# EMI constants                                 # reh 5/16/89

define($number$EMI$harmonics,8)
define($number$EMI$channels,10)
define($Max$EMI$granularity,8)
define($EMI$CullLevel,-15)
define($EMI$Max$TimeSlice,8)
define($Percent$Freq$Separation,1)              # + or - % frequency
define($IM$Negligible,-500)                     # very low interference margin
define($EMI$Null$dBm,-256)                      # very small interfering signal

define($MainBeam$OffTune$WidthCorrection, 1.5 ) 
        # correction to beamwidth for Off-Tune Frequency condition

define($OffBeam$OffTune$GainCorrection, 5)
        # correction to antenna gain for off beam/Off-Tune Frequency condition

define($default$Rx$Sensitivity,-80)


###   device modulation types, used in table look-up  ###  9/13/89
                                # Pg. 8.17, EIC Volume 5 - Modulation Types:
define($AM$Pulse,1)                        # A1
define($AM$Pulse$Freq$Shift$Key,2)         # A2
define($AM$Voice$1,3)                      # A3 (Ms = 0.3)
define($AM$Voice$2,4)                      # A3 (Ms = 0.5)
define($DoubleSideBand$Analog,5)           # A3B
define($SingleSideBand$Analog,6)           # AJ
define($AM$FAX$1,7)                        # A4
define($TV$Video,8)                        # A5C
define($AM$Analog,9)                       # A9
define($FreqShiftKey$Pulse,10)             # F1
define($FM$Pulse$Freq$Shift$Key,11)        # F2
define($FM$Voice$1,12)                     # F3 (Bs = 1)
define($FM$Voice$2,13)                     # F3 (Bs = 5)
define($AM$FAX$2,14)                       # A4 (Note: F4 ignored)
define($FreqDiv$MPX,15)                    # F9 (Multiplex)
define($PulseMod$Analog,16)                # F9 (Analog)
define($Pulse$WideBand,17)                 # P0
define($Pulse$AM,18)                       # P9D
define($Pulse$Width$Mod,19)                # P9E
define($Pulse$Position$Mod,20)             # P9F
define($Pulse$Compression,21)              # P9G
define($Matched$Filter,22)                 # P9 (Filter)
define($Phase$Lock,23)                     # P9 (Phase)

#$% used to size the performance threshold table
define($Last$Modulation,23)

###       end device modulation types          ###

# code values for EMI$Phasing$Mode      # used in power summing EMI

define($EMI$Worst,0)                    # worst single EMI source
define($EMI$RMS,1)                      # EMI root mean square power
define($EMI$InPhase,2)                  # all emi sources in phase

# end EMI constants
#------------------------------------------------------------

define($Diesel$Code,0)
define($Electric$Code,1)
define($Nuclear$Code,2)

define($Text$Code,0)                # Coded values for SEND (2nd Argument)
define($Lex$Code,1)
define($Comm$Code,2)


# Table 4.2

define($idle,0)
define($busy,1)

define($No,0)
define($Yes,1)
define($default,2)

define($Off,0)
define($On,1)

define($False,0)
define($True,1)

define($Nak,0)
define($Ack,1)


define($idle$code,0)
define($busy$code,1)

define($No$Code,0)
define($Yes$Code,1)

define($Off$Code,0)
define($On$Code,1)

define($Old$Code,0)
define($New$Code,1)

define($False$Code,0)
define($True$Code,1)


# Table 5.1             # CMC$SEEKERTYPE$I

define($RadESM$Code,0)
define($Radar$Code,1)
define ($MissIr$Code,2)   # Advanced cruise missile with IR seeker type
##define($ESM$Code,3)     # ( defined in table 1.0 above )


# Table 5.11            # CMC$CAT$I

define ($Cruz$Code,1)
define ($Ball$Code,2)
define ($Adcru$Code,3)
define ($NewSAM$Code,4)  # SMM 12/93 



# Table 5.2             # UNT$REPORTINGPOLICY$I

define($NoRpts$Code,0)
define($RptSurface$Code,1)
define($RptSub$Code,2)
define($RptSonar$Code,3)
define($RptAir$Code,4)
define($RptRadar$Code,5)
define($RptESM$Code,6)
define($RptAllSensors$Code,7)


# Table 5.3             # UNT$RULESOFENGAGE$I

define($IfAttacked$Code,0)
define($AllEnemy$Code,1)
define($AirEnemy$Code,2)
define($SurfaceEnemy$Code,3)
define($SubEnemy$Code,4)
define($SpecTarget$Code,5)
define($AllNonFriendly$Code,6)
define($AirNonFriendly$Code,7)
define($SurfaceNonFriendly$Code,8)
define($SubNonFriendly$Code,9)
define($GndNonFriendly$Code,10)
define($GndEnemy$Code,11)

# Table 5.4             # NAV$DEVICE$I

define($HeadingSensor$Code,1)
define($SpeedSensor$Code,2)
define($DR$Code,3)
define($Omega$Code,4)
define($Trans$Code,5)
define($OmegaTran$Code,6)


# Table 5.5             # UNT$MISSION$I

define($NoneAssigned$Code,0)
define($Strike$Code,1)
define($Cap$Code,2)
define($SurveillanceCap$Code,3)
define($StrikeCap$Code,4)
define($AEW$Code,5)
define($AntiSub$Code,6)
define($Reconn$Code,7)
define($AirTanker$Code,8)
define($Rescue$Code,9)
define($Decoy$Code,10)
define($CommRelay$Code,11)
define($Surv$Code,12)
define($Jam$Code,13)                    # note: left as JAM vice STJAM
define($Search$Code,14)
define($EW$Code,15)                     # jb                    9/30/86
define($STtanker$Code,16)               # jb                    9/30/86
define($Amphib$Code,17)                 # jb                    7/20/89
define($HastyAttack$code,18)            # JFR 10/16/91
define($DirectAttack$code,19)           # JFR 10/16/91
define($withdraw$code,20)               # JFR 10/16/91
define($GunfireSupport$code,21)         # JFR 10/16/91
define($TacticalMarch$code,22)          # JFR 10/16/91
define($CrossCountryMarch$code,23)      # JFR 10/16/91
define($Defend$code,24)                 # JFR 10/16/91
define($Hold$code,25)                   # JFR 10/16/91
define($Retrgrade$code,26)              # JFR 10/16/91
define($guard$code,27)                  # JFR 10/16/91
define($RecconInForce$code,28)          # JFR 10/16/91
define($Screen$code,29)                 # JFR 10/16/91
define($AirDefense$code,30)             # clk 3/92  air-to-air upgrade
define($AirInteraction$code,31)         # clk 3/92  air-to-air upgrade
define($Airlift$code,32)                # clk 3/92  air-to-air upgrade
define($BattleFieldAirInteraction$code,33) # clk 3/92  air-to-air upgrade
define($CloseAirSupport$code,34)        # clk 3/92  air-to-air upgrade
define($Escort$Code,35)                 # clk 3/92  air-to-air upgrade
define($Ferry$Code,36)                  # clk 3/92  air-to-air upgrade
define($MaritimePatrol$Code,37)         # clk 3/92  air-to-air upgrade
define($OffensiveCounterAir$Code,38)    # clk 3/92  air-to-air upgrade
define($SpecialMission$Code,39)         # clk 3/92  air-to-air upgrade
define($Sweep$Code,40)                  # clk 3/92  air-to-air upgrade
define($Tasmo$Code,41)                  # clk 3/92  air-to-air upgrade
define($TacElecWar$Code,42)             # clk 3/92  air-to-air upgrade
define($WildWeasel$Code,43)             # clk 3/92  air-to-air upgrade
define($Commerce$Code,44)               # clk 12/96 (E1724) - for ships
define($SeaControl$Code,45)             # clk 12/96 (E1724) - for ships
define($SeaLift$Code,46)                # clk 12/96 (E1724) - for ships

# Table 5.6             # UNT$STATUS$I

#                                    Used for/by
define($BeingDeleted$Code,0)        # All units
define($Sinking$Code,1)             # Ships/Boats           6/5/89
define($OnStation$Code,2)           # All Units
define($Proceeding$Code,3)          # All Units

define($ACAwaitingLaunch$Code,4)    # Aircraft
define($AwaitingLaunch$Code,4)      # Aircraft/Boats        5/3/89

define($ACRefuel$Code,5)            # Aircraft

define($OnGuide$Code,6)             # All Units

define($Recovery$Code,7)            # Aircraft              6/5/89
define($ReturningToBase$Code,7)     # Aircraft/Boats        6/5/89


define($LayingBarrier$Code,8)       # Aircraft              7/28/87

define($Bingo$Code,9)               # Aircraft
define($ReadyToRecover$Code,9)      # Boats/Aircraft/etc.
define($Mooring$Code,9)             # Boats                 5/3/89
define($InRefuelQueue$Code,9)       # Ships - joa 2/96 (E1467)
define($AtRefuelStation$Code,9)     # Ships - joa 2/96 (E1467)

define($Fltops$Code,10)             # CV's

define($Loitering$Code,11)          # Aircraft              6/18/87

define($UnderTow$Code,12)           # Boats                 5/3/89
define($Towing$Code,13)             # Ships/Subs/Boats      6/1/89
define($DeadInWater$Code,14)        # Boats                 5/12/89
define($operational$code,15)        # also VML$status      JFR 7/8/91

define($Hiding$Code,16)             # hididng        7/92 KHC

define($ExecutingPlan$Code,17)      # executing an interactive plan 7/93
                                    # SMM PER #E1114

define($UnRep$Code,18)              # Ships  Underway replenishment - joa 2/96 (E1467)
define($ShipRefuel$Code,19)         # Ships (1st defined as 5, but caused problems
                                    # when unit type wasn't checked) - joa 2/96 (E1467)
define($InPort$Code,20)             # Ships - joa 2/96 (E1467) (Initially shared $Mooring$Code)

# Table 5.7             # MC$TYPE$I

define($AAM$Code,6)
define($ASM$Code,7)
define($SAM$Code,8)
define($CIWS$Code,22)


# Table 5.8

define($Techtronics$Code,1)
define($Conrac$Code,2)


# Table 5.9             # DEQ$ON$I; SON$MOD$Index  jb    11/27/90

define($Off,0)
define($On,1)
define($On$DP,1)
define($ON$BB,2)
define($ON$CZ,3)


# Table 5.10            # VOC$Message$i ALERTs  ( 8 bits ) 10/22/82

define($ACTalert$Code    ,1)
define($CASalert$Code    ,2)
define($BOGalert$Code    ,3)
define($PSalert$Code     ,4)
define($HITalert$Code    ,5)
define($INTELLalert$Code ,6)                            # 4/11/83
define($NUCBlast$Code    ,7)                            # 5/13/85


# Table 5.11            # VOC$WakeUp$i ALERTs  ( 8 bits ) 10/22/82

define($WU$TwoToneLong$Code  ,1)
define($WU$TwoToneMed$Code   ,2)
define($WU$TwoToneShort$Code ,3)
define($WU$HornetShort$Code  ,4)
define($WU$HornetLong$Code   ,5)
define($WU$FallShort$Code    ,6)
define($WU$FallLong$Code     ,7)
define($WU$WaaWaaShort$Code  ,8)
define($WU$WaaWaaLong$Code   ,9)
define($WU$SirenLong$Code    ,10)
define($WU$SirenShort$Code   ,11)
define($WU$ALERTlong$Code    ,12)
define($WU$ALERTshort$Code   ,13)
define($WU$NuclearBlast$Code ,14)


# Table 5.12            # UNT$Service$i (armed service association)

define($Navy$Code     ,0)
define($Army$Code     ,1)
define($AirForce$Code ,2)
define($Marines$Code  ,3)

# Table 5.13  # DEQ$gunflag$i gun assignment flag

define ($commence$guncode,0)
define ($posit$guncode,1)
define ($take$guncode,2)
define ($fired$guncode,3)

define ($first$guncode,0)
define ($Last$guncode,3)

# Table 5.14  # UNT$Stratum$i, above or below acoustic layer
define($Above$AcousticLayer,0)
define($Below$AcousticLayer,1)


# Table 6.0             # codes for the variable EXECUTION$MODE

define(New$Mode,0)             # don't you dare change any of
define(Continue$Mode,1)        # these names........
define(Review$Mode,2)
define(Restart$Mode,3)


# Table 6.1             # codes for the variable RECORD$STATUS$FLAG$I

define($First$Code,1)
define($Reit$Code,2)
define($Halt$Code,3)


# Table 6.2             # codes for the variables HISTORY$FILE$ERROR
                        #               and ENGAGE$FILE$ERROR

define($Null$Code,0)
define($Prevfile$Openerr,1)
define($Newfile$Openerr,2)
define($Prevfile$Eoferr,3)


# Table 6.3             # codes for COM$STATUS$I

define($BeingDeleted$Code,0)
define($DidntRoger$Code,1)
define($Received$Code,2)
define($OKToProcess$Code,3)
define($CantSend$code,5)


# Table 6.4             # codes for COM$TYPE$I, CTX$MessageType$i

define($Commtext$Code,1)
define($AutoRoger$Code,2)
define($PlayerOrder$Code,3)
define($Report$Code,4)
define($CommData$Code,5)


# Table 6.44            # codes for COM$DataType$i 4/91, reh
define($DataCommunication$Code,0)       # eg. Lat/Long
define($VoiceCommunication$Code,1)      # eg. player order
define($TextCommunication$Code,2)       # eg. Commtext

# Table 6.5             # codes for AML$STATUS$I, BML$STATUS$I
                        #                         /jb - 5/3/89
                            #  AML    BML
define($Destroyed$code,0)   #   X      X
define($InFlight$code,1)    #   X
define($UNDERWAY$code,1)    #          X
# define($Ready$code,1)
define($OnDeck$code,2)      #   X      X
define($Assigned$code,3)    #   X


# Table 6.6             # codes for ORD$STATUS$I

define($BeingDeleted$Code,0)
define($DidntRoger$Code,1)
define($InComm$Code,2)
define($NeedComm$Code,3)
define($Executable$Code,4)
define($CantSend$code,5)
define($Plan$Code,6)    # added for per #E1114 SMM


# Table 6.61             # codes for SWP$STATUS$I

define($InProgress$Code,1)
define($Complete$Code,2)


# Table 6.7             # codes for EMC$SIDE$I - Codes duplicate plottype
						# codes for sta$side$i

define($Neutral$Code,0)
define($Blue$Code,1)
define($Orange$Code,2)
define($Control$Code,3)			# Only used to setup control user, special neutral code

define($TechControl$Code,7)     # Only used to setup tech control user
                                # Special neutral code - joa 11/97 (E1825)



# Table 6.8             # codes for SUI$BAND$I

define($Land$Code,0)
define($LF$Code,1)
define($HF$Code,2)
define($HFLRI$Code,3)
define($UHF$Code,4)
define($VHF$Code,5)
define($VLF$Code,6)
define($Acous$Code,7)



# Table 6.9             # codes for SUI$TYPE$I

define($Transmitter$Code,1)
define($Receiver$Code,2)
define($Transceiver$Code,3)



# Table 6.10    # ACC$CATEGORY$I (A); ACC$DamageClass$i (D) 
#               #                 and SHC$DamageClass$i (S)

define($Jet$Code,0)     #       A
define($Prop$Code,1)    #       A
define($Helo$Code,2)    #       A

define($CV$Code,1)      #       S                                       
define($CG$Code,2)      #       S
define($DD$Code,3)      #       S
define($AUX$Code,4)     #       S
define($Submarine$Code,5) #     S                       #       4/1/85
define($Bomber$Code,6)  #       D
define($Fighter$Code,7) #       D
define($Copter$Code,8)  #       D

# Table 6.10.1          # codes for shc$domain$i

define ($AmphibOp$code,0);
define ($LandOp$code,1);
define ($WaterOp$code,2);

# Table 6.11            # codes for UNT$MARSHALLSTATUS$I

define($AwaitLaunch$Code,0)
define($InFlight$Code,1)
define($Launching$Code,2)
define($Recovering$Code,3)

# Related aircraft marshall constants (moved from wgmdflt.rat)
define(marshall$altitude,1000)
define(marshall$distance,5)


# Table 6.12            # codes for UNT$ENGAGESTATUS$I

define($NoEngagements$Code,0)
define($EngagementOver$Code,1)
define($Engaging$Code,2)



# Table 6.13            # codes for WET$CATEGORY$I

define($Clear$Code,0)
define($Fog$Code,1)
define($Rain$Code,2)
define($Haze$Code,3)



# Table 6.14            # codes for UNT$SYSFAILTYPE$I

define($NoSystemFailure$Code,0)
define($Recover$Code,1)
define($Crash$Code,2)



# Table 6.15            # codes for PND$MAST$I, PND$WIRE$I, PND$WIREBUOY$I
                                                                      #smn002
define($AllDown$code,0)
define($AllUp$code,1)
define($HalfDown$code,2)
define($HalfUp$code,3)




# Table 6.16            # codes for PND$STATUS$I, OWN$STATUS$I          

define($BING$status,0)
define($ENG$status,1)
define($ENR$status,2)
define($FUEL$status,3)
define($INT$status,4)
define($LNCH$status,5)
define($SINK$status,6)
define($STA$status,7)
define($FAIL$status,8)
define($FLT$status,9)
define($DIW$status,10)
define($TOW$status,11)
define($UTOW$status,12)
define($SRCH$status,13)
define($MSHL$status,14)
define($HIDE$status,15)         # khc 7/92
define($PLAN$status,16)         # SMM 7/93 PER #E1114
define($MOOR$status,17)         # joa - 2/96 (E1467)
define($IPT$status,18)          # joa - 2/96 (E1467)



# Table 6.17            # codes for PND$RecordType$I                  #smn002

define($Detection$code,  1)
define($Posit$code,      2)
define($Inventory$code,  3)
define($Barrier$code,    4)
define($OTH$code,        5)




# Table 6.18            # codes for LCL$ReportStatus$i, RCN$ReportStatus$i &
#                                   DAM$ReportStatus$i                #smn002

define($NeedsReport$code,   1)
define($ReportBegun$code,   2)
define($ReportSent$code,    3)
define($ReportReceived$code,4)




# Table 6.19            # codes for RPM$AddresseeType$I               #smn002

define($force$code,  1)
define($task$code,   2)
define($mission$code,3)




# Table 6.20            # codes for VUE$PlotSourceType$I              #smn002
#                       #         & PLC$ReferenceType$I               #smn002

define($True$code,      1)
define($OwnForce$code,  2)
define($OtherForce$code,3)

# Table 6.20a           # codes for UNT$CMFireMode$i     # 2/98 - joa (E1864)
define($CMBOL$code,  1)
define($CMRBL$code,  2)
define($CMPOS$code,  3)
define($CMBase$code, 4)


# Table 6.21            # codes for INV$EXP$Type$I                    #smn002

define($Null$code,  0)
define($ACNow$code, 1)
define($ACIn4$code, 2)
define($ACIn8$code, 3)
define($ACIn12$code,4)
define($NonAC$code, 5)
define($Expendable$code, 5)                     # AM    5/30/89
define($BoatUnderway$code, 6)                   # AM    5/30/89
define($BoatAvailable$code, 7)                  # AM    5/30/89
define($BoatResupply$code, 8)                   # AM    5/30/89
define($GroundObject$code, 9)                   # DEW   3/30/90
define($ACIn16$code,10)                         # AV    5/19/93 (E1018)
define($Maint$code, 11)                         # jb    4/29/87
define($VECnow$code,12)                         # JFR 10/30/91
define($VECin4$code,13)                         # JFR 10/30/91
define($VECin8$code,14)                         # JFR 10/30/91
define($VECin12$code,15)                        # JFR 10/30/91
#$% clk 1/94 - ACFlying and ACDestroyed were previously coded as 7 and 8
#$% this conflicted with boat codes.  Since the vehicle codes are not in
#$% use at this time, using codes 12 and 13.      (E1091)
define($AcFlying$Code,12)                       # AV    5/24/93 (E1018)
define($AcDestroyed$Code,13)                    # AV    5/24/93 (E1018)

#$% clk 1/94 - these codes are currently not in use...
#$% The type field will need to be increased whenever these codes
#$% are needed.
#define($VECnow$code,12)                         # JFR 10/30/91
#define($VECin4$code,13)                         # JFR 10/30/91
#define($VECin8$code,14)                         # JFR 10/30/91
#define($VECin12$code,15)                        # JFR 10/30/91

# Table 6.22            # codes for SBI$UpdateRequest$I

define($None$code,     0)
define($New$code,      1)
define($Continue$code, 2)
define($Find$code,     3)


# Table 6.23            # codes for SBI$ASTABType$I

define($VT100$code,    0)
define($Motorola$code, 1)
define($Ramtek$code,   2)
define($Omron$code,    3)
define($VT300$code,    4)
define($Xwindow$code,  5)



# Table 6.24            # codes for VUE$InputType$I

define($None$code,     0)
define($VoiceIn$code,  1) # Via 15 inch Monitor
define($JoyStick$code, 2)
define($Tablet$code,   3)
define($Touch15$code,  4) # 15 inch Touch Panel
define($Touch19$code,  5) # 19 inch Touch Panel


# Table 6.25            # codes for VUE$VoiceOutType$I

define($None$code,   0)
define($ECHO$code,   1) 
define($Votrax$code, 2)

# Table 6.26            # codes for SBI$ReqBoard$i, SBI$CurrBoard$i

define ($Track$Board          ,01)
define ($ActiveAir$Board      ,02)
define ($ActiveSurface$Board  ,03)
define ($ActiveSub$Board      ,04)
define ($AirAlert$Board       ,05)
define ($Availability$Board   ,06)
define ($AirEvents$Board      ,07)
define ($BogeyTote$Board      ,08)
define ($Damage$Board         ,09)
define ($Esm$Board            ,10)
define ($Flight$Board         ,11)
define ($Hfdf$Board           ,12)
define ($IntellReport$Board   ,13)
define ($PassiveSonar$Board   ,14)
define ($ReportPolicy$Board   ,15)
define ($Ship$Board           ,16)
define ($Shorebase$Board      ,17)
define ($Sosus$Board          ,18)
define ($Sub$Board            ,19)
define ($Survsat$Board        ,20)
define ($Weather$Board        ,21)
define ($Help$Board           ,22)
define ($AAWCFlight$Board     ,23)
define ($ASWCFlight$Board     ,24)
define ($ASUWCFlight$Board    ,25)
define ($AAWCEvents$Board     ,26)
define ($ASWCEvents$Board     ,27)
define ($ASUWCEvents$Board    ,28)
define ($EWCEvents$Board      ,29)              # jb            9/30/86
define ($EWCFlight$Board      ,30)              # jb            9/30/86
define ($SurfEsm$Board        ,31)              # jb vice 29    9/30/86
define ($AirEsm$Board         ,32)              # jb vice 30    9/30/86
define ($FOTCP$Board          ,33)              # jpk added 5/15/87
define ($FOTCS$Board          ,34)              # jpk added 11/10/87
#define ($NTDSAct$Board        ,35)              # jpk added 12/23/87
define ($AirMissionHist$Board ,35)              # clk 12/96 (E1724) - since NTDSAct$Board not used
#define ($NTDSPas$Board        ,36)              # jpk added 1/13/88
define ($AirDefenseSAM$Board  ,36)              # SMM changed 12/93
define ($BoatAvail$Board      ,37)              # am  added 5/17/89
define ($BoatOps$Board        ,38)              # am  added 5/17/89
define ($EMIstat$Board        ,39)              # am  added 6/20/89
define ($RxSignal$Board       ,40)              # am  added 6/20/89
define ($DefinedRoute$Board   ,41)              # reh 11/15/89
define ($Assault$Board        ,42)              # reh 12/6/89
define ($AmphibEvents$Board   ,43)              # dew 12/11/89
define ($AmphibFlight$Board   ,44)              # dew 12/11/89
define ($AmphibBoatOps$Board  ,45)              # dew 12/11/89
define ($EOIRtrack$Board      ,46)              # dew 3/5/90
define ($Rothr$Board          ,47)              # CL 2/8/90
define ($Extension$Board      ,48)              # DEW 3/7/91
define ($SPA$Board            ,49)              # jb  10/23/91
# JFR --- joint status boards - 10/16/91
define ($ActiveUnit$Board     ,50)              # JFR 10/16/91
define ($AirDefense$Board     ,51)              # JFR 10/16/91
define ($Armor$Board          ,52)              # JFR 10/16/91
define ($Artillery$Board      ,53)              # JFR 10/16/91
define ($Engineering$Board    ,54)              # JFR 10/16/91
define ($Infantry$Board       ,55)              # JFR 10/16/91
define ($Signal$Board         ,56)              # JFR 10/16/91
define ($VehicleAvail$Board   ,57)              # JFR 10/16/91
# JFR --- end joint status boards - 10/16/91
define ($DownedAircraft$Board ,58)              # clk 3/24/92 air-to-air upgrade
define ($NonRealTimeTrack$Board,59)             # SMM 12/92 PER#E1101
define ($MineField$Board      ,60)              # joa  4/22/95
define ($JTIDSTrack$Board     ,61)              # clk 11/95 (E1469)
define ($JTIDSAirTrack$Board  ,62)              # clk 12/95 (E1469)
define ($JTIDSLandTrack$Board ,63)              # clk 12/95 (E1469)
define ($JTIDSSurfTrack$Board ,64)              # clk 12/95 (E1469)
define ($CECTrack$Board       ,65)              # clk 10/96 (E1695)
define ($CECAirTrack$Board    ,66)              # clk 10/96 (E1695)
define ($CECLandTrack$Board   ,67)              # clk 10/96 (E1695)
define ($CECSurfTrack$Board   ,68)              # clk 10/96 (E1695)
define ($JTMDAirToGround$Board,69)              # clk  5/97 (E1791)
define ($AirBDA$Board         ,70)              # JFR 6/93  -  (E1104)
define ($ShipBDA$Board        ,71)              # JFR 6/93  -  (E1104)
define ($ShorebaseBDA$Board   ,72)              # JFR 6/93  -  (E1104)
define ($DamageTime$Board     ,73)
define ($ATO$Board            ,74)

# Table 6.27                    # codes for STA$MegMenuDisable$i

define ($Meg$Menus$Off,0)
define ($Meg$Menus$Part,1)
define ($Meg$Menus$Full,3)


# Table 6.28            # TMA-Quality Codes             6/28/83

#       ( note:  may use $Null$Code, above)
define ($TMA$Poor$Code,0)
define ($TMA$Fair$Code,1)
define ($TMA$Good$Code,2)

# Table 6.29            # codes for STA$GeoType$i
# Carol Kropp - 4/94:   Drop old graphics MegaTek, RamTek and CPM
# Carol Kropp - 12/96:  Removed old graphics VT125, TK4100, and TK4200,
#                       changing constant value of XWindow to 1.  (E1723)
define ($Geo$xWindow      ,1)
define ($Geo$MapDrawModule,2)    # joa 7/96 (E1602)

# Table 6.291           # codes for STA$Symbology$I - joa 7/96 (E1602)
define ($NTDS$Symbology     ,1)
define ($TopView$Symbology  ,2)
define ($SideView$Symbology ,3)

define ($MMIDefaultSymbology,$NTDS$Symbology)

# Table 6.30            # codes for STA$PlotInputRequest$i

define ($PIR$None     ,0)
define ($PIR$Position ,1)
define ($PIR$Force    ,2)
define ($PIR$Track    ,3)
define ($PIR$Unit     ,4)
define ($PIR$Ground   ,5)

# Table 6.301          #  codes for STA$CoordinateSystem$i   # JFR 10/29/91

define ($UTM$CODE     ,1)   # JFR 11/13/91
define ($LATITUDE$CODE,0)   # JFR 11/13/91

# Table 6.302          # codes for STA$Trk$TrackType$I    # khc 12/92
define($SurvSat$PlotCode, 0)                              # (E1066)
define($HFDF$PlotCode,    1)
define($Swabs$PlotCode,   2)
define($Sosus$PlotCode,   3)

# Table 6.303          # codes for SSC$SATSENSOR$I        # AV 6/6/93
define ($Radar$Sensor, 1)
define ($Esm$Sensor, 2)
define ($IR$Sensor, 3)

# Table 6.31           # nam$Type$i  (Misc Names)
# removed references to search plans, contingency plans, and action plans
# for per #E1114 SMM

define($Name$Unit        ,1)
define($Name$BlueSearch  ,2)    # Search Plans
define($Name$OrangeSearch,3)
define($Name$BlueCont    ,4)    # Contingency Plans
define($Name$OrangeCont  ,5)
define($Name$AirEvent    ,6)
define($Name$BlueAction  ,7)
define($Name$OrangeAction,8)
define($Name$RouteRetaskingId,9)  # clk 3/97 (E1781)


# Table 6.32           # (SONOBUOY barrier type codes)
Define ($FIVE65$code,3)         # jb Sonobuoy
Define ($CONTAIN$code,2)        # jb    Barrier
Define ($CHEVRON$code,-2)       # jb       Types
Define ($LINE$code,1)           # jb            8/11/87

# Table 6.33                 # DEQ$AverageEMI$i
define($Marginal$Noise,1)    # AM.  EMI noise level values
define($Medium$Noise,2)
define($High$Noise,3)

# Table 6.34                # DEQ$DiscreteEMI$i, LDX$EmiImpact$i
define($NoEMI,0)             # reh 10/10/89
define($EMI$NoImpact,1)      # reh 10/10/89
define($EMI$Impact,2)        # reh 10/10/89

# Table 6.35                # DTX$WorstIMType$i    #reh 7/90
define($FIM$Code,1)
define($TIM$Code,2)
define($RIM$Code,3)
define($SIM$Code,4)

# Table 6.36                # Sonar Environment Codes SER$EnvNum$i

define ($Env$Good$code,1)
define ($Env$Fair$code,2)
define ($Env$Poor$code,3)
define ($Env$User$code,4)

# Table 6.37                # Detection-to-Engagement Codes -  LDX$DTEphase$I

define ($DTE$Null       ,0)     # These codes are assigned to allow reference
define ($DTE$Detect     ,2)     # to before/after these conditions by 
define ($DTE$Ident      ,4)     # allowing intermediate values between each
define ($DTE$Locate     ,6)     # phase.  They are order specific.
define ($DTE$Acquire    ,8)
define ($DTE$Track      ,10)
define ($DTE$Engage     ,12)
define ($DTE$Intercept  ,14)
define ($DTE$Comm       ,16)

# Table 6.38     # DAC$HowDestroyed$I      # clk 3/92 air-to-air upgrade
                 # DSS$HowDamaged$i        # JFR 6/21/93

define($AirtoAirMissile$Code    ,1)
define($CloseInWeaponSystem$Code,2)
define($CrashedonLanding$Code   ,3)
define($CrashedonTakeoff$Code   ,4)
define($DestroyedonGround$Code  ,5)
define($DamagedonGround$Code    ,5)     # ships/subs/bases can be damaged - JFR 6/24/93 (E1104)
define($OutofFuel$Code          ,6)
define($DestroyedByGunfire$Code ,7)     # a/c are destroyed by anything - JFR 6/24/93 (E1104)
define($DamagedByGunfire$Code   ,7)     # ships/subs/bases can be damaged - JFR 6/24/93 (E1104)
define($Mayday$Code             ,8)
define($SurftoAirMissile$Code   ,9)
define($AirToSurfMissile$Code   ,10)    # JFR 6/21/93 (E1104)
define($Navalmine$code          ,11)    # JFR 6/21/93 (E1104)
define($Airbomb$Code            ,12)    # JFR 6/21/93 (E1104)
define($NavalTorpedo$Code       ,13)    # JFR 6/21/93 (E1104)
define($SurfToSurfMissile$Code  ,14)    # JFR 6/21/93 (E1104)
define($NavalCruisemissile$Code ,15)    # JFR 7/8/93  (E1104)


# Table 6.39  # DSS$Result$I     # New Table: conclusion of BDA - JFR 6/21/93 (E1104)
define($MinorBDA$Code     ,1)
define($ModerateBDA$Code  ,2)
define($MajorBDA$Code     ,3)
define($SevereBDA$Code    ,4)
define($SunkBDA$Code      ,5)
define($DestroyedBDA$Code ,6)

# Table 6.40  # RTE$TankerType$I     # JOA 11/20/02 (E2313))
define($Mission$Code    ,1)
define($CallSign$Code   ,2)
define($SideNumber$Code ,3)


# Table 7.0             # Miscellaneous

define($PI,3.141592654)
define($PIOver2,($PI/2.0))
define($TWOPI,6.283185307)
define($FOURPI,12.56637061)
define($DEGMILE,0.0002908882)
define($Degrees$Per$NauticalMile,(1./60.))
define($80DEG,(80/180)*$PI)
define($81DEG,(81/180)*$PI)
define(Keel$Depth,40)           # jb: Used only in oISAR, as of 5/29/87
define(HFDF$BinWidth,($PI/18))
define(Deg$Per$Rad,180.0/$PI)
define($Yds$Per$Mile,2026)
define($Meters$Per$Mile,1852)    # jb (for radar equation)    9/18/89    # this is really meters per nmi
define($rad2deg,57.29577951)
define($deg2rad,0.0174533)
define($deg2min,60.)            # Number of minutes in 1 degree
define($min2sec,60.)            # Number of seconds in 1 minute

define ($rad2nmi   ,3440.082)   # radians to nautical miles
define ($nmi2rad   ,2.90690e-4) # Nautical miles to radians
define ($meters2ft ,3.2808)     # Meters to feet conversion
define ($ft2meters ,0.3048)     # Feet to meters conversion
define ($ft2nmi    ,($ft2meters/$Meters$Per$Mile))
define ($Radians$Per$Nmi, 0.00029089)  # nmi value * $Radians$Per$Nmi = radian value
                                       # radian value / $Radians$Per$Nmi = nmi value
define ($SonarTravelNM$Per$Sec, 0.827) # NM sound travels underwater per sec
define($Max$Views$per$side,8)   # as of 18-Jan-91 Not fully implemented. DEW
define($Max$Views$per$game,10)  # as of 18-Jan-91 Not fully implemented. DEW
define ($Max$TaskGroup,UNT$Slots)     # max number of units in a taskgroup, moved from wgop.rat
                                      # joa 11/95 - so all units are given command
define ($Pounds$Per$Gallon,6.5)          # Pounds of aviation fuel per gallon - joa 2/96 (E1467)
define ($Port$Station,270.*$DEG2RAD)     # Port refueling station bearing - joa 2/96 (E1467)
define ($Starboard$station,90.*$DEG2RAD) # Starboard refueling station bearing - joa 2/96 (E1467)


# Table 7.1                     # used in WSCONFIG.RAT

define($def$ASTAB1,$Ship$Board)
define($def$ASTAB2,$Sub$Board)
define($def$ASTAB3,$Track$Board)
define($def$ASTAB4,$ReportPolicy$Board)
define($def$ASTAB5,$Shorebase$Board)
define($def$ASTAB6,$Weather$Board)
define($def$ASTAB7,$activeunit$board)
define($def$ASTAB8,$vehicleavail$board)

# Table 7.2             # Default Sensor settings (used in WILDSH & WGMDFLT)

define($default$ESM$setting     ,$ON)
define($default$PSonar$setting  ,$ON)
define($default$HFDF$setting    ,$ON)       # 9/18/90 reh
define($default$MAD$setting     ,$ON)       # 1/17/91 smm clk
define($default$LIDAR$setting   ,$ON)       # 2/10/91 smm clk

# Table 7.3             # Macro routine for ANGPI and ANG2PI

define($angpi,
    {
    while (@1 >   $pi) @1 = @1 - $twopi
    while (@1 <= -$pi) @1 = @1 + $twopi
    })

define($angpixx,          # Macro fix for loop on bad value input
    {                     # JHM 6/03
    if(@1 > 60.)  @1 = 3.
    if(@1 < -60.) @1 = -3.
    while (@1 >   $pi ) @1 = @1 - $twopi
    while (@1 <= -$pi ) @1 = @1 + $twopi
    })

define($ang2pi,
    {
    while (@1 >= $twopi) @1 = @1 - $twopi
    while (@1 <      0.) @1 = @1 + $twopi
    })

# Tables 7.4                 # UNT$TargetType$I
# Target codes for COMMENCE FIRING (at) POS TARGET ...
# clk 2/94       # and FIRE CRUISE AT POS TARGET ... commands
define ($NoTarget$TargetCode     ,0)
define ($AirDefense$TargetCode   ,1)
define ($Armor$TargetCode        ,2)
define ($Artillery$TargetCode    ,3)
define ($EngBridge$TargetCode    ,4)
define ($FixedBridge$TargetCode  ,5)
define ($Helicopters$TargetCode  ,6)
define ($Infantry$TargetCode     ,7)
define ($Road$TargetCode         ,8)
define ($Trucks$TargetCode       ,9)
define ($Radar$TargetCode        ,10)
define ($AcquisitionRadar$TargetCode,11)
define ($CIWS$TargetCode         ,12)
define ($Comm$TargetCode         ,13)
define ($FlightLine$TargetCode   ,14)
define ($Fuel$TargetCode         ,15)
define ($Generic$TargetCode      ,16)
define ($Personnel$TargetCode    ,17)
define ($Shelters$TargetCode     ,18)
define ($Stores$TargetCode       ,19)
define ($Weapons$TargetCode      ,20)
define ($Radars$TargetCode       ,21)
define ($Aircraft$TargetCode     ,22)
define ($Maintenance$TargetCode  ,23)
define ($MaxNum$TargetCode          ,23)



# Table 8.0             # Player Order Codes

define(NO$order,0)                  # joa 11/97 (E1832)
define(BLANK$order,1)
define(ABIL$order,171)                      # clf 8/17/92
define(ACTIVATE$order,101)
define(ACTIVATEASMD$order,177)      # joa 11/97 (E1832)
define(ACTIVATESONAR$order,178)     # joa 11/97 (E1832)
define(ACTIVATEJAMMER$order,179)    # joa 11/97 (E1832)
define(ActivateJTMDGroundSensor$Order,195)   # clk 1/98 (E1832)
define(ActivateJTMDAirSensor$Order,197)      # clk 1/98 (E1832)
define(ADD$order,204)                        # SMM 7/98 (E2013)
define(ALERT$order,144)                                 #       1/28/83
define(ALLMISSION$order,150)
define(ALSP$order,545)              # Carol Kropp 5/26/92 - alsp related orders
define(ALTITUDE$order,102)
define(ATTACK$order,173)            # SMM 3/3/93 PER #E1103
define(Archive$Order,556)           # Carol Kropp 4/95 (E1365)
define(BARRIER$order,103)
define(BEARING$order,501)
define(BINGO$order,104)
define(BT$order,2)
define(BYE$order,401)
define(BLIP$order,105)
define(CANCEL$order,106)
define(CANCELX$order,502)
define(CAPSTATION$order,167)
define(CEASEJAM$order,107)
define(CEASE$order,CEASEJAM$order)
define(WAYPOINT$order, 549)             # Alex V. 7/22/93  adcru missile subcommands
define(CHANGE$order,205)                # SMM 7/98 (E2013)
define(CHARGE$order,122)                # joa 11/97 (E1832)
define(CHOP$order,146)                  # SMM 7/98 (E1976)
define(CIRCUIT$order,531)
define(CLASSIFY$order,504)
define(CLEAR$order,555)                 # clk 11/94 (Initially CLEAR DAMAGE (entry))
define(CLOSE$order,201)                 # SMM 7/98 (E2013)
define(COMMTEXT$order,108)
define(COPY$order,505)
define(CONSUMPTION$order,191)           # joa 2/96 (E1467)
define(COURSE$order,109)
define(COURSENOSPEED$order,181)         # joa 2/96 (E1467)
define(COVER$order,110)
define(CREATE$order,516)                # create a new unit after game start
define(DAMAGE$order,200)                # SMM 7/98 (E2013)
define(DEFEND$order,174)                # AEGIS ship will now defend another  2/94 SMM
define(DEFINE$order,415)                # define system constants in FORCE
define(DefineDucting$order,527)         # define ducting strength
define(DefineTime$order,528)            # turn on/off time tags
define(DefineLarge$order,529)           # define Large Screen Display
define(DefinePIM$order,534)
define(ModifyPIM$order,535)
define(DefineLanding$order,541)         # dew 11/21/89
define(DefineROUTE$order,540)           # reh 11/15/89
define(ModifyROUTE$order,539)           # reh 11/15/89
define(deleteROUTE$order,538)           # joa 09/19/05
define(MarkROUTE$order,542)
define(DefineSPA$order,543)             # clk 10/1/91
define(DeleteSPA$order,544)             # clk 10/1/91
define(DELETE$order,402)
define(DELETEUNIT$order,537)
define(DEPLOY$order,111)
define(DETACH$order,136)
define(DEPTH$order,112)
define(DESIGNATE$order,506)
define(DISABLE$order,202)                  # SMM 7/98 (E2013)
define(DROP$order,507)
define(EMBARK$order,532)
define(EMCON$order,139)
define(END$order,403)
define(ENTERSHIP$order,404)
define(ENTERBASE$order,405)
define(entersite$order,448)                # KHC 5/92
define(ENTERCIRCUIT$order,416)
define(ENTERCOMMPATH$order,406)
define(ENTERCOMMNET$order,430)
define(ENTERCOMJAMMER$order,432)           # REH 03/07/88
define(ENTERCLASS$order,427)
define(ENTEREMCON$order,417)
define(ENTERFREQUENCY$Order,445)           # reh 6/91
define(ENTERBISTATICPAIR$order,446)        # cml 6/91
define(ENTERBISTATICREG$order,447)         # cml 6/91
define(ENTERWEATHER$order,418)
define(ENTERAIR$order,419)
define(ENTERBoat$order,433)
define(ENTERUAV$order,434)
define(ENTERORDERS$order,408)
define(ENTEROTG$order,449)                 # dew 11/2000
define(ENTERROTHR$order,435)               # DEW 15 Feb 90
define(ENTERDIR$order,436)                 # DEW 15 Feb 90
define(ENTERLOAD$order,428)
define(ENTERMEMBER$order,412)
define(ENTERNETMEM$order,431)
define(ENTERESM$order,413)
define(ENTERSONAR$order,425)
define(ENTERDIFFUSE$order,439)
define(ENTERSOSUSREG$order,420)
define(ENTERSOSUSSUB$order,421)
define(ENTERSWABSREG$order,440)
define(ENTERSWABSSUB$order,441)
define(ENTERHFDF$order,422)
define(ENTERIntra$order,438)          # Intra-Platform EMI 8/8/90
define(ENTERPROBHIT$order,429)
define(ENTERMDR$order,437)            # MacroASW 6/19/90
define(ENTERSURVSAT$order,423)
define(ENTERREPORT$order,424)
define(ENTERGROUND$order,442)         #JFR --- 5/28/91
define(ENTERATTRITION$order,443)      #JFR --- 5/28/91
define(ENTERCOMBAT$order,444)         #JFR --- 5/28/91
define(ENVELOPE$order,508)
define(EXECUTE$order,113)
define(FIRECRUISE$order,114)
define(FORMATION$order,206)             # joa 7/03 (E2350)
define(FIRETORPEDOES$order,115)
define(FIRING$Order,156)
define(FUEL$Order,192)                  # Also UNREP - joa 2/96 (E1467)
define(HANDOVER$order,116)
define(HANDOVERBARRIER$order,182)       # joa 11/97 (E1832)
define(INFORM$order,147)
define(INTELL$order,521)                # was order #146 - joa 11/97 (E1832)
define(ISAR$order,151)  # jb [ FOR  <addee> CLASSIFY <track>    6/1/87
define(JAM$order,117)
define(JTMDAttackModel$Order,176)     # clk 5/97 (E1791)
define(LAND$order,158)                # Amphibious Landings/Withdrawal 11/21/89
define(LABEL$order,509)
define(LAUNCH$order,118)
define(LAUNCHC$order,137)             # for collective flights
define(SCRAMBLE$order,137)
define(LAUNCHBOAT$Order,153)
define(LOCK$order,530)                # E2273 JOA UFL02 lock stations from BB
define(LOAD$order,140)
define(RIPPLE$order,199)
define(SURVSAT$order,141)
define(PLOTSURVSAT$order,917)
define(LOB$order,511)
define(LOOK$order,169)                     # clf 8/17/97
define(MARKTRACK$order,512)
define(MARKBEARING$order,513)
define(MAST$order,119)
define(MESSAGE$order,514)
define(MINEFIELD$order,536)
define(MISSION$order,120)
define(MISSIONAMPHIB$order,183)  # joa 11/97 (E1832)
define(MISSIONAIR$order,184)     # joa 11/97 (E1832)
define(MODE$order,121)
define(MOOR$order,154)
define(ORBIT$order,149)
define(ORDERS$order,903)        # 903 vice 122 - khc 4/93 (E1075)
define(PAIR$order,165)           # SMM 3/23/92
define(STRIKE$order,194)         # joa 11/97 (E1832)
define(PERFORM$order,159)        # jb        5/15/90
define(PING$order,161)           # SMM 7/15/91
define(EXTENDPING$order,180)     # joa 11/97 (E1832)
define(PINGDISPLAY$order,162)    # clk 7/11/91
define(PINGSET$order,160)        # clk 7/11/91
define(PLACE$order,515)
define(PLOT$order,516)
define(PREDICT$order,190)        # joa 2/96 (E1467)
define(PRINT$order,409)
define(PROCEED$order,123)
define(PROCEEDROUTE$order,126)   # joa 11/97 (E1832)
define(REPORT$order,143)
define(RBOC$order,124)
define(RECALL$order,125)
define(RECONN$order,138)
define(RECOVER$order,142)
define(REFUEL$order,127)
define(REFUELPOS$order,185)      # joa 11/97 (E1832)
define(RELOCATE$order,517)
define(REPAIR$order,203)                # SMM 7/98 (E2013)
define(REPLENISH$order,145)
define(REPLENISHTO$order,164)           # SMM 7/98 (E2013)
define(ReportC2$order,554)              # Carol Kropp 10/94 - WPC C2 Interface
define(RETRIEVE$order,128)
define(REVIEWPAUSE$order,522)
define(REVIEWCONTINUE$order,523)
define(REVIEWFAST$order,524)
define(REVIEWNORMAL$order,525)
define(REVIEWEND$order,526)
define(SAVE$order,518)
define(SCAN$order,170)                      # clf 8/17/92
define(SCUTTLE$order,187)
define(SELECT$order,152)
define(SET$order,533)
define(SETSPEED$order,186)       # joa 11/97 (E1832)
define(SETSTATUS$order,558)      # joa 11/97 (E1832)  # SMM 7/98 (E1948)
define(SHOOTTORPEDOES$order,159)
define(SILENCE$order,129)
define(SILENCEASMD$order,188)    # joa 11/97 (E1832)
define(SILENCESONAR$order,189)   # joa 11/97 (E1832)
define(SilenceJTMDGroundSensor$Order,196)   # clk 1/98 (E1832)
define(SilenceJTMDAirSensor$Order,198)      # clk 1/98 (E1832)
define(SPEED$order,130)
define(SPLITOFF$order,166)              # SMM 3/23/92
define(STATION$order,131)
define(STOP$order,410)
define(SUPPRESS$order,923)              # bmb 3/25/93 (H1082)
define(SURFACE$order,132)
define(SWEEPING$Order,157)
define(TEXT$order,519)
define(TAKE$order,133)
define(TAKEUSINGSAM$order,193)   # joa 11/97 (E1832)
define(TIME$order,520)
define(TOW$order,155)
define(UNMARK$order,521)
define(WEAPONS$order,134)
define(HIDE$order,163)                  #khc 6/16/92
define(ZOOM$order,172)                  # clf 1/19/93
define(RESUME$order,168)                #khc 11/92
define(DefineNRT$order,546)             # SMM 12/92 PER#E1101
define(ModifyNRT$order,547)             # SMM 12/92 PER#E1101
define(ENTERPLAN$order,407)        # SMM removed 4/93 PER #E1114
define(ENTERSEARCH$order,411)
define(ENTERACTION$order,426)
define(SEARCH$order,135)
define(USE$order,148)
define(DEFINEPLAN$order,549)        # SMM 4/93 PER #E1114
define(RESUMEPLAN$order,550)        # SMM 4/93 PER #E1114
define(DISPLAYPLAN$order,551)       # SMM 4/93 PER #E1114
define(DELETEPLAN$order,552)        # SMM 4/93 PER #E1114
define(ADDTOPLAN$order,553)         # SMM 4/93 PER #E1114
define(REPEAT$order,557)            # joa 7/96 (E1443)
define(SITREP$order,925)            # av 11/96 (E1722)
define(DisplayPlayerInfo$order,917)         # Like display astab
define(DisplayControlInfo$order,924)        # Like display system, all,etc
define(ProcessID$order,914)         # clk 4/94 - CLEAR PID and SEND WAKE
define(ProcessIFF$order,175)        # SMM 1/97 - SET IFF and CLEAR IFF (E1732)


# Table 8.1             # Player Order Group Ranges

define(NO$order$lo,0)
define(NO$order$hi,99)
define(FOR$order$lo,100)
define(FOR$order$hi,399)
define(FORCE$order$lo,400)
define(FORCE$order$hi,499)
define(STD$order$lo,500)
define(STD$order$hi,999)

# table 9.0             # Segmentation Control Group

define($Init$Group,1)
define($Cleanup$Group,2)
define($Order$Group,3)
define($Halt$Group,4)
define($Motion$Group,5)
define($Failure$Group,6)
define($FlightOps$Group,7)
define($Comm$Group,8)
define($Sonar$Group,9)
define($Radar$Group,10)
define($Detection$Group,11)
define($Engagement$Group,12)
define($Damage$Group,13)
define($GPlot$Group,14)
define($Record$Group,15)
define($Save$Group,16)
define($Resync$Group,17)
define($Visual$Group,18)
define($HFDF$Group,19)
define($SOSUS$Group,20)
define($SURVSAT$Group,21)

# table 10.0   AMPHIBIOUS    # GND$CATEGORY$I  (Land WarFare)  11/8/89
define($EQPT$Code,1)
define($VEHIC$Code,2)
define($WEAP$Code,3)
define($PERS$Code,4)

# table 10.1   AMPHIBIOUS    # AAS$WAVEtype$I                  11/8/89
define($SCHED$Code,1)
define($nonSCHED$Code,2)
define($onCALL$Code,3)
define($REPLEN$Code,4)

# table 10.2   AMPHIBIOUS  # AAS$STATUS$I and AAS$???$STATUS$I  11/8/89
define($Destroyed$code,0)  # LOST  - Same as AML, BML, IRD
define($ENROUTE$Code,1)    # LAUNCHED/WITHDRAWING/TRANSFERRING
define($OnDeck$code,2)     # Same as AML, BML
define($LANDED$Code,3)
define($Other$Code,4)      # (AAS main table) - Same as VUE$PLOTTYPE$I
                            
# table 10.3  EOIR Model/UAV
define($UAV$Fixed,1)  # 2 Target Categories
define($UAV$Mobile,2)

##define($UAV$MaxRange,6)       # jb (See next line                5/8/92
define($UAV$MaxRange,60)        # clk 4/92 increased from 6 to 60
define($UAV$NumRangesPerType,6) # clk 4/92 added as range is no longer just 1-6

#            ird$DamageLevel$i Codes:
define($Destroyed$code,0)  # LOST
define($NODamage$Code,1)
define($Minor$Code,2)
define($Moderate$Code,3)
define($Severe$Code,4)


# table 11.0  ROTHR Control orders for PTMAIN

define($Erase$Rothr,1)
define($Plot$Rothr,2)
define($Evaluate$Rothr,3)
define($SelectCSA$Rothr,4)
define($DeleteCSA$Rothr,5)

# table 12.0 
# definitions for Intra-ship External Object relationships

define($Intra$Target,1)
define($Intra$Threat,2)
define($Intra$Detectee,3)
define($Intra$Sender,4)
define($Intra$Destination,5)
define($Intra$Receiver,6)
define($Intra$RadTrans,7)
# definitions for ITX$ImpactType$i

define ($Intra$Detection$Code,1)        # EOIR, ESM, HFDF, Radar, SonoBuoy,Sonar
define ($Intra$Reception$Code,2)        # Commsuites, CommBuoy
define ($Intra$Transmission$Code,3)     # Jammer, Send-only Commsuite
define ($Intra$Hit$Code,4)              # Missles, Guns, Bomb
define ($Intra$Launch$Code,5)           # Cruise Missle, Torpedos,
define ($Intra$Navigation$Code,6)       # Nav. sensors
define ($Intra$Defense$Code,7)          # BLIP, RBOC, DECM
define ($Intra$EOIRLost$Code,8)             # EOIR
define ($Intra$EPULoad$Code,9)          # airbomb EPU reduction
define ($Intra$Jammer$Code,10)          # jammer power reduction

# Table 13.0          CTX$InterferenceCode$I    reh,7/91

define($BandOccupancy,1)                # interference occupies part of hopper band
define($RFSaturation,2)                 # saturation at front end or Rx
define($Intermodulation_2,3)            # second order intermodulation

# Table 14.0          ANT$Type$i            reh 10/91
define($Omnidirectional,1)
define($Directional,2)

# Table 14.1          ANT$Polarization$i            reh 10/91
define($VerticalPolar,1)
define($HorizontalPolar,2)

# Table 15.0         RCN$TargetCode$i  Replacing RCN$Base$i        2/24/92
define($ShipRecon$Code,0)
define($BaseRecon$Code,1)
define($GroundRecon$Code,2)

# Table 16.0         ALSP$Game         clk 5/29/92
define($NonALSPGame$Code, 0)
define($NeverJoined$Code,1)
define($CurrentlyJoined$Code,2)
define($PreviouslyJoined$Code,3)
define($JoinInProgress$code,4)

# Table 17.0         Hide Status of the unit table   KHC 6/92
define($NoHideStatus,0)
define($EnrouteToHide,1)
define($CurrentlyHiding,2)

# Table 18.0         RESA$State for SERCES                         5/27/92
define($RESA_Busy,                0)
define ($RESA$State$Processing           ,0)
define($RESA_Motion_Complete,     1)
define ($RESA$State$Motion_Complete      ,1)
define($RESA_Engagement_Complete, 2)
define ($RESA$State$Engagements_Complete ,2)
define($RESA_Halt,                3)
define ($RESA$State$Wargame_Halted       ,3)
define($RESA_Cycle,               4)
define ($RESA$State$Time_Advance         ,4)
define ($RESA$State$Request_DIS_Entities ,5)

# Table 18.1         RTU$State for SERCES                          5/27/92
define($RTS_TOD_Req_not_Received,  0)
define($RTS_TOD_Req_Received,      1)
define($RTS_Dynamic_Data_not_Sent, 2)
define($RTS_Dynamic_Data_Sent,     3)
define($RTS_Dynamic_Data_Received, 4)
define($RTS_Engagements_Sent,      5)

# Table 18.1   RTU$Interface$State (replaces RTU$State) - clk 4/96 (E1498)
define ($RTU_State_Not_Connected         ,0)
define ($RTU_State_Connected             ,1)
define ($RTU_State_TOD_Req_Not_Received  ,2)
define ($RTU_State_TOD_Req_Received      ,3)
define ($RTU_State_Dynamic_Data_Not_Sent ,4)
define ($RTU_State_Dynamic_Data_Sent     ,5)
define ($RTU_State_Dynamic_Data_Received ,6)
define ($RTU_State_Engagements_Sent      ,7)

# Table 18.2   RTU Wakeup Event Codes - clk 4/96 (E1498)
# (also defined in the C code portion of the RTU)
define ($RTU$Wakeup$RESA_Shutdown          ,1)
define ($RTU$Wakeup$Clock_Updated          ,2)
define ($RTU$Wakeup$Update_Ghosts          ,3)
define ($RTU$Wakeup$RESA_Entities          ,4)
define ($RTU$Wakeup$Read_RTU_File          ,5)
define ($RTU$Wakeup$Ignore_Wakeup          ,6)

# Table 19.0         DEQ$FieldOfView$I
define ($FOV_Other,  0)
define ($FOV_Wide,   1)
define ($FOV_Medium, 2)
define ($FOV_Narrow, 3)

# Table 19.1         DEQ$ScanDir$I   Scan direction
define ($SD_Right,   0)
define ($SD_Left,    1)

# Table 20.0   UNT$ALSPRefuelStatus$I  SMM 10/25/95 (E1453)
define ($Refuel_Denied,             1)
define ($At_Posit_Refuel_Requested, 2)

# Table 21.0   SHC$JTMD_UGS_Type$I - JTMD reporting codes
# JTMD Model Sensor Codes - clk 3/96 (E1561)
# updated codes for 1997 - clk 2/97 (E1764,E1765,E1766,E1785)
define ($JTMD$UGS$Acoustic$Code      ,1)
define ($JTMD$UGS$IR$Code            ,2)
define ($JTMD$UGS$Magnetic$Code      ,3)
define ($JTMD$UGS$Seismic$Code       ,4)
define ($JTMD$IUGS$Acoustic$Code     ,5)
define ($JTMD$IUGS$Environmental$Code,6)
define ($JTMD$IUGS$Magnetic$Code     ,7)
define ($JTMD$IUGS$Seismic$Code      ,8)
define ($JTMD$SOF$Binocular$Code     ,9)
define ($JTMD$SOF$Nite_Scope$Code    ,10)
define ($JTMD$JSOF$Binocular$Code    ,11)
define ($JTMD$JSOF$Nite_Scope$Code   ,12)
define ($JTMD$HunterUAV$Code         ,13)
define ($JTMD$OutriderUAV$Code       ,14)
define ($JTMD$PioneerUAV$Code        ,15)
define ($JTMD$ATARS$Code             ,16)
define ($JTMD$TARPS$Code             ,17)
define ($JTMD$MaxSensorCodes         ,17)

# Table 22.0   UNT$DISAppearance$I   # a 1 word packed value field from
                                     # the Entity State PDU - clk 4/96 (E1498)
# Table 22.1   UNT$DIS_CCD_State$I - bits 17 and 18 of the Appearance field
define ($DIS$CCD$Open$Code        ,0)     # clk 2/97 (E1764,E1765,E1766,E1785)
define ($DIS$CCD$Camo1$Code       ,1)     # Concealed replaced moving, and
define ($DIS$CCD$Camo2$Code       ,2)     # enumerated values changed
define ($DIS$CCD$Concealed$Code   ,3)

# Table 22.2   UNT$DIS_Damaged_State$I - bits 3 and 4 of the Appearance field
# clk 2/97 (E1764,E1765,E1766,E1785)
define ($DIS$Damaged$None$Code        ,0)
define ($DIS$Damaged$Slight$Code      ,1)
define ($DIS$Damaged$Moderate$Code    ,2)
define ($DIS$Damaged$Destroyed$Code   ,3)

# GuideLevel return code
define ($CircularGuideDefinition, -1)     # joa 3/96 (E1467)

# Table 23.0   CEC$Interface$State - clk 10/96 (E1695)
define ($CEC$NonCEC_Game             ,0)
define ($CEC$Interface_Disconnected  ,1)
define ($CEC$Interface_Connected     ,2)
define ($CEC$TrackNumber$Length      ,6)

# Table 23.1   CEC$SensorType$I - clk 10/96 (E1695)
define ($CEC_SENSOR_AEGIS             ,1)
define ($CEC_SENSOR_E2                ,2)
define ($CEC_SENSOR_E3                ,3)

# Table 23.2   CEC$BallisticPhaseCode$I - clk 10/96 (E1695)
define ($CEC_BALLISTIC_PHASE_NONE    ,0)
define ($CEC_BALLISTIC_PHASE_BOOST   ,1)
define ($CEC_BALLISTIC_PHASE_ASCENT  ,2)
define ($CEC_BALLISTIC_PHASE_TERMINAL,3)

# Table 23.3   CEC$EngagementState$I - clk 10/96 (E1695)
define ($CEC_ENG_ASSIGNMENT_NONE     ,0)
define ($CEC_ENG_ASSIGNMENT_YES      ,1)
define ($CEC_ENG_ASSIGNMENT_HOLD     ,2)

# Table 24.0   UAV Model Types   # clk 3/97 (E1766)
define ($UAVUndefined$Code           ,0)
define ($UAVHunter$Code              ,1)
define ($UAVOutrider$Code            ,2)
define ($UAVPioneer$Code             ,3)
define ($Max_JTMD_UAV_Models         ,3)

# Table 25.0   JTMD Air-to-Ground Attack Model - clk 5/97 (E1791)
define ($JAG$TargetType$Other     , 0)
define ($JAG$TargetType$TM_Element, 1)
define ($JAG$TargetType$Opfor     , 2)
define ($JAG$TargetType$Convoy    , 3)
define ($JAG$TargetType$Structure , 4)
define ($JAG$TargetType$Site      , 5)
define ($JAG$TargetType$MilOps    , 6)

define ($JAG$EngStatus$None    , 0)
define ($JAG$EngStatus$Pending , 1)
define ($JAG$EngStatus$Attacked, 2)
define ($JAG$EngStatus$Missed  , 3)
define ($JAG$EngStatus$Hit     , 4)

# Table 26.0 (matches Table 3.5 in RGCODE.INC) Ship Types or Status (dew)

define ($unk$otg_code   ,0)
define ($nav$otg_code   ,1)
define ($navnp$otg_code ,2)
define ($oth$otg_code   ,3)
define ($othnp$otg_code ,4)
define ($mer$otg_code   ,5)
define ($fsh$otg_code   ,6)
define ($sts$otg_code   ,7)
define ($stsnp$otg_code ,8)
define ($tom$otg_code   ,9)     # Cruise missle shooter
define ($obg$otg_code   ,10)    # SAG main unit
define ($rth$otg_code   ,11)    # ROTHR reporting station
define ($navnru$otg_code,12)    # Navy Non Reporting Unit

