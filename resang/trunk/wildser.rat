###			File  WILDSER.rat
 
 
#$%
#$%   FLOWCHART FOR WILDSER IS IN WILDSER.HIR
#$%   =======================================
#$%
 
define  (DEBUG,#)
define  (DEBUGL,)
include "bbctl.inc"
include "bbcode.inc"
include "bbser.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit NONE)           # MJC 4/28/2000
 
Subroutine WGLSER (reccnt,recsz,rec)  #load the sonar environment scenario file
 
########################################################
#$%
#$% Purpose:   WGLSER loads in the SONAR ENVIRONMENT scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     Getsr
#$%
#$% Tables:    SER
#$%
#$% Date:      JUNE 15 83
#$%
#$% Author:    T. ADAMOS
#$%
########################################################
 
BBcommon
 
integer 	reccnt,			## RECORD COUNT
    		recsz			## RECORD SIZE
literal 	rec[1500]		## RECORD
 
integer LOOP, ISTAT, IREC,
        SER$Pointer,
        SER$Region$I,
        SER$Envnum$I,
        SER$VER$Index,
        SER$Nbrvertices$I                   # MJC 4/28/2000
real    SER$VER$latitude$F,
        SER$VER$longitude$F,
        DMS2RAD                             # MJC 4/28/2000
 
DEBUG call echov ("<WGLSER:")
 
if (reccnt <= 1)			## if file is empty (no record count)
    {					## send warning message to user return
    CALL ECHOv ("DEFAULT Sonar Environment assigned to ALL REGIONS --")
    call echor
    CALL echov ("-- no other assignments were specified.  ")     #  10/24/88
    CALL echor
    return
    }
 
for (loop = 2; loop <= reccnt; )		## for each record in the file
    {
    call GETSR (loop, recsz, rec)		## get scenario record
 
    call GSLOTM (SER$Pointer,$$SER,SER$entry,istat)
 
    if(istat == $no)
    	{
	call echov ("Regions ")
	call echoi (int(rec[3]))
	call echov (" and on are not loaded.")
	call echor
	return
       }
 
    SER$Region$I = rec[3]			## get and save the
    putSER$Region$I				## region number
 
    SER$EnvNum$I = rec[4]			## get and save the
    putSER$EnvNum$I				## environment number
 
    irec = 5
 
    for (SER$VER$Index = 1; SER$VER$Index <= SER$VER$Slots;
    			    SER$VER$Index =  SER$VER$Index + 1)
    	{
    	if (rec[irec] == 99) break
 
    	SER$NbrVertices$I = SER$VER$Index
 
    	SER$VER$Latitude$F = DMS2rad(rec[irec])
    	putSER$VER$Latitude$F
 
    	SER$VER$Longitude$F = DMS2rad(rec[irec+1])
    	putSER$VER$Longitude$F
 
    	irec =irec+2				# increment the index
    	}
 
    putSER$NbrVertices$I
    }
 
return
end
