 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLMRV                        ECHOH                      MRV
#$%      GETSR  <WGLOAD>               ECHOR
#$%      GSLOTM <WGLOAD>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLCJM
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLMRV - GETSR *
#$%                                      - GSLOTM*
 

 
define(DEBUG,#)
define(DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbmrv.inc"
include "ascii.inc"
include "wimain_eq.inc"               # MJC 4/28/2000
 
define(BBImplicit, Implicit NONE)     # MJC 4/28/2000
 
Subroutine wglmrv (reccnt,recsz,rec)  #load in the MuRho scenario file
 
########################################################
#$%
#$% Purpose:   WGLMRV loads in commjammer scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOH      ECHOR      GETSR
#$%            GSLOTM
#$%
#$% Tables:    MRV
#$%
#$% Date:      APR 88
#$%
#$% Author:    R. Hundt
#$%
#$%
########################################################
 
BBcommon
EqErr$Common                        # MJC 4/28/2000
 
define ( $EntryNotUsed , -1 )
 
integer reccnt,recsz
literal rec[1500]
 
integer Mrvindex,
        nMrv
 
integer ILEN, LOOP,
        LEN, ISTAT,
        MRV$Pointer,
        MRV$VAL$Index,
        MRV$Numbervalues$I          # MJC 4/28/2000
real    MRV$VAL$murhovalue$F,
        MRV$Jsminimum$F,
        MRV$Jsincrement$F,
        MRV$Jsmaximum$F             # MJC 4/28/2000
 
# common /eqerr/ cfile,cname,cflg   # MJC 4/28/2000
 
DEBUG call echov("<wglmrv:")
 
#$% set ilen to zero for smovh
ilen = 0
 
#$% move "MuRho    " to cfile for eventual display
call smovv ("MuRho     ", cfile, ilen)
#$% set flag to YES
cflg = $yes
 
#$% if file empty
if (reccnt <= 1)
   {
    #$% display error message to user
    call echov ("MuRho File Empty.  ")
    call echor
    return
   }
 
#$% this file should have only one data record
for (loop = 2; loop <= reccnt; )        #for each record in the file
  {
    call getsr (loop,recsz,rec)         #get scenario record
    len = rec[1]                        #save length
 
    #$% call to get slots
    call gslotm (mrv$pointer,$$mrv,mrv$entry,istat)
 
    #$% if status flag is NO (not loaded)
    if(istat == $no)
      {
       #$% send error message
       call echov ("MuRho Table not loaded.")
       call echor
       return
      }
 
    nMrv = 0
 
    #$% the MuRho values will be offset by the VLI
    #for each Mrv field in the record
    for ( Mrvindex = 2;
        (( rec [ Mrvindex ] != $EntryNotUsed ) &
         ( Mrvindex <= 101 ));
         Mrvindex = Mrvindex + 1 )
      {
         #$% the VLI offset is accounted for
         mrv$VAL$index = Mrvindex - 1
 
         if ( mrv$VAL$index$ok )
           {
             #$% increment number of muRho values
             nMrv = nMrv + 1
 
             #$% update with MuRho value
             MRV$VAL$MuRhoValue$F = rec [ Mrvindex ]
 
             #$% update the blackboard
             putMRV$VAL$MuRhoValue$F
           }
 
      }     #for each Mrv field in the record
 
    #$% update with number of MuRho values
    MRV$NumberValues$I = nMrv
 
    #$% update blackboard with num MuRho values
    putMRV$NumberValues$I
 
    MRV$JSminimum$F = rec [ 102 ]
 
    putMRV$JSminimum$F
 
    #$% update with JS minimum
    MRV$JSincrement$F = rec [ 103 ]
 
    putMRV$JSincrement$F
 
    #$% calculate maximum JS value
    MRV$JSmaximum$F =
      xMRV$JSminimum$F + ( ( nMrv - 1 ) * xMRV$JSincrement$F )
 
    putMRV$JSmaximum$F
 
    DEBUGL  call echov ("Loading MuRho Table.")
    DEBUGL  call echor
 
 
  } # loop for next record
 
return
end
 
