 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine commp
 
      ##################################################
      #$%
      #$% Purpose:   COMMP allows the user to
      #$%            interact with commpairs
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Dana Wills
      #$%
      ##################################################
 
#
#
#     New COMMPAIR
#
#
    IMPLICIT NONE   # jb    E2145   4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom, 18)     # was 17 The number of entries in the defCOM table.
define (zdctyp, 12)     # The size of the defTYP table.
define (zdcfld,168)     # was 159 The size of the defFLD table.
define (zdsarg,  4)     # The size of entries in the defARG table.
define (zdcarg, 12)     # The number of entries in the defARG table.
define (zdcfmt,  7)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
 
      Integer  actcnt   # jb    E2145   4/4/00
      Integer  m
 
      character  line[ARB]
 
##  Note:  See also declarations in BLSUB!.rin..
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("        ","   Commp","airs   "," ")
 
 $set(Data_Count,0)
 DATA$com("NAME ",  1)      # Name of Communications pair
 DATA$com("COMMS",  1)      # Name of commsuite for sending
 DATA$com("COMMR",  1)      # Name of commsuite for receiving at next node
 DATA$com("LOS  ",  1)      # Is Line of Sight required?
 DATA$com("MU   ",  1)      # Messages per hour by this comm pair
 DATA$com("RHO  ",  1)      # Path utilazation factor
 DATA$com("LIFE ",  1)      # max time to deliver a msg to commR in next N
 DATA$com("RANGE",  1)      # Maximum range for communication
 DATA$com("FREQ ",  1)      # Frequency of commpair
 DATA$com("CRYPT",  1)      # Is it encrypted ?
 DATA$com("JMRSN",  1)      # Link Jammer sensitivity  # REH
 DATA$com("SPEED", -2)      # Two max speeds: in-layer, below-layer
 DATA$com("WIRE ", -2)      # Define if SEND or RCVR of comm needs a wire
 DATA$com("WBUOY", -2)      # Define if SEND or RCVR of comm needs a Wbuoy
 DATA$com("MAST ", -2)      # Define if SEND or RCVR of comm needs a mast
 DATA$com("MISSN", -1)      # A/C mission overide for relay
 DATA$com("ARC  ", -2)      # Range of sender off receivers course
 DATA$com("RCVRC", -1)      # Receiver course off N/S where comm possible
 
 
 $set(Data_Count,0)
 DATA$typ("TYPE1", 0)           # Record Type 1 Identifier
 DATA$typ("FLD1 ", 1)           #
 DATA$typ("FLD2 ", 1)           #
 DATA$typ("TYPE2", 0)           # Record Type 2 Identifier
 DATA$typ("FLD1 ", 1)           #
 DATA$typ("FLD2 ", 1)           #
 
 
 $set(Data_Count,0)
DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","commpair","        ","      ")
DATA$fld1("COMMS", 1, 1,"NAME ", 1,"Name of ","commsuit","e for se","nding ")
DATA$fld1("COMMR", 1, 1,"NAME ", 1,"Name com","msuite f","or recv ","node  ")
DATA$fld1("LOS  ", 1, 1,"ANSWR", 1,"Is line ","of sight"," require","d?    ")
DATA$fld1("MU   ", 1, 2,"QTY  ", 1,"Msg per ","hour by ","comm pai","r     ")
DATA$fld1("RHO  ", 1, 2,"%    ", 1,"Path uti","lization"," factor ","      ")
DATA$fld1("LIFE ", 1, 2,"MINUT", 1,"Mx time ","to deliv","er to CO","MMR   ")
DATA$fld1("RANGE", 1, 3,"mi/AC", 1,"Max comm"," range- ","miles or"," ACOUS")
DATA$fld2("SPEED", 2, 7,"MODE ", 1,"KNOTS", 2,"Mx speed",":in-laye","r,below-","layer ")
DATA$fld1("WIRE ", 1, 5,"MODE ", 1,"Define i","f SEND/R","CVR need","s wire")
DATA$fld1("MAST ", 1, 5,"MODE ", 1,"Define i","f SEND/R","CVR need","s mast")
DATA$fld2("WBUOY", 2, 6,"MODE ", 1,"NAME ", 1,"Define i","f SEND/R","CVR need"," wbuoy")
DATA$fld1("MISSN", 1, 1,"ANSWR", 1,"A/C miss","ion over","ide for ","relay ")
DATA$fld1("FREQ ", 1, 2,"kHz  ", 1,"Frequenc","y of com","mpair   ","      ")
DATA$fld1("CRYPT", 1, 1,"ANSWR", 1,"Is it en","crypted ","?       ","      ")
DATA$fld1("JMRSN", 1, 2,"VALUE", 1,"Link Jam","mer Sens","itivity ","      ")
DATA$fld2("ARC  ", 2, 4,"MODE ", 1,"DEGRS", 1,"Rng of S","END/RCVR"," off rcv","r crs ")
DATA$fld1("RCVRC", 1, 2,"DEGRS", 1,"Rcvr cou","r off N/","S comm p","ossibl")
 
 
 $set(Data_Count,0)
 DATA$arg4N("ALPHA",6000,0,0)              # Alphanumeric -- Anything
 DATA$arg4N("NAME ",6000, 0,     0)        # Alphanumeric -- Anything
 DATA$arg4N("QTY  ",2002, 1,  2000)        # Numeric Range 1 -> 2000
 DATA$arg4N("KNOTS",2002, 1,    30)        # Numeric Range 0 -> 30
 DATA$arg4C("MODE ",8002,"SEND ","RCVR ")  # Alphanumeric list -- SEND/RCVR
 DATA$arg4N("MINUT",2002, 1,   500)        # Numeric Range 1 -> 500
 DATA$arg4N("DEGRS",2002, 0,   180)        # Numeric Range 0 -> 180
 DATA$arg4N("kHz  ",2002, 3,3000000)       #Numeric Range 3 -> 3000000
 DATA$arg4N("%    ",2000, 0,   100)        # Numeric Range 0 -> 100
 DATA$arg4N("mi/AC",0001, 0, 15000)        # Special test... "ACOUS" or NUMERIC
 DATA$arg4C("ANSWR",8002,"YES  ","NO   ")  # Alphanumeric list -- YES/NO
 DATA$arg4N("VALUE",2002, 5, 50)           #$% Numeric Range 5 -> 50 ; value
                #$% entered is scaled by .1 in WILDCMP.RAT
 
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set(Data_Count,0)
 DATA$fmt( 2,"A5,A7)  ","        ","    "," ")
 DATA$fmt( 2,"A5,I9)  ","        ","    "," ")
 DATA$fmt( 2,"A5,I7,10","H (*=ACO","US))"," ")
 DATA$fmt( 3,"A5,A7,I9",")       ","    "," ")
 DATA$fmt( 2,"A5,A7)  ","        ","    "," ")
 DATA$fmt( 3,"A5,2A7) ","        ","    "," ")
 DATA$fmt( 4,"A5,A7,2I","9)      ","    "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   The RANGE field has one argument (mi/AC) that must
#                          be either numeric (1-15000) or the string "ACOUS".
#
9901 format (1x,"Word #",i2," of the ",a5," field is NOT 1->15000 or 'ACOUS'.")
#
#      SAVE VALIDATION:    NONE
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
#
#
#
#
##############################################################################
####
####      FORMAT STATEMENTS
####
##############################################################################
 
      include "blsub1.rin"
 
 
		  #***********************************************************
		  #***********************************************************
		  if (argtyp<=0)          #*** SPECIAL ***
		   {
		   #
		   # increment PTRCNT for each additional input word processed
		   #
		   # on error: increment VERR and NEXT to the next loop
		   #
		    #*********************************************************
		    if (argn==1)                          # Special Test 1
		     {                                    # mi/AC
 
		      if (!((arg1>=1&arg1<=15000)|lcomp_v(arg1, "ACOUS") == 0))
			{                                 # ACOUS or 1-15000
			 print 9901,scan2,qfld
			 verr = verr + 1
			 next
			}
		     }
		    #*********************************************************
		    else if (argn==2)                     # Special Test 2
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==3)                     # Special Test 3
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    #*********************************************************
 
		    next
		   }
##############################################################################
 
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
 
 
 
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
