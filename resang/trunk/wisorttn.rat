 
#####   WES version 3.1 converted to the VAX11/780    dated-22jan82
 
 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
# 
 
 
#$%      MODULE                       UTILITY                    DATA
#$%    SUBROUTINES                  SUBROUTINES                 TABLES
#$%    ===========                  ===========                 ======
#$%
#$%      SORTTN                        NONE                      SHN
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE SORTTN
#$%    =========================
#$%
#$%    WARGAM - START0 - SORTTN*
 
 

 
 include "bbctl.inc"
 include "bbcode.inc"
 include "bbshn.inc"
 
 define(BBImplicit, Implicit NONE)              # MJC 5/1/2000 (E-2145)
 
 Subroutine SORTTN                              # SORT ToNals
 
 ##############################################################
 #$%
 #$% Purpose:   SORTTN is called to sort ship tonal values.
 #$%
 #$% Called By: START0
 #$%
 #$% Calls:     None
 #$%
 #$% Tables:    SHN
 #$%
 #$% Date:      NOV 80 (6/83)
 #$%
 #$% Author:    Ron Williams (Modified T.D. BURZETTE)
 #$%    10/31/90 modified to work with new BBSHN       - trs
 #$%
 ##############################################################
 
BBcommon
 
logical SORTED                                  # Flag indicating sorting done
 
integer K,J,
        IFREQ1,
        IFREQ2,
        LEVEL1,
        LEVEL2,
        SHN$Pointer,
        SHN$SPD$Index,
        SHN$SPD$TN$Index,
        SHN$SPD$TN$freq$I,
        SHN$SPD$TN$level$I                      # MJC 5/1/2000 (E-2145)
                                                # Loop thru SHN table
for (SHN$Pointer$First; SHN$Pointer$OK; SHN$Pointer$Next)
    {                                           # For each of the 6 slots
    for (SHN$SPD$Index = 1; SHN$SPD$Index$OK; SHN$SPD$Index = SHN$SPD$Index+1)
        {
        for (K = SHN$SPD$Tn$Slots; K >= 2; K = K-1) # For K between N and 2
            {
            SORTED = .true.                     # Initialize flag
 
            for (J = 1; J < K; J = J+1)         # For the first K-1 tonals
                {
                SHN$SPD$Tn$Index = J
                ifreq1 = xSHN$SPD$Tn$Freq$I     # Get freq of Jth tonal
                level1 = xSHN$SPD$Tn$Level$I    # Get level of Jth tonal
 
                SHN$SPD$Tn$Index = J + 1
                ifreq2 = xSHN$SPD$Tn$Freq$I     # Get freq of (J+1)st tonal
                level2 = xSHN$SPD$Tn$Level$I    # Get level of (J+1)st tonal
 
                if (ifreq1 > ifreq2)            # If freqs in reverse order
                    {
                    SORTED = .false.            # Indicate not sorted
 
                    SHN$SPD$Tn$Index = J
                    SHN$SPD$Tn$Freq$I = ifreq2  # Switch frequencies &
                    putSHN$SPD$Tn$Freq$I        # levels for tonals and
                                                # store them in the
                    SHN$SPD$Tn$Level$I = level2 # blackboard
                    putSHN$SPD$Tn$Level$I
 
                    SHN$SPD$Tn$Index = J + 1
                    SHN$SPD$Tn$Freq$I = ifreq1
                    putSHN$SPD$Tn$Freq$I
 
                    SHN$SPD$Tn$Level$I = level1
                    putSHN$SPD$Tn$Level$I
                    }                           # End if wrong order
                }                               # End for first N-I tonal
            if (SORTED)  break                  # If nothing out of
                                                # order, done
            }                                   # End for each tonal
        }                                       # End for each speed
    }                                           # End for each SHN entry
 
return
end
 
