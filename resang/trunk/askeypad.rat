###    File:    ASKEYPAD.Rat
###
### Record of Modifications:
###
###   date    prog   module   comments
### ========= ====   ======   =========
###
###
### 18-AUG-89 AM     Do_ASTAB expanded for BEES Model.
###
### 14-JUN-89 AM     Do_ASTAB expanded for Various ASTAB's
###
### 18-MAY-89 AM     Do_ASTAB expanded for Small Boat Model.
###
 
include "ascii.inc"
include "bbcode.inc"
include "bbctl.inc"
include "bbsta.inc"
include "bbsbi.inc"
include "stmain.inc"
include "csf.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb    E2145   3/30/00

Subroutine Execute_KeyPad (ista, c_buff, len)
 
#########################################################################
#$%
#$% Purpose:   EXECUTE_KEYPAD calls appropriate subroutine for keypad input.
#$%
#$% Called By: PROCESS_KEYPAD
#$%
#$% Calls:     DO_ASTAB DO_RADIUS
#$%
#$% Tables:    None
#$%
#$% Date:      6 July 83
#$%
#$% Author:    T. ADAMOS
#$%
########################################################################
BBcommon
 
Integer         ista, len   # jb E2145 (arguments)  3/30/00
character       char,
                c_buff[ARB]             ## input string
 
char = c_buff[1]
 
if      (char == $LETA)   call Do_Aux (ista, c_buff,len)
else if (char == $LETB)   call Do_Radius (ista, c_buff, len)
else if (char == $LETC)   continue  ## available
else if (char <  $LETA|
         char >  $LETZ)   call Do_ASTAB (ista, c_buff, len)
else                    continue
 
return
end
 

 
#**************
#  (Blue/Orange only)
#  SHOW <board number>                          A | # | CR
#  SHOW <board number> DISPLAY <number>         A | # | . | # | CR
#  SHOW CONTINUE                                A | CR
#  SHOW CONTINUE                                A | 0 | CR
#  SHOW CONTINUE       DISPLAY <number>         A | 0 | . | # | CR
#   1         2           3       4             1   2   3   4
#**********************************
 
Subroutine Do_ASTAB (ista, buff, len)
 
#########################################################################
#$%
#$% Purpose:   DO_ASTAB get inputs for an array to change ASTABS.
#$%
#$% Called By: EXECUTE_KEYPAD
#$%
#$% Calls:     NONE
#$%
#$% Tables:    STA      SBI
#$%
#$% Date:      6 July 83
#$%
#$% Author:    T. ADAMOS
#$%
########################################################################
BBCommon
 
LITERAL             SBI$KEY$Req$C   # jb E2145  3/30/00
Integer  LEN # jb E2145;  Compiler notices this unused ARGUMENT
integer                 idsply,                ## ASTAB Number
                        XCTOI,
                        imax,                   ## number of ASTAB's
        n,ista,iboard,ireqst,ival,I_SWITCH_1,       # jb  E2145 3/30/00
        SBI$Pointer,SBI$KEY$Index,                  # jb  E2145 3/30/00
        STA$Pointer                                 # jb  E2145 3/30/00
 
character               buff[ARB]               ## input string
 
STA$Pointer$To ista
 
imax   = xSTA$NbrASTABS$I                       ##extract the number of ASTABS
idsply = xSTA$LastSBI$I                         ## extract last req screen nbr
 
iboard = -1                                     ## set requested board
n      = 1                                      # start decoding at position 1
 
ival = XCTOI (buff,n)
 
Switch (ival)           ## find board
    {
    case 0:                     continue
    case $AirEvents$Board:      iboard = ival
    case $Availability$Board:   iboard = ival
    case $BogeyTote$Board:      iboard = ival
    case $Damage$Board:         iboard = ival
    case $DamageTime$Board:     iboard = ival
    case $DownedAircraft$Board: iboard = ival   # clk 3/29 air-to-air upgrade
    case $Esm$Board:            iboard = ival
    case $AirEsm$Board:         iboard = ival   #       5/6/86
    case $SurfEsm$Board:        iboard = ival   #       5/6/86
    case $Flight$Board:         iboard = ival
    case $Hfdf$Board:           iboard = ival
    case $DefinedRoute$Board:   iboard = ival   # reh 11/20/89
    case $PassiveSonar$Board:   iboard = ival
    case $ReportPolicy$Board:   iboard = ival
    case $Ship$Board:           iboard = ival
    case $Shorebase$Board:      iboard = ival
    case $Sosus$Board:          iboard = ival
    case $Sub$Board:            iboard = ival
    case $Survsat$Board:        iboard = ival
    case $Track$Board:          iboard = ival
    case $Weather$Board:        iboard = ival
    case $ActiveAir$Board:      iboard = ival
    case $ActiveSurface$Board:  iboard = ival
    case $ActiveSub$Board:      iboard = ival
    case $AirAlert$Board:       iboard = ival
    case $IntellReport$Board:   iboard = ival
    case $Help$Board:           iboard = ival
    case $AAWCFlight$Board:     iboard = ival
    case $ASWCFlight$Board:     iboard = ival
    case $ASUWCFlight$Board:    iboard = ival
    case $AAWCEvents$Board:     iboard = ival
    case $ASWCEvents$Board:     iboard = ival
    case $ASUWCEvents$Board:    iboard = ival
    case $EWCFlight$Board:      iboard = ival           # jb    10/1/86
    case $EWCEvents$Board:      iboard = ival           # jb    10/1/86
    case $FOTCP$Board:          iboard = ival           # AM    6/14/89
    case $FOTCS$Board:          iboard = ival           # AM    6/14/89
    case $AirMissionHist$Board: iboard = ival           # clk 12/96 (E1726)
    case $AirDefenseSAM$Board:  iboard = ival           # SMM 12/93
    case $BoatAvail$Board:      iboard = ival           # AM    5/18/89
    case $BoatOps$Board:        iboard = ival           # AM    5/18/89
    case $EMIStat$Board:        iboard = ival           # AM    8/18/89
    case $RxSignal$Board:       iboard = ival           # AM    8/18/89
    case $Assault$Board:        iboard = ival           # reh   12/7/89
    case $AmphibEvents$Board:   iboard = ival           # reh   12/7/89
    case $AmphibFlight$Board:   iboard = ival           # reh   12/7/89
    case $AmphibBoatOps$Board:  iboard = ival           # reh   12/7/89
    case $EOIRTrack$Board:      iboard = ival           # reh   12/7/89
    case $Rothr$Board:          iboard = ival           # CML   3/29/90
    case $Extension$Board:      iboard = ival           # DEW   3/7/91
    case $SPA$Board:            iboard = ival           # SMM,CLK 10/22/91
    case $MineField$Board:      iboard = ival           # joa   4/22/95
    case $NonRealTimeTrack$Board: iboard = ival          # SMM   12/92
#   case $ActiveUnit$Board:     iboard = ival           # DEW 11/99
#   case $AirDefense$Board:     iboard = ival           # DEW 11/99
#   case $Armor$Board:          iboard = ival           # DEW 11/99
#   case $Artillery$Board:      iboard = ival           # DEW 11/99
#   case $Engineering$Board:    iboard = ival           # DEW 11/99
#   case $Infantry$Board:       iboard = ival           # DEW 11/99
#   case $Signal$Board:         iboard = ival           # DEW 11/99
#   case $VehicleAvail$Board:   iboard = ival           # DEW 11/99
    case $JTIDSTrack$Board:     iboard = ival           # DEW 11/99
    case $JTIDSAirTrack$Board:  iboard = ival           # DEW 11/99
    case $JTIDSLandTrack$Board: iboard = ival           # DEW 11/99
    case $JTIDSSurfTrack$Board: iboard = ival           # DEW 11/99
    case $JTMDAirToGround$Board:iboard = ival           # DEW 11/99
    case $AirBDA$Board:         iboard = ival           # DEW 11/99
    case $ShipBDA$Board:        iboard = ival           # DEW 11/99
    case $ShorebaseBDA$Board:   iboard = ival           # DEW 11/99
 
    default:                    iboard = $Help$Board
    }
 
for (; buff[n] != $COLON ; n=n+1)
    {
    if (buff[n] != $PERIOD) next
 
    n=n+1
 
    ival = XCTOI (buff,n)
 
    if      (ival < 1)      continue            ## If no screen nbr set default
    else if (ival > imax)   idsply = imax       ## never more than max screen
    else                    idsply = ival       ## save screen number
 
    if ($Extension$Board == iboard)             # Cannot extend 1st ASTAB
        idsply = max(idsply,2)                  # (do 2nd instead)  DEW 3/7/91
 
    break
    }
 
 
putSTA$LastSBI$I(idsply)                        ## put screen number in STA
 
SBI$Pointer$To (xSTA$SBIindex$I + idsply -1)    ## set SBI pointer
 
if (iboard >= 0)
    {
    putSBI$ReqBoard$I(iboard)   ## if req board changed
 
    ireqst = $New$Code                          ## update request is NEW
    }
else  ireqst = $Continue$Code
 
for(SBI$KEY$Index = 1;SBI$KEY$Index$Ok;SBI$KEY$Index =SBI$KEY$Index + 1)
   {
    SBI$KEY$Req$C = 1
    putSBI$KEY$Req$C
   }
 
putSBI$ReqSect$I(1)                             ## set for first section
putSBI$UpdateRequest$I(ireqst)                  ## put updated request in SBI
 
ista = STA$Pointer$index
 
putSTA$AstabWakeUp$i ($YES)  					# cycle ASTAB
return
end
 

 
Subroutine Do_Radius (ista, buff, len)
 
#########################################################################
#$%
#$% Purpose:   DO_RADIUS gets input from an array to change plot radius
#$%
#$% Called By: EXECUTE_KEYPAD
#$%
#$% Calls:     SYS$SETEF
#$%
#$% Tables:    STA
#$%
#$% Date:      6 July 83
#$%
#$% Author:    T. ADAMOS
#$%
########################################################################
BBcommon
 
Integer  LEN # jb E2145;  Compiler notices this unused ARGUMENT
integer                 XCTOI,
        n,ista, iok,irad, STA$Pointer   # jb E2145  3/30/00
character               buff[ARB]
 
STA$Pointer$To ista
 
iok = NO
n   = 2
 
irad = XCTOI (buff,n)
 
if (irad != 0)
    {
    if (irad >= 4000) irad = 4000
 
    putSTA$PlotRadius$i (irad)
 
    iok = YES
    }
 
if (iok == YES)
    {
    putSTA$PlotMap$I ($YES)             # request new map to be drawn
 
    putSTA$PlotWakeUp$i ($YES)  		# cycle Plot
    }
 
return
end
 

 
Subroutine Do_Aux (ista, buff, len)
 
#########################################################################
#$%
#$% Purpose:   DO_AUX gets input from an array to;
#$%                   1) display Help Board
#$%                   2) print default ASTAB,
#$%                   3) print all ASTABS, or
#$%                   4) print current GEO display.
#$%
#$%
#$% Called By: EXECUTE_KEYPAD
#$%
#$% Calls:     SYS$SETEF        DO_ASTAB
#$%
#$% Tables:    STA      SBI
#$%
#$% Date:      7 July 83
#$%
#$% Author:    T. ADAMOS
#$%
########################################################################
BBcommon
 
Integer  LEN # jb E2145;  Compiler notices this unused ARGUMENT
integer                 XCTOI,
           m,n,ista, iastb,iaux,idsp,I_SWITCH_1,        # jb E2145  3/30/00
           STA$Pointer,STA$NbrAstabs$I,STA$SBIindex$I,  # jb E2145  3/30/00
           SBI$Pointer                                  # jb E2145  3/30/00
 
character               buff[ARB]
string                  def_str "999:"
 
STA$Pointer$To ista
 
n    = 2
iaux = XCTOI (buff,n)
idsp = 0
 
for (; buff[n] != $COLON ; n=n+1)
    {
    if (buff[n] != $PERIOD) next
 
    n=n+1
 
    idsp = XCTOI (buff,n)
    }
 
if (idsp == 0) idsp = xSTA$LastSbi$I
 
STA$NbrAstabs$I = xSTA$NbrAstabs$I
 
switch (iaux)
    {
    case 1,2:
        {
        if (iaux == 2)          ## all astab
            {
            m = 1
            n = STA$NbrAstabs$I
            }
        else                    ## default astab
            {
            m = idsp
            n = m
 
            if (n > STA$NbrAstabs$I) n = STA$NbrAstabs$I
            }
 
        STA$SBIindex$I = xSTA$SBIindex$I
 
        for (iastb=m; iastb<=n; iastb=iastb+1)
            {
            SBI$Pointer$To (STA$SBIindex$I+iastb-1)
 
            putSBI$PrintRequest$I (YES)
            }
 
    	putSTA$AstabWakeUp$i ($YES)  		# cycle ASTAB
        }
    case 3:                     ## PRINT GEO DISPLAY
        {
        PUTsta$PlotPrint$i (YES)
 
    	putSTA$PlotWakeUp$i ($YES)  		# cycle Plot
        }
    default :
        {
        call Do_ASTAB (ista, def_str, 4)    # dew 7/00
        }
    }
 
return
end
 

 
integer function XCTOI (buff,n)
 
#
# Convert ascii characters to Integer value (w/overflow protection)
# Protection is provided by limiting integers to the last 6 digits
############################################
BBimplicit  # jb E2145  3/30/00
 
integer     n, nval, sign,
            nsave     # jb E2145  3/30/00
character   buff[ARB]
 
nval = 0
sign = 1
 
while (buff[n] == $SPACE | buff[n] == $TAB)     # Skip blank space
    n = n + 1
 
if (buff[n] == $MINUS)
    {
    sign = -1
    n = n + 1
    }
else if (buff[n] == $PLUS)
    {
    sign = 1
    n = n + 1
    }
 
nsave = n
 
while (buff[n] >= $DIG0 & buff[n] <= $DIG9)
    {
    if (nval > 99999)
        {
        nsave = nsave + 1
        n = nsave
 
        nval = 0
        next
        }
 
    nval = nval * 10 + (buff[n] - $DIG0)
 
    n = n + 1
    }
 
return (nval * sign)
end
