# File: STMINE.RAT
#####   Blackboard defines and include ascii constants
 
include "bbcode.inc"
include "bbctl.inc"
include "ascii.inc"
include "bbbom.inc"
include "bbmfd.inc"
include "stmain.inc"
 
define ($low$order$key,ikey2)
 
define (MFDcommon,
        integer  VER_key
        common/MFD_common/VER_key)
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  3/9/00
 

 
Subroutine MFD_STATUS
#######################################################
#$%
#$% Purpose:   MFD_STAUS generates the MFD status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     MFD_TITLE   MFDMFD
#$%
#$% Tables:    None
#$%
#$% Date:      April 1995
#$%
#$% Author:    Jim Allen
#$%
#######################################################
BBcommon
STATUScommon
 
  #$% Display title
  call MFD_TITLE
 
  #$% Display status board
  call MFDMFD
 
return
end

 
Subroutine MFD_TITLE
#######################################################
#$%
#$% Purpose:   MFD_TITLE generates a title for the
#$%            Mine Field status board.
#$%
#$% Called By: MFD_STATUS
#$%
#$% Calls:     OUTH   OUTV   OUTIZ   OUTIB
#$%
#$% Tables:    None
#$%
#$% Date:      April 1995
#$%
#$% Author:    Jim Allen
#$%
#########################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
  $prepare$next$line
 
  $column  1 ; $outV("View: ") ; $outH(nmvue,5)
  $column 14 ; $OutV("DEFINED MINE FIELDS [") ; $outI(iboard)
               $outV("] - Page ") ; $outIB(kpage,2)
  $column 61 ; $outV("Game Time: ") ; $outIZ(Game_DTGs(igmin),8)
 
return
end
 

 
Subroutine MFDMFD
########################################################
#$%
#$% Purpose:   MFDMFD executes the subroutines that
#$%            generate the defined Mine Fields
#$%            status board.
#$%
#$% Called By: MFDSTA
#$%
#$% Calls:     MFD_HEADING   NXTMFD
#$%            MFDENT   MFDNUN
#$%
#$% Tables:    None
#$%
#$% Date:      April 1995
#$%
#$% Author:    Jim Allen
#$%
##########################################################
BBcommon
STATUScommon
MFDcommon
 
integer  MFD$Pointer
Integer ifound,ifrst    # jb E2145  3/8/00
 
  if (ikey == 1.0 & ikey2 == 1.0)
    VER_key = 1
 
  #$% display heading
  call MFD_HEADING
 
  $exit$on$overflow
 
  #$% initialize flag
  ifound = $no
  ifrst = $Yes    #Flag that we have not done the 1st entry on this page
 
  repeat
    {
     #$% get next valid route MFD entry
     call NXTMFD(MFD$Pointer)
 
     #$% if last one, break loop
     if (MFD$Pointer == 0)
       break
 
     #$% found one
     ifound = $yes
 
     #$% get history data
     call MFDENT(MFD$Pointer, ifrst)
 
     ifrst = $No         #Flag that we've done the 1st entry on this page
     $exit$on$overflow
    }
 
  #$% if none, send message
  if (ifound == $no)
    call MFDNUN
 
return
end

 
 
Subroutine MFD_HEADING
###########################################################
#$%
#$% Purpose:   MFD_HEADING generates the heading for the
#$%            defined MFD status board.
#$%
#$% Called By: MFDMFD
#$%
#$% Calls:     SMOVH
#$%
#$% Tables:    None
#$%
#$% Date:      April 1995
#$%
#$% Author:    Jim Allen
#$%
###########################################################
BBcommon
STATUScommon
 
Integer ilen    # jb  E2145     3/8/00
 
#                     1         2         3         4         5         6         7         8
#            12345678901234567890123456789012345678901234567890123456789012345678901234567890
string BLNK "                                                                               "
string MSG2 "MFD   RADIUS  WARHEAD  TARGET           ---   POSITION   ---   DENSITY   LAY   "
string MSG3 "NUM    YARDS    EPU     TYPE   POINTS   LATITUDE   LONGITUDE   SQ  MI   TIME   "
string MSG4 "---   ------  -------  ------  ------   ---------  ----------  ------- ------  "
#             nn    dddd     ddd     aaaa     d      DD-MM-SSH  DDD-MM-SSH   dd.dd  ddhhmm
 
  ilen = 0; call smovh(BLNK,ARB,Ipage[1,2],ilen)
  ilen = 0; call smovh(MSG2,ARB,Ipage[1,3],ilen)
  ilen = 0; call smovh(MSG3,ARB,Ipage[1,4],ilen)
  ilen = 0; call smovh(MSG4,ARB,Ipage[1,5],ilen)
 
  linlen[2] = 79
  linlen[3] = 79
  linlen[4] = 79
  linlen[5] = 79
 
  #$% set line counter
  lincnt = 5
 
return
end

 
Subroutine NXTMFD (nxtpnt)
#################################################
#$%
#$% Purpose:   NXTMFD locates next MFD entry.
#$%
#$% Called By: MFDMFD
#$%
#$% Calls:
#$%
#$% Tables:    MFD
#$%
#$% Date:      April 1995
#$%
#$% Author:    Jim Allen
#$%
###################################################
BBcommon
StatusCommon
 
literal keys[2],lowest[2]
literal iMFD[2]
integer nxtpnt,len,iblue,iorange,  # jb E2145  3/8/00
        iokay,itoc,irsult,         # jb E2145  3/9/00
        MFD$Pointer,MFD$Side$I     # jb E2145  3/8/00
 
  nxtpnt = 0
  iblue = $no
  iorange = $no
 
  if (iview >= $FirstBlue$View & iview <= $LastBlue$View)
    iblue = $yes
      else if (iview >= $FirstOrange$View & iview <= $LastOrange$View)
    iorange = $yes
  else      # status board for neutral
    return
 
  #$% initalize search array to maximum
  lowest[1] = $highest$ascii
  lowest[2] = '99999999'
 
  #$% if first entry save lowest - else save key
  if (ikey  == 1)
    keys[1] = $lowest$ascii
  else
    keys[1] = ikey
  keys[2] = ikey2
 
  for (MFD$Pointer$First; MFD$Pointer$Valid; MFD$Pointer$Next)
    {
     if (xMFD$InUse$I == $no)
       next
 
     if (Xmfd$GhostedUnit$i == $YES) next       # Skip ghosted minefields
 
     iokay = $no
     MFD$Side$i = xMFD$Side$i
     if (iblue == $yes & MFD$Side$i == $BLUE$code)
       iokay = $yes
     else if (iorange == $yes & MFD$Side$i == $ORANGE$code)
       iokay = $yes
 
     if (iokay == $yes)
       {
        iMFD[1] = $BLANKLIT
        iMFD[2] = $BLANKLIT
        len = 0
        # E2286 JOA UFL02 - Blank fill instead of zero fill
        call smovib(xMFD$Sequence$i,3, iMFD[1], len)      # Get the mine field number
 
        #$% compare the mine field number to keys
        call COMPAR (2, iMFD, keys, irsult)
 
        if (irsult <  0)                # if less than keys - next
          next
 
        if (irsult == 0)                # if an exact match was found
          {
           #$% save the pointer and return
           nxtpnt = MFD$Pointer
           return
          }
 
        #$% compare field number to lowest
        call COMPAR (2, iMFD, lowest, irsult)
 
        if (irsult > 0)                 # if larger than lowest found - next
          next
 
        lowest[1] = iMFD[1]             # have best candidate so far
        lowest[2] = iMFD[2]
 
        #$% save pointer
        nxtpnt = MFD$Pointer
       }
    }
 
  #$% save lowest key
  ikey  = lowest[1]
  ikey2 = lowest[2]
return
end

 
 
Subroutine MFDENT(MFD$Pointer,ifrst)
##################################################################
#$%
#$% Purpose:   MFDENT gets data for defined MFD status board.
#$%
#$% Called By: MFDMFD
#$%
#$% Calls:     SMOVIB       SMOVH       SMOVLL
#$%
#$% Tables:    MFD
#$%
#$% Date:      April 1995
#$%
#$% Author:    Jim Allen
#$%
#$% Modified:  Jim Allen - 1/97 (E1597)
#$%            Display lay density on player line and current density
#$%            on control line (if a control station).
#$%
######################################################################
BBcommon
STATUScommon
MFDcommon
 
integer icontinued,ifrst,                           # jb E2145 3/8/00
        MFD$Pointer,MFD$VER$index,MFD$TargetType$i, # jb E2145 3/8/00
        MFD$Points$I                                # jb E2145 3/9/00
integer Game_DTG
Integer ifirst  # Jb E2145 Local vrbl, distinct frm IFRST, above  3/9/00
VaxCharacter*6 TargetType
BBDeclare (bom$pointer, bom$weight$i, bom$DestructionRadius$i)
$save$line$count
$prepare$next$line         # If U use these macros always place them
$test$next$line            # in the same order when used more than
$exit$on$overflow          # once inside a subroutine or your
                           # linecount could be screwed and/or skewed.
 
MFD$VER$Index = VER_key
 
if (ifrst == $No)       # If this is not the 1st entry on this screen, add an
    {                     # extra blank line to separate entries.
     $prepare$next$line
     $test$next$line
     $exit$on$overflow
    }
ifirst = $Yes
if (MFD$VER$Index > 1)
    icontinued = $yes
else if (MFD$VER$Index == 0)
    MFD$VER$Index = 1
 
bom$pointer$to Xmfd$BOMIndx$i
 
MFD$Points$I = xMFD$Points$I
 
for (;  MFD$VER$Index <= MFD$Points$I; MFD$VER$Index = MFD$VER$Index + 1)
    {
     VER_key = MFD$VER$Index
     if (icontinued == $yes)
       {
        $Column 3 ; $OutV ("Mine Fields continued from previous page.")
        icontinued = $No
        $Prepare$Next$Line
        $Test$Next$Line
        $Exit$on$Overflow
       }
 
# 12345678901234567890123456789012345678901234567890123456789012345678901234567890
#"MFD   RADIUS  WARHEAD  TARGET           ---   POSITION   ---   DENSITY   LAY  "
#"NUM    YARDS    EPU     TYPE   POINTS   LATITUDE   LONGITUDE   SQ  MI   TIME   "
#"---   ------  -------  ------  ------   ---------  ----------  ------- ------  "
#  nn    dddd     ddd     aaaa     d      DD-MM-SSH  DDD-MM-SSH   dd.dd  ddhhmm
 
     if (ifirst == $Yes)   # if the first line for the MFD display
       {
        MFD$TargetType$i = xMFD$TargetType$i
        if      (MFD$TargetType$i == $Surface$Code)    TargetType = "ASUW"
        else if (MFD$TargetType$i == $Sub$Code)        TargetType = "ASW"
        else if (MFD$TargetType$i == $ShipAndSub$Code) TargetType = "BOTH"
 
        $Column  2 ; $OutIB  (xMFD$Sequence$I, 2)
        $Column  8 ; $OutIB  (xBOM$DestructionRadius$I, 4)
        $Column 16 ; $OutIB  (INT(xBOM$Weight$I/100), 3)
        $Column 25 ; $OutV   (TargetType)
        $Column 34 ; $OutI   (xMFD$Points$I)
        $Column 41 ; $OutLLS (xMFD$VER$Latitude$f,"NS")
        $Column 52 ; $OutLLS (xMFD$VER$Longitude$f,"EW")
        $Column 65 ; $OutF   (xMFD$LayDensity$F, 502)    # joa 1/97 (E1597)
        $Column 72 ; $OutIZ   (Game_DTG(xMFD$TimeCreated$F), 6)    # joa 8/04 UFL04
        #$% set line length                              # initial density on
        LINLEN[LINCNT] = IBYTE                           # the line with a
        ifirst = $No                                     # control line
        #$% if CONTROL view
        if (mside == $control$code)                      # if a control station
           {                                             # provide actual density
            $test$next$line
            $exit$on$overflow
            $prepare$next$line
 
            $Column 64
            call smov ($Lparen,IPAGE[1,LINCNT],IBYTE)
            $Column 65
            $OutF     (xMFD$Density$F, 502)
            call SMOV ($Rparen,IPAGE[1,LINCNT],IBYTE)
            LINLEN[LINCNT] = IBYTE             # set char count
           }
       }
     else
       {
        $Save$Keys
        $Save$Line$Count
        $Prepare$Next$Line
        $Test$Next$Line
        $Exit$on$Overflow
        $Column 41 ; $OutLLS (xMFD$VER$Latitude$f,"NS")
        $Column 52 ; $OutLLS (xMFD$VER$Longitude$f,"EW")
        #$% set line length
        LINLEN[LINCNT] = IBYTE             # set char count
       }
    }
 
VER_key = 1
$update$keys
 
$test$next$line          # check if the last line of the MFD ends up on the last line of
                        # the screen - prevents the screen from scrolling up one line
 
return
end

 
 
Subroutine MFDNUN
#########################################################################
#$%
#$% Purpose:   MFDNUN displays message if there are no defined MFDs
#$%            for this view.
#$%
#$% Called By: MFDMFD
#$%
#$% Calls:     OUTV
#$%
#$% Tables:    None
#$%
#$% Date:      April 1995
#$%
#$% Author:    Jim Allen
#$%
#########################################################################
BBcommon
STATUScommon
 
$test$next$line
$exit$on$overflow
$prepare$next$line
 
#$% send no aircraft message
$column 8 ; $OutV("There are no defined Mine Fields for this side")
 
return
end
