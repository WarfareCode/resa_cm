############################################################################
#                            STFOTCP.RAT
#
#             FORCE OTH-T TRACK COORDINATOR PRIMARY ASTAB PROGRAM
#
#     - Displays output of Primary data from POST GOLD messages on an ASTAB
#
############################################################################
 
include "bbcode.inc"                                    # blackboard defines
include "bbctl.inc"
include "ascii.inc"                                     # include ascii constants
include "macros.inc"
include "bbpst.inc"
include "stmain.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  3/20/00
#define ($low$order$key,ikey)
define ($low$order$key,ikey2)
 
define (unknown$unit,1)
define (hostile$unit,2)
define (neutral$unit,3)
define (friend$unit, 4)
 
define (air$unit, 1)
define (surf$unit,2)
define (sub$unit, 3)
define (merf$unit,4)
define (unk$unit, 5)
 

 
Subroutine FOTCSTA
#########################################################################
#$%
#$% Purpose:   FOTCSTA controls display of the FOTC status board.
#$%
#$% Date:      May 1987
#$%
#$% Author:    Jim Kvederis
#$%
#########################################################################
BBcommon
STATUScommon
 
call FOTCTIT                       # Generates status board titles
 
call FOTCEXE                       # Generates data for status board
 
return
end
 

 
 
Subroutine FOTCTIT
########################################################################
#$%
#$% Purpose:   FOTCTIT generates the title for the FOTC status board.
#$%
#$% Date:      May 1987
#$%
#$% Author:    Jim Kvederis
#$%
########################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
$prepare$next$line
 
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
$column 20 ; $OutV("FOTC PRIMARY STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
Subroutine FOTCEXE
##############################################################################
#$%
#$% Purpose:   FOTCEXE executes the subroutines that generate the FOTC status
#$%            board.
#$%
#$% Date:      MAY 1987
#$%
#$% Author:    Jim Kvederis
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer ifound,lstsec,lstsec2, PST$Pointer  # jb E2145  3/20/00
 
call FOTCHED                      # Display column titles (headings)
 
$exit$on$overflow
 
ifound = $no
lstsec = 0
lstsec2 = 0
 
call astab_update
 
repeat
   {
    call NXTUNT(pst$pointer)
 
    if (pst$pointer == 0) break
 
    ifound = $yes
 
    call FOTCDAT (pst$pointer, lstsec, lstsec2)
 
    $exit$on$overflow
   }
 
if (ifound == $no)  call FOTCNUN  # Display not data string
 
return
end
 

 
 
Subroutine FOTCHED
###########################################################################
#$%
#$% Purpose:   FOTCHED generates column titles (headings) for the FOTC
#$%            status board.
#$%
#$% Date:      May 1987
#$%
#$% Author:    Jim Kvederis
#$%
###########################################################################
BBcommon
STATUScommon
 
Integer i, ilen     # jb E2145  3/20/00
 
string HDNG1 "TRACK  NAME             TIME TYPE  PNDT FL LAT    LONG    CSE SPD  ENOTE ELIPS"
string HDNG2 "------ ---------------- ---- ----- ---- -- ------ ------- --- ---- ----- -----"
 
ilen = 0
for (i = 1; i <= 78; i = i + 1) call smov (EOS,IPAGE[1,2],ilen)
 
ilen = 0
for (i = 1; i <= 78; i = i + 1) call smov (EOS,IPAGE[1,3],ilen)
 
ilen = 0;  call smovh(HDNG1,ARB,IPAGE[1,2],ilen)
LINLEN[2] = ilen     # jb E2145  3/20/00
ilen = 0;  call smovh(HDNG2,ARB,IPAGE[1,3],ilen)
LINLEN[3] = ilen     # jb E2145  3/20/00
 
LINCNT = 3                                     # set line count
 
return
end
 

 
Subroutine NXTUNT(nxtpnt)
####################################################################
#$%
#$% Purpose:   NXTUNT locates the next unit data for display.
#$%
#$% Date:      27 JAN 82
#$%
#$% Auhtor:    F. Jones
#$%
####################################################################
BBcommon
StatusCommon
 
literal trknbr[3], keys[3], lowest[3],
        PST$TrkNbr$C, CSTRIP8           # jb  E2145 3/20/00
LitCharEquiv(iorder,4)
LitCharEquiv(itype,5)
integer ctoi, LL,         # jb  Delete length E2145 3/20/00
        kk,nxtpnt,irsult,id_track,id_type, # jb  E2145 3/20/00
        PST$Pointer,PST$SerialNbr$I     # jb  E2145 3/20/00
 
 
data iorderC[unknown$unit]/ "1       " /
data iorderC[hostile$unit]/ "2       " /
data iorderC[neutral$unit]/ "3       " /
data iorderC[friend$unit ]/ "4       " /
 
data itypeC[air$unit     ]/ "1       " /
data itypeC[surf$unit    ]/ "2       " /
data itypeC[sub$unit     ]/ "3       " /
data itypeC[merf$unit    ]/ "4       " /
data itypeC[unk$unit     ]/ "5       " /
 
lowest[1] = '9'
lowest[2] = '9'         # $highest$ascii
lowest[3] = $highest$ascii     # '99999999'
 
keys[1] = $BLANKLIT
kk = 0; call smovi (isect,keys[1],kk)
 
keys[2] = $BLANKLIT
kk = 0; call smovi (isect2,keys[2],kk)
 
#if (ikey  == 1) keys[2] = $lowest$ascii
#else            keys[2] = ikey
 
keys[3] = ikey2
 
nxtpnt = 0
 
#for (pst$pointer$first; pst$pointer$ok; pst$pointer$next)
for_all_ok (PST)
   {
    pst$serialnbr$i = xpst$serialnbr$i
    if (pst$serialnbr$i == 0) next
 
    call get_ident (pst$pointer, id_track)
    trknbr[1] = iorder[id_track]
 
    call get_type (pst$pointer, id_type)
    trknbr[2] = itype[id_type]
 
    pst$trknbr$c = xpst$trknbr$c
    trknbr[3] = $BLANKLIT
 
    kk = 0; call smovh (pst$trknbr$c,8,trknbr[3],kk)
 
    call COMPAR(3, trknbr, keys, irsult)
 
    if (irsult <  0) next                       # less than keys
 
    if (irsult == 0)                            # found exact match
       {
	nxtpnt = pst$pointer
	return
       }
 
    call COMPAR(3, trknbr, lowest, irsult)
 
    if (irsult > 0) next                        # larger than lowest found
 
    lowest[1] = trknbr[1]                       # at this point, have
    lowest[2] = trknbr[2]                         # best candidate so far
    lowest[3] = trknbr[3]
 
    nxtpnt = pst$pointer
   }
 
kk = 1
isect = ctoi(lowest[1],kk)
 
ll = 1
isect2 = ctoi(lowest[2],ll)
 
ikey   = lowest[2]
ikey2  = lowest[3]
 
return
end
 

 
Subroutine alfa_numb (alfa, inumb)
#############################################################################
#$%
#$% Purpose:   Convert letter designator of type to appropriate number
#$%
#$% Date:      November 1987
#$%
#$% Author:    Jim Kvederis
#$%
#############################################################################
BBcommon
STATUScommon
 
integer inumb
character alfa[1]
 
if      (alfa[1] == 'A') inumb = 1
else if (alfa[1] == 'S') inumb = 2
else if (alfa[1] == 'U') inumb = 3
else if (alfa[1] == 'W') inumb = 4
else                     inumb = 5
 
return
end
 

 
Subroutine get_ident (pst$pointer, id_track)
#############################################################################
#$%
#$% Purpose:   Get_ident gets the identity of the track (unknown, hostile
#$%            friend).
#$%
#$% Date:      October 1987
#$%
#$% Author:    Jim Kvederis
#$%
#############################################################################
BBcommon
STATUScommon
 
## jb  E2144/E2149  All "equal" changed to "equal_HV"   8/1/00
 
LITERAL CSTRIP8                     # jb E2145  3/20/00
integer EQUAL_hv,              # jb E2144/E2149 8/1/00
        ii,id_track, PST$Pointer    # jb E2145  3/20/00
character flag[2]
 
ii = 0
call smovh (xpst$flag$c, 2, flag, ii)
 
if      (equal_HV(flag,"UR") == YES | equal_HV(flag,"CH") == YES |
         equal_HV(flag,"KN") == YES | equal_HV(flag,"SY") == YES |
         equal_HV(flag,"GC") == YES | equal_HV(flag,"LY") == YES )
              id_track = hostile$unit                             # 2
else if (equal_HV(flag,"PM") == YES | equal_HV(flag,"SW") == YES |
         equal_HV(flag,"HK") == YES | equal_HV(flag,"IN") == YES )
              id_track = neutral$unit                             # 3
else if (equal_HV(flag,"US") == YES | equal_HV(flag,"UK") == YES |
         equal_HV(flag,"FR") == YES | equal_HV(flag,"AS") == YES |
         equal_HV(flag,"JA") == YES | equal_HV(flag,"RP") == YES |
         equal_HV(flag,"DA") == YES | equal_HV(flag,"NO") == YES |
         equal_HV(flag,"TW") == YES | equal_HV(flag,"KS") == YES )
              id_track = friend$unit                               # 4
else          id_track = unknown$unit                              # 1
 
return
end
 

 
Subroutine get_type (pst$pointer, id_type)
#############################################################################
#$%
#$% Purpose:   Get_type gets the type of track (air, surface, hostile)
#$%
#$% Date:      October 1987
#$%
#$% Author:    Jim Kvederis
#$%
#############################################################################
BBcommon
STATUScommon
 
## jb  E2144/E2149  All "equal" changed to "equal_HV"   8/1/00
 
LITERAL CSTRIP8                          # jb E2145  3/20/00
integer EQUAL_hv,                  # jb E2144/E2149  8/1/00
        ii, id_type, ilen, PST$Pointer   # jb E2145  3/20/00
character type[3]
 
ii = 0
call smovh (xpst$cat$c, 3, type, ii)
 
ilen = 0
if      (equal_HV(type,"AIR") == YES) id_type = air$unit     # 1
else if (equal_HV(type,"NAV") == YES) id_type = surf$unit    # 2
else if (equal_HV(type,"SUB") == YES) id_type = sub$unit     # 3
else if (equal_HV(type,"MER") == YES |
         equal_HV(type,"FSH") == YES) id_type = merf$unit    # 4
else                               id_type = unk$unit     # 5
 
return
end
 

 
Subroutine FOTCDAT (pst$pointer, lstsec, lstsec2)
#############################################################################
#$%
#$% Purpose:   FOTCDAT gets the FOTC data for display on the status board.
#$%
#$% Date:      May 1987
#$%
#$% Author:    Jim Kvederis
#$%
#############################################################################
BBcommon
STATUScommon
 
Literal NMarray[2],            # jb E2145 (remove CLarray[2]  E2145 3/20/00
        PST$Type$C,PST$TrkNbr$C,PST$Flag$C,             # jb  E2145 3/20/00
        PST$Lat$C,PST$Long$C,PST$enote$C                # jb  E2145 3/20/00
LITERAL CSTRIP8                                         # jb  E2145 3/20/00
Integer i,klen,jlen,lstsec,lstsec2,                     # jb  E2145 3/20/00
        PST$Pointer,PST$NM$Index,PST$dtg$I,PST$abng$I,  # jb  E2145 3/20/00
        PST$PNDnbr$I,PST$Cse$I,PST$Spd$I                # jb  E2145 3/20/00
character nameout[16]     # jb E2145 (remove CLASSOUT)        E2145 3/20/00
 
$test$next$line ; $exit$on$overflow
$save$line$count
 
$update$keys
 
$prepare$next$line
 
#--------- get "ENEMY","FRIENDLY","UNKNOWN" headings for display ------
 
if ((isect != lstsec) | (isect2 != lstsec2))
   {
    call get_head
 
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    lstsec = isect
    lstsec2 = isect2
   }
 
#----------------- Any Data Input ? ---------------------------
 
#pst$trknbr$c = xpst$trknbr$c
#trknbr[1] = pst$trknbr$c
 
#----------------- Line 1: CTC ---------------------------
 
ibyte = 0
 
pst$trknbr$c = xpst$trknbr$c
call smovh (pst$trknbr$c, 6, ipage[1,lincnt], ibyte)
 
klen = 0
for (i = 1; i <= 16; i = i + 1) call smov ($SPACE, nameout, klen)
 
jlen = 0
for (pst$NM$index=1; pst$NM$index<=2; pst$NM$index=pst$NM$index+1)
   {
    NMarray[pst$NM$index] = xpst$NM$name$c
    call smovh (NMarray[pst$NM$index], 8, nameout, jlen)
   }
 
ibyte = 7
call smovh (nameout, 16, ipage[1,lincnt], ibyte)
 
#klen = 0
#for (i = 1; i <= 16; i = i + 1) call smov ($SPACE, classout, klen)
#
#ilen = 0
#for (pst$CL$index=1; pst$CL$index<=2; pst$CL$index=pst$CL$index+1)
#   {
#    CLarray[pst$CL$index] = xpst$CL$class$c
#    call smovh (CLarray[pst$CL$index], 8, classout, ilen)
#   }
#
#ibyte = 34
#call smovh (classout, 16, ipage[1,lincnt], ibyte)
 
pst$dtg$i = xpst$dtg$i
ibyte = 24
 
call smoviz (pst$dtg$i, 4, ipage[1,lincnt], ibyte)
 
pst$type$c = xpst$type$c
ibyte = 29
call smovh (pst$type$c, 6, ipage[1,lincnt], ibyte)
 
pst$pndnbr$i = xpst$pndnbr$i
ibyte = 35
if (pst$pndnbr$i <= 0) call smovv ("XXX", ipage[1,lincnt], ibyte)
else                   call smovi (pst$pndnbr$i, ipage[1,lincnt], ibyte)
 
pst$flag$c = xpst$flag$c
ibyte = 40
call smovh (pst$flag$c, 2, ipage[1,lincnt], ibyte)
 
pst$lat$c = xpst$lat$c
ibyte = 43
call smovh (pst$lat$c, 6, ipage[1,lincnt], ibyte)
 
pst$long$c = xpst$long$c
ibyte = 50
call smovh (pst$long$c, 7, ipage[1,lincnt], ibyte)
 
pst$cse$i = xpst$cse$i
ibyte = 58
if (pst$cse$i == 366) call smovv ("XXX", ipage[1,lincnt], ibyte)
else                  call smoviz (pst$cse$i, 3, ipage[1,lincnt], ibyte)
 
pst$spd$i = xpst$spd$i
ibyte = 62
if (pst$cse$i == 366) call smovv ("XXXX", ipage[1,lincnt], ibyte)
else                  call smovi (pst$spd$i, ipage[1,lincnt], ibyte)
 
pst$enote$c = xpst$enote$c
ibyte = 67
call smovh (pst$enote$c, 5, ipage[1,lincnt], ibyte)
 
pst$abng$i = xpst$abng$i
 
ibyte = 75                        # is there an ellipse ? Y/N
if (pst$abng$i == 366) call smovv ("N", ipage[1,lincnt], ibyte)
else                   call smovv ("Y", ipage[1,lincnt], ibyte)
 
linlen[lincnt] = ibyte
 
return
end
 

 
Subroutine FOTCNUN
############################################################################
#$%
#$% Purpose:   FOTCNUN generates a message when there is no FOTC data for
#$%            display.
#$%
#$% Date:      May 1987
#$%
#$% Author:    Jim Kvederis
#$%
############################################################################
BBcommon
STATUScommon
 
$test$next$line ; $exit$on$overflow
 
$prepare$next$line
 
$column 1 ; $OutV("There is NO FOTC DATA coming from POST") # jb outV 3/20/00
 
return
end
 

 
Subroutine Get_head
##############################################################################
#$%
#$%  Get_head generates type of track headings (re: friendly, enemy,
#$%            etc.) for the status board.
#$%
#$% Called By: TRKENT
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer kk         # jb  E2145 3/20/00
 
kk = 0
 
if (isect == unknown$unit)         # 1
   {
    if      (isect2 == air$unit)   # 1
      call smovv("*** U N K N O W N  A I R ***",ipage[1,LINCNT],kk)
    else if (isect2 == surf$unit)  # 2
      call smovv("*** U N K N O W N  S U R F A C E  ***",ipage[1,LINCNT],kk)
    else if (isect2 == sub$unit)   # 3
      call smovv("*** U N K N O W N  S U B ***",ipage[1,LINCNT],kk)
    else if (isect2 == merf$unit)  # 4
      call smovv("*** U N K N O W N  M E R C H / F I S H ***",ipage[1,LINCNT],kk)
    else if (isect2 == unk$unit)   # 5
      call smovv("*** U N K N O W N  U N K  P L A T F O R M ***",ipage[1,LINCNT],kk)
   }
else if (isect == hostile$unit)   # 2
   {
    if      (isect2 == air$unit)  # 1
      call smovv("*** H O S T I L E  A I R ***",ipage[1,LINCNT],kk)
    else if (isect2 == surf$unit) # 2
      call smovv("*** H O S T I L E  S U R F A C E  ***",ipage[1,LINCNT],kk)
    else if (isect2 == sub$unit)  # 3
      call smovv("*** H O S T I L E  S U B ***",ipage[1,LINCNT],kk)
    else if (isect2 == merf$unit) # 4
      call smovv("*** H O S T I L E  M E R C H / F I S H ***",ipage[1,LINCNT],kk)
    else if (isect2 == unk$unit)  # 5
      call smovv("*** H O S T I L E  U N K  P L A T F O R M  ***",ipage[1,LINCNT],kk)
   }
else if (isect == neutral$unit)  # 3
   {
    if      (isect2 == air$unit) # 1
      call smovv("*** N E U T R A L  A I R ***",ipage[1,LINCNT],kk)
    else if (isect2 == surf$unit) # 2
      call smovv("*** N E U T R A L  S U R F A C E  ***",ipage[1,LINCNT],kk)
    else if (isect2 == sub$unit)  # 3
      call smovv("*** N E U T R A L  S U B ***",ipage[1,LINCNT],kk)
    else if (isect2 == merf$unit) # 4
      call smovv("*** N E U T R A L  M E R C H / F I S H ***",ipage[1,LINCNT],kk)
    else if (isect2 == unk$unit)
      call smovv("*** N E U T R A L  U N K  P L A T F O R M ***",ipage[1,LINCNT],kk)
   }
else if (isect == friend$unit)  # 4
   {
    if      (isect2 == air$unit)  # 1
      call smovv("*** F R I E N D L Y  A I R ***",ipage[1,LINCNT],kk)
    else if (isect2 == surf$unit) # 2
      call smovv("*** F R I E N D L Y  S U R F A C E  ***",ipage[1,LINCNT],kk)
    else if (isect2 == sub$unit)  # 3
      call smovv("*** F R I E N D L Y  S U B ***",ipage[1,LINCNT],kk)
    else if (isect2 == merf$unit) # 4
      call smovv("*** F R I E N D L Y  M E R C H / F I S H ***",ipage[1,LINCNT],kk)
    else if (isect2 == unk$unit)  # 5
      call smovv("*** F R I E N D L Y  U N K  P L A T F O R M ***",ipage[1,LINCNT],kk)
   }
 
LINLEN[LINCNT] = kk
 
return
end
 

 
subroutine astab_update
####################################################################
#
#  Deletes old tracks for status board.  Old track determined by
#  user input at initialization.
#
####################################################################
bbcommon
 
## jb  E2144/E2149  All "equal" changed to "equal_HV"   8/1/00
 
LITERAL PST$Cat$C,  CSTRIP8                     # jb  E2145 3/20/00
integer itimelate, idtg, igmin,                 # jb  E2145 3/20/00
        PST$Pointer,PST$SerialNbr$I,PST$dtg$I   # jb  E2145 3/20/00
integer EQUAL_hv, Game_DTG          # jb E2144, E2149   8/1/00
 
#for (pst$pointer$first ; pst$pointer$ok ; pst$pointer$next)
for_all_ok (PST)
   {
    pst$serialnbr$i = xpst$serialnbr$i
    if (pst$serialnbr$i == 0) next
 
    pst$dtg$i = xpst$dtg$i
    pst$cat$c = xpst$cat$c
 
    if      (equal_HV (pst$cat$c,"AIR") == YES) itimelate = rgair$late
    else if (equal_HV (pst$cat$c,"NAV") == YES) itimelate = rgsurf$late
    else if (equal_HV (pst$cat$c,"SUB") == YES) itimelate = rgsub$late
    else                                     itimelate = rgunk$late
 
    igmin = game$minute - itimelate
    idtg = Game_DTG (FLOAT(igmin))  # jb E2208  9/27/00
 
    if (pst$dtg$i <= idtg)
      {
       pst$zero
       next
      }
   }
 
return
end
