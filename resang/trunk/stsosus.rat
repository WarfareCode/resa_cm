 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 9-mar-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw             modularized routine and made compatible with
###                     use of search keys in main driver;
###                     added checks on validity of data to avoid
###                     problems which could result now that the blackboard
###                     can be read at any time
###
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                     UTILITY                    DATA
#$%    SUBROUTINES                SUBROUTINES                 TABLES
#$%    ===========                ===========                 ======
#$%
#$%      SOSSTA                     OUTH                        SOS
#$%      SOSTIT                     OUTI                        UNT
#$%      SOSSOS                     SMOVIB                      SWD
#$%      SOSHED                     SMOVIZ
#$%      NEXT_SOS_TRK               SMOVH
#$%      NEXT_SWD_TRK               SMOVLL
#$%      SOSENT
#$%      SWDENT
#$%      SOSNUN
#$%      COMPAR<STATUS>
#$%      COURSE<STATUS>
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1. <filename> indicates where subroutine is located.
#$%
#$%    2. Utility subroutines not shown on flowchart.
#$%
#$%    3. * indicates no other subroutines called.
#$%
#$%
#$%    FLOWCHART FOR SOSSTA
#$%    ====================
#$%
#$%    STDISP<STATUS> - SOSSTA - SOSTIT*
#$%                            - SOSSOS - SOSHED*
#$%                                     - NEXT_SOS_TRK - COMPAR*
#$%                                     - SOSENT - BLDTKN*
#$%                                              - COURSE*
#$%                                     - NEXT_SWD_TRK - COMPAR*
#$%                                     - SWDENT - BLDTKN*
#$%                                              - COURSE*
#$%                                     - SOSNUN*
 
# 
 
 
 
include "bbctl.inc"
include "bbcode.inc"
include "bbunt.inc"
include "bbsos.inc"
include "ascii.inc"
include "stmain.inc"
include "bbswd.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  3/14/00
define ($low$order$key,ikey)
 
 
Subroutine SOSSTA
 
#################################################################
#$%
#$% Purpose:   SOSSTA controls the SOSUS status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     SOSTIT     SOSSOS
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
#################################################################
 
BBcommon
STATUScommon
 
#$% call to display SOSUS titles
call SOSTIT
 
#$% call to  display SOSUS status board data
call SOSSOS
 
return
end
 

 
 
Subroutine SOSTIT
 
##########################################################################
#$%
#$% Purpose:   SOSTIT generates the titles for display on the SOSUS
#$%            status board.
#$%
#$% Called By: SOSSTA
#$%
#$% Calls:     OUTH     OUTI
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
##########################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
#$% go to new line
$prepare$next$line
 
#$% display SOSUS status board titles
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
$column 17 ; $OutV("SOSUS & SWABS STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
 
Subroutine SOSSOS
 
###########################################################################
#$%
#$% Purpose:   SOSSOS executes the subroutines that generate the SOSUS
#$%            status board.
#$%
#$% Called By: SOSSTA
#$%
#$% Calls:     SOSHED           SOSENT
#$%            NEXT_SOS_TRK     SWDENT
#$%            NEXT_SWD_TRK     SOSNUN
#$%
#$% Tables:    SOS              SWD             STA
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
###########################################################################
BBcommon
STATUScommon
 
integer  view_side,
         ifound,  SOS$Pointer,  SWD$Pointer  # jb E2145  3/14/00
 
  call SOSHED
 
  #$% initialize test flag
  ifound = $no
 
if (isect == 1)      # sosus tracks are in the first sector
  {
   if (iview == Sosus$View)
     {
      repeat      # search for sosus tracks
        {
         #$% get next sosus entry
         call NEXT_SOS_TRK (sos$pointer)
 
         if (sos$pointer == 0)
           break
 
         ifound = $yes
 
         #$% get sosus data
         call SOSENT(sos$pointer)
 
         #$% exit if status board full
         $exit$on$overflow
        }
 
      #$% set key
      ikey = 1
     }
  }
 
#$% If isect is = 1, sosus tracks are complete, so set isect for swabs
#$% and if isect is = 2, it will be reset to 2 for swabs detections
isect = 2
 
if (isect == 2)     # swabs are sector two
  {
   view_side = 0
 
   if (iview == SWABS$B_View)  # blue SWABS
     view_side = $blue$code
   else if (iview == SWABS$O_view)   # orange SWABs
     view_side = $orange$code
 
   if (view_side != 0)
     {
      repeat
        {
         #$% get next swabs entry
         call NEXT_SWD_TRK (swd$pointer, view_side)
 
         if (swd$pointer == 0)
           break
 
         ifound = $yes
 
         #$% get swabs data
         call SWDENT(swd$pointer)
 
         #$% exit if status board full
         $exit$on$overflow
        }
     }
  }
 
  #$% if no sosus or swabs entries found, display message
  if (ifound == $no)  call SOSNUN
 
return
end
 

 
Subroutine SOSHED
 
############################################################################
#$%
#$% Purpose:   SOSHED generates the headings for display on the SOSUS
#$%            status board.
#$%
#$% Called By: SOSSOS
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
############################################################################
BBcommon
STATUScommon
 
Integer ilen    # jb E2145  3/14/00
 
string MSG1 "                                       --------- CONTAINMENT AREA --------"
string MSG2 "                                       --- CENTER --   ------ AXIS -------"
string MSG3 "TRK #   CLASS    CRS SPD PM  TIME       LAT    LONG    MAJ    MIN    ORIEN"
##                     1         2         3         4         5         6
##           01234567890123456789012345678901234567890123456789012345678901234567890123456789
string MSG4 "-----  --------  --- --- -- ------     ------ -------  ---    ---     --- "
 
ilen = 0;  call smovh(MSG1,ARB,IPAGE[1,2],ilen)
LINLEN[2]= ilen     # jb  E2141 2/24/00
ilen = 0;  call smovh(MSG2,ARB,IPAGE[1,3],ilen)
LINLEN[3]= ilen     # jb  E2141 2/24/00
ilen = 0;  call smovh(MSG3,ARB,IPAGE[1,4],ilen)
LINLEN[4]= ilen     # jb  E2141 2/24/00
ilen = 0;  call smovh(MSG4,ARB,IPAGE[1,5],ilen)
LINLEN[5]= ilen     # jb  E2141 2/24/00
 
#$% set line count
LINCNT = 5
 
return
end
 

 
Subroutine NEXT_SOS_TRK (nxtpnt)
 
##############################################################################
#$%
#$% Purpose:   NEXT_SOS_TRK locates the next SOSUS data for display on the
#$%            status board.
#$%
#$% Called By: SOSSOS
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    SOS
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################################
BBcommon
STATUScommon
 
LITERAL itrk[1],keys[1],lowest[1]
Integer kk,irsult, nxtpnt,              # jb  10/19/98
        SOS$Pointer,SOS$SequenceNmbr$I  # jb  10/19/98
 
#$% initialize search array
lowest[1] = '99999999'
 
#$% initialize key
#$% if one (special case), set lowest, else save key
if (ikey  == 1) keys[1] = $lowest$ascii  # (New line; dew, via jb)      2/23/00
else            keys[1] = ikey  # jb (This line formerly unconditional) 2/23/00
 
#$% initialize pointer to zero
nxtpnt = 0
 
#$% search SOS table
for (sos$pointer$first; sos$pointer$ok; sos$pointer$next)
   {
    #$% if SOSUS detection not found, get next
    #$% Note:  The sos$detectee$i field is set to zero by the bistatic model
    #$%        (SBDMOD) for false contacts.  Thus, if sos$BistaticDetection$i
    #$%        is not zero, this entry is a bistatic false contact.
    if ((xsos$detectee$i == 0) & (xSOS$BistaticDetection$i == $NO)) next
 
    #$% get sequence number
    sos$SequenceNmbr$i = xsos$SequenceNmbr$i
 
    #$% if sequence number is zero, get next
    if (sos$SequenceNmbr$i == 0) next           # means data is garbage
 
    #$% save sequence number
    kk = 0; call smovv ("        ", itrk[1], kk)
 
    kk=0; call smoviz (sos$SequenceNmbr$i,3,itrk[1],kk)
 
    #$% compare track number to keys
    call COMPAR(1,itrk,keys,irsult)
 
    if (irsult <  0) next                       # less than keys
 
    if (irsult == 0)                            # found exact match
       {
        #$% save pointer and return
        nxtpnt = sos$pointer
        return
       }
 
    #$% compare track number to lowest
    call COMPAR(1,itrk,lowest,irsult)
 
    if (irsult > 0) next                        # larger than lowest found
 
    #$% save lowest
    lowest[1] = itrk[1]                         # at this point, have
                                                # best candidate so far
    #$% save pointer
    nxtpnt = sos$pointer
   }
 
#$% save key
ikey  = lowest[1]
 
return
end
 

 
Subroutine NEXT_SWD_TRK (nxtpnt, side)
 
##############################################################################
#$%
#$% Purpose:   NEXT_SWD_TRK locates the next SWABS data for display on the
#$%            status board.
#$%
#$% Called By: SOSSOS
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    SWD
#$%
#$% Date:      March 1991
#$%
#$% Author:    Carol Kropp and Susan Miller
#$%
##############################################################################
BBcommon
STATUScommon
 
LITERAL itrk[1], keys[1], lowest[1]
integer side,
        kk,irsult, nxtpnt,              # jb E2145  3/14/00
        SWD$Pointer,SWD$SequenceNmbr$I  # jb E2145  3/14/00
 
  #$% initialize search array and key
  lowest[1] = '99999999'
 
  #$% if one (special case), set lowest, else save key
  if (ikey == 1) keys[1] = $lowest$ascii  # (New line; dew, via jb)      2/23/00
  else           keys[1] = ikey  # jb (This line formerly unconditional) 2/23/00
 
  #$% initialize pointer to zero
  nxtpnt = 0
 
  #$% search SWD table
  for (swd$pointer$first; swd$pointer$ok; swd$pointer$next)
    {
     #$% if swabs detection not found or it is not the same side, get next
     if (xswd$detectee$i == 0 | side != xswd$DetectorSide$i) next
 
     #$% get sequence number
     swd$SequenceNmbr$i = xswd$SequenceNmbr$i
     if (swd$SequenceNmbr$i == 0) next           # means data is garbage
 
     #$% save sequence number
     kk = 0; call smovv ("        ", itrk[1], kk)
 
     kk=0; call smoviz (swd$SequenceNmbr$i, 3, itrk[1], kk)
 
     #$% compare track number to keys
     call COMPAR(1, itrk, keys, irsult)
 
     if (irsult <  0)
       next                       # less than keys
 
     if (irsult == 0)             # found exact match
       {
        #$% save pointer and return
        nxtpnt = swd$pointer
        return
       }
 
     #$% compare track number to lowest
     call COMPAR(1, itrk, lowest, irsult)
 
     if (irsult > 0)
       next                # larger than lowest found
 
     #$% save lowest
     lowest[1] = itrk[1]                         # at this point, have
                                                 # best candidate so far
     #$% save pointer
     nxtpnt = swd$pointer
    }
 
  #$% save key
  ikey  = lowest[1]
 
return
end
 

 
Subroutine SOSENT(sos$pointer)
 
################################################################
#$%
#$% Purpose:   SOSENT gets the SOSUS data for display.
#$%
#$% Called By: SOSSOS
#$%
#$% Calls:     BLDTKN     OUTH       SMOVIZ
#$%            SMOVIB     SMOVH      SMOVLL
#$%            COURSE
#$%
#$% Tables:    SOS     UNT     POS
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
################################################################
BBcommon
STATUScommon
 
literal itseq,itnum,
       ipm, CSTRIP8, SOS$Class$C, UNT$Name$C   # jb E2145 3/14/00
REAL*4  SOS$OffsetLat$F,SOS$OffsetLon$F,       # jb  E2145 3/14/00
        sos$LastDetTime$f,SOS$LastUPtime$F,     # jb E2145 3/14/00
        UNT$TrueLatitude$F,UNT$TrueLongitude$F, # jb E2145 3/14/00
        UNT$TrueCourse$F
integer COURSE, Game_DTG, bistatic
integer Game_Time, IC,ispeed,                   # jb E2145 3/14/00
        SOS$Pointer,SOS$Course$I,SOS$PropulsionMode$i, # jb E2145 3/14/00
        SOS$Speed$I,SOS$SemiMajorAxis$I,        # jb E2145 3/14/00
        SOS$SemiMinorAxis$I,SOS$Orientation$I,SOS$Detectee$I, # jb 3/14/00
        UNT$Pointer                             #  jb E2145 3/14/00
 
#$% test and exit if status board full, save line count
$test$next$line ; $exit$on$overflow
$save$line$count
 
#$% initialize sequence
itseq  = ikey
 
#$% update keys
$update$keys
 
#$% go to new line
$prepare$next$line
 
#$% get track number
call BLDTKN($Blue$Designator,$Sosus$Designator,itseq,itnum)
 
#$% display track number
$column 1 ; $OutH(itnum, 5)
 
IBYTE=7
 
bistatic = xSOS$BistaticDetection$i
 
if (bistatic != $YES)    # track is not a bistatic detection
  {
   #$% get SOSUS classification
   sos$class$c=xsos$class$c
   #$% display classification if there is one
   if (sos$Class$c != 0) $OutH(sos$class$c,$$MAXname)   # jb E2145  $$  7/20/00
 
   IBYTE=17     # jb E2141  (17 vice 14)    2/24/00
 
   #$% get and move course to IPAGE array for display
   sos$course$i = xsos$course$i
   call smoviz(sos$course$i,3,ipage[1,lincnt],ibyte)
 
   IBYTE=21     # jb E2141  (21 vice 19)    2/24/00
 
   #$% get and move speed to IPAGE array for display
   sos$speed$i = xsos$speed$i
   call smovib(sos$speed$i,2,ipage[1,lincnt],ibyte)
 
   IBYTE=25
 
   #$% get propulsion mode
   sos$propulsionmode$i=xsos$propulsionmode$i
 
   #$% if mode is electric use "B", else if mode is diesel use "D", else use "N"
   if      (sos$propulsionmode$i==$electric$code) ipm = 'B'
   else if (sos$propulsionmode$i==$diesel$code  ) ipm = 'D'
   else                                           ipm = 'N'
 
   #$% move propulsion mode to the IPAGE array for display
   call smovh(ipm,1,ipage[1,lincnt],ibyte)
  }
else                         # track is a bistatic detection
  {
   #$% display BSTAT classification
   $OutV("BSTAT")   # jb $outV vice $outH   2/24/00
 
   IBYTE = 17   # jb E2141  (17 vice 14)    2/24/00
 
   #$% display dashes for course, speed, and mode
   $OutV("---") # jb E2141 ( outv vice outH)        2/24/00
 
   IBYTE = 21     # jb E2141  (21 vice 19)          2/24/00
 
   $OutV("---") # jb E2141 (3 vs 2: outv vice outH) 2/24/00
 
   IBYTE = 25
 
   $OutV("--")  # jb E2141 (2 vs 1; outv vice outH) 2/24/00
  }
 
IBYTE=28        # jb E2141  (28 vice 30)    2/24/00
 
#$% get and move last uptime to the IPAGE array for display
sos$LastUpTime$f = xsos$LastUpTime$f
call smoviz(Game_DTG(sos$LastUpTime$f),6,ipage[1,lincnt],ibyte)
 
IBYTE=39    # jb E2141  (39 vice 38)    2/24/00
 
#$% get and move offset latitude to the IPAGE array for display
sos$offsetlat$f = xsos$offsetlat$f
call smovll(sos$offsetlat$f,       # ellipse center
	    "NS",
	    ipage[1,lincnt],ibyte)
 
#$% get and move offset longitude to the IPAGE array for display
IBYTE=46
sos$offsetlon$f = xsos$offsetlon$f
call smovll(sos$offsetlon$f,     # ellipse center
	    "EW",
	    ipage[1,lincnt],ibyte)
 
#$% get and move major axis to the IPAGE array for display
IBYTE=55
sos$semimajoraxis$i = xsos$semimajoraxis$i
call smovib((sos$semimajoraxis$i * 2),
	    3,
	    IPAGE[1,LINCNT],
	    IBYTE)
 
IBYTE=62
 
#$% get and move minor axis to the IPAGE array for display
sos$semiminoraxis$i = xsos$semiminoraxis$i    # output length of minor axis
call smovib((sos$semiminoraxis$i * 2),
	    3,
	    IPAGE[1,LINCNT],
	    IBYTE)
 
IBYTE=70
 
#$% get and move orientation to the IPAGE array for display
sos$orientation$i = xsos$orientation$i
call smoviz(sos$orientation$i,        # of major axis
	    3,
	    IPAGE[1,LINCNT],
	    IBYTE)
 
#$% get line length
LINLEN[LINCNT]=IBYTE
 
#$% if CONTROL view
if (mside == $Control$code)
   {
    #$% test and exit if status board full, go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    IBYTE = 6
    call smovv("(",ipage[1,lincnt],ibyte)
 
    IBYTE = 7
 
    SOS$Detectee$i = xSOS$Detectee$i
 
    if (SOS$Detectee$i != 0)    # track is a sub or a nonbistatic false contact
      {
       #$% set UNT pointer
       UNT$pointer$to SOS$Detectee$i
 
       #$% get and output unit name
       UNT$name$c = xUNT$name$c
       $OutH(UNT$name$c,$$MAXname) #jb detectee; E2141/$$MAXname v 5;   2/24/00
      }
    else   # track is a bistatic false contact
      {
       $OutV("FALSE")   # jb    ($outV vice $outH)  2/24/00
      }
    call smovv(")",ipage[1,lincnt],ibyte)
 
    if (bistatic != $YES)    # track is not a bistatic detection, get true
                             # course and speed
      {
       IBYTE=16 # jb E2141 (16 vice 13) 2/24/00
       call smovv("(",ipage[1,lincnt],ibyte)
 
       #$% get true course
       UNT$truecourse$f = xUNT$truecourse$f
 
       #$% set true course
       IC = COURSE[UNT$TRUECOURSE$F]
 
       IBYTE = 17
 
       #$% move true course to the IPAGE array for display
       call smoviz(IC,3,IPAGE[1,LINCNT],IBYTE)      # output true course
 
       IBYTE = 21
 
       #$% set true speed
       ISPEED = xUNT$truespeed$f + 0.5
 
       #$% move true speed to the IPAGE array for display
       call smovib(ISPEED,2,ipage[1,lincnt],ibyte)
 
       IBYTE = 21
       call smovv(")",ipage[1,lincnt],ibyte)
      }
    else    # track is a bistatic detection, get detection time
      {
       IBYTE = 27   # jb E2141 (27 vice 29) 2/24/00
 
       call smovv("(",ipage[1,lincnt],ibyte)
 
       IBYTE = 28   # jb E2141 (28 vice 30) 2/24/00
 
       sos$LastDetTime$f = xsos$LastDetTime$f
       call smoviz(Game_Time(sos$LastDetTime$f),4,ipage[1,lincnt],ibyte)
 
       IBYTE = 34
 
       call smovv(")",ipage[1,lincnt],ibyte)
      }
 
    IBYTE=38   # jb E2141 (38 vice 37) 2/24/00
 
    call smovv("(",ipage[1,lincnt],ibyte)
 
    if (SOS$Detectee$i != 0)     # track is a sub or nonbistatic false contact
      {
       #$% get true latitude
       UNT$truelatitude$f = xUNT$truelatitude$f
 
       #$% move true latitude to the IPAGE array for display
       call smovll(UNT$truelatitude$f,"NS",
      	           ipage[1,lincnt],ibyte)
 
       IBYTE=46
 
       #$% get true longitude
       UNT$truelongitude$f = xUNT$truelongitude$f
 
       #$% move true longitude to the IPAGE array for display
       call smovll(UNT$truelongitude$f,"EW",
                   ipage[1,lincnt],ibyte)
      }
    else            # track is a bistatic false contact
      {
       call smovll(SOS$OffSetLat$f,"NS",ipage[1,lincnt],ibyte)
 
       IBYTE = 46
 
       call smovll(SOS$OffSetLon$f,"EW",ipage[1,lincnt],ibyte)
      }
 
    call smovv(")",ipage[1,lincnt],ibyte)
 
    #$% set line length
    LINLEN[LINCNT]=IBYTE
   }
 
return
end
 

 
Subroutine SWDENT (swd$pointer)
 
################################################################
#$%
#$% Purpose:   SWDENT gets the SWABS data for display.
#$%
#$% Called By: SOSSOS
#$%
#$% Calls:     BLDTKN     OUTH       SMOVIZ
#$%            SMOVIB     SMOVH      SMOVLL
#$%            COURSE
#$%
#$% Tables:    SWD        UNT        POS
#$%
#$% Date:      March 1991
#$%
#$% Author:    Carol Kropp and Susan Miller
#$%
################################################################
BBcommon
STATUScommon
 
literal  itseq, itnum,
        CSTRIP8, SWD$Class$C, UNT$Name$C            # jb E2145  3/14/00
REAL*4  SWD$OffsetLat$F,SWD$OffsetLon$F,            # jb E2145  3/14/00
        SWD$DetectionTime$F, UNT$TrueCourse$F,      # jb E2145  3/14/00
        UNT$TrueLatitude$F,UNT$TrueLongitude$F      # jb E2145  3/14/00
integer COURSE, Game_DTG,
        IC,ispeed,                              # jb E2145  3/14/00
        SWD$Pointer,SWD$Course$I,SWD$Speed$I,   # jb E2145  3/14/00
        SWD$SemiMajorAxis$I,                    # jb E2145  3/14/00
        SWD$SemiMinorAxis$I, SWD$Orientation$I, # jb E2145  3/14/00
        UNT$Pointer                             # jb E2145  3/14/00
 
  #$% test and exit if status board full, save line count
  $test$next$line ; $exit$on$overflow
  $save$line$count
 
  #$% initialize sequence and update keys
  itseq  = ikey
  $update$keys
 
  #$% go to new line
  $prepare$next$line
 
  #$% get track number
  if (xswd$DetectorSide$i == $blue$code)
    call BLDTKN ($Blue$Designator, $SWABS$Designator, itseq, itnum)
  else call BLDTKN ($Orange$Designator, $SWABS$Designator, itseq, itnum)
 
  #$% display track number
  $column 1 ; $OutH(itnum,5)
 
  IBYTE = 7
  #$% get SWABS classification
  swd$class$c = xswd$class$c
  #$% display classification if there is one
  if (swd$Class$c != 0)
    $OutH(swd$class$c,$$MAXname)    # jb E2141 ($$MAXname vs 5) 2/24/00
 
  IBYTE = 17    # jb E2141 (17 vice 14) 2/24/00
  #$% get and move course to IPAGE array for display
  swd$course$i = xswd$course$i
  call smoviz(swd$course$i, 3, ipage[1,lincnt], ibyte)
 
  IBYTE = 21    # jb E2141 (21 vice 19) 2/24/00
  #$% get and move speed to IPAGE array for display
  swd$speed$i = xswd$speed$i
  call smovib(swd$speed$i, 2, ipage[1,lincnt], ibyte)
 
##  IBYTE = 25  # jb  deleted   2/24/00
 
  IBYTE = 28    # jb E2141 (28 vice 30) 2/24/00
  #$% get and move detection time to the IPAGE array for display
  swd$DetectionTime$f = xswd$DetectionTime$f
  call smoviz(Game_DTG(swd$DetectionTime$f),6,ipage[1,lincnt],ibyte)
 
  IBYTE = 39    # jb E2141 (39 vice 38) 2/24/00
  #$% get and move offset latitude to the IPAGE array for display
  swd$offsetlat$f = xswd$offsetlat$f
  call smovll(swd$offsetlat$f, "NS", ipage[1,lincnt], ibyte)
 
  IBYTE = 46
  #$% get and move offset longitude to the IPAGE array for display
  swd$offsetlon$f = xswd$offsetlon$f
  call smovll(swd$offsetlon$f, "EW", ipage[1,lincnt], ibyte)
 
  IBYTE = 55
  #$% get and move major axis to the IPAGE array for display
  swd$semimajoraxis$i = xswd$semimajoraxis$i
  call smovib((swd$semimajoraxis$i * 2), 3, ipage[1,lincnt], ibyte)
 
  IBYTE = 62
  #$% get and move minor axis to the IPAGE array for display
  swd$semiminoraxis$i = xswd$semiminoraxis$i    # output length of minor axis
  call smovib((swd$semiminoraxis$i * 2), 3, ipage[1,lincnt], ibyte)
 
  IBYTE = 70
  #$% get and move orientation to the IPAGE array for display
  swd$orientation$i = xswd$orientation$i
  call smoviz(swd$orientation$i, 3, ipage[1,lincnt], ibyte)
 
  #$% get line length
  linlen[lincnt] = ibyte
 
  #$% if CONTROL view
  if (mside == $Control$code)
    {
     #$% test and exit if status board full, go to next line
     $test$next$line ; $exit$on$overflow
     $prepare$next$line
 
     IBYTE = 6
     call smovv("(",ipage[1,lincnt],ibyte)
 
     IBYTE = 7
     #$% set pointer to the detected unit
     UNT$pointer$to xswd$detectee$i
 
     #$% get unit name
     UNT$name$c = xUNT$name$c
 
     #$% if unit name is valid, output name
     if (UNT$name$c != 0) $OutH(UNT$name$c,$$MAXname) # jb detectee     2/24/00
     call smovv(")",ipage[1,lincnt],ibyte)
 
     IBYTE = 16 # jb E2141 (16 vice 13) 2/24/00
     call smovv("(",ipage[1,lincnt],ibyte)
 
     #$% get true course
     UNT$truecourse$f = xUNT$truecourse$f
 
     #$% set true course
     IC = COURSE[UNT$TrueCourse$F]
 
     #$% move true course to the IPAGE array for display
     call smoviz(IC,3,IPAGE[1,LINCNT],IBYTE)      # output true course
 
     IBYTE = 21 # jb E2141 (21 vice 19) 2/24/00
     #$% set true speed
     ISPEED = xUNT$truespeed$f + 0.5
 
     #$% move true speed to the IPAGE array for display
     call smovib(ISPEED,2,ipage[1,lincnt],ibyte)
 
     call smovv(")",ipage[1,lincnt],ibyte)
 
     IBYTE = 38 # jb E2141 (38 vice 37) 2/24/00
     call smovv("(",ipage[1,lincnt],ibyte)
 
     #$% get true latitude
     UNT$truelatitude$f = xUNT$truelatitude$f
 
     #$% move true latitude to the IPAGE array for display
     call smovll(UNT$truelatitude$f, "NS", ipage[1,lincnt], ibyte)
 
     IBYTE=46
     #$% get true longitude
     UNT$truelongitude$f = xUNT$truelongitude$f
 
     #$% move true longitude to the IPAGE array for display
     call smovll(UNT$truelongitude$f, "EW", ipage[1,lincnt], ibyte)
     call smovv(")",ipage[1,lincnt],ibyte)
 
     #$% set line length
     LINLEN[LINCNT]=IBYTE
    }
 
return
end
 

 
Subroutine SOSNUN
 
#############################################################################
#$%
#$% Purpose:   SOSNUN generates a message when there is no SOSUS data for
#$%            display.
#$%
#$% Called By: SOSSOS
#$%
#$% Calls:     OUTV
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
#############################################################################
BBcommon
STATUScommon
 
#$% test and exit if status board full, go to next line
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% display "No SOSUS or SWABS detections" message
$column 1 ; $OutV("No SOSUS or SWABS detections for this view") # jb E2144 7/00
 
return
end
 

 
 
Subroutine BLDTKN(ichar1,ichar2,isqnbr,itnum)
 
##############################################################################
#$%
#$% Purpose:   BLDTKN generates a track number for the SOSUS detection to be
#$%            displayed.
#$%
#$% Called By: SOSENT     HFDENT
#$%
#$% Calls:     SMOV       SMOVIZ
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################################
BBimplicit      # jb E2145  3/14/00
 
literal isqnbr,itnum
Integer len                     # jb  10/22/98
logical*1 ichar1,ichar2    # jb  10/22/98
 
len = 0; call smovv ("       ", itnum, len)
 
#$% if sequence number is not valid, return
if (isqnbr == '000') return
 
len = 0
call smov   (ichar1,  itnum,len)
call smov   (ichar2,  itnum,len)
call smovh  (isqnbr,3,itnum,len)
 
return
end
