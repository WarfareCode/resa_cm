 
 
#####   version 3.1  dated-  7apr81
 
 
include "bbcode.inc"
include "plplay.inc"
include "frmain.inc"
include "ascii.inc"
 
define (ForceImplicit, Implicit None)                  # MJC 6/9/2K (E2145)
 
 
subroutine ferpm (nargs,args)           # ENTER a reporting policy
 
ForceCommon
integer nargs
literal args[$max$args],missn[2,44],side,name
literal unit
integer I,
        KRPM,
        KRPMA,
        ITYPE,
        K                                               # MJC 6/8/2K (E2145)
 
data    missn/$lex$AD$          ,$AirDefense$code,          # smm 3/20/92 air-to-air upgrade
              $lex$AEW$         ,$AEW$code,
              $lex$AI$          ,$AirInteraction$code,      # smm 3/20/92 air-to-air upgrade
              $lex$TANKER$      ,$AirTanker$code,
              $lex$ALFT$        ,$Airlift$code,             # smm 3/20/92 air-to-air upgrade
              $lex$AMPHIBIOUS$  ,$Amphib$Code,               # JFR 12/2/91
              $lex$ASW$         ,$AntiSub$code,
              $lex$BAI$         ,$BattleFieldAirInteraction$code, # smm 3/20/92 air-to-air upgrade
              $lex$CAP$         ,$CAP$code,
              $lex$CAS$         ,$CloseAirSupport$code,     # smm 3/20/92 air-to-air upgrade
              $lex$CCMARCH$     ,$CrossCountryMarch$Code,    # JFR 12/2/91
              $lex$DECOY$       ,$Decoy$code,
              $lex$DEFEND$      ,$Defend$Code,               # JFR 12/2/91
              $lex$DELAYEDATT$  ,$DirectAttack$Code,         # JFR 12/2/91
              $lex$ESCORT$      ,$Escort$Code,              # smm 3/20/92 air-to-air upgrade
              $lex$EW$          ,$EW$Code,                   # JFR 12/2/91
              $lex$FIRESUPP$    ,$GunfireSupport$Code,       # JFR 12/2/91
              $lex$FY$          ,$Ferry$Code,              # smm 3/20/92 air-to-air upgrade
              $lex$GUARD$       ,$Guard$Code,                # JFR 12/2/91
              $lex$HASTYATT$    ,$HastyAttack$Code,          # JFR 12/2/91
              $lex$HOLD$        ,$Hold$Code,                 # JFR 12/2/91
              $lex$JAMMER$      ,$Jam$code,
              $lex$MP$          ,$MaritimePatrol$Code,      # smm 3/20/92 air-to-air upgrade
              $lex$OCA$         ,$OffensiveCounterAir$Code, # smm 3/20/92 air-to-air upgrade
              $lex$RECONN$      ,$Reconn$code,
              $lex$RECONNINFORC$,$RecconInForce$Code,        # JFR 12/2/91
              $lex$RELAY$       ,$CommRelay$code,
              $lex$RESCUE$      ,$Rescue$code,
              $lex$RETROGRADE$  ,$Retrgrade$Code,            # JFR 12/2/91
              $lex$SCREEN$      ,$Screen$Code,               # JFR 12/2/91
              $lex$SEARCH$      ,$Search$code,
              $lex$SM$          ,$SpecialMission$code,       # smm 3/20/92 air-to-air upgrade
              $lex$STRCAP$      ,$StrikeCap$code,
              $lex$STRIKE$      ,$Strike$code,
              $lex$STTANKER$    ,$STtanker$Code,             # JFR 12/2/91
              $lex$SURCAP$      ,$SurveillanceCap$code,
              $lex$SURVEILLANCE$,$Surv$code,
              $lex$SW$          ,$Sweep$code,                # smm 3/20/92 air-to-air upgrade
              $lex$TACMARCH$    ,$TacticalMarch$Code,        # JFR 12/2/91
              $lex$TASMO$       ,$Tasmo$code,                # smm 3/20/92 air-to-air upgrade
              $lex$TEW$         ,$TacElecWar$code,           # smm 3/20/92 air-to-air upgrade
              $lex$WITHDRAW$    ,$Withdraw$Code,             # JFR 12/2/91
              $lex$WW$          ,$WildWeasel$Code,           # smm 3/20/92 air-to-air upgrade
              0,0/
 
#$% display "Reporting policy" heading
call echov (" Reporting policy ")
 
#$% set display table for side
if (args[3] == $lex$BLUE$)
   {
    call echov ("Blue ")
    side = 'BLUE'
   }
else
   {
    call echov ("Orange ")
    side = 'ORANG'
   }
 
#$% set name
name = args[4]
call echohn (name,5)
 
#$% for each entry
for (i=1; i<=nrpm; i=i+1)               #search for duplicate names
   {
    #$% set RPM pointer
    rpm$pointer$to i
    rpm$map
    #$% if not same side, get next
    if (rpm$side != side) next
    #$% if not same name, get next
    if (rpm$name != name) next
    break
   }
 
#$% if RPM table is full
if (nrpm == $policy & i > nrpm)
   {
    #$% send message that it cannot be entered
    call echov (" cannot be entered -- table full.")
    call echor
    return
   }
 
#$% if slot is vacant, increment counter
if (i > nrpm) nrpm = nrpm + 1
 
#$% set unit to zero
unit = 0
 
# if FORCE xxx or MISSION xxx
itype = args[nargs-1]                   # DEW 3/3/92
 
#$% if force policy
if (itype == $lex$force$)
   {
    #$% set unit
    unit = args[nargs]
   }
#$% else if mission policy
else if (itype == $lex$mission$)
   {
    #$% set unit negative
    unit = -1
    #$% for each mission entry
    for (k = 1; missn[1,k] != 0; k = k + 1)
       {
        #$% if mission is not in table, get next entry
        if (missn[1,k] != args[nargs]) next
        unit = missn[2,k]
        break
       }
 
    #$% if mission cannot be entered
    if (unit < 0)
       {
        #$% send message that there is a mission problem
        call echov (" cannot be entered -- Mission problem.")
        call echor
        return
       }
   }
else
   {
    itype = 0
   }
 
 
#$% set RPM pointer
rpm$pointer$to i
rpm$map
 
#$% load RPM table
rpm$side      = side
rpm$name      = name
rpm$circuit1  = args[5]
rpm$circuit2  = args[6]
if (args[7] == $lex$yes$) rpm$violate = 'YES'
else                      rpm$violate = 'NO'
rpm$position  = args[8]
rpm$surface   = args[9]
rpm$air       = args[10]
rpm$esm       = args[11]
if (nargs >= 12 & args[12] >= 0)    # at least 12 args, and 12th not a KEYWORD
    {
    rpm$ground    = args[12]   # JFR 12/2/91
    }
else
    {
    rpm$ground    = 0
    }
rpm$type      = itype
rpm$unit      = unit
 
#$% send message that data has been entered
call echov (" has been entered.")
call echor
 
return
end
 
 
subroutine flrpm                        # Reload all reporting policies
 
ForceCommon
integer LFCS,
        ISTAT,
        KREC,
        NREC,
        KRPM,
        KRPMA                                        # MJC 6/8/2K (E2145)
 
#$% open scenario file
call FDopen ($read,scenario$name,$lits,rpm$file,32*4,lfcS,istat)
read (lfcS,rec=1,err=8010) krec  # read rec count
 
#$% zero counter
nrpm = 0
#$% for each record entry
for (nrec = 2 ;nrec <= krec; )
   {
    #$% get record from scenario file
    call fgetr (lfcS,nrec,16,rrec)
 
    #$% if record is not blue or orange, get next
    if (rrec[2] != 'BLUE' & rrec[2] != 'ORANG') next
 
    #$% increment counter
    nrpm = nrpm + 1
    #$% set RPM pointer
    rpm$pointer$to nrpm
    rpm$map
 
    #$% load RPM table
    rpm$side     = rrec[2]
    rpm$name     = rrec[3]
    rpm$circuit1 = rrec[4]
    rpm$circuit2 = rrec[5]
    rpm$violate  = rrec[6]
    rpm$position = rrec[7]
    rpm$surface  = rrec[8]
    rpm$air      = rrec[9]
    rpm$esm      = rrec[10]
    rpm$ground   = rrec[11]       # JFR 12/2/91
 
    #$% if force record
    if (rrec[12] == 'FORCE')      # JFR 12 vice 11 -- 12/2/91
       {
        #$% load tables
        rpm$type = $lex$force$
        rpm$unit = rrec[13]           # JFR 13 vice 12 -- 12/2/91
       }
    #$% else if mission record
    else if (rrec[12] == 'MISSN') # JFR 12 vice 11 -- 12/2/91
       {
        #$% load tables
        rpm$type = $lex$mission$
        rpm$unit = rrec[13]           # JFR 13 vice 12 -- 12/2/91
       }
    #$% else
    else
       {
        #$% set type to zero
        rpm$type = 0
        #$% set unit to zero
        rpm$unit = 0
       }
   }
 
8010 continue
 
#$% close scenario file
call FDclos (lfcS)                              # close file
 
return
end
 
 
subroutine fdrpm (nargs,args)           # DELETE a reporting policy
 
ForceCommon
integer nargs
literal args[$max$args],side,name
integer I,
        KRPM,
        KRPMA,
        J,
        M,
        IPNT,
        IRPMXX                                       # MJC 6/8/2K (E2145)
 
#$% get reporting policy
call echov (" Reporting policy ")
 
#$% set display table for side
if (args[3] == $lex$BLUE$)
   {
    call echov ("Blue ")
    side = 'BLUE'
   }
else
   {
    call echov ("Orange ")
    side = 'ORANG'
   }
 
#$% set name
name = args[4]
call echohn (name,5)
 
#$% for each name entry
for (i=1; i<=nrpm; i=i+1)               #search for name
   {
    #$% set RPM pointer
    rpm$pointer$to i
    rpm$map
    #$% if not same side, get next
    if (rpm$side != side) next
    #$% if not same name, get next
    if (rpm$name != name) next
    #$% break loop
    break
   }
 
#$% plan not found
if (i > nrpm)
   {
    #$% send message that plan does not exist
    call echov (" does not exist.")
   }
#$% else
else
   {
    #$% for each reporting policy
    for (j=i; j<nrpm; j=j+1)
       {
        #$% set pointer
        rpm$pointer$to j
        rpm$map
        #$% for each data entry
        for (m=0; m<rpm$entry; m=m+1)
           {
            #$% move data to left
            ipnt = rpm$address + m
            work$file$r[ipnt] = work$file$r[ipnt+rpm$entry]
           }
       }
    #$% set pointer
    rpm$pointer$to nrpm
    rpm$map
    rpm$zap
    #$% decrement the counter
    nrpm = nrpm - 1
    #$% send message that file has been deleted
    call echov (" has been deleted.")
   }
 
call echor
 
return
end
 
 
subroutine fprpm (nargs,args)           # PRINT a side's reporting policies
 
ForceCommon
integer nargs
literal args[$max$args]
 
call fprpmx (args[3])   # $lex$BLUE$ or $lex$ORANGE$
 
return
end
 
 
subroutine fprpmx (kside)               # Print reporting policies for 1 side
 
ForceCommon
literal title,deflt[3],side,kside
literal unit, sunit
LitCharEquiv(missn,3,44)
 
integer I,
        KRPM,
        KRPMA,
        ITYPE,
        ILEN,
        ISNUMBER,
        IUNIT,
        K                                        # MJC 6/8/2K (E2145)
 
# missn data statement macro
define (Data$missn_code, DATA missn  [1,$use(Data_Count)])
define (Data$missn_txt1, DATA missnC [2,$use(Data_Count)])
define (Data$missn_txt2, DATA missnC [3,$use(Data_Count)])
define (Data$missn,
     $incr(Data_Count)
     Data$missn_code / @1 /
     Data$missn_txt1 / @2 /
     Data$missn_txt2 / @3 /
)
 
$set(Data_Count,0)
data$missn(          $AirDefense$code,     "AD      ","  ")
data$missn(          $AEW$code,            "AEW     ","  ")
data$missn(          $AirInteraction$code, "AI      ","  ")
data$missn(          $AirTanker$code,      "AIRTANKE","R ")
data$missn(          $Airlift$code,        "ALFT    ","  ")
data$missn(          $Amphib$Code,         "AMPHIB  ","  ")
data$missn(          $AntiSub$code,        "ASW     ","  ")
data$missn($BattleFieldAirInteraction$code,"BAI     ","  ")
data$missn(          $CAP$code,            "CAP     ","  ")
data$missn(          $CloseAirSupport$code,"CAS     ","  ")
data$missn(       $CrossCountryMarch$Code, "CCMARCH ","  ")
data$missn(          $Decoy$code,          "DECOY   ","  ")
data$missn(          $Defend$Code,         "DEFEND  ","  ")
data$missn(          $DirectAttack$Code,   "DATTK   ","  ")
data$missn(          $Escort$Code,         "ESCORT  ","  ")
data$missn(          $EW$Code,             "EW      ","  ")
data$missn(          $Ferry$Code,          "FY      ","  ")
data$missn(          $Guard$Code,          "GUARD   ","  ")
data$missn(          $GunfireSupport$Code, "GFSUPORT","  ")
data$missn(          $HastyAttack$Code,    "HASATTK ","  ")
data$missn(          $Hold$Code,           "HOLD    ","  ")
data$missn(          $Jam$code,            "JAMMER  ","  ")
data$missn(          $MaritimePatrol$Code, "MP      ","  ")
data$missn(      $OffensiveCounterAir$Code,"OCA     ","  ")
data$missn(          $Reconn$code,         "RECON   ","  ")
data$missn(          $Retrgrade$Code,      "RETROGRA","DE")
data$missn(          $CommRelay$code,      "RELAY   ","  ")
data$missn(          $RecconInForce$Code,  "RECONINF","RC")
data$missn(          $Rescue$code,         "RESCUE  ","  ")
data$missn(          $Screen$Code,         "SCREEN  ","  ")
data$missn(          $Search$code,         "SEARCH  ","  ")
data$missn(          $SpecialMission$Code, "SM      ","  ")
data$missn(          $StrikeCap$code,      "STRCAP  ","  ")
data$missn(          $Strike$code,         "STRIKE  ","  ")
data$missn(          $STtanker$Code,       "STRIKE T","KR")
data$missn(          $SurveillanceCap$code,"SURCAP  ","  ")
data$missn(          $Surv$code,           "SURV    ","  ")
data$missn(          $Sweep$Code,          "SW      ","  ")
data$missn(          $TacticalMarch$Code,  "TACMARCH","  ")
data$missn(          $Tasmo$Code,          "TASMO   ","  ")
data$missn(          $TacElecWar$Code,     "TEW     ","  ")
data$missn(          $Withdraw$Code,       "WITHDRAW","  ")
data$missn(          $WildWeasel$Code,     "WW      ","  ")
data$missn(          -1,                   "        ","  ")
 
9000 format (//)
9002 format ("         <-Circuit-> Violate <-- Report"," Intervals -->   <--- Default ",/,
             "  Name    Prim Alter EMCON   Position  ","Ship  Air  ESM   Ground Assignment")
9003 format (1x,a8,i4,i6,3x,a3,5x,i6,i6,i5,i5,4x,i5,1x,2a8,a4) # jb E2141 1/4/00
 
#$% if side is blue
if (kside == $lex$BLUE$)                # TPA 11/18/82
   {
    #$% set title and side
    title = 'Blue'
    side = 'BLUE'
   }
    #$% set title and side to orange
#$% else
else
   {
    title = 'Orange'
    side = 'ORANG'
   }
 
#$% write header
skip$lines (2)start$head
mv$v(" Reporting Policies - ") mv$s(title,8) write$line
skip$lines (1)
 
write (35,9002)
 
#$% for each reporting policy entry
for (i=1; i<=nrpm; i=i+1)
   {
    #$% set RPM pointer
    rpm$pointer$to i
    rpm$map
 
    #$% if not same side, get next
    if (side != rpm$side) next
 
    #$% set type and unit
    itype = rpm$type
    unit = rpm$unit
 
    #$% set line length to zero
    ilen= 0
 
    #$% if type is force policy
    if (itype == $lex$force$)
       {
        #$% move data to output buffer
        call smovv ("FORCE ",deflt,ilen)
 
        if ($isnumeric(unit) )# & unit >= 1000 & unit <= 99999)
           {
            iunit = unit
            if (iunit <= 9999) iunit =iunit*10 # change to 5-digit task numbers
            call fgtask (iunit,sunit)     # generate 0.0.0.0 from number
            call smovh (sunit,8 ,deflt,ilen)
           }
        #$% else
        else
           {
            #$% move unit data
            call smovh (unit,5,deflt,ilen)
           }
       }
    #$% else if mission policy
    else if (itype == $lex$mission$)
       {
        #$% move data to output buffer
        call smovv ("MISSION ",deflt,ilen)
 
        #$% for each mission entry
        for (k=1; missn[1,k] >= 0; k=k+1)
           {
            #$% if unit is not mission, get next
            if (unit != missn[1,k]) next
 
            #$% move mission code to output buffer
            call smovhn (missn[2,k],10,deflt,ilen)
           }
       }
 
    #$% fill remainder with spaces
    while (ilen < 20) call smov ($space,deflt,ilen)
 
    #$% write table entry data
    write (35,9003) rpm$name, rpm$circuit1, rpm$circuit2, rpm$violate,
                    rpm$position, rpm$surface, rpm$air, rpm$esm, rpm$ground, deflt
   }
 
write (35,9000)
 
return
end
 
 
subroutine fprpma                       # Print all reporting policies
 
ForceCommon
literal bside,oside
 
bside = $lex$BLUE$
oside = $lex$ORANGE$
call fprpmx (bside)
call fprpmx (oside)
 
return
end
 
 
subroutine fvrrpm (istat)               # Verify reporting policies
 
ForceCommon
integer ISTAT,
        I,
        KRPM,
        KRPMA,
        JUNIT,
        KFORCE,
        JCKT1,
        JCKT2,
        KPATH                                    # MJC 6/8/2K (E2145)
 
#$% set status to YES
istat = $yes
 
    #$% set RPM pointer
#$% output message
call echor
call echov ("Verifying Reporting Policies...")
 
#$% for each reporting policy entry
for (i=1; i<=nrpm; i=i+1)
   {
    rpm$pointer$to i
    rpm$map
        #$% set error flag to YES
 
    #$% if side is not blue or orange, get next
    if (rpm$side != 'BLUE' & rpm$side != 'ORANG') next
 
    #$% if type is force
    if (rpm$type == $lex$FORCE$ & abs(rpm$unit) > 99999)
       {
        junit = $yes
 
        #$% for each force entry
        for (force$index=1; force$index<=nforce; force$index = force$index+1)
           {
            #$% if error flag is not found, get next unit
            if (force$name != rpm$unit) next
 
            #$% set unit to NO
            junit = $no
            #$% break loop
            break
           }
       }
    #$% else
    else
       {
        #$% set error flag to NO
        junit = $no
       }
 
    #$% if circuit is zero, set flag to NO
    if (rpm$circuit1 == 0) jckt1 = $no
    #$% else, set to YES
    else                   jckt1 = $yes
    #$% if circuit is zero, set flag to NO
    if (rpm$circuit2 == 0) jckt2 = $no
    #$% else set flag to YES
    else                   jckt2 = $yes
 
    #$% for each path entry
    for (path$index=1; path$index<=npaths; path$index = path$index+1)
       {
        #$% if not defined, break loop
        if (jckt1 == $no & jckt2 == $no) break
        #$% if circuit found, set error flag to NO
        if (rpm$circuit1 == int(path$ckt)) jckt1 = $no
        #$% if circuit found, set error flag to NO
        if (rpm$circuit2 == int(path$ckt)) jckt2 = $no
       }
 
    #$% if no errors, get next unit
    if ((junit+jckt1+jckt2) == 0) next          # any errors ?
 
    #$% if circuit errors, set status to NO
    if ((jckt1+jckt2) != $no) istat = $no       # severity...
 
    call echor
    call echov (" Reporting policy ")
    if (rpm$side == 'BLUE') call echov ('Blue ')
    else                    call echov ("Orange ")
    call echohn(rpm$name,5)
    call echov (", errors:")
 
    #$% output reporting policy errors
    if (jckt1 != $no) call echov ("  Primary circuit.")
    if (jckt2 != $no) call echov ("  Alternate circuit.")
    if (junit != $no) call echov ("  Force name (warning).")
   }
 
return
end
 
 
subroutine fsavrp                       # Output reporting policies
 
ForceCommon
integer LFCS,
        ISTAT,
        NREC,
        K,
        KRPM,
        KRPMA                                # MJC 6/8/2K (E2145)
 
#$% open scenario file
call FDopen ($write,scenario$name,$lits,rpm$file,32*4,lfcS,istat)
nrec = 2
 
#$% increment counter
rrec [1] = rpm$entry + 1
 
#$% for each entry
for (k = 1; k <= nrpm; k = k + 1)
   {
    #$% set RPM pointer
    rpm$pointer$to k
    rpm$map
 
    #$% if side is not blue or orange, get next
    if (rpm$side != 'BLUE' & rpm$side != 'ORANG') next
 
    #$% load RPM table
    rrec[2]  = rpm$side
    rrec[3]  = rpm$name
    rrec[4]  = rpm$circuit1
    rrec[5]  = rpm$circuit2
    rrec[6]  = rpm$violate
    rrec[7]  = rpm$position
    rrec[8]  = rpm$surface
    rrec[9]  = rpm$air
    rrec[10] = rpm$esm
    rrec[11] = rpm$ground    # JFR 12/2/91
 
    #$% if type is force policy
    if (rpm$type == $lex$force$)
       {
        #$% load table
        rrec[12] = 'FORCE'                    # JFR 12 vice 11 -- 12/2/91
        rrec[13] = rpm$unit                   # JFR 13 vice 12 -- 12/2/91
       }
    #$% else if type is mission policy
    else if (rpm$type == $lex$mission$)
       {
        #$% load table
        rrec[12] = 'MISSN'                    # JFR 12 vice 11 -- 12/2/91
        rrec[13] = rpm$unit                   # JFR 13 vice 12 -- 12/2/91
       }
    else
       {
        #$% zero entries
        rrec[12] = 0                          # JFR 12 vice 11 -- 12/2/91
        rrec[13] = 0                          # JFR 13 vice 12 -- 12/2/91
       }
 
    #$% put policy record on
    call fputr (lfcS,nrec,16,rrec)                # write policy record
   }
 
#$% decrement counter
nrec = nrec - 1
#$% save record count on scenario file
write (lfcS,rec=1) $count_w_fingerprint(nrec)  # write record count
 
#$% close scenario file
call FDclos (lfcS)                              # close file
 
return
end
