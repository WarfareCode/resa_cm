##      FILE:   wildmdr.rat
 
define  (DEBUG,#)
define  (DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbmdr.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit NONE)           # MJC 4/28/2000
 
Subroutine wglmdr (reccnt,recsz,rec)  #load the  sonobouy MDR data
    # WARNING: arguments may include a CONSTANT:  DON'T CHANGE!
########################################################
#$%
#$% Purpose:   WGLMDR loads in the Sonobuoy median detection
#$%         range values from scenario file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     Getsr
#$%
#$% Tables:    MDR
#$%
#$% Date:      6/90
#$%
#$% Author:    R. Hundt
#$%
########################################################
 
BBcommon
 
integer         reccnt,                 ## RECORD COUNT
                recsz                   ## RECORD SIZE
literal         rec[1500]               ## RECORD
 
integer LOOP, ISTAT,
        MDR$Pointer,
        MDR$RNG$Index                   # MJC 4/28/2000
real    MDR$RNG$median$F                # MJC 4/28/2000
literal MDR$Name$C, MDR$Targetclass$C   # MJC 4/28/2000
 
DEBUG call echov ("<WGLMDR:")
 
#______________________________________________________________________
 
if (reccnt <= 1)                        ## if file is empty (no record count)
    {                                   ## send warning message to user return
    call echov ("Sonobuoy MDR File Empty. ")
    call echor
    return
    }
 
for (loop = 2; loop <= reccnt; )                ## for each record in the file
    {
    call GETSR (loop, recsz, rec)               ## get scenario record
 
    call GSLOTM (mdr$Pointer,$$MDR,mdr$entry,istat)
 
    if(istat == $no)
        {
        call echov ("Sonobuoy MDR for ")
        call echohn (rec[2],$$MaxLit)
        call echov (" is not loaded.")
        call echov (" (mdr table full)")
        call echor
        return
        }
 
    MDR$Name$c = rec[2]                 # sonobuoy name
    MDR$TargetClass$c = rec[3]          # submarine class
 
    putMDR$Name$c
    putMDR$TargetClass$c
 
    MDR$RNG$Index = $Env$Good$code
    MDR$RNG$Median$F = rec[4]
    putMDR$RNG$Median$F
 
    MDR$RNG$Index = $Env$Fair$code    # jb fair vice poor 7/26/90
    MDR$RNG$Median$F = rec[5]
    putMDR$RNG$Median$F
 
    MDR$RNG$Index = $Env$Poor$code    # jb poor vice fair 7/26/90
    MDR$RNG$Median$F = rec[6]
    putMDR$RNG$Median$F
 
    MDR$RNG$Index = $Env$User$code      # really, default range
    MDR$RNG$Median$F = rec[7]
    putMDR$RNG$Median$F
 
    #_________________________________________________________________
 
    }
 
return
end
