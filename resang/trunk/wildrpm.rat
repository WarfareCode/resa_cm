 
#####   version 3.1  dated-  7apr81
 
 
 
###
### mod to version 3.0          dated 4 feb 1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rae     wglrpm  loads reporting policies
###             wglurp  initializes reporting policy for each unit
###
 
#####   new file after version 3.0
 
 
# 
 
 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLRPM                        ECHOH                      RPM
#$%      WGLURP                        ECHOI                      PAT
#$%      GETSR  <WGLOAD>               ECHOR
#$%      GSLOTM <WGLOAD>
#$%      GETRPM <WCOMMN>
#$%      SETURP <WCOMMN>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLRPM
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLRPM - GETSR *
#$%                                      - GSLOTM*
#$%                             - WGLURP - GETRPM*
#$%                                      - SETURP*
#$%
 

 
 include "bbctl.inc"
 include "bbcode.inc"
 include "bbrpm.inc"
 include "bbpat.inc"
 include "bbunt.inc"
 include "ascii.inc"
 include "wimain_eq.inc"                # MJC 4/28/2000
 
 define(BBImplicit, Implicit None)      # MJC 4/28/2000
 
 Subroutine WGLRPM(_
	    reccnt,
	    recsz,
	    rec)
 
 #######################################################
 #$%
 #$% Purpose:   WGLRPM loads in the Report Policy
 #$%            matrix scenario file data.
 #$%
 #$% Called By: WGLOAD
 #$%
 #$% Calls:     ECHOH      ECHOR      GETSR
 #$%            GSLOTM     ECHOI
 #$%
 #$% Tables:    RPM        PAT
 #$%
 #$% Date:      OCT 80
 #$%
 #$% Author:    Ron Williams, Dana Wills
 #$%
 #######################################################
 
 BBcommon
 
 EqErr$Common                           # MJC 4/28/2000
 
 integer reccnt,recsz
 literal rec[1500]
 
#common /eqerr/cfile,cname,cflg         # MJC 4/28/2000
 
 integer ILEN, LOOP,
         ISNUMBER,
         ISTAT,
         PAT$Pointer,
         RPM$Pointer,
         RPM$Side$I,
         RPM$Commbypass$I,
         RPM$Path1pntr$I,
         RPM$Path2pntr$I,
         RPM$Violateemcon$I,
         RPM$Owninterval$I,
         RPM$Shiptrackinterval$I,
         RPM$Airtrackinterval$I,
         RPM$Esmtrackinterval$I,
         RPM$Addresseetype$I,
         RPM$Addressee$I                # MJC 4/28/2000
 literal RPM$Name$C,
         RPM$Addressee$C                # MJC 4/28/2000
 
 #$% initialize ilen for smovh
 ilen = 0
 #$% set up "Rpt Policy" as header for cfile
 call smovv ("Rpt Policy", cfile, ilen)
 
 #$% initialize flag
 cflg = $yes
 
 #$% if file empty
 if(reccnt <= 1)
   {
    #$% display warning message to user and return
    call echov("Reporting Policy Matrix File Empty.  ")
    call echor
    return
   }
 
 #$% for each record
 for(loop=2;loop<=reccnt;)
    {
     #$% get scenerio file
     call getsr(loop,recsz,rec)
 
     #$% get slots from reporting policy table
     call gslotm (rpm$pointer,$$rpm,rpm$entry,istat)
 
     #$% if table is full
     if(istat == $no)
       {
        #$% display warning message to user and return
	call ECHOv("Reporting Policy Matrix entry from ")
	call ECHOI(rec[2])
	call ECHOv(" and on are not loaded.")
	call ECHOR
	return
       }
 
     #$% set reporting policy side to BLUE or ORANGE and save
     if(rec[2] == 'BLUE') RPM$Side$I = $Blue$Code
     else                 RPM$Side$I = $Orange$Code
     putRPM$Side$I
 
     #$% get reporting policy name and save
     RPM$Name$C = rec[3]
     putRPM$Name$C
 
     #$% determine whether comm bypass entry is YES or NO
     if(rec[4] == 0 | rec[5] == 0) RPM$CommBypass$I = $Yes
     else
       {
	RPM$CommBypass$I = $No
 
        #$% if comm bypass is NO, search commpath file
	for(PAT$POINTER$FIRST;PAT$POINTER$OK;PAT$POINTER$NEXT)
	   {
            #$% find first commpath circuit number
	    if(XPAT$CIRCUIT$I == rec[4])
	      {
               #$% RPM primary circuit path pointer to commpath pointer,
               #$% save and break out of loop
	       RPM$Path1Pntr$I = PAT$POINTER
	       putRPM$Path1Pntr$I
	       break
	      }
	   }
        #$% repeat search of commpath file
	for(PAT$POINTER$FIRST;PAT$POINTER$OK;PAT$POINTER$NEXT)
	   {
            #$% find second commpath circuit number
	    if(XPAT$CIRCUIT$I == rec[5])
	      {
               #$% RPM secondary circuit path pointer to commpath pointer,
               #$% save and break out of loop
	       RPM$Path2Pntr$I = PAT$POINTER
	       putRPM$Path2Pntr$I
	       break
	      }
	   }
 
       }
 
     #$% save comm bypass
     putRPM$CommBypass$I
 
     #$% determine if violate EMCON entry is YES or NO and save
     if(rec[6] == 'YES') RPM$ViolateEMCON$I = $Yes
     else                RPM$ViolateEMCON$I = $No
     putRPM$ViolateEMCON$I
 
     #$% get interval of own automatic reporting and save
     RPM$OwnInterval$I = rec[7]
     putRPM$OwnInterval$I
 
     #$% get interval of automatic ship track reporting and save
     RPM$ShipTrackInterval$I = rec[8]
     putRPM$ShipTrackInterval$I
 
     #$% get interval of automatic air track reporting and save
     RPM$AirTrackInterval$I = rec[9]
     putRPM$AirTrackInterval$I
 
     #$% get interval of automatic ESM track reporting and save
     RPM$ESMTrackInterval$I = rec[10]
     putRPM$ESMTrackInterval$I
 
     #$% get addressee of automatic reporting and save
     RPM$Addressee$c = rec[12]
#     putRPM$Addressee$c				## 6/27/83 tpa
 
     #$% if addressee is designated by FORCE
#     if(rec[11] == 'FORCE')
     if(rec[12] == 'FORCE')         # clk 4/92 - to coincide with frrpm.rat
       {
        #$% if absolute value of force number is less than or equal to 9999
	if($isnumeric(RPM$Addressee$c))
	  {
           #$% set addressee type to task
	   RPM$AddresseeType$I = $Task$Code
 
#           RPM$Addressee$i = rec[12]
           RPM$Addressee$i = rec[13]            # clk 4/92 - to coincide with frrpm.rat
           putRPM$Addressee$i
	  }
	else
	    {
	    RPM$AddresseeType$I = $Force$Code	## otherwise set addr to force
    	    putRPM$Addressee$C			## 6/27/83 TpA
	    }
       }
     #$% else if addressee is designated by mission
#     else if(rec[11] == 'MISSN')
     else if(rec[12] == 'MISSN')            # clk 4/92 - to coincide with frrpm.rat
       {
        #$% set addressee type to mission
	RPM$AddresseeType$I = $Mission$Code
 
#    	RPM$Addressee$i = rec[12]		## 6/27/83 TpA
    	RPM$Addressee$i = rec[13]		## 6/27/83 TpA      # clk 4/92 - to coincide with frrpm.rat
    	putRPM$Addressee$i
       }
     else
       {
        #$% otherwise set addressee type to null
	RPM$AddresseeType$I = $Null$Code
       }
 
     #$% save addressee type
     putRPM$AddresseeType$I
    }
 return
 end
 

Subroutine WGLURP
 
########################################################
#$%
#$% Purpose:   WGLURP initializes the Report Policy
#$%            matrix for each unit.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     GETRPM     SETURP
#$%
#$% Tables:    UNT
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
 
integer UNT$Pointer,
        RPM$Pointer                 # MJC 4/28/2000
 
 
#$% for each platform entered
for (unt$pointer$first;unt$pointer$ok;unt$pointer$next)
   {
    #$% get reporting policy matrix for each platform
    call GETRPM(unt$pointer,rpm$pointer)
    #$% set reporting policy for each platform
    call SETURP(unt$pointer,rpm$pointer)
   }
 
return
end
 
