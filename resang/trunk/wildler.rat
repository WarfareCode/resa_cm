### File  WILDLER.rat
 
 
define  (DEBUG,#)
define  (DEBUGL,)
include "bbctl.inc"
include "bbcode.inc"
include "bbldk.inc"
include "bbler.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit NONE)           # MJC $/28/2000
 
Subroutine WGLLER (rec_count,rec_size,rec)  #load the LIDAR environment scenario file
 
###############################################################
#$%
#$% Purpose:   WGLLER loads in the LIDAR environment scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     Getsr
#$%
#$% Tables:    LER
#$%
#$% Date:      February 21, 1991
#$%
#$% Author:    Susan Miller and Carol Kropp
#$%
###############################################################
 
BBcommon
 
integer   rec_count, rec_size, irec
literal   rec[1500]
 
integer   LOOP, ISTAT,
          LER$Pointer,
          LER$Region$I,
          LER$VER$Index,
          LER$Nbrvertices$I             # MJC 4/28/2000
real      LER$VER$latitude$F,
          LER$VER$longitude$F,
          LER$Kvalue$F,
          DMS2RAD                       # MJC 4/28/2000
 
DEBUG call echov ("<WGLLER:")
 
  if (rec_count <= 1)          # if file is empty (no record count)
    {                          # send warning message to user return
     call echov ("LIDAR Environment File Empty.")
     call echor
     return
    }
 
if (LDK$Size < LDK$Entry)   # if the table size is not at least one entry long
  {
   call echov ("LIDAR K Values not specified - ")
   call echov ("LIDAR will be disabled...")
   call echor
  }
 
  for (loop = 2; loop <= rec_count; )       # for each record in the file
    {
     call GETSR (loop, rec_size, rec)    # get scenario record
 
     call GSLOTM (LER$Pointer, $$LER, LER$entry, istat)
 
     if(istat == $no)
       {
        call echov ("Regions ")
        call echoi (int(rec[3]))
        call echov (" and on are not loaded.")
        call echor
        return
       }
 
     LER$Region$I = rec[3]           # get and save the region number
     putLER$Region$I
 
     LER$Kvalue$F = rec[4]           # get and save the diffuse coef.
     putLER$Kvalue$F
 
#     if (LER$Region$I == LIDAR$Default$Region)      # clk 1/96
#       {                                            # LIDAR$Default$Region is not
#        LER$NbrVertices$I = 0                       # defined anywhere, so the value
#        putLER$NbrVertices$I                        # will be zero.  The region numbers
#        next                                        # are not allowed to be zero.
#       }
 
     irec = 5
 
     for (LER$VER$Index = 1; LER$VER$Index <= LER$VER$Slots;
                             LER$VER$Index =  LER$VER$Index + 1)
       {
        if (rec[irec] == 99) break
 
        LER$NbrVertices$I = LER$VER$Index
 
        LER$VER$Latitude$F = DMS2rad(rec[irec])
        putLER$VER$Latitude$F
 
        LER$VER$Longitude$F = DMS2rad(rec[irec+1])
        putLER$VER$Longitude$F
 
        irec = irec + 2         # increment the index
       }
 
     putLER$NbrVertices$I
    }
 
return
end
