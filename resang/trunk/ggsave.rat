#####################   GGSAVE.RAT   ############################
 
#####################################################################
#
#  Takes data from Delayed Message Database (DMD), converts it to a file
#  and saves it as the Delayed Message File (DMF) on disk.
#
######################################################################
 
include "rgmain.inc"
 
define(SaveCommon,
integer  work[1024]
common   /scratch$pad/work)
 
define (bbimplicit, implicit none)
 
Subroutine rgsave (igentype)
############################################################################
###
### This is Subroutine (rgsave) is used to: (1) determine when a Delayed
### Message Database (DMD) is to be saved; if yes, (2) converts the it
### to a file and saves it as the Delayed Message File (DMF) on disk.
###
#############################################################################
 
BBcommon
RGcommon
RFcommon
SaveCommon
 
literal		name
integer         Game_DTG
integer		iversion, igentype, ios, idtg
integer 	itime, x, newtim, nver, itype
character	errmsg[ARB]
 
character   file[arb]
vaxcharacter*ARB v_file
equivalence (file, v_file)
 
undefine err
 
igamemin = game$minute - 1
name = scenario$name
itype = 'SVE'
iversion = save$time
 
call file_name (name, itype, iversion, file, igentype)
 
open (unit    = $RFC$Save,
      file    =  v_file,
      access  = 'direct',
      form    = "unformatted",
      status  = 'unknown',
      recl    =  128,
#      dispose = 'save',
      iostat  =  ios,
      err     =  9100)
 
repeat
   {
    break
    9100
    call echor
    call typerr (ios)
    call echor
    call echov ("Cannot Create A Delayed Messge Database File")
    call echohn (file,25)
    call echov  (" (")
    call geterr_fort (ios,errmsg)		# get FORTRAN Error Messages
    call echoh (errmsg,ARB)
    call echov  (")")
    call echor
 
    save$dmd = $no
 
    return
   }
call echor
call echov ("DMD Save File Has Been Created")
call echor
call echor
call write_it                      # write the Delayed Msg Database to a file
call echor
call echov ("Successful DMD SAVE, Game Cycle = ")
call echoi (save$time)
call echor
call echov ("                    Game Minute = ")
idtg = Game_DTG (game$time)
call echoi (idtg)
 
itime = newtim(x)                               # current time (in seconds)
 
#save$last = game$minute
 
#save$request = $no
 
#write$count = 0
#write$request = -1			# allow PLAYER access to write orders
 
 
close (unit = $rfc$save)			# close file
 
call file_name (name, itype, 0, file, igentype)
 
nver = save$versions
#call erasek (file,nver)				# delete all but last n vers.
 
#save$time$used = newtim(x) - itime		# calculate time used
 
save$dmd = $no
 
return
end
 

 
subroutine file_name (name, itype, kgamemin, file, igentype)
###############################################################
#$%
#$% Purpose:   file_name builds a file name string.
#$%
###############################################################
 
BBcommon
RGcommon
RFcommon
 
integer kgamemin
literal    name
character file[arb]
integer   ilen, igentype, itype
 
ilen = 0
call smovhn (name, 5, file, ilen)
 
if      (igentype == $Rain$Gen) call  smovv ("R.",file,ilen)
else if (igentype == $Post$Gen) call  smovv ("P.",file,ilen)
else if (igentype == $Jntcs$Gen) call smovv ("J.",file,ilen)
 
call smovhn (itype, 3, file, ilen)
 
if (kgamemin != 0)
    {
    call smovV ($$file$sep, file, ilen)  # jb E2144 (smovV) 8/9/00
    call smovi (kgamemin, file, ilen)
    }
while (ilen < 20) call smov ($null, file, ilen)
 
return
end
 

 
subroutine write_it
########################################################################
#$%
#$% Purpose:   WRITE_IT copies Delayed Message Database (DMD) to output
###            file in records of 128 long words irec is relative to 1
###            while last$RG$page is relative to 0.
#$%
##########################################################################
 
BBcommon
RGcommon
RFcommon
SaveCommon
 
integer ifrst, irec, ilast, iword
 
undefine write
 
ifrst = 1
irec  = 1
ilast = 128
 
iword=ifrst
repeat
    {
     write($rfc$save,REC=irec) (IRG[iword], iword=ifrst,ilast)
 
     ifrst = ifrst + 128
     ilast = ilast + 128
     irec  = irec  +  1
 
    } until (irec - 1 > last$RG$page | iword > max$RG$words)
 
return
end
 

 
subroutine rgrestore
########################################################
#$%
#$% Purpose:   RESTORE restores the blackboard from
#$%            a specified file (or save).
#$%
########################################################
 
BBcommon
RGcommon
RFcommon
SaveCommon
 
literal		name
integer		irestrmin, igentype, ios, itype
character	errmsg[arb]
 
character   file[arb]
vaxcharacter*ARB v_file
equivalence (file, v_file)
 
undefine read
undefine write
undefine err
 
name = restore$name
itype = 'SVE'
irestrmin = restore$time
 
call file_name (name, itype, irestrmin, file, igentype)
 
open (unit    = $RFC$Save,			# open file
      file    =  v_file,
      access  = 'direct',
      form    = "unformatted",
      status  = 'old',
#      readonly,
      recl    =  128,
#      dispose = 'save',
      iostat  =  ios,
      err     =  9100)
 
repeat
   {
    break
    9100
    call echor
    call echov  ("Cannot restore Delayed Message Database from ")
    call echohn (file,20)
    call echov  (" (")
    call geterr_fort (ios,errmsg)		# get FORTRAN Error Messages
    call echoh (errmsg,ARB)
    call echov  (")")
    call echor
 
    close (unit = $rfc$save)
 
    return
   }
 
call get_DMD (name)
 
close (unit = $rfc$save)
 
call get_init
 
restore$dmd = $no
 
return
end
 

 
subroutine Get_Init
#########################################################################
#
#  Gets Initialization and Radar Files
#
#########################################################################
BBcommon
RGcommon
RFCommon
SaveCommon
 
integer    open_, length, device_open
integer    jj,jsize   # jb    1/12/00
character  tempfile[10], temprad[10], tempout[10], foutname[16], filename[16]
integer    isize, kk, ifd_init, istat, ifd_radar
integer    old_char[2]
integer    inw_init, icount_oth # jb E2208 (returned from RG_Load_Init 12/12/00
 
jsize = length (RGInit$File)
 
jj = 0
call smovhn (RGInit$File, jsize, tempfile, jj)
 
isize = length (tempfile)
if (isize == 0)
   {
    call echov ("*** No Initialization File Was Saved ***")
    call rgexit
   }
 
kk = 0
call smovh (tempfile, isize, filename, kk)  # concatenate
call smovv (".dat", filename, kk)
 
define (read,1)
define (write,2)
define (err,-3)
 
ifd_init = open_ (filename, read)
 
if (ifd_init == ERR)
   {
    call echov ("*** Could not open the Initialization File Named: ")
    call echoh (filename, isize)
    call echov (" ***")
    call rgexit
   }
 
call rg_load_init (ifd_init,inw_init,istat,icount_oth)  # jb E2208  12/12/00
call close_ (ifd_init)
 
define (read,1)
define (write,2)
define (err,-3)
 
#if (RGDevice$TTY == YES)
#   {
#    istat = device_open (RGDevice$NBR, #output channel # for later use
#                         RGOut$Device,   #input logical name
#                         old_char)     #output old characteristics of tty
#                                       # use to restore after done
#    if (!istat)
#       {
#    	call typerr (istat)
#    	call echor
#        call rgexit
#       }
#   }
 
jj = 0
call smovhn (RGOut$File, 8, tempout, jj)
 
isize = length (tempout)
if (isize == 0)
   {
    call echov ("*** No Message Output File Was Saved ***")
    call rgexit
   }
 
kk = 0
call smovh (tempout, isize, foutname, kk)    # concatenate
call smovv (".out", foutname, kk)
call smovv (";", foutname, kk)
call smovi (game$minute, foutname, kk)
 
RGFile$NBR = open_ (foutname,WRITE)
 
if (RGFile$NBR == ERR)
   {
    call echor
    call echov ("Could NOT Open The Designated File For Output!")
    call echor
    call rgexit
   }
call setchtype(RAW, RGFile$NBR)
 
return
end
 

 
subroutine Get_DMD (name)
#########################################################################
#
#  This routine restores the Delayed Message Database (DMD) from a file.
#  It saves the first 1024 words of the DMD in a temporary work array.
#  It then reads 1024 words (8 pages of 128 words) from the file
#  to the DMD.  It checks to see if the information in the file is valid.
#  If valid, it reads in the entire file.  If not valid, it restores the
#  DMD to its original state and prints an error message.
#
#########################################################################
 
BBcommon
RGcommon
RFCommon
SaveCommon
 
literal		name
character	errmsg[ARB], file[ARB]
integer		irec, ifrst, ilast, k, iword, ios
 
undefine read
undefine err
 
irec  = 1
ifrst = 1
ilast = 128
 
for (k = 1; k <= 1024; k=k+1) work[k] = irg[k]  # save first 8 pages of DMD
 
sync$a = 0
 
iword=ifrst
repeat                                          #read in 8 pages
    {
     read($rfc$save,REC=irec,iostat=ios,err=9101) (IRG[iword], iword=ifrst,ilast)
 
     ifrst = ifrst + 128
     ilast = ilast + 128
     irec  = irec  +  1
 
    } until (iword > 1024 | irec > 8)
 
if (scenario$name == name  &  ios == 0)                # same name.... so ok
   {                                                    # to complete restore
    repeat
        {
         read($rfc$save,REC=irec,iostat=ios,err=9200) (IRG[iword], iword=ifrst,ilast)
 
         ifrst = ifrst + 128
         ilast = ilast + 128
         irec  = irec  +  1
 
        } until (iword > max$RG$words | irec - 1 > last$RG$page | ios != 0)
 
    repeat
    	{
        break
        9200
        call echor
        call echov ("Error restoring from ")
        call echohn (file,20)
        call echov  (" (")
    	call geterr_fort (ios,errmsg)		# get FORTRAN Error Messages
        call echoh (errmsg,ARB)
        call echov  (")")
        call echor
        }
    return
    }
 
9101
    call echor
    call echov ("Cannot restore from ")
    call echohn (file,20)
    call echov  (" (")
    call geterr_fort (ios,errmsg)		# get FORTRAN Error Messages
    call echoh (errmsg,ARB)
    call echov  (")")
    call echor
 
    for (k = 1; k <= 1024; k=k+1) irg[k] = work[k]
                                     # otherwise restore first 2 pages of DMD
 
return
end
