 
#####   version   dated-  4/19/90
 
 
###
###
### smn prog    module  comments
### === ====    ======  =================================================
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLCTM                        ECHOH                      CTM
#$%      GETSR  <WGLOAD>               ECHOR
#$%      GSLOTM <WGLOAD>
#$%
#$%
#$%
#$%   NOTES
#$%   =====
#$%
#$%   1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%   2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%   3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%   FLOWCHART FOR FILE WGLCTM
#$%   =========================
#$%
#$%   START0 <WARGAM> - WGLOAD - WGLCTM - GETSR *
#$%                                     - GSLOTM*
 

 
define(DEBUG,#)
 
 
include "bbctl.inc"
include "bbcode.inc"
include "bbctm.inc"
include "ascii.inc"
 
define (BBImplicit, Implicit None)          # MJC 4/26/2000
 
Subroutine wglctm (reccnt,recsz,rec)
      # jb E2208 Removed 4th argument, $$TBL    12/12/00
#############################################################
#$%
#$% Purpose:   WGLCTM loads scenario countermeasure
#$%         characteristics.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOH      ECHOR      GETSR
#$%            GSLOTM
#$%
#$% Tables:    CTM
#$%
#$% Date:      APR 90
#$%
#$% Author:
#$%
#############################################################
 
BBcommon
 
integer reccnt,recsz,pnt
literal rec[1500]
 
integer KEPUWT, LOOP, LEN, ISTAT, $$TBL,
        CTM$Pointer, CTM$Life$I                 # MJC 4/26/2000
literal CTM$Name$C                              # MJC 4/26/2000
integer kk                      # jb  E2209  11/30/00
BBdeclare (CTM$FullName$V)      # jb  E2209  11/30/00
 
DEBUG call echov ('<wglctm:>')
 
#$% if file is empty (no record count)
if (reccnt <= 1)
   {
    #$% send warning message to user
    call echov  ('Countermeasure File Empty')
    call echor
    return
   }
 
kepuwt = 0
 
for (loop = 2; loop <= reccnt; )        #for each record in the file
    {
    call getsr (loop,recsz,rec)        #get scenario record
    len = rec[1]                       #save length
 
    #$% get empty slot from countermeasure table
    call gslotm (CTM$pointer,$$CTM,CTM$entry,istat)
 
    #$% if table is full
    if(istat == $no)
        {
        #$% send warning message to user and get next entry
        call echov  ('Countermeasure from ')
        call echohn (rec[3],$$MaxLit)
        call echov  (' and on are not loaded.')
        call echor
        next
        }
 
    CTM$NAME$C = rec[3]                      # get countermeasure name and save
    putCTM$NAME$C
 
    #$% for all remaining fields in record
    for (pnt = 4; pnt <= len;)
        {
        if (rec[pnt] == 'BBN')
            {
            #$% get BroadBand Noise
            #$% handle later when loading ship noise table
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'LIFE')
            {
            #$% lifetime of countermeasure
            CTM$Life$I = rec[pnt+1]       # in minutes
            putCTM$Life$I
            pnt = pnt + 2
            next
            }
 
         else if(rec[pnt] == 'NOMEN')  # jb E2209  11/29/00
           {
           CTM$Fullname$V = ""
           kk = 0
           call vmovh (rec[pnt+1], 24, CTM$Fullname$V, kk)
           putCTM$Fullname$V
           pnt = pnt + 4
           }  # jb End of if FULLname ('NOMEN') E2209   11/30/00
 
         else if(rec[pnt] == 'UDB')      # jb E2209   11/29/00
           {
           if      (rec[pnt+1] == 'YES') putCTM$UDB$i ($YES)
           else if (rec[pnt+1] != 'NO') putCTM$UDB$i (!$NO)
           pnt = pnt + 2
           }  # jb End of if Univ.DataBase flag ('UDB') E2209 11/30/00
 
        else if (rec[pnt] == 'NBN')
            {
            #$% get NarrowBand Noise
            #$% handle later when loading ship noise table
            pnt = pnt + 3
            next
            }
        else
            {
            #$% display to user that field is invalid
            call badfld('Torpedo ',rec[3],rec[pnt])
            #$% increment pointer
            pnt = pnt + 1
            }
 
        } # end for all remaining fields in record
    } # end for each record in the file
 
return
end
