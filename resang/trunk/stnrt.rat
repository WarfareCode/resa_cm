# File:  STNRT.RAT
 
include "ascii.inc"             # include ascii constants
include "bbcode.inc"            # blackboard defines
include "bbctl.inc"
include "stmain.inc"
include "bbnrt.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  3/22/00
define ($low$order$key,ikey2)
define ($NRT$Orange$Offset,100)
 
 
Subroutine NRT_STATUS
#######################################################
#$%
#$% Purpose:   NRT_STAUS Non-RealTime Track status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     NRT_TITLE   NRTNRT
#$%
#$% Date:      December 1992
#$%
#$% Author:    Susan Miller
#$%
#######################################################
BBcommon
STATUScommon
 
 #$% call for display status board titles
 call NRT_TITLE
 
 #$% call for status board data
 call NRTNRT
 
return
end # end of NRT_STATUS
 

 
 
Subroutine NRT_TITLE
#######################################################
#$%
#$% Purpose:   NRT_TITLE generates titles for the status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     OUTV
#$%
#$% Date:      December 1992
#$%
#$% Author:    Susan Miller
#$%
#######################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
 #$% go to next line
 $prepare$next$line
 
 #$% display NRT track status board titles
 $column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
 $column 14 ; $OutV("NON-REALTIME TRACK STATUS BOARD [") ; $OutI(iboard)
              $OutV("] - Page ") ; $OutIB(kpage,2)
 $column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end # end of NRT_TITLE
 

 
 
Subroutine NRTNRT
 
############################################################################
#$%
#$% Purpose:   NRTNRT executes the subroutines that generate the NON-REALTIME
#$%            track status board.
#$%
#$% Called By: NRT_STATUS
#$%
#$% Calls:     NRT_HEADER     NRT_ENTRY
#$%            NXTNRT     NRTNUN
#$%
#$% Tables:    NRT
#$%
#$% Date:      DECEMBER 1992
#$%
#$% Author:    Susan Miller
#$%
############################################################################
BBcommon
STATUScommon
 
integer NRT$Pointer
Integer ifound, lstsec  # jb E2145  3/22/00
 
 #$% call for status board headings
 call NRT_HEADER
 
 #$% exit if status board full
 $exit$on$overflow
 
 #$% initialize test flag
 ifound = $no
 lstsec = 0
 
 repeat
   {
    #$% get next NRT track entry
    call NXTNRT(NRT$Pointer)
 
    #$% if no NRT track, break loop
    if (NRT$Pointer == 0) break
 
    #$% set flag
    ifound = $yes
 
    #$% get NRT track data
    call NRT_ENTRY(NRT$pointer,lstsec)
 
    #$% exit if status board full
    $exit$on$overflow
   }
 
 #$% if no NRT tracks found, display message
 if (ifound == $no)  call NRTNUN
 
return
end # end of NRTNRT
 

 
 
Subroutine NRT_HEADER
 
##############################################################################
#$%
#$% Purpose:   NRT_HEADER generates headings for the status board.
#$%
#$% Called By: NRTNRT
#$%
#$% Calls:     SMOVH
#$%
#$% Date:      DECEMBER 1992
#$%
#$% Author:    Susan Miller
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer ilen    # jb E2145  3/22/00
 
#$% move headings to IPAGE for display
##           01234567890123456789012345678901234567890123456789012345678901234567890123456
string MSG2 " Track     Name    Desig    Cat   Latitude  Longitude  Course Speed Station "
string MSG3 "-------- --------  ------ ------- --------- ---------- ------ ----- ------- "
#            XXXXXXXX XXXXXXXX  FRIEND   AIR    DD-MM     DDD-MM     DDD    DDDD   DD
 
 #$% set line length
 ilen = 0; call smovh (MSG2,ARB,Ipage[1,2],ilen)
 LINLEN[2] = ilen   # jb    E2141   3/13/00
 ilen = 0; call smovh (MSG3,ARB,Ipage[1,3],ilen)
 LINLEN[3] = ilen   # jb    E2141   3/13/00
 
 #$% set line count
 LINCNT = 3
 
return
end # end of NRT_HEADER
 

 
 
Subroutine NXTNRT(nxtpnt)
 
###########################################################################
#$%
#$% Purpose:   NXTNRT locates the next NRT track entry for display.
#$%
#$% Called By: NRTNRT
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    NRT
#$%
#$% Date:      DECEMBER 1992
#$%
#$% Author:    Susan Miller
#$%
##########################################################################
BBcommon
STATUScommon
 
Literal CSTRIP8                     # jb E2145  3/22/00
literal itrk[2] # jb Removed: iorder[0:2],iclsch[0:2] 3/22/00
literal keys[2],lowest[2] #jb Removed: ialfa, ctoi    3/22/00
integer iblue, iorange, ineutral, iokay
integer first_NRT,nxtpnt,irsult,    # jb E2145  3/22/00
        NRT$Pointer, NRT$View$I     # jb E2145  3/22/00
 
 #$% initialize search array
 lowest[1] = $highest$ascii
 lowest[2] = $highest$ascii
 
 #$% if first entry save lowest - else save key
 if (ikey  == 1)
    keys[1] = $lowest$ascii
 else
    keys[1] = ikey
 keys[2] = ikey2
 
 #$% pointer to zero
 nxtpnt = 0
 
 if (iview >= $FirstBlue$View & iview <= $LastBlue$View)
    {
     first_NRT = 1
     iblue = $yes
    }
 else if (iview >= $FirstOrange$View & iview <= $LastOrange$View)
    {
     first_NRT = $NRT$Orange$Offset
     iorange = $yes
    }
else  if (iview == $Neutral$View)
    {
    ineutral = $yes
    }
 
 #$% search NRT table
 for (NRT$Pointer$To first_NRT; NRT$Pointer$Valid; NRT$Pointer$Next)
   {
    #$% if past the last valid blue slot and this is for a blue astab, break
    if ((iview >= $FirstBlue$View & iview <= $LastBlue$View) &
        (NRT$Pointer$Index >= $NRT$Orange$Offset)) break
 
    #$% if slot not in use, get next
    if (xNRT$InUse$i == $no) next
 
    #$% if not in the same side, try next
    NRT$View$I = xNRT$View$I
    if  (iblue == $yes &
        (NRT$View$I >= $FirstBlue$View & NRT$View$I <= $LastBlue$View))
        {
         iokay = $yes
        }
    else if (iorange == $yes &
            (NRT$View$I >= $FirstOrange$View & NRT$View$I <= $LastOrange$View))
         {
         iokay = $yes
         }
    #$% neutral stuff 2/4/91, reh
    else if (ineutral == $yes & NRT$View$I == $Neutral$View)
         {
         iokay = $yes
         }
 
    if (iokay == $yes)
        {
         #$% save both names
         itrk[1] = xNRT$Name1$C
         itrk[2] = xNRT$Name2$C
 
         #$% compare name1 and name2 to keys
         call COMPAR(2,itrk,keys,irsult)
 
         if (irsult <  0) next                       # less than keys
 
         if (irsult == 0)                            # found exact match
           {
            #$% save pointer and return
            nxtpnt = NRT$pointer
            return
           }
 
         #$% compare name1 and name2 to lowest
         call COMPAR(2,itrk,lowest,irsult)
 
         if (irsult > 0) next                        # larger than lowest found
 
         lowest[1] = itrk[1]                         # at this point, have
         lowest[2] = itrk[2]                         # best candidate so far
 
         #$% save pointer
         nxtpnt = NRT$pointer
        }
   }
 
 #$% set lowest names as keys
 ikey  = lowest[1]
 ikey2 = lowest[2]
 
return
end # end of NXTNRT
 

 
 
Subroutine NRT_ENTRY(NRT$pointer,lstsec)
 
#####################################################################
#$%
#$% Purpose:   NRT_ENTRY gets the NRT track data for display.
#$%
#$% Called By: NRTNRT
#$%
#$% Calls:     OUTH
#$%            OUTIZ
#$%
#$% Tables:    NRT
#$%
#$% Date:      DECEMBER 1992
#$%
#$% Author:    Susan Miller
#$%
#####################################################################
BBcommon
STATUScommon
 
# parameters
 
integer NRT$Pointer, lstsec
# local variables
LITERAL NRT$Name1$C,NRT$Name2$C,CSTRIP8 # jb E2145  3/22/00
integer  NRT_Course
Integer kk, iclch,itseq                 # jb E2145  3/22/00
 #$% test and exit on overflow, save line count
 $test$next$line ; $exit$on$overflow
 $save$line$count
 
 #$% save keys
 kk=0; call smovh (ikey,4,iclch,kk)
 kk=0; call smovh (ikey2,4,itseq,kk)
 
 #$% increment keys
 $update$keys
 
 #$% go to next line
 $prepare$next$line
 
 #$% if section not valid
 if (isect != lstsec)
   {
    #$% save last section
    lstsec = isect
   }
 
 NRT$Name1$C = xNRT$Name1$C
 NRT$Name2$C = xNRT$Name2$C
 
 #$% display name1
 $column 1     # jb E2141  (1 vice 2)   3/13/00
 if (NRT$Name1$C != $NO) $OutH(NRT$Name1$C,$$MAXname) # jb E2141    3/13/00
 
 #$% display name2
 $column 10     # jb E2141  (10 vice 8) 3/13/00
 if (NRT$Name2$C != $NO) $OutH(NRT$Name2$C,$$MAXname) # jb E2141    3/13/00
 
 #$% display type
 $column 20     # jb E2141  (20 vice 15) 3/13/00
 if (xNRT$Type$I == $ENEMY$CODE) $OutV("ENEMY")             # jb E2141  3/13/00
 else if (xNRT$Type$I == $FRIENDLY$CODE) $OutV("FRIEND")    # jb E2141  3/13/00
 else if (xNRT$Type$I == $NEUTRAL$CODE) $OutV("NEUT ")      # jb E2141  3/13/00
 else if (xNRT$Type$I == $UNKNOWN$CODE) $OutV("UNKNO")      # jb E2141  3/13/00
 
 #$% display desig
 $column 27     # jb E2141  (27 vice 22) 3/13/00
 if (xNRT$Cat$I == $AIR$CODE) $OutV("  AIR  ")             # jb E2141  3/13/00
 else if (xNRT$Cat$I == $SUB$CODE) $OutV("  SUB  ")        # jb E2141  3/13/00
 else if (xNRT$Cat$I == $SURFACE$CODE) $OutV("SURFACE")    # jb E2141  3/13/00
 
 #$% display latitude
 $column 35 $OutLL(xNRT$Latitude$F,"NS")     # jb E2141  (35 vice 30) 3/13/00
 
 #$% display longitude
 $column 45 $OutLL(xNRT$Longitude$F,"EW")     # jb E2141  (45 vice 41) 3/13/00
 
 #$% display course
 NRT_Course = INT(xNRT$Course$F)
 $column 57 $Outiz(NRT_Course,3)     # jb E2141  (57 vice 52) 3/13/00
 
 #$% display speed
 $column 63 $Outib(xNRT$Speed$I,4)     # jb E2141  (63 vice 57) 3/13/00
 
 #$% display designator
 $column 71 $Outib(xNRT$Station$I,2)    # jb E2141  (71 vice 66) 3/13/00
 
return
end # end of NRT_ENTRY
 

 
 
Subroutine NRTNUN
 
#############################################################################
#$%
#$% Purpose:   NRTNUN generates a message when there are no NRT track
#$%            data for display.
#$%
#$% Called By: NRTNRT
#$%
#$% Calls:     OUTV
#$%
#$% Tables:    None
#$%
#$% Date:      DECEMBER 1992
#$%
#$% Author:    Susan Miller
#$%
#############################################################################
BBcommon
STATUScommon
 
#$% test if status board full; go to next line
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% display "No Non-RealTime track" message
$column 1 ; $OutV("No Non-RealTime tracks for this view")  # jb  outV  3/13/00
 
return
end # end of NRTNUN
 
