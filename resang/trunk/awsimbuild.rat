include "ascii.inc"

undefine write   # use the standard fortran write statement
undefine read

define ($maxparms,200)
define ($maxparmlen,20)
define ($maxrcdlen,600)
define ($maxoutrcdlen,120)
define (pmapcommon,
    vaxcharacter*10 btype
    vaxcharacter*10 bcat
    character ap[$maxparmlen,$maxparms]		# AWSIM Parameter name
    character rp[$maxparmlen,$maxparms]		# RESA Parameter name
    character dp[$maxparmlen,$maxparms]		# Default value
    integer npmaps
    common /pmap/ npmaps, btype, bcat, ap, rp, dp
)

define (number_args, 5)  # build_type build_cat header_file input_file output_file

program awsimbuild
#########################################################################
#$%
#$% Purpose:    This program generates build script from comma delimited file
#$%             containing awsim fixed wing characteristics.
#$%
#$% Calls:      initr4         <rlib.olb>
#$%             read_arguments
#$%             ctoi
#$%             remark
#$%             exit
#$%             delay
#$%             Game_DTG
#$%             smov..
#$%             echo..
#$%             write
#$%             close
#$%
#$% Tables:     global variables
#$%
#$% Date:       Dec 2011
#$%
#$% Author:     James O. Allen
#$%
#########################################################################

implicit none

pmapcommon

integer          arg_len[number_args], k
vaxcharacter*80  args[number_args], params

integer   naparms, nrparms, ndparms, nrcd
integer   error, return_val
integer   parameter_map, len_trim

integer   msg1_len, len_rcd
character msg1[80]
vaxcharacter*80  v_msg1
Equivalence  (msg1, v_msg1)

vaxcharacter*80  hdrfile
vaxcharacter*80  infile
vaxcharacter*80  outfile

character in_rcd[$maxrcdlen]
vmschar*$maxrcdlen in_rcd_v
equivalence (in_rcd, in_rcd_v)

  call initR4

  call Read_Arguments (number_args, args, arg_len, params)

  btype   = args[1][1:arg_len[1]]
  bcat    = args[2][1:arg_len[2]]
  hdrfile = args[3][1:arg_len[3]]
  infile  = args[4][1:arg_len[4]]
  outfile = args[5][1:arg_len[5]]

if (arg_len[1] == 0 | arg_len[2] == 0 | arg_len[3] == 0 | arg_len[4] == 0 | arg_len[5] == 0)
{
    print *, "usage: awsimbuild <build type> <build cat> <header_file> <in_file> <out_file>"
    stop
}

print *, "awsimbuild ", btype  [1:arg_len[1]]," ",
                        bcat   [1:arg_len[2]], " ",
                        hdrfile[1:arg_len[3]], " ",
                        infile [1:arg_len[4]], " ",
                        outfile[1:arg_len[5]]

    open(unit    =   9,                            #open header file
         file    =   hdrfile,
         status  =  'old',
         access  =  'sequential',
         recl    =   $maxrcdlen,
         iostat  =   return_val)

    if (return_val != 0)
    {
        print *, "unable to open input file"
        stop
    }

    open(unit    =   10,                            #open input file
         file    =   infile,
         status  =  'old',
         access  =  'sequential',
         recl    =   $maxrcdlen,
         iostat  =   return_val)

    if (return_val != 0)
    {
        print *, "unable to open input file"
        stop
    }

open(unit    =   11,                  #open output file
     file    =   outfile,
     status  =  'unknown',
     access  =  'sequential',
     recl    =   $maxoutrcdlen,
     iostat  =   return_val)

if (return_val != 0)
{
    print *, "Unable to open output file"
    stop
}


# First three lines in file
naparms = parameter_map (ap)
nrparms = parameter_map (rp)
ndparms = parameter_map (dp)

if (naparms != nrparms | nrparms != ndparms)
    print *, "unequal number of header parameters"

npmaps = nrparms

read (10,fmt='(A)',END=9000) in_rcd_v			# Skip header
nrcd = 0
repeat
{
        #$% get line with characteristics in comma delimited format
        read (10,fmt='(A)',END=8000) in_rcd_v
		len_rcd = len_trim(in_rcd_v) 
        if (1 == 2)
        {
8000
            break
        }
        call upper (in_rcd)
        k = len_rcd
        call smov (EOS, in_rcd, k)

    call write_build_script (in_rcd)
    nrcd = nrcd + 1
}

9000
print *,"Object count = ",nrcd

close(9)
close(10)
close(11)

End

integer function parameter_map (pt) # Handle AWSIM, RESA and Default headers

implicit none

character pt[$maxparmlen, $maxparms]

character in_rcd[$maxrcdlen]
vmschar*$maxrcdlen in_rcd_v
equivalence (in_rcd, in_rcd_v)

character parm[$maxparmlen]
integer   len_rcd, ipos, n, lp, k
integer   getparmwrd, len_trim

        #$% get awsim parameter name
        read (9,fmt='(A)',END=8000) in_rcd_v
		len_rcd = len_trim(in_rcd_v)
        if (1 == 2)
        {
8000
            print *, "Missing header record"
        }
        call upper (in_rcd)
        k = len_rcd
        call smov (EOS, in_rcd, k)

ipos = 0
n = 0
while (ipos < len_rcd)
{
    lp = getparmwrd (in_rcd, ipos, parm)
    n = n + 1
    if (n > $maxparms)
        print *, "too many parameters"
    k = 0
    call smovh (parm, $maxparmlen, pt[1,n], k)
    call smov  (EOS, pt[1,n], k)
    if (k > $maxparmlen)
        print *, "parmeter too long = ", k
}

if (in_rcd[len_rcd] == COMMA)			# Last parameter is empty
{
	n = n + 1
	k = 0
	call smov (BLANK, pt[1,n], k)
    call smov (EOS,   pt[1,n], k)
}

return(n)
end


Subroutine write_build_script (in_rcd)

implicit none

pmapcommon

integer i, n, k, kk, getparmwrd, ipos, length, equal, didcat

character in_rcd[$maxrcdlen]
character out_rcd[$maxoutrcdlen]
character parm[$maxparmlen], legal_name[$maxparmlen]

string scat "CAT"

#<build type>
#FIND <name>
#DELET ENTRY
#<parametric data>
# .
# .
#SAVE
#QUIT

write (11,9000) btype
9000    format(a)

# First parameter is object name
ipos = 0
n = getparmwrd (in_rcd, ipos, parm)
call legit_name(parm, legal_name)
call shorten_name(legal_name, parm)

write (11,9001) (parm[kk],kk=1,length(parm))
9001    format("FIND ",10a1)

write (11,9002)
9002    format("DELET ENTRY")

ipos = 0
didcat = 0
for (i=1; i<=npmaps; i=i+1)
{
    if (i == 2 & !equal(rp[1,i], scat) & 
        didcat == 0 & bcat(1:1) != "^") # CAT must be second field for RESA
    {
        didcat = 1
        k = 0
        call smovhn (scat, $maxparmlen, out_rcd, k)
        call smov   (TAB, out_rcd, k)
        call smovhn (%%ref(bcat), $maxparmlen, out_rcd, k)
        call smov   (EOS, out_rcd, k)

        write (11,9003) (out_rcd[kk],kk=1,length(out_rcd))
9003    format(120a1)
        i = i - 1
        next
    }
    n = getparmwrd (in_rcd, ipos, parm)
    # commented so 2 value keyword is allowed
    #call legit_name(parm, legal_name)
    #call shorten_name(legal_name, parm)

    if (length(rp[1,i]) == 0) next       # Skip unmapped parameters

    if (length(parm) == 0 & length(dp[1,i]) == 0) next # Skip empty with no default

    if (length(parm) == 0)               # Use default parameter
    {
        k = 0
        call smovh (dp[1,i], $maxparmlen, parm, k)
        call smov   (EOS, parm, k)
    }

    k = 0
    call smovhn (rp[1,i], $maxparmlen, out_rcd, k)
    call smov   (TAB, out_rcd, k)
    call smovh  (parm, ARB, out_rcd, k)
    call smov   (EOS, out_rcd, k)

    write (11,9004) (out_rcd[kk],kk=1,length(out_rcd))
9004    format(120a1)
}

write (11,9005)
9005    format("SAVE")

write (11,9006)
9006    format("QUIT")

return
end


Integer Function  getparmwrd (in_rcd, ipos, keyword)

implicit none
character in_rcd[ARB]
integer ipos, i, j, length, k
character keyword[ARB]
character kw[$maxparmlen]

i = ipos + 1
j = 0

while (in_rcd[i] != "," & in_rcd[i] != EOS)
{
    call smov(in_rcd[i], kw, j)
    i = i + 1
}

kw[j+1] = EOS

# Eliminate leading spaces
j = 1
call skipbl (kw, j)
k = 0
call smovh (kw[j], $maxparmlen, keyword, k)
call smov   (EOS, keyword, k)

if (in_rcd[i] == EOS) i = i - 1         # Don't go beyond EOS
ipos = i

return(k)
end
