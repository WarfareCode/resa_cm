#####   FILE:STSHPBDA.rat           June 1993
#####   This is a new ASTAB for History of Damaged/Destroyed Ships/subs
#####   All information for this ASTAB is retrieved exclusively from the
#####   DSS table.It is a BDA (Battle Damage Assessment) ASTAB - JFR 6/6/93
 
#####   Reused code from AWSIM <asacdstry.rat>
#####   Changed $outH ("...",#) to $outV ("...")
 
#####   Blackboard defines and include ascii constants
 
include "bbcode.inc"
include "bbctl.inc"
include "ascii.inc"
include "bbdss.inc"
include "bbrvu.inc"
include "stmain.inc"
 
 
define  (BBimplicit, IMPLICIT NONE)     # jb E2145  4/5/00
define ($low$order$key,ikey)
define ($increment$keys,$low$order$key = $low$order$key)  # JOA ufl03 E2364

 
Subroutine DSS_Ship_Status
#######################################################
#$%
#$% Purpose:   DSS_Ship_Status generates the history of
#$%            damaged/destroyed ship/sub status board.
#$%
#$% Called By: STDISP <stmain.rat>
#$%            FORMAT_ASTAB <asformat.rat>
#$%
#$% Calls:     DSSDSS   DSSTIT
#$%
#$% Tables:    None
#$%
#$% Date:      June 1993
#$%
#$% Author:    John F. Richardson
#$%            Modified reused code from AWSIM
#$%            file: ASACDSTRY.RAT
#$%
#######################################################
BBcommon
STATUScommon
 
  #$% Display title
  call DSSTIT
 
  #$% Display status board
  call DSSDSS
 
return
end
 

 
Subroutine DSSTIT
#######################################################
#$%
#$% Purpose:   DSSTIT generates a title for the
#$%            history of damaged/destroyed ship/sub status board.
#$%
#$% Called By: DSS_Ship_Status
#$%
#$% Calls:     OUTH     OUTIZ     OUTIB
#$%
#$% Tables:    None
#$%
#$% Date:      June 1993
#$%
#$% Author:    John F. Richardson
#$%            Modified reused code from AWSIM
#$%            file: ASACDSTRY.RAT
#$%
#########################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
  $prepare$next$line
 
  $column  1 ; $outV("View: ") ; $outH(nmvue,5)
  $column 14 ; $outV("SHIP TARGETS BDA STATUS BOARD [") ; $outI(iboard)
               $outV("] - Page ") ; $outIB(kpage,2)
  $column 61 ; $outV("Game Time: ") ; $outIZ(Game_DTGs(igmin),8)
 
return
end

 
Subroutine DSSDSS
########################################################
#$%
#$% Purpose:   DSSDSS executes the subroutines that
#$%            generate the history of Damaged
#$%            Naval Units BDA status board.
#$%
#$% Called By: DSSSTA
#$%
#$% Calls:     DSSENT     DSSHED
#$%            DSSNUN     NXTDSS
#$%
#$% Tables:    DSS
#$%
#$% Date:      June 1993
#$%
#$% Author:    John F. Richardson
#$%            Modified reused code from AWSIM
#$%            file: ASACDSTRY.RAT
#$%
##########################################################
BBcommon
STATUScommon
 
Integer ifound, DSS$Pointer     # jb E2145  3/21/00
 
  #$% display heading
  call DSSHED
 
  $exit$on$overflow
 
  #$% initialize flag
  ifound = $no
 
  repeat
    {
     #$% get next history record
     call NXTDSS(dss$pointer)
 
     #$% if last one, break loop
     if (dss$pointer == 0) break
 
     #$% found one
     ifound = $yes
 
     #$% get history data
     call DSSENT(dss$pointer)
 
     $exit$on$overflow
    }
 
  #$% if none, send message
  if (ifound == $no)  call DSSNUN
 
return
end

 
Subroutine DSSHED
###########################################################
#$%
#$% Purpose:   DSSHED  generates heading for the
#$%            history of damaged/destroyed ships/subs status board.
#$%
#$% Called By: DSSDSS
#$%
#$% Calls:     SMOVH
#$%
#$% Tables:    None
#$%
#$% Date:      June 1993
#$%
#$% Author:    John F. Richardson
#$%            Modified reused code from AWSIM
#$%            file: ASACDSTRY.RAT
###########################################################
BBcommon
STATUScommon
 
Integer ilen        # jb E2145  3/21/00
 
#$% jb E2141   MSG2, MSG3, MSG4 modified:
string msg2 "        Track                            ----- HOW DAMAGED ------         "
#tring msg3 " Time   Numbr   Class   Lat    Lon    Atckr  Weapn  Nbr Fired  Result "
#tring msg4 "------  -----   -----  ------ ------  ------ ----- ---------  ------ "
string msg3 " Time   Number   Class    Lat     Lon    Attacker  Weapon  #Fired  Result "
string msg4 "------ -------- -------- ------ -------  -------- -------- ------  ------ "
#            xxxxxx  xxxxxxx xxxxxxxx xxxxxx xxxxxx   xxxxxxxx xxxxxxxx   xxxx   xxxxx
#            01234567890123456789012345678901234567890123456789012345678901234567890123456789
#                      1         2         3         4         5         6         7
 
  #$% set line lengths
  ilen = 0; call smovh(msg2,ARB,Ipage[1,2],ilen)
  LINLEN[2] = ilen  # jb E2141  3/7/00
  ilen = 0; call smovh(msg3,ARB,Ipage[1,3],ilen)
  LINLEN[3] = ilen  # jb E2141  3/7/00
  ilen = 0; call smovh(msg4,ARB,Ipage[1,4],ilen)
  LINLEN[4] = ilen  # jb E2141  3/7/00
 
  #$% set line counter
  LINCNT = 4
 
return
end
 

 
Subroutine NXTDSS(DSS$pointer)
#################################################
#$%
#$% Purpose:   NXTDSS locates next history entry.
#$%
#$% Called By: DSSDSS
#$%
#$% Calls:     None
#$%
#$% Tables:    DSS
#$%
#$% Date:      March 1992 (original)
#$%
#$% Author:    Reused code from AWSIM
#$%            file: ASACDSTRY.RAT
#$%            John F. Richardson - modified for use
#$%            in Battle Damage Assessment Astabs
#$%            JULY 1993
#$%
#$%            Jim Allen 9/02 (E2301)
#$%            Do not assume DSS table is in time sequence
#$%
###################################################
BBcommon
StatusCommon
 
Literal idmg[2],    CSTRIP8
Literal keys[2],lowest[2]
integer Game_DTG,
        kk,nxtpnt,irsult,
        DSS$Pointer
 
#$% initialize search array to maximum
lowest[1] = -1.0            # JOA ufl03 E2364
lowest[2] = '000000'
 
#$% if first entry save lowest - else save key
if (ikey  == 1)
{
    keys[1] = $highest$ascii
    keys[2] = $highest$ascii
}
else
{
    keys[1] = ikey
    keys[2] = ikey2
}
 
#$% zero pointer
nxtpnt = 0
 
#$% search DSS table
for_all_valid (DSS)
{
    #$% if slot not in use, get next
    if (xdss$InUse$i == $no) next
 
    # not a ship or sub or boat (Surface BDA Astab)
    if (xdss$type$i != $surface$code &
        xdss$type$i != $sub$code &
        xdss$type$i != $smallboat$supercode)
    {
        next
    }
 
    if (xDSS$TimeDamaged$F > Game$Time)
    {
        next # torpedo or mine not at target yet
    }
 
    if (xDSS$AttackersView$I != iview) next
 
    kk = 0; call smovv ("        ", idmg[1], kk)
    kk = 0; call smovv ("        ", idmg[2], kk)
 
    #$% save damage report time
    kk=0; call smoviz (Game_DTG(xDSS$TimeDamaged$F),6,idmg[1],kk)
 
    kk=0; call smoviz (DSS$Pointer$index,6,idmg[2],kk)
 
    #$% compare damage entry to keys
    call COMPAR(2,idmg,keys,irsult)
 
    #$% if entry already displayed
    if (irsult >=  0) next                       # greater than or equal keys
 
    #$% compare damage entry to lowest
    call COMPAR(2,idmg,lowest,irsult)
 
    #$% if smaller than highest, get next entry
    if (irsult < 0) next                        # smaller than largest
 
    #$% save best entry so far
    lowest[1] = idmg[1]                         # at this point, have
    lowest[2] = idmg[2]                         # best candidate so far
 
    #$% save pointer
    nxtpnt = dss$pointer
}
 
#$% save highest entry
ikey  = lowest[1]
ikey2 = lowest[2]
 
dss$pointer = nxtpnt
 
return
end
 

 
Subroutine DSSENT(dss$pointer)
##################################################################
#$%
#$% Purpose:   DSSENT gets data for history of Damaged
#$%            aircraft status board.
#$%
#$% Called By: DSSDSS
#$%
#$% Calls:     SMOVIB      SMOVH      SMOVLL
#$%
#$% Tables:    DSS
#$%
#$% Date:      June 1993
#$%
#$% Author:    John F. Richardson
#$%            Modified reused code from AWSIM
#$%            file: ASACDSTRY.RAT
#$%            Added Astab_Mission call and changed positions
#$%            and DESTRY possibilities
#$%
#$%            Susan Miller - 12/97 (E1685)
#$%            Fix alignment of true class of track.
#$%
######################################################################
BBcommon
STATUScommon
 
Literal icodee, a_track
LitCharEquiv(Outcome,7)
Literal notrack
integer iclsch[0:5], iclcode
vmschar*4 iclschC[0:5]
equivalence( iclsch, iclschC )
 
LITERAL DSS$Whodamagedit$C,DSS$Wpntypthatgotit$C,   # jb E2145  3/21/00
        DSS$Classification$C,CSTRIP,CSTRIP8         # jb E2145  3/21/00
REAL*4  DSS$Timedamaged$F,DSS$Latitudedamaged$F,    # jb E2145  3/21/00
        DSS$Longitudedamaged$F                      # jb E2145  3/21/00
Integer Game_DTG                                    # jb E2145  3/21/00
Integer DSS$Pointer,DSS$Howdamaged$I,DSS$Nbrfired$I, # jb E2145  3/21/00
        DSS$Tracknumber$I,DSS$Result$I, RVU$Pointer  # jb E2145  3/21/00
Data OutcomeC/'MINOR','MODERATE','MAJOR','SEVERE','SUNK','DESTROY','UNKNOWN'/
 
data iclschC[$air$code     ]/ "A  " /
data iclschC[$surface$code ]/ "S  " /
data iclschC[$sub$code     ]/ "U  " /
data iclschC[$null$code    ]/ "   " /
data iclschC[$BDA$ESMcode  ]/ "E  " /
data iclschC[$BDA$Sonarcode]/ "P  " /
 
  $test$next$line
  $exit$on$overflow
  $save$line$count
  $update$keys       # JOA ufl03 E2364
  $prepare$next$line
 
  #$% get all DSS table entries to be used
  DSS$WhoDamagedIt$C        = xDSS$WhoDamagedIt$C  # attacker resa name
  DSS$WpnTypThatGotIt$C     = xDSS$WpnTypThatGotIt$C # weapon that got it
  DSS$TimeDamaged$F         = xDSS$TimeDamaged$F     # simulation time
  DSS$LatitudeDamaged$F     = xDSS$LatitudeDamaged$F # lat of damaged unit
  DSS$LongitudeDamaged$F    = xDSS$LongitudeDamaged$F # long of damaged unit
  DSS$HowDamaged$I          = xDSS$HowDamaged$I       # aam, ciws, etc.
  DSS$TrackNumber$i         = xDSS$TrackNumber$i     # track number of damaged unit
  DSS$NbrFired$i            = xDSS$NbrFired$i      # number of weapons fired at victim
  DSS$Result$I              = xDSS$Result$I   # level of damage
  DSS$Classification$C      = xDSS$Classification$C # classification of damaged unit
 
  IBYTE = 0
  #$% display time the a/c was Damaged
  call SMOVIZ(Game_DTG(DSS$TimeDamaged$F),6,IPAGE[1,LINCNT],IBYTE)
 
  #$% display track name, if any
  #$% set RVU pointer; set track code
  RVU$pointer$to iview
  icodee = xRVU$trackcode$c       # this is track code for the view
  iclcode = ICLSCH[xdss$ClassId$i] # get class code (A, S, U = sub, E = ESM,
                                   # P = Passive)
  if (DSS$HowDamaged$I != $DamagedonGround$Code &
      DSS$Tracknumber$I != 0)
    {
     $column 9 ; $OutHN (a_track(icodee,iclcode,DSS$TrackNumber$I),$$MaxLit)            # (E2172)
    }
  else if (DSS$HowDamaged$I != $DestroyedOnGround$Code &
           DSS$Tracknumber$I == 0)
          { # must be a local track (can happen if weapon range is about
            # same as radar range so local track exists but RMT track
            # does not exist since RMT table not updated at time of attack)
            notrack = 'LOCAL'  # Display 'LOCAL'
            IBYTE = 8
            call SMOVH(notrack,5,IPAGE[1,LINCNT],IBYTE)
          }
  else if (DSS$HowDamaged$I == $DamagedonGround$Code)
     {
      notrack = 'DOG'
      IBYTE = 9
      call SMOVH(notrack,5,IPAGE[1,LINCNT],IBYTE)
     }
 
  #$% Display track classification if possible
  IBYTE = 16
  call SMOVH(DSS$Classification$c,$$MAXname,IPAGE[1,LINCNT],IBYTE) #jb  3/7/00
 
  #$% display position where Damaged, if not code of DOG,CTAK,CLND
  if (DSS$HowDamaged$i != $DamagedonGround$Code &
      DSS$HowDamaged$i != $CrashedonTakeoff$Code  &
      DSS$HowDamaged$i != $CrashedonLanding$Code  )
    {
     #$% display latitude
     IBYTE = 25   # jb E2141  (25 vs 23)    3/7/00
     call SMOVLL(DSS$LatitudeDamaged$f,"NS",IPAGE[1,LINCNT],IBYTE)
 
     #$% display longitude
     IBYTE = 32   # jb E2141  (32 vs 30)    3/7/00
     call SMOVLL(DSS$LongitudeDamaged$f,"EW",IPAGE[1,LINCNT],IBYTE)
    }
 
  #$% The following will only be displayed if you are logged onto a control ASTAB
     if (DSS$HowDamaged$I == $AirToAirMissile$Code     |
         DSS$HowDamaged$I == $CloseInWeaponSystem$Code |
         DSS$HowDamaged$I == $DamagedByGunfire$Code    |
         DSS$HowDamaged$I == $SurfToSurfMissile$Code   |
         DSS$HowDamaged$I == $AirToSurfMissile$Code    |
         DSS$HowDamaged$I == $NavalCruiseMissile$Code  |
         DSS$HowDamaged$I == $AirBomb$Code             |
         DSS$HowDamaged$I == $NavalMine$Code           |
         DSS$HowDamaged$I == $NavalTorpedo$Code        |
         DSS$HowDamaged$I == $SurfToAirMissile$Code    )
       {
        IBYTE = 41   # jb E2141  (41 vs 38)    3/7/00
        call smovH(DSS$WhoDamagedIt$C,$$MAXname,IPAGE[1,LINCNT],IBYTE) #jb 3/00
 
        IBYTE = 50   # jb E2141  (50 vs 45) & \/ $$MAX   3/7/00
        call smovH(DSS$WpnTypThatGotIt$C,$$MAXname,IPAGE[1,LINCNT],IBYTE)
       }
 
  #$% Display the number of weapons fired
  IBYTE = 60   # jb E2141  (60 vs 55)    3/7/00
  call SMOVIZ(DSS$NbrFired$i,3,IPAGE[1,LINCNT],IBYTE)
 
  #$% Display the Result
  IBYTE = 67   # jb E2141  (67 vs 63)    3/7/00
  if (DSS$Result$I >= $MinorBDA$Code &
      DSS$Result$I <= $DestroyedBDA$Code)
      call SMOVH(Outcome[DSS$Result$I],8,IPAGE[1,LINCNT],IBYTE)
  else
      # default to unknown damage
      call SMOVH(Outcome[7],8,IPAGE[1,LINCNT],IBYTE)
 
  #$% set line length
  LINLEN[LINCNT] = IBYTE
 
  #$% if control view then display RESA name of target
  if (mside == $Control$code)  # Control signed on?
     { # test and exit if status board full, then go to next line
      $test$next$line
      $exit$on$overflow
      $prepare$next$line
 
      IBYTE = 5   # jb E2141 5 vs 7; & omit parens between track & class) 3/7/00
      call smov ($Lparen,IPAGE[1,LINCNT],IBYTE) # move left parenthesis in IPAGE arrray
      call smovhn(xDSS$Name$C,$$MAXname,IPAGE[1,LINCNT],IBYTE) # jb E2141 3/7/00
 ##     call smov ($Rparen,IPAGE[1,LINCNT],IBYTE) # move right parenthesis in IPAGE arrray
 
      IBYTE = 15   # was IBYTE + 2 - smm 12/97 (E1685)
 ##     call smov ($Lparen,IPAGE[1,LINCNT],IBYTE) # move left parenthesis
      call smovhn(xDSS$TrueClassofTarget$C,$$MAXname,IPAGE[1,LINCNT],IBYTE)
      call smov ($Rparen,IPAGE[1,LINCNT],IBYTE) # move right parenthesis
 
      LINLEN[LINCNT] = IBYTE
     }
 
return
end

 
Subroutine DSSNUN
################################################################
#$%
#$% Purpose:   DSSNUN displays message if there is no Damaged
#$%            Naval units for this view
#$%
#$% Called By: DSSDSS
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      June 1993
#$%
#$% Author:    John F. Richardson
#$%            Modified reused code from AWSIM
#$%            file: ASACDSTRY.RAT
#$%
################################################################
BBcommon
STATUScommon
 
  $test$next$line
  $exit$on$overflow
  $prepare$next$line
 
  #$% send no aircraft message
  $column 1 ; $outV("No Damaged Naval Units in this view")
 
return
end
