##      FILE:   wilduvp.rat
 
define  (DEBUG,#)
define  (DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbuvp.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit NONE)     # MJC 5/1/2000 (E-2145)
 
Subroutine wgluvp (reccnt,recsz,rec)  #load the UAV Probabilities
    # WARNING: arguments may include a CONSTANT:  DON'T CHANGE!
########################################################
#$%
#$% Purpose:   WGLUVP loads in the UAV Probability values scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     Getsr
#$%
#$% Tables:    UVP
#$%
#$% Date:      2/6/90
#$%
#$% Author:    R. Hundt
#$%
########################################################
 
BBcommon
 
integer         reccnt,                 ## RECORD COUNT
                recsz                   ## RECORD SIZE
literal         rec[1500]               ## RECORD
 
integer         LOOP,ISTAT,
                UVP$Pointer,
                UVP$Targetindex$I,
                UVP$Type$I,
                UVP$PB$Index,
                UVP$PB$range$I,
                UVP$PB$detection$I,
                UVP$PB$recognition$I,
                UVP$PB$identification$I         # MJC 5/1/2000 (E-2145)
 
DEBUG call echov ("<WGLUVP:")
 
#______________________________________________________________________
 
if (reccnt <= 1)                        ## if file is empty (no record count)
    {                                   ## send warning message to user return
    call echov ("UAV Fuzzy Probability File Empty. ")
    call echor
    return
    }
 
for (loop = 2; loop <= reccnt; )                ## for each record in the file
    {
    call GETSR (loop, recsz, rec)               ## get scenario record
 
    call GSLOTM (uvp$Pointer,$$uvp,uvp$entry,istat)
 
    if(istat == $no)
        {
        call echov ("UAV Fuzzy Probability for ")
        call echoi(rec[2])
        call echov (" Target Type Index are not loaded.")
        call echov (" (uvp table full)")
        call echor
        return
        }
 
    UVP$TargetIndex$i = rec[2]
    UVP$Type$i        = rec[3]
 
    PUTUVP$TargetIndex$i
    PUTUVP$Type$i
 
    #$% for all integer range values
    FOR (UVP$PB$Index= 1;
         UVP$PB$Index <= $UAV$NumRangesPerType;   #$UAV$MaxRange;
         UVP$PB$Index = UVP$PB$Index + 1)
        {
        UVP$PB$Range$i           = rec[ (UVP$PB$Index * 4)     ]
        UVP$PB$Detection$i       = rec[ (UVP$PB$Index * 4) + 1 ]
        UVP$PB$Recognition$i     = rec[ (UVP$PB$Index * 4) + 2 ]
        UVP$PB$Identification$i  = rec[ (UVP$PB$Index * 4) + 3 ]
 
        PUTUVP$PB$Range$i
        PUTUVP$PB$Detection$i
        PUTUVP$PB$Recognition$i
        PUTUVP$PB$Identification$i
        }
 
    #_________________________________________________________________
 
    }
 
return
end
