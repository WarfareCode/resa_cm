#            12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
##### FILE: STSHIPS.RAT
 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 9-mar-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw             modularized routine and made compatible with
###                     use of search keys in main driver;
###                     added checks on validity of data to avoid
###                     problems which could result now that the blackboard
###                     can be read at any time
###
 
###
### mod to version 3.0          dated 30-dec-1980
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 sfc             changed routine to write position and logistics
###                     data from the OWN & INV Tables to the status board;
###
 
 
#####   version 3.0     dated 22-dec-1980
 
 
# 
 
#$%      MODULE                        UTILITY                   DATA
#$%    SUBROUTINES                   SUBROUTINES                TABLES
#$%    ===========                   ===========                ======
#$%
#$%      SHPSTA                         OUTH                      OWN
#$%      SHPTIT                         OUTI                      UNT
#$%      SHPSHP                         OUT                       RVU
#$%      SHPHED                         SMOVH                     EMC
#$%      NXTSHP                         SMOVLL
#$%      SHPENT                         SMOVIB
#$%      SHPNUN                         SMOVIZ
#$%      COMPAR<STATUS>
#$%      FMTEXP<STATUS>
#$%      LSTEXP<STATUS>
#$%      COURSE<STATUS>
#$%      OWNSTA<STATUS>
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1. <filename> indicates where file is located.
#$%
#$%    2. Utility subroutines not shown on flowchart.
#$%
#$%    3. * indicates no other subroutines called.
#$%
#$%
#$%    FLOWCHART FOR SHPSTA
#$%    ====================
#$%
#$%    STDISP<STATUS> - SHPSTA - SHPTIT*
#$%                            - SHPSHP - SHPHED*
#$%                                     - SHPNUN*
#$%                                     - NXTSHP - COMPAR*
#$%                                     - SHPENT - FMTEXP*
#$%                                              - LSTEXP*
#$%                                              - COURSE*
#$%                                              - OWNSTA*
 
 
# 
 
 
include "bbcode.inc"                                  # blackboard defines
include "bbctl.inc"
include "ascii.inc"                                   # include ascii constants
include "bbunt.inc"                   # jb Replaces DUP  4/4/89
include "bbemc.inc"
include "bbown.inc"
include "bbshc.inc"             # joa 2/96 (E1467)
include "bbrvu.inc"
include "stmain.inc"
include "bbdeq.inc"             # SMM 1/97 (E1732)
include "bbiff.inc"             # SMM 2/97 (E1732)
 
define (BBimplicit, IMPLICIT NONE)  # jb  E2145     1/31/00
define ($low$order$key,ikey)
 
 
Subroutine SHPSTA
 
#########################################################################
#$%
#$% Purpose:   SHPSTA controls display of the ship status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     SHPTIT     SHPSHP
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
#########################################################################
 
BBcommon
STATUScommon
 
#$% displays titles
call SHPTIT
 
#$% generates ship status board heading data
call SHPSHP
 
return
end
 

 
 
Subroutine SHPTIT
 
########################################################################
#$%
#$% Purpose:   SHPTIT generates the title for the ship status board.
#$%
#$% Called By: SHPSTA
#$%
#$% Calls:     OUTH     OUTI
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
########################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
#$% go to next line
$prepare$next$line
 
#$% displays ship status titles
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
$column 24 ; $OutV("SHIP STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
 
Subroutine SHPSHP
 
##############################################################################
#$%
#$% Purpose:   SHPSHP executes the subroutines that generate the ship status
#$%            board.
#$%
#$% Called By: SHPSTA
#$%
#$% Calls:     SHPHED     SHPENT
#$%            NXTSHP     SHPNUN
#$%
#$% Tables:    OWN
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer ifound,  OWN$Pointer        # jb E2145  2/1/00
 
#$% generate headings for displays
call SHPHED
 
#$% exit if status board full
$exit$on$overflow
 
#$% initialize test flag
ifound = $no
 
repeat
   {
    #$% get next ship entry
    call NXTSHP(own$pointer)
 
    #$% if none, break loop
    if (own$pointer == 0) break
 
    #$% get flag
    ifound = $yes
 
    #$% get ship data
    call SHPENT(own$pointer)
 
    #$% exit if status board full
    $exit$on$overflow
   }
 
#$% if none found, display "No entries" message
if (ifound == $no)  call SHPNUN
 
return
end
 

 
 
Subroutine SHPHED
 
###########################################################################
#$%
#$% Purpose:   SHPHED generates the heading for the ship status board.
#$%
#$% Called By: SHPSHP
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
#$% Modified:  James Allen - 2/96 (E1467)
#$%            Replaced the EMBRK column with FUEL information.
#$%
###########################################################################
BBcommon
STATUScommon
 
Integer ilen    # jb E2145     2/1/00
 
#                      1         2         3         4         5         6         7         8
#string MSG2 "NAME  CRS SPD  LAT    LONG   GUIDE BRG RNG PLAN  WPN   CM  EMCON STAT REPT FUEL"
#string MSG3 "----- --- --  ------ ------- ----- --- --- ----- ---- ---- ----- ---- ---- ----"
#            0123456789012345678901234567890123456789012345678901234567890123456789012345678
string MSG2 "NAME     CRS SPD LAT    LONG    GUIDE   BRG RNG  WPN  CM  EMCON STAT REPT FUEL"
string MSG3 "-------- --- -- ------ ------- -------- --- --- ---- ---- ----  ---- ---- ----"
 
#$% set line lengths
ilen = 0;  call smovh(MSG2,ARB,IPAGE[1,2],ilen)
LINLEN[2] = ilen    # jb E2141  3/2/00
ilen = 0;  call smovh(MSG3,ARB,IPAGE[1,3],ilen)
LINLEN[3] = ilen    # jb E2141  3/2/00
 
#$% set line count
LINCNT = 3
 
return
end
 
 
 
 
Subroutine NXTSHP(nxtpnt)
 
####################################################################
#$%
#$% Purpose:   NXTSHP locates the next ship data for display.
#$%
#$% Called By: SHPSHP
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    OWN     UNT
#$%
#$% Date:      27 JAN 82
#$%
#$% Auhtor:    F. Jones
#$%
####################################################################
BBcommon
StatusCommon
 
literal ishp[1],keys[1],lowest[1],  CSTRIP8 # jb E2145 (CSTRIP8) 2/1/00
Integer nxtpnt,irsult,                      # jb E2145  2/1/00
        OWN$Pointer,OWN$Unit$I,OWN$Type$I,  # jb E2145  2/1/00
        UNT$Pointer                         # jb E2145  2/1/00
 
#$% initialize search array
lowest[1] = $highest$ascii
 
#$% if only one, save lowest, else save key
if (ikey  == 1) keys[1] = $lowest$ascii
else            keys[1] = ikey
 
#$% initialize pointer to zero
nxtpnt = 0
 
#$% search own table
#for (own$pointer$first ; still_ok(OWN) ; own$pointer$next)
for_all_ok (OWN)
   {
    #$% get own unit; if own unit is zero, get next
    own$Unit$i = xown$Unit$i
    if (own$Unit$i == 0) next
 
    #$% if own view is not same view, get next
    if (xown$View$i != iview) next
 
    #$% get own type
    own$type$i = xown$type$i
 
    #$% if own type is not surface, get next
    if (own$type$i != $surface$code      ) next # &
#       own$type$i != $surfacewithac$code)  next
 
    #$% set unit pointer and save unit name
    UNT$pointer$to own$unit$i
 
    #$% exclude units that are being deleted
    if (xUNT$Status$i == $BeingDeleted$Code) next            # AM.    8/23/89
 
#   if (Xunt$SmallBoat$i == $YES) next          # bypass smallboats
    if (Xunt$SuperType$i == $SmallBoat$SuperCode) next # bypass smallboats
 
    ishp[1] = XUNT$Name$c
 
    #$% compare ship to keys
    call COMPAR(1,ishp,keys,irsult)
 
    if (irsult <  0) next                       # less than keys
 
    if (irsult == 0)                            # found exact match
       {
        #$% save pointer and return
        nxtpnt = own$pointer
        return
       }
 
    #$% compare ship and lowest
    call COMPAR(1,ishp,lowest,irsult)
 
    if (irsult > 0) next                        # larger than lowest found
 
    #$% save lowest
    lowest[1] = ishp[1]                         # at this point, have
						# best candidate so far
    #$% save pointer
    nxtpnt = own$pointer
   }
#$% save lowest key
ikey  = lowest[1]
 
return
end
 
 

 
 
Subroutine SHPENT(own$pointer)
 
#############################################################################
#$%
#$% Purpose:   SHPENT gets the ship data for display on the status board.
#$%
#$% Called By: SHPSHP
#$%
#$% Calls:     SMOVH      SMOVIZ     SMOVIB     Display_IFF
#$%            SMOVLL     OUT        OWNSTA
#$%            OUTH       COURSE     LSTEXP
#$%            FMTEXP
#$%
#$% Tables:    OWN     UNT     EMC
#$%            RVU
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
#$% Modified:  James Allen - 2/96 (E1467)
#$%            Replaced Embark information with Fuel Information -
#$%            Ship Fuel Consumption Model (assumed and true values).
#$%
#$%            Carol Kropp - 12/96 (E1724)
#$%            Display ship's mission if one is assigned.
#$%
#$%            Susan Miller 2/97 (E1732)
#$%            If a unit has an IFF, it's on and is a transponder,
#$%            display the modes
#$%
#$%            Susan Miller - 4/98 (E1506)
#$%            Count the number of SAMs and check for JECEWSI jamming
#$%            with call to Check_for_degraded_SAM_launch.
#$%
#############################################################################
BBcommon
STATUScommon
InventoryCommon # number_of_sams  SMM 4/98 (E1506)
literal Astab_Mission       # function to obtain text for mission code
literal mission_type
Literal igide, astab_roe,
        UNT$Name$C, EMC$Name$C,  CSTRIP8              # jb  E2145 2/1/00
Real    ShipUseFuelRemaining       # to compute fuel information
Real    ShipUseFuelCapacity        # for astab display
REAL*4  UNT$TrueLatitude$F,UNT$TrueLongitude$F,UNT$TrueCourse$F,
        OWN$Latitude$F,OWN$Longitude$F                # jb  E2145 2/1/00
REAL    OWN$TimeReported$F,OWN$TNK$FuelRemaining$F    # jb  E2145 2/1/00
REAL    UNT$TNK$FuelRemaining$F                       # jb  E2145 2/1/00
REAL    SHC$TNK$Capacity$F                            # jb  E2145 2/1/00
Integer DEQ$Pointer                                   # jb  E2145 2/1/00
Integer SHC$Pointer,SHC$TNK$Index         # jb  E2145 2/1/00
Integer COURSE, Game_Time,
        IC,ispeed,none,istat,                       # jb  E2145 2/1/00
        OWN$Pointer,OWN$Course$I,OWN$Speed$I,OWN$EmconIndx$I, # E2145 2/1/00
        OWN$Unit$I,OWN$Guide$I,OWN$Status$I,        # jb  E2145 2/1/00
        EMC$Pointer, UNT$Pointer, UNT2$Pointer      # jb  E2145 2/1/00
Integer PctRemaining               # joa 2/96 (E1467)
integer has_IFF, IFF$Pointer      # smm 2/97
integer UNT$View$I, only_mode3    # (E1732)
integer DEQ$Ident$I                # SMM 4/98 (E1506)
Integer UNT$TNK$Index,OWN$TNK$Index                 # jb  E2145 2/1/00
BBDeclare (SHC$FullName$V)
VMSchar VSTRIP*ARB
 
#$% test and exit if status board full; save line count, and update keys
$test$next$line ; $exit$on$overflow
$save$line$count
$update$keys
 
#$% go to next line
$prepare$next$line
 
 
#$% get own unit, set pointer
own$unit$i = xown$unit$i
UNT$pointer$to own$unit$i
 
#$% move unit name to IPAGE array
IBYTE = 0
UNT$NAME$C = XUNT$NAME$C
call SMOVH(UNT$NAME$C,$$MAXname,IPAGE[1,LINCNT],IBYTE) # jb E2141   1/31/00
 
#$% move course to IPAGE array
IBYTE = 9       # jb E2141 9 vice 6   1/31/00
own$course$i = xown$course$i
call SMOVIZ(own$course$i,3,IPAGE[1,LINCNT],IBYTE)
 
#$% move speed to IPAGE array
IBYTE = 13      # jb E2141 13 vice 10   1/31/00
own$speed$i = xown$speed$i
call SMOVIB(own$speed$i,2,IPAGE[1,LINCNT],IBYTE)
 
#$% move latitude to IPAGE array
IBYTE = 16      # jb E2141 16 vice 14   1/31/00
own$latitude$f = xown$latitude$f
call SMOVLL(own$latitude$f,"NS",IPAGE[1,LINCNT],IBYTE)
 
#$% move longitude to IPAGE array
IBYTE = 23      # jb E2141 23 vice 21   1/31/00
own$longitude$f = xown$longitude$f
call SMOVLL(own$longitude$f,"EW",IPAGE[1,LINCNT],IBYTE)
 
#$% get guide
own$guide$i = xown$guide$i
 
#$% if there is a station guide
if (own$guide$i != $no)
   {
    #$% set unit pointer to own guide
    UNT2$pointer$to own$guide$i
 
    #$% move IGIDE to IPAGE array
    IBYTE = 31      # jb E2141 31 vice 29   1/31/00
    IGIDE = XUNT2$NAME$C
    call SMOVH(IGIDE,$$MAXname,IPAGE[1,LINCNT],IBYTE) # jb E2141 $$MAX 1/31/00
 
    #$% move guide bearings to IPAGE array
    IBYTE = 40                      # jb E2141  40 vice 35   1/31/00
    call SMOVIZ (xown$guidebearing$i,3,IPAGE[1,LINCNT],IBYTE)
 
    #$% move guide range to IPAGE array
    IBYTE = 44                      # jb E2141  44 vice 39   1/31/00
    call SMOVIB(xown$guiderange$i,3,IPAGE[1,LINCNT],IBYTE)
   }
 
#$% move ROE to IPAGE array
IBYTE = 48      # jb E2141 (48 vice 49) 2/15/00
call SMOVH(Astab_ROE(Xown$roe$i, xOWN$NucFree$I),4,IPAGE[1,LINCNT],IBYTE)
 
ibyte = 53      # jb E2141 (53 vice 54) 2/15/00
#$% display appropriate countermeasures code
if (Xown$BlipCM$i      != $no) $Out ($letB) else $over 1
if (Xown$DeceptionCM$i != $no) $Out ($letD) else $over 1
if (Xown$JamCM$i       != $no) $Out ($letJ) else $over 1
if (Xown$RbocCM$i      != $no) $Out ($letR) else $over 1
 
#$% get emcon index
own$emconindx$i = xown$emconindx$i
 
#$% if emcon index is valid
if (own$emconindx$i != 0)
   {
    #$% set pointer to emcon index
    emc$pointer$to own$emconindx$i
 
    #$% get name
    EMC$NAME$C = XEMC$NAME$C
 
    #$% move EMC name to IPAGE array
    IBYTE = 58      # jb E2141 (58 vice 59) 2/15/00
    call SMOVH(EMC$NAME$C,$$MAXname,IPAGE[1,LINCNT],IBYTE)
   }
 
#$% get and move status to IPAGE array
IBYTE = 64                      # jb E2141  64 vice 65   2/15/00
own$status$i = xown$status$i
call OWNSTA (own$status$i,istat)
call SMOVH (ISTAT,4,IPAGE[1,LINCNT],IBYTE)
 
#$% get and move time reported to IPAGE array
IBYTE = 69                      # jb E2141  69 vice 70   2/15/00
own$TimeReported$f = xown$TimeReported$f
call SMOVIZ(Game_Time(own$TimeReported$f),4,IPAGE[1,LINCNT],IBYTE)
 
$over 1
 
# Extract assumed fuel information and compute percentages - joa 2/96 (E1467)
OWN$TNK$Index = ShipFuelTank$Index
OWN$TNK$FuelRemaining$F = xOWN$TNK$FuelRemaining$F
 
SHC$Pointer = xUNT$SHCPntr$I
SHC$TNK$Index = ShipFuelTank$Index
SHC$TNK$Capacity$F = xSHC$TNK$Capacity$F
 
ShipUseFuelRemaining = OWN$TNK$FuelRemaining$F
ShipUseFuelCapacity = SHC$TNK$Capacity$F
 
if (ShipUseFuelCapacity == 0.0)
    PctRemaining = 100
else
    PctRemaining = nint(ShipUseFuelRemaining / ShipUseFuelCapacity * 100.)
 
call smovib (PctRemaining, 3, ipage[1,lincnt], ibyte)
call smov   (PERCENT, ipage[1,lincnt], ibyte)
 
LINLEN[LINCNT] = IBYTE
 
#$% if CONTROL view
if (mside == $control$code)                        # CONTROL signed on?
   {
    #$% test and exit if status board full, then go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% move left paren to the IPAGE array
    IBYTE = 8       # jb E2141  8 vice 5    1/31/00
    call SMOV ($Lparen,IPAGE[1,LINCNT],IBYTE)
 
    #$% set pointer, get and move true course to the IPAGE array
    UNT$TRUECOURSE$F = XUNT$TRUECOURSE$F
    IC = COURSE (UNT$TRUECOURSE$F)
    call SMOVIZ(IC,3,IPAGE[1,LINCNT],IBYTE)
 
    #$% get and move speed to the IPAGE array
    IBYTE = IBYTE + 1
    ISPEED = INT(XUNT$TRUESPEED$F + .5)
    call SMOVIB(ISPEED,2,IPAGE[1,LINCNT],IBYTE)
 
    #$% get and move true latitude to the IPAGE array
    IBYTE = 16          # jb E2141  16 vice 14    1/31/00
    UNT$TRUELATITUDE$F = XUNT$TRUELATITUDE$F
    call SMOVLL(UNT$TRUELATITUDE$F,"NS",IPAGE[1,LINCNT],IBYTE)
 
    #$% get and move true longitude to the IPAGE array
    IBYTE = 23      # jb E2141  23 vice 21    1/31/00
    UNT$TRUELONGITUDE$F = XUNT$TRUELONGITUDE$F
    call SMOVLL(UNT$TRUELONGITUDE$F,"EW",IPAGE[1,LINCNT],IBYTE)
    call SMOV ($Rparen,IPAGE[1,LINCNT],IBYTE)   # jb E2141  2/15/00
 
    # Extract true fuel information and compute percentages - joa 2/96 (E1467)
    UNT$TNK$Index = ShipFuelTank$Index
    UNT$TNK$FuelRemaining$F = xUNT$TNK$FuelRemaining$F
 
    SHC$Pointer = xUNT$SHCPntr$I
    SHC$TNK$Index = ShipFuelTank$Index
    SHC$TNK$Capacity$F = xSHC$TNK$Capacity$F
 
    ShipUseFuelRemaining = UNT$TNK$FuelRemaining$F
    ShipUseFuelCapacity = SHC$TNK$Capacity$F
 
    if (ShipUseFuelCapacity == 0.0)
        PctRemaining = 100
    else
        PctRemaining = nint(ShipUseFuelRemaining / ShipUseFuelCapacity * 100.)
 
    IBYTE = 73                                # jb E2141 (73 vice 75) 2/15/00
    call SMOV ($Lparen,IPAGE[1,LINCNT],IBYTE)
 
    call smovib (PctRemaining, 3, ipage[1,lincnt], ibyte)
    call smov   (PERCENT, ipage[1,lincnt], ibyte)
 
    #$% get and move right paren to the IPAGE array
    call SMOV ($Rparen,IPAGE[1,LINCNT],IBYTE)
 
    #$% set line length
    LINLEN[LINCNT] = IBYTE             # set char count and
   }
 
if (xUNT$Mission$I != $NoneAssigned$Code)  # clk 12/96 (E1724)
   {
    $test$next$line
    $exit$on$overflow
    $prepare$next$line
 
    ibyte = 6
    call smovv ("Mission:  ", ipage[1,lincnt], ibyte)
    mission_type = Astab_Mission (xUNT$Mission$I)
    call smovhn (mission_type, $$MaxLit, ipage[1,lincnt], ibyte)
    linlen[lincnt] = ibyte
   }   # end of if the ship has a mission assigned to it
 
# does this unit have an IFF - SMM 1/97 (E1732)
has_IFF = $no
number_of_sams = 0  # initialize before loop SMM 4/98 (E1506)
 
for_DEQ_chain (UNT$Pointer$index)
   {
    DEQ$Ident$I = xDEQ$Ident$I
    if ((DEQ$Ident$I == $IFF$Code) &
        (xDEQ$On$I == $yes))
      {
       IFF$Pointer = xDEQ$Pntr$i
       if (xIFF$Function$i != $INTERROGATOR$Code)
         {
          has_IFF = $yes
          break
         }
      }
    else if ((DEQ$Ident$I == $SAM$Code) |   # SMM 4/98 (E1506)
        (DEQ$Ident$I == $AdvancedSAM$Code))
      {
       call Check_for_degraded_SAM_launch(UNT$Pointer,
                                          DEQ$Pointer$Index)
      }
   } # end of search through DEQ table
 
 only_mode3 = $no
 UNT$View$I = xUNT$View$I
 
 if ((UNT$View$I == $Neutral$View) |
     (UNT$View$I >= $FirstOrange$View &
      UNT$View$I <= $LastOrange$View))
   {
    only_mode3 = $yes
   }
 if ((only_mode3) &
     (xUNT$Type$I != $Air$Code))
   {
    has_IFF = $no
   }
 
$test$next$line ; $exit$on$overflow    #$% list overflow
$prepare$next$line
 
$column 7
$outV("Class: ")
$outHn (xSHC$Type$c,$$MaxLit)
 
SHC$FullName$V = xSHC$FullName$V
if (SHC$FullName$V > " ")
{
    $outV(" (")
    $outVt (SHC$FullName$V)
    $outV(")")
}
 
if (has_IFF == $yes)
   {
    $column 48
    $outV("IFF Modes:") # jb    1/31/00
    $over 2
 
    call display_iff(DEQ$Pointer,$current$column,only_mode3)
   }
 
call FormatFuel (OWN$Pointer)
 
#$% get expendable equipment
call LSTEXP(own$pointer,none)
 
if (none == $no)
   {
    #$% test and exit if status board full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% display "EXP" and format
    $column 7 ; $OutV("Exp:") # jb    1/31/00
    $over 2   ; call FMTEXP(13)
   }
 
#$% get ground equipment
 
call LSTGND(own$pointer,none)
 
if (none == $no)
   {
    #$% test and exit if status board full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% display "GND" and format
    $column 7 ; $OutV("Gnd:") # jb    1/31/00
    $over 2   ; call FMTEXP(13)
   }
 
 
return
end
 

 
 
Subroutine SHPNUN
 
############################################################################
#$%
#$% Purpose:   SHPNUN generates a message when there is no ship data for
#$%            display.
#$%
#$% Called By: SHPSHP
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
############################################################################
BBcommon
STATUScommon
 
#$% test and exit if status board full
$test$next$line ; $exit$on$overflow
 
#$% go to next line
$prepare$next$line
 
#$% display "No ships" message
$column 1 ; $OutV("No ships in this view") # jb    1/31/00
 
return
end

 
subroutine FormatFuel (OWN$Pointer)  # in: Pointer to object
#########################################################################
#$%
#$% Purpose:   Format for display ship and aviation fuel values.
#$%
#$% Called By: SHPENT
#$%
#$% Calls:     $out...    (macros)
#$%
#$% Tables:    OWN     UNT     SHC
#$%
#$% Date:      February 1996 (E1467)
#$%
#$% Author:    James Allen
#$%
#$% Modified:  James Allen - 3/96 (E1467)
#$%            Changed fuel lines from Left Max xxxx xxxx to
#$%            Left xP Max xP  (xP = number and power abreviation).
#$%            Also changed CruiseSpeed to the integer UNT field.
#$%
#$%            Carol Kropp - 9/97 (E1861)
#$%            Changed the amount available for refueling to not display
#$%            negative values.
#$%
#$%            Susan Miller - 12/97 (E1660)
#$%            Changed display of aviation fuel from pnds to gals.
#$%
#########################################################################
BBcommon
STATUScommon
 
REAL    SHC$TNK$Capacity$F         # jb E2145                     2/1/00
REAL    OWN$TNK$FuelRemaining$F    # jb E2145                     2/1/00
Real    ShipUseFuelRemaining       # to compute fuel information
REAL    ShipUseFuelCapacity        # jb E2145 (for astab display) 2/1/00
REAL    ShipTransferFuelRemaining  # jb E2145                     2/1/00
REAL    ShipTransferCapacity       # jb E2145                     2/1/00
integer  OWN$Pointer, OWN$TNK$index # jb E2145                    2/1/00
Integer SHC$TNK$index              # jb E2145                     2/1/00
integer  UNT$Pointer, SHC$Pointer
 
  UNT$Pointer$To  (xOWN$Unit$I)
  SHC$Pointer = xUNT$SHCPntr$I
  ShipUseFuelCapacity = 0.0
 
  #$% test and exit if status board full; go to next line
  $test$next$line
  $exit$on$overflow
  $Prepare$next$line
 
  $column 7 ; $OutV("Fuel:") # jb    1/31/00
 
  $over 1
  if (xUNT$Type$I == $Surface$Code)
    {
     OWN$TNK$Index = ShipFuelTank$Index
     OWN$TNK$FuelRemaining$F = xOWN$TNK$FuelRemaining$F
 
     SHC$TNK$Index = ShipFuelTank$Index
     SHC$TNK$Capacity$F = xSHC$TNK$Capacity$F
     ShipUseFuelCapacity = SHC$TNK$Capacity$F * xSHC$PctShipFuelReserve$F
 
     ShipUseFuelRemaining = min(OWN$TNK$FuelRemaining$F, ShipUseFuelCapacity)
 
     $OutV ("Ship(gal): Left ") # jb    1/31/00
     $OutF_Abrev (ShipUseFuelRemaining)
 
     $OutV (" Max ") # jb    1/31/00
     $OutF_Abrev (ShipUseFuelCapacity)
 
     $OutV (" Cruise Speed ") # jb    1/31/00
     $OutI (xSHC$CruiseSpeed$I)
    }   # end of if a surface ship
 
  if (xSHC$FuelHoses$I > 0)
    {
     if (XUNT$Type$I == $Surface$code)
       {
        #$% test and exit if status board full; go to next line
        $test$next$line
        $exit$on$overflow
        $Prepare$next$line
 
        $Column 13
       }
 
     OWN$TNK$Index = ShipFuelTank$Index
     OWN$TNK$FuelRemaining$F = xOWN$TNK$FuelRemaining$F
 
     SHC$TNK$Index = ShipFuelTank$Index
     SHC$TNK$Capacity$F = xSHC$TNK$Capacity$F
 
     ShipTransferFuelRemaining = OWN$TNK$FuelRemaining$F - ShipUseFuelCapacity
     if (ShipTransferFuelRemaining < 0.0)     # if into the reserve, display 0 as the
       ShipTransferFuelRemaining = 0.0        # amount available for refueling - clk 9/97 (E1871)
 
     $OutV ("Transfer Left ") # jb    1/31/00
     $OutF_Abrev (ShipTransferFuelRemaining)
 
     ShipTransferCapacity = SHC$TNK$Capacity$F - ShipUseFuelCapacity
 
     $OutV (" Max ") # jb    1/31/00
     $OutF_Abrev (ShipTransferCapacity)
 
     $OutV (" Rate ") # jb    1/31/00
     $OutI (xSHC$FuelTransferRate$I)
 
     $over 1
     $OutV("Hoses ") # jb    1/31/00
     $OutI(xSHC$FuelHoses$I)
 
     $over 1
     $OutV("Avail ") # jb    1/31/00
     $OutI(xOWN$HosesAvailable$I)
    }   # end of if unit has fuel hoses
 
  OWN$TNK$Index = AviationFuelTank$Index
  SHC$TNK$Index = AviationFuelTank$Index
 
  if (xSHC$TNK$Capacity$F > 0.0)
    {
     if (xUNT$Type$I == $Surface$Code | xSHC$FuelHoses$I > 0)
       {
        #$% test and exit if status board full; go to next line
        $test$next$line
        $exit$on$overflow
        $Prepare$next$line
 
        $Column 13
       }
 
     $OutV ("Aviation(gal): Left ") # jb    1/31/00
     $OutF_Abrev (xOWN$TNK$FuelRemaining$F)
 
     $OutV (" Max ") # jb    1/31/00
     $OutF_Abrev (xSHC$TNK$Capacity$F)
    }   # end of if unit has tank capacity
 
return
end
 
