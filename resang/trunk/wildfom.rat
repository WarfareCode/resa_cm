 
define($DEBUG,#)
define($DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbfom.inc"
include "bbpat.inc"
include "ascii.inc"
 
define(BBImplicit, Implicit None)      # MJC 4/28/2000
 
undefine write
undefine read
undefine err
 

#$% load frequency omission data
subroutine wglfom (reccnt, recsz, rec)
 
BBcommon
 
integer     reccnt, recsz, loop
literal     rec[1500]
 
integer*4   i
Literal     Path_Name
 
integer     ISTAT,
            PAT$Pointer,
            PAT$Fomindx$I,
            FOM$Pointer,
            FOM$FQ$Index                # MJC 4/28/2000
real        FOM$FQ$lowfrequency$F,
            FOM$FQ$highfrequency$F      # MJC 4/28/2000
literal     FOM$Name$C, CSTRIP8         # MJC 4/28/2000
 
#$% if this scenario is not using BEES
if ( EMI$Granularity == 0)
    {
    return
    }
 
if (reccnt <= 1)
    {
    call echov("Freq. Omission file empty.")
    call echor
    return
    }
 
#$% for each record entry
for (loop = 2; loop <= reccnt; )
    {
    #$% get scenerio data and set len
    call getsr(loop,recsz,rec)
 
    #$% get slots for radar table
    call gslotm(fom$pointer,$$fom,fom$entry,istat)
 
    #$% if table is full
     if (istat == $no)
         {
         #$% display warning message to user and return
         call echov("Frequency Omission Plan ")
         call echohn(rec[3],$$MaxLit)
         call echov(" is not loaded.")
         call echor
         return
        }
 
    FOM$Name$C = Rec [ 2 ]
    putFOM$Name$C
 
    path_name = Rec [ 3 ]
 
    if (Path_Name != $BLANKLIT)
        {
        #$% loop thru the commpaths for a match
        for (PAT$Pointer$First; PAT$Pointer$OK;PAT$Pointer$Next)
            {
            if (xPAT$Type$C == Path_Name)
                {
                #$% link the commpath to this frequency omission slot
                PAT$FOMIndx$i = FOM$Pointer$Index
                putPAT$FOMIndx$i
                }
            }
        }
 
    FOM$FQ$Index = 0
 
    #$% for all possible frequency bound slots
    for ( i = 1; i <= FOM$FQ$Slots; i = i + 1 )
        {
        #$% if this logical slot is not used
        if ( Rec [ 2 + (2 * i) ] == 0|
             Rec [ 3 + (2 * i) ] == 0)
            {
            next
            }
 
        FOM$FQ$Index = FOM$FQ$Index + 1
 
        FOM$FQ$LowFrequency$F = Rec [ 2 + (2 * i) ] * 1.0E-3 # convert KHz to MHz
        FOM$FQ$HighFrequency$F = Rec [ 3 + (2 * i) ] * 1.0E-3# convert KHz to MHz
 
        putFOM$FQ$LowFrequency$F
        putFOM$FQ$HighFrequency$F
        }
 
    putFOM$NumberOfOmissions$i (FOM$FQ$Index)
 
    } #$% for each freq omission record entry
 
return
end
 
