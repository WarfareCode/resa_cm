 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 06-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 tpa     shore   added TRKS field
###
 
 
 
 
#####   version 3.0  dated- 22dec80
 
# Modified:
#    SMM 11/5/93: In accordance with the Improved Air Defense Model
#                 added loading of SAMs as a missile type to shore bases
#    CLK 8/27/95: In accordance with the 1996 Joint Training Confederation
#                 RESA Actor Implementation Document (shared bases).
#    JOA 2/96   : In accordance with the Ship Fuel Consumption Model (E1467)
#    JOA 1/97   : Added seconds to the description of LAT and LONG (E1618)
#    JOA 12/97  : Removed the MOBLE, XSECT, DTRNG, and BLRNG which were originally
#                 added for mobile site (base units), but never fully implemented.  (E1827)
#    SMM 12/97  : Changed aviation fuel units from pounds to gallons. (E1660)
#

 
      include    "ascii.inc"
      include    "macros.inc"
 
  subroutine shore
 
  ######################################################
  #$%
  #$% Purpose:   SHORE allows the user to interact
  #$%            with shorebase characteristics
  #$%            data.
  #$%
  #$% Called By: BUILD
  #$%
  #$% Calls:     None
  #$%
  #$% Tables:    None
  #$%
  #$% Date:      NOV 79
  #$%
  #$% Author:    Dana Wills
  #$%
  ######################################################
 
#
#     New SHOREBASE
#
#
##      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT NONE             # jb E2145  4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom, 33)     # The number of entries in the defCOM table.
define (zdctyp,  8)     # The size of the deftyp table.
define (zdcfld,335)     # The size of the defFLD table.
define (zdsarg, 10)     # The size of entries in the defARG table. JFR 5/6/91
define (zdcarg, 30)     # The number of entries in the defARG table. JOA UFL00
define (zdcfmt,  9)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      Integer  m
 
      Integer    aircnt, jpcnt
 
      character  line[ARB]
 
      Logical*1  VALID_ANTENNA_COVERAGE  # jb E2145 4/4/00
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("        "," Shore B","ases"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of the shore base
 DATA$com("LAT  ",  1)      # Latitude in Degrees, minutes and seconds
 DATA$com("LONG ",  1)      # Longitude in degrees, minutes and seconds
 DATA$com("JP   ",  1)      # Amount of aviation fuel in gallons   # smm 12/97 (E1660) - gallons vice pounds
 DATA$com("LCHRT",  1)      # Standard aircraft launch rate
 DATA$com("RECRT",  1)      # Standard aircraft recovery rate
 DATA$com("LACOM",  1)      # Lethal area ratio for communications
 DATA$com("LAAIR",  1)      # Lethal area ratio for aircraft parked
 DATA$com("LASEN",  1)      # Lethal area ratio for sensors on base
 DATA$com("LASAM",  1)      # Lethal area ratio for SAM sites
 DATA$com("LASTO",  1)      # Lethal area ratio for deployable stores
 DATA$com("LAJP ",  1)      # Lethal area ratio for aviation fuel
 DATA$com("TRKS ",  1)      # Number of local tracks              #smn 002
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("SHARE", -1)      # Is the base shared (ALSP) - clk 8/95
 DATA$com("OWNED", -1)      # If shared, is it owned (ALSP) - clk 8/95
 DATA$com("HFDF ",- 1)      # HFDF name
 DATA$com("RDESM",-16)      # Name of sensor(s) carried
 DATA$com("ANT-H",-16)      # Restricted Horizontal Antenna Coverage for radars, 8/8/90
 DATA$com("JAMMR",- 1)      # Name of jammer(s) carried
 DATA$com("BUOY ",-15)      # Define qty & types of buoys carried
 DATA$com("COMMS",-10)      # Name of communication suite(s) carried
 DATA$com("CJAMR",- 4)      # Name of communication suite(s) carried
 DATA$com("GRND ",-60)      # Name of ground unt(s) carried         # DEW 2/14/00
 DATA$com("MISS ",-10)      # Define types & qty of miss. carried
 DATA$com("WEAP ",-50)      # Define types & qty of weapons carried
 DATA$com("AIR  ",-30)      # Name and qty of aircraft
 DATA$com("TRPDO",-10)      # Name and qty of enhanced torpedoes  4/90
 DATA$com("IFF  ",- 3)      # Name and antenna height of IFF system  2/91
 DATA$com("SFUEL",- 1)      # Maximum ship fuel capacity in gallons       # joa 2/96 (E1467)
 DATA$com("LASF ",- 1)      # Lethal area ratio for ship fuel supplies    # joa 2/96 (E1467)
 DATA$com("FHOSE",- 1)      # Number of hoses and pump transfer rate      # joa 2/96 (E1467)
 
 $set (Data_Count,0)
 DATA$typ("     ",  0)      # rec type 1
 DATA$typ("     ",  1)      #
 DATA$typ("     ",  0)      # rec type 2
 DATA$typ("     ",  1)      #
 
 $set (Data_Count,0)
 
 
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","the shor","e base  ","      ")
 DATA$fld1("LAT  ", 1, 2,"LAT  ", 1,"Lat in d","egrees, ","minutes,"," sec  ")
 DATA$fld1("LONG ", 1, 2,"LONG ", 1,"Long in ","degrees "," minutes",", sec ")
 DATA$fld3("NOMEN", 3,-9,"Text ", 1,"...  ", 1,"...  ", 1,"Full nam","e     ","        ","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("SHARE", 1, 1,"ANSWR", 1,"Is this ","a shared"," ALSP Ba","se    ")
 DATA$fld1("OWNED", 1, 1,"ANSWR", 1,"Is this ","shared b","ase owne","d     ")
 DATA$fld1("HFDF ", 1, 1,"NAME ", 1,"HFDF nam","e       ","        ","      ")
 DATA$fld1("JP   ", 1, 2,"SGAL ", 1,"Aviation"," fuel in"," gallons","      ")
 DATA$fld1("LCHRT", 1, 2,"RATE ", 1,"Standard"," A/C lau","nch rate","      ")
 DATA$fld1("RECRT", 1, 2,"RATE ", 1,"Standard"," A/C rec","overy ra","te    ")
 DATA$fld1("TRKS ", 1, 2,"QTY1 ", 1,"Number o","f local ","tracks  ","      ")
 DATA$fld1("LACOM", 1, 2,"%    ", 1,"L/A rati","o for co","mm equip","      ")
 DATA$fld1("LAAIR", 1, 2,"%    ", 1,"L/A rati","o for ai","rcraft p","arked ")
 DATA$fld1("LASEN", 1, 2,"%    ", 1,"L/A rati","o for se","nsors on"," base ")
 DATA$fld1("LASAM", 1, 2,"%    ", 1,"L/A rati","o for SA","M sites ","      ")
 DATA$fld1("LASTO", 1, 2,"%    ", 1,"L/A rati","o for de","ployable"," store")
 DATA$fld1("LAJP ", 1, 2,"%    ", 1,"L/A rati","o for av","iation f","uel   ")
 DATA$fld2("RDESM", 2, 5,"NAME ", 1,"FEET ", 1,"Name&Hei","ght of s","ensor(s)","      ")
 DATA$fld2("JAMMR", 2, 5,"NAME ", 1,   "FEET ", 1,"Name&Hei","ght of j","ammer   ","      ")
 DATA$fld2("COMMS", 2, 5,"NAME ", 1,"FEET ", 1,"Name&Hei","ght of c","ommsuite","(s)   ")
 DATA$fld2("CJAMR", 2, 5,"NAME ", 1,"FEET ", 1,"Name&Hei","ght of c","ommjamme","r     ")
 DATA$fld3("BUOY ", 3, 4,"NAME ", 1,"BTYPE", 1,"QTY  ", 1,"Name & q","ty of bu","oys     ","      ")
 DATA$fld2("AIR  ", 2, 5,"NAME ", 1,"QTY  ", 1,"Name & q","ty of ai","rcraft  ","      ")
 DATA$fld3("MISS ", 3, 4,"NAME ", 1,"MTYPE", 1,"QTY  ", 1,"Name & q","ty of mi","ssile   ","      ")
 DATA$fld3("WEAP ", 3, 4,"NAME ", 1,"WTYPE", 1,"QTY4 ", 1,"Name & q","ty of we","apons   ","      ")
 DATA$fld2("GRND ", 2, 5,"NAME ", 1,"NGRND", 1,"Name & Q","uantity","of groun","d units")
 DATA$fld2("TRPDO", 2, 5,"NAME ", 1,"QTY2 ", 1,"Name & q","ty torpe","does car","ried   ")
 DATA$fld3("ANT-H", 3, 6,"NAME ", 1,"S-ANG", 1,"E-ANG", 1,"EM Devic","e Horiz ","Antenna ","Coverage")
 DATA$fld2("IFF  ", 2, 5,"NAME ", 1,"FEET1", 1,"Name & A","ntenna H","eight of"," IFF  ")
 DATA$fld1("SFUEL", 1, 8,"SGAL ", 1,"Maximum ","ship fue","l capaci","ty     ")
 DATA$fld1("LASF ", 1, 2,"%    ", 1,"Lethal a","rea rati","o for sh","ip fuel")
 DATA$fld2("FHOSE", 2, 7,"QTY3 ", 1,"gal/h", 1,"Number o","f fuel h","oses & p","ump rate")
 
 $set (Data_Count,0)
 DATA$arg10N("ALPHA",6000,0,0)             # Alphanumeric -- Anything
 DATA$arg10N("NAME ",6000, 0,       0)     # Alphanumeric -- Anything
 DATA$arg10N("LAT  ",4000, 0,       0)     # Numeric LATITUDE
 DATA$arg10N("LONG ",5000, 0,       0)     # Numeric LONGITUDE
 DATA$arg10N("Text ",9024)                 # Alphanumeric string (24 bytes)
 DATA$arg10N("...  ",9000)                 # Alphanumeric string filler
 DATA$arg10C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg10N("QTY  ",2002, 1,    9999)     # Numeric Range 0 -> 9999 #was 3000
 DATA$arg10N("QTY4 ",2002, 1,   99999)     # Numeric Range 1 -> 99999
 DATA$arg10N("RATE ",2002, 1,      20)     # Numeric Range 1 -> 20
 DATA$arg10N("FEET ",2002, 0,  500000)     # Numeric Range 0 -> 500000
 DATA$arg10N("POUND",2002, 0, 1000000000)  # Numeric Range 0 -> 1,000,000,000
 DATA$arg10N("QTY1 ",2002, 0,     250)     # Numeric Range 0 -> 250
 DATA$arg10N("%    ",2000, 0,     100)     # Numeric Range 0 -> 100
 DATA$arg10N("%45  ",2000, 0,      45)     # Numeric Range 0 -> 45
 DATA$arg10N("SQMET",2002, 0,    9999)     # Numeric range 0 -> 9999
 DATA$arg10N("KM   ",2002, 0,     100)     # Numeric range 0 -> 100
 DATA$arg10N("NGRND",2002, 0,     1000)    # Numeric Range 0 -> 1000
 DATA$arg10C("ANSWR",8002,"YES  ","NO   ") # Alphanumeric list -- YES/NO
 DATA$arg10C("BTYPE",8003,"SONO ","COMM ","CM   ")# Alphanumeric list--SONO/COMM/CM
 DATA$arg10C("WTYPE",8009,"AAM  ","ASM  ","BOMB ","MINE ","TORP ","CIWS ","SAM  ","GUN  ")
 DATA$arg10C("MTYPE",8003,"CRUZ ","BALL ","SAM  ")                       # E2180 - Remove ADCRU DEW 2/15/00
 DATA$arg10N("S-ANG",2002, 0,      359)    # Numeric Range 0 -> 359
 DATA$arg10N("E-ANG",2002, 0,      359)    # Numeric Range 0 -> 359
 DATA$arg10N("QTY2 ",2002, 0,     500)     # Numeric Range 0 -> 500
 DATA$arg10N("FEET1",2002, 0,    3000)     # Numeric Range 0 -> 3000
 DATA$arg10N("SGAL ",-2002, 1, 1000000000) # Numeric Range 0 -> 1,000,000,000    # joa 2/96 (E1467)
 DATA$arg10N("gal/h",-2002, 0.00,99999.00) # FP Num Range 0.0 -> 99,999.0        # joa 2/96 (E1467)
 DATA$arg10N("RPct ",-2002, 0.00,100.00)   # FP Num Range 0.0 -> 100.0           # joa 2/96 (E1467)
 DATA$arg10N("QTY3 ",2002, 0,       30)    # Numeric Range 0 -> 30               # joa 2/96 (E1467)
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  ","        "," "," ")
 DATA$fmt( 2,"A5,I9)  ","        "," "," ")
 DATA$fmt( 3,"A5,I9,I7",")       "," "," ")
 DATA$fmt( 4,"A5,2A7,I","9)      "," "," ")
 DATA$fmt( 3,"A5,A7,I9",")       "," "," ")
 DATA$fmt( 4,"A5,A7,2I","6)      "," "," ")
 DATA$fmt( 3,"A5,I7,F9",".3)     "," "," ")
 DATA$fmt( 2,"A5,F11.0",")       "," "," ")
 DATA$fmt( 4,"A5,3A8) ","        "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    IF there is any AIR.... there must be JP.
#
9901 format (1x,"Assignment of AIRcraft requires entry for JP.")
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
#
##############################################################################
 
 
      include "blsub1.rin"
 
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                    #*********************************************************
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==2)                     # Special Test 2
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
                   }
 
##############################################################################
 
      include "blsub2.rin"                              # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
  aircnt = 0
  jpcnt = 0
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
   {
    if (lcomp_v(work[ptr], "AIR  ") == 0)                # Any AIR?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
         {aircnt = aircnt + 1
         }
      }
 
    else if (lcomp_v(work[ptr], "JP   ") == 0)           # Any JP?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
         {jpcnt = jpcnt + 1
         }
      }
 
    #$% if restricted antenna coverage and has data to check   9/9/90
    if (work [ptr] == 'ANT-H' & work [ptr + 2] != '*REQ*')
        {
        if ( ! valid_antenna_coverage(work,
                                      INT(Work[1]), # length of work record
                                      work [ ptr + 2],
                                      ptr)
           )
            {
            serr = serr + 1
            }
        }
 
   }
 
 
# test results ......
 
 if (aircnt > 0 & jpcnt == 0)
   {print 9901
    serr = serr + 1
   }
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
