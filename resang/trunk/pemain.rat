 
#####   WES version 3.1 converted to the VAX11/780   dated-12feb82
 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
# TRN #
# ADAMOS 12/17/80
# 3.0
#
# get <name>.tab to list on the dec-10
#     or save on disk.
#
#############################################################################
# This routine prints the environment file.
# The environment file consists of 23 records of 360 long words.  All of the
# data is numeric except the names(types) of the sonars and sonobuoys.
# The sonobuoy types are in record number 1, and the sonars are in record
# number 22&23.  Records 2 - 21 contain propagation loss data which is all
# numeric.  There is a max of 48 sonars and 106 sonobuoys allowed at this
# date - 12feb82.  There is no space remaining in records 1 and 22&23.  The
# other records are full.  The "type" specifications now fill 2 long words.
# Additional information may be found in wildenv.rat.
#############################################################################
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      PRENV                         OPEN                       NONE
#$%                                    CLOSE
#$%                                    WGCAT
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    2.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE PRENV
#$%    ========================
#$%
#$%    PRENV*
 

 
undefine err
undefine read
undefine write
include "ascii.inc"
 
 
Program PRENV                              #PRint ENVironment file
 
 ######################################################
 #$%
 #$% Purpose:   PRENV prints the environment file.
 #$%
 #$% Called By: None
 #$%
 #$% Calls:     WGCAT      CLOSE      OPEN
 #$%
 #$% Tables:    None
 #$%
 #$% Date:      OCT 80
 #$%
 #$% Author:    Ron Williams
 #$%
 ######################################################
 
character name[FILENAMESIZE]
integer ibuf[23,360]
real buf[23,360]
equivalence (buf,ibuf)
 
integer ILEN,
        I,
        IOS,
        J,
        NSBY,
        NSNR,
        K9,
        K,
        L,
        M,
        M2,
        N                                 # MJC 5/31/2K (E2145)
 
character temp[ARB]
 
character file9[ARB]
vaxcharacter*ARB v_file9
equivalence (file9, v_file9)
 
character file2[ARB]
vaxcharacter*ARB v_file2
equivalence (file2, v_file2)
 
integer    getarg3
character  argbuf[FILENAMESIZE]
 
call initr4
 
call help_pgm(1,
              "envprt: print sonar environment tables from binary file with .env extension",
              "envbld Tags: Environment, Sonar",
              "Usage: envprt <sonar file without .env extension>",
              "",
              "",
              "",
              "",
              "Example: envprt keas1")
 
for (i=1; getarg3(i, argbuf, FILENAMESIZE) != EOF; i=i+1)
{
    if (argbuf[1] == MINUS)
    {
    	next
    }
    else if (argbuf[1] == EOS)
    {
    	next
    }
    else
    {
		ilen = 0
		call smovhn (argbuf,ARB,name,ilen)
		call smov   ($null,name,ilen)
    }
}
if (i < 3)
{
	call remark("usage:  prtenv[sonar env file name w/o extension]")
	call exit()
}
 
v_file9 = " "
ilen = 0                                         #create file names
call smovhn (name,ARB,file9,ilen)                  #input file
call smovv  (".env",file9,ilen)
#call smov   ($null,file9,ilen)
 
v_file2 = " "
ilen = 0
call smovhn (name,ARB,file2,ilen)                  #output file
call smovv  (".lis",file2,ilen)
#call smov   ($null,file2,ilen)
 
I = 0
 
open(unit    =   9,                            #open input file
     file    =   v_file9,
     status  =  'old',
     access  =  'sequential',
     recl    =   360,
     form    =  'unformatted',
     iostat  =   ios,
     err     =   777)
print 9, v_file9
9	format('Input File = ',A)
read(9,iostat=ios,err=999)(ibuf[1,J],J=1,360)   #read record number 1
 
if (ibuf[1,2] != 20)                           #if number of freqs is not 20
   {
    print 120
    120 format(' ***Invalid environment file for enhanced CIDSWES***',/,
	    ' Does not contain data for the 20 standard frequencies',/,
	    ' No output file created')
 
    close(unit=9)
 
    go to 2000
   }
 
do I = 2, 22                      # good data so read remaining records in
   {
    read(9,iostat=ios,err=999)(ibuf[I,J],J=1,360)
   }
 
read(9,iostat=ios)(ibuf[23,J],J=1,360)		# dont make it an error
 
open(unit    =   2,              #open output file
     file    =   v_file2,
     status  =  'unknown',
     access  =  'sequential',
     recl    =   360,
     iostat  =   ios,
     err     =   888)
print 10, v_file2
10	format("Output File = ", A)
 
ilen = 0                         #create temporary character string for output
call smovhn (file9,12,temp,ilen)
while (ilen < 12) call smov ($space,temp,ilen)
 
#$% write the folllowing data to the output file
write(2,200,iostat=ios,err=998)(temp[i],i = 1,12)
 200 format(T35,' ENVIRONMENT FILE = ',12A1,///)
 
write(2,210,iostat=ios,err=998)ibuf[1,1]
 210 format(' SONIC LAYER DEPTH = ',I4,' feet',/)
 
write(2,220,iostat=ios,err=998)ibuf[1,2]
 220 format(' NUMBER OF FREQUENCIES = ',I3,/)
 
write(2,230,iostat=ios,err=998) ibuf[1,3]
 230 format(' NUMBER OF ACTIVE SONOBUOYS = ',I2,/)
 
write(2,240,iostat=ios,err=998)ibuf[1,4]
 240 format(' NUMBER OF ACTIVE SONARS = ',I2,/)
 
nsby = ibuf[1,3]                                 #save number of sonobuoys
 
nsnr = ibuf[1,4]                                 #save number of sonars
 
write(2,250,iostat=ios,err=998)(ibuf[1,I],I=5,24)
 250 format(' FREQUENCIES (Hz):',/,20I6,/)
 
write(2,260,iostat=ios,err=998)(ibuf[1,I],I=25,44)
 260 format(' AMBIENT NOISE (dB):',/,20I6,/)
 
if (nsby > 0)
   {
    write(2,270,iostat=ios,err=998)
    270 format(' ACTIVE SONOBUOY DATA:',T30,
	       'Type',T40,'Range (nautical miles)')
 
 
    do I = 1, nsby
      {
       J = 42 + 3 * I
       write(2,280,iostat=ios,err=998)ibuf[1,J],ibuf[1,J+1],buf[1,J+2]
       280 format(T30,2A4,T40,F5.2)
      }
 
   }
if (nsnr > 0)
   {
    write(2,290,iostat=ios,err=998)
    290 format(/,' ACTIVE SONAR DATA: (depth in feet, ranges ',
	       'in nautical miles)',//,
	       T16,'<-------------------DP Range------------------->',
	       '<---------BB Range Limits------><---CZ Limits--->',/,
	       T8,'Dip/Tow',T20,'12 knots',T36,'18 knots',T52,'24 knots',
	       /,' Type',T9,'Depth  ',3('   In     Deep  '),
	       '   In      In     Deep    Deep',T66,3('Inner   Outer   '))
 
 
    do I = 1, nsnr
      {
       # J = 15 * (I - 1)		#??????
 
       if (i < 25) 			# allow 48 sonars
    	  {
          k9 = 22
          j  = 15 * (I - 1)
          }
       else        			# second set of 24 in rec nbr 23
    	  {
          k9 = 23
          j  = 15 * (I - 25)
          }
 
       write(2,300,iostat=ios,err=998)ibuf[k9,J+1],ibuf[k9,J+2],ibuf[k9,J+3],
    				      (buf[k9,J+K],K=4,15)
       300 format(1X,A4,A4,I4,12F8.1)
      }
 
   }
 
write(2,310,iostat=ios,err=998)
 310 format(///,' PROPAGATION LOSS DATA: (all values in dB)')
 
do I = 1, 4
   {
    K = 5*(I-1) + 1
    L = 5*(I-1) + 4
 
    write(2,320,iostat=ios,err=998)(ibuf[1,L+J],J=1,5)
    320 format(//,5(13X,I5,' Hz'),//,
	       ' Mile     ',5('In  Cross  Deep',6X))
 
    do M = 1, 120
      {
       M2 = 3*(M-1)
 
    	write(2,330,iostat=ios,err=998) M,((buf[K+N,M2+J],J=1,3),N=1,5)
       330 format(1X,I3,3X,5(3F6.1,3X))
      }
 
   }
 
go to 2000
 
 
#    *    *    *    *    *    *    *    *    *    *    *    *    *    *    *
 
#Error exit if disk I/O problem
#------------------------------
 
#$% if there is an error while reading a file
999
 
#$% display error message to user
call echor
call echov   ('Error while reading input file.')
call echor
call typerr (ios)                          #type I/O error number
call echor                                     #carriage return
go to 2000
 
#$% if there is an error while writing to the output file
998
 
#$% display error message to user
call echor
call echov   ('Error while writing to output file.')
call echor
call typerr (ios)                          #type I/O error number
call echor                                     #carriage return
go to 2000
 
#$% if there is an error while opening an input file
777
 
#$% display error message to user
call echor
call echov   ('Error while opening input file.')
call echor
call typerr (ios)                          #type I/O error number
call echor                                     #carriage return
go to 2000
 
#$% if there is an error while opening an output file
888
call echor
call echov   ('Error while opening output file.')
call echor
call typerr (ios)                          #type I/O error number
call echor                                     #carriage return
 
 
2000 continue
 
close(unit=9)                                  #close env file
close(unit=2)                                  #close output file
 
#$% display info to the user
call echor
call echov  ('End of Print Environment File Program.')
call echor
 
end
