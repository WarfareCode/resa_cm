 
#####   this file is a temporary file which contains
#####   new files required by integration of the communications
#####   jammer model into the force program
 
#####   date 03/07/88
 
define ($DEBUG,$DEBUGE)
include "bbcode.inc"
include "plplay.inc"
include "frmain.inc"
include "ascii.inc"
define (ForceImplicit, Implicit None)          # MJC 6/12/2K (E2145)
 
 

subroutine fvrjs (nargs,args,MuRho$ptr,valid)  #$% validate J/S values
 
###############################################################
#$%
#$% Purpose:   FVRJS validates J/S values and updates the pointer
#$%            into the MuRho table.
#$%
#$% Called By: FEMRV
#$%
#$% Calls:
#$%
#$%
#$% Tables:    MuRho
#$%
#$% Date:      MARCH 1988
#$%
#$% Author:    R. Hundt
#$%
###############################################################
 
ForceCommon
 
integer nargs
literal args[$max$args]
integer*4 MuRho$ptr
logical   valid
 
integer*4 ptr
logical*1 errorFlag
Literal R
Literal T
 
 
#$% set a real variable to approx. table pointer
R=(args[4]+MuRho$JS$increment - MuRho$JS$minimum )/ MuRho$JS$increment
 
#$% set pointer to nearest integer value
MuRho$ptr = R + 0.5
 
 
#$% if pointer is beyond range of MuRho Table pointers
if ((MuRho$ptr > MuRho$Last$value$ptr ) | (MuRho$ptr < 1))
  {
    #$% display warning message to user and return
    call echov ("J/S Value is out of range.")
    call echor
    errcnt = errcnt + 1
    return
  }
else
  {
    R = (args[4] - MuRho$JS$minimum  )* 10 ** $significant_places
    R = NINT(R)
 
    T = MuRho$JS$increment * 10** $significant_places
    R = DMOD ( R , T )
    if ( R < -1.0E-6  | R > 1.0E-6 )
      {
        #$% display warning message to user and return
        call echov ("Invalid J/S increment specified.")
        call echor
        errcnt = errcnt + 1
        return
      }
    else valid = $yes
  }
 
 
if ( args[1]==$LEX$ENTER$ )
 
  {
 
    errorFlag = $no
 
    if ( args[5] == 0 )
      {
        for (ptr=1; ptr<= MuRho$Last$value$ptr; ptr=ptr+1)
          {
            if ( wrMuRho[ptr,1] == 0 )
              {
                #$% display warning message to user and return
                call echov ("A zero MuRho entry was already entered.")
                call echor
                errorFlag = $yes
                break
              }
          }
       }
 
    if ( errorFlag == $no )
      valid = $yes
    else
      valid = $no
 
  }
 
end
 
 
 

subroutine femrv (nargs,args)  # process entered MuRho data
 
###############################################################
#$%
#$% Purpose:   FEMRV processes MuRho data.
#$%
#$% Called By: FRENTER
#$%
#$% Calls:     ECHOH
#$%            ECHOR      FVRJS
#$%
#$%
#$% Tables:    MuRho
#$%
#$% Date:      MARCH 1988
#$%
#$% Author:    R. Hundt
#$%
###############################################################
 
ForceCommon
integer KMURHO                               # MJC 6/8/2K (E2145)
integer nargs
literal args[$max$args]
logical valid
 
#$% initialize error count
errcnt = 0
 
#$% due to parser input peculiarities, input must be modified (rounded
#$% to a significant digit
 
#$%args[4] = NINT(args[4] * 10 **  $significant_places)
#$%args[4] = args[4] / 10 ** $significant_places
 
#$%args[5] = NINT(args[5] * 10 ** $significant_places)
#$%args[5] = args[5] / 10 ** $significant_places
 
if ( args[3]==$LEX$DEFINITION$ )
  {
    #$% if MuRho minimum value is already defined
    if ( MuRho$JS$Minimum != 0 )
      {
         #$% display warning message to user and return
         call echov ("MuRho Minimum Value already specified.")
         call echor
         errcnt = errcnt + 1
         return
      }
    else if ( args[5] == 0 )
      {
         #$% display warning message to user and return
         call echov ("Commjammer INCREMENT may Not be ZERO.")
         call echor
         errcnt = errcnt + 1
         return
      }
    else   #$% no error condition, update work area
      {
         MuRho$JS$Minimum    = args[4]
         MuRho$JS$increment  = args[5]
         nMuRho   = nMuRho + 1
       }
    }
#$% if a commjammer VALUE entered
else if (args[3]==$LEX$VALUE$)
  {
    if (MuRho$JS$increment == 0)
      {
        #$% display warning message to user and return
        call echov ("Commjammer DEFINTION Not yet ENTERED.")
        call echor
        errcnt = errcnt + 1
        return
      }
    else if (args[4]==0)
      {
        #$% display warning message to user and return
        call echov ("J/S value may not be ZERO.")
        call echor
        errcnt = errcnt + 1
        return
      }
    else
      {
        valid = $no
 
        #$% validate commjammer values entered and update pointer
        call fvrjs(nargs,args,MuRho$ptr,valid)
        if (valid == $yes )
          {
            #$% set MuRho value in table
            MuRho$mrv = args[5]
          }
       }
  }
 
return
end
 
 
 

subroutine flmrv  # load previously stored MuRho data
 
########################################################################
#$%
#$% Purpose:   flmrv loads MuRho data that was previously stored.
#$%
#$% Called By: FINIT
#$%
#$% Calls:     FDOPEN     FDCLOS
#$%
#$% Tables:    MURHO
#$%
#$% Date:      MARCH 1988
#$%
#$% Author:    R. HUNDT
#$%
########################################################################
 
ForceCommon
integer LFCS,
        ISTAT,
        NREC,
        M,
        KMURHO                                   # MJC 6/8/2K (E2145)
 
literal MuRhodata[$MuRholen + 1,$MuRho]
 
 
#$% open scenario file
call FDopen ($read,scenario$name,$lits,MuRho$file,220*4,lfcS,istat)
 
#$% set MuRho to zero
nMuRho = 0
 
#$% read scenario file for MuRho count
#$% file is structured (header rec with rec count) but only one MuRho
#$% table ( record # 2 ) may exist
read (lfcS,rec=1,err=8010) nMuRho        # read MuRho record count
 
nMuRho = nMuRho - 1                    # 5/15/89 reh, minus the header rec
 
#$% set count to two
nrec = 2
 
#$% read scenario file for new MuRho count
read (lfcs,rec=nrec,err=8010) (MuRhodata[m,1],m=1,$MuRholen+1)
 
#$% the VLI is in the first element of the array, an offset is therefor needed
#$% load MuRho data
MuRho$JS$minimum   = MuRhodata[ MuRho$JS$min$ptr+1,1 ]
MuRho$JS$increment = MuRhodata[ $MuRholen+1,1 ]
 
#$% the VLI is in the first element of the array, an offset is therefor needed
#$% move record to work area
for (MuRho$ptr=1; MuRho$ptr<= MuRho$Last$value$ptr; MuRho$ptr=MuRho$ptr+1)
{
 MuRho$mrv = MuRhodata[ MuRho$ptr+1,1 ]
}
 
8010 continue
 
#$% close scenario file
call FDclos (lfcS)                              # close file
 
return
end
 
 
 
 

subroutine fpmrv (nargs,args)  # print MuRho data to output device
 
########################################################
#$%
#$% Purpose:   FPMRV controls the printing of
#$%            communication Jammer MuRho data.
#$%
#$% Called By: FPRINT
#$%
#$% Calls:
#$%
#$% Tables:    MuRho
#$%
#$% Date:      MARCH 1988
#$%
#$% Author:    R. HUNDT
#$%
########################################################
 
ForceCommon
integer KMURHO                               # MJC 6/8/2K (E2145)
integer nargs
literal args[$max$args]
 
integer*2 m
integer*2 table_elem_used
 
 
#$% the following formats are valid when the macro $significant_places is eq. 3
9001 FORMAT (1X,"J/S Minimum Value      ",F7.3/)
9002 FORMAT (1X,"J/S Incremant Value    ",F7.3/)
9003 FORMAT (1X,I7,")  ",F8.3,"  ",F10.3)
9004 FORMAT (1X,I7,")  **** VALUE NOT ENTERED ****")
 
9000 format (/)
 
skip$lines (1)
#$% skip line
 
#$% skip lines and start heading
skip$lines (2)start$head
mv$v(" CommMuRhos ------") write$line
skip$lines (1)
 
#$% if MuRhos are less than one return
if (nMuRho < 1)
  {
   skip$lines (1)
   call echov ("  The Communications Jammer DEFINITION has not been entered.")
   call echor
   skip$lines (1)
   return
  }
 
write (35,9001) (MuRho$JS$minimum ,m=1,1)
write (35,9002) (MuRho$JS$increment,m=1,1)
 
table_elem_used = 0
 
#$% obtain a "high water" mark for the MuRho elements
do MuRho$ptr = 1 , MuRho$Last$value$ptr
  if (MuRho$mrv != $EntryNotUsed )
    {
      table_elem_used = MuRho$ptr
    }
 
#$% if MuRho values are in table
if  ( table_elem_used != 0 )
  {
    skip$lines (1)
    #$% skip line
 
    #$% write out J/S and MuRho values from table beginning to "high water" mark
    do MuRho$ptr=1,table_elem_used
     {
       if ( MuRho$mrv == $EntryNotUsed )
         {
           write (35,9004) (MuRho$ptr)
         }
       else
         {
            write (35,9003) MuRho$ptr,(MuRho$JS$minimum + (MuRho$JS$increment * (MuRho$ptr - 1))), MuRho$mrv #JHM 6/01 outside
         }                                                                                                   # paren deleted
 
     }
 
#    write (35,9003) (MuRho$ptr,(MuRho$JS$minimum + (MuRho$JS$increment * (MuRho$ptr - 1))), MuRho$mrv ,MuRho$ptr=1,table_elem_used)
 
  }
else
  {
  return
  }
 
#$% skip line
skip$lines (1)
 
return
end
 
 
 
 

subroutine fdmrv (nargs,args) # deletes data from the MuRho table
 
#####################################################################
#$%
#$% Purpose:   FDMRV controls the deletion of the commJammer MuRho
#$%            Table.
#$%
#$% Called By: FRDELET
#$%
#$% Calls:     ECHOH    ECHOR
#$%            FVRJS
#$%
#$% Tables:    MuRho
#$%
#$% Date:      MARCH 1988
#$%
#$% Author:    R. Hundt
#$%
#####################################################################
 
Forcecommon
integer KMURHO                                   # MJC 6/8/2K (E2145)
integer nargs
literal args[$max$args]
logical valid
 
#$% if MuRho table not defined
if (nMuRho == 0)
   {						# error message to user
    call echov ("The Communications Jammer MuRho Table is not yet defined.")
    call echor
    return
   }
#$% if MuRho table is to be deleted
else if ( args[3]==$LEX$DEFINITION$ )
 
  {
    MuRho$JS$minimum   = 0
    MuRho$JS$increment = 0
 
    #$% decrement MuRho Table counter
    NMuRho = NMuRho - 1
 
    #$% For each MuRho Table entry
    for (MuRho$ptr = 1; MuRho$ptr <= MuRho$Last$value$ptr; MuRho$ptr = MuRho$ptr + 1)	
      {			
        MuRho$mrv = $EntryNotUsed
      }
     #$% display dleetion message to the user
    call echov ("The Communications jammer MuRho Table has been deleted.")
    call echor
  }
else if (args[3]==$LEX$VALUE$)
  {
    #$% if value entered was zero
    if (args[4] == 0)
      {
        #$% display warning message to user and return
        call echov ("J/S value may not be ZERO.")
        call echor
        errcnt = errcnt + 1
        return
      }
    else
      {
        valid = $no
 
        #$% validate J/S value and update pointer
        call fvrjs(nargs,args,MuRho$ptr,valid)
        if (valid == $yes )
          {
            #$% clear MuRho table element
            MuRho$mrv = $EntryNotUsed
          }
      }
  }
 
return
end
 
 

subroutine fvrmrv (istat)    # verifies data in MuRho table
 
#############################################################################
#$%
#$% Purpose:   FVRMRV verifies data associated with commJammer MuRho
#$%            Table prior to a disk save.
#$%            MuRho values must:
#$%                  1)  have minimum and increment values defined
#$%                  2)  be in non-ascending order as the MuRho$ptr increases
#$%                  3)  not have omissions of MuRho values between valid
#$%                        MuRho values in the table
#$%
#$% Called By: FBYEVR
#$%
#$% Calls:     ECHOH    ECHOR
#$%
#$%
#$% Tables:    NONE
#$%
#$%
#$% Date:      MARCH 1988
#$%
#$% Author:    R. HUNDT
#$%
#############################################################################
 
ForceCommon
integer ISTAT,
        KMURHO                                               # MJC 6/8/2K (E2145)
Literal   MrvSave
 
Logical*1 NoEntry
Logical*1 BlankInTable
Logical*1 NotAscending
 
 
#$% send verification message
call echor
call echov ("Verifying Communications Jammer MuRho entries.....")
 
istat = $yes
 
#$% if MuRho table not entered, it's OK
if ( NMuRho == 0 )
  {
    return
  }
 
#$% if communications jammer DEFINTION not entered
if (( MuRho$JS$minimum == 0 ) | ( MuRho$JS$increment == 0 ))
  {
    call echor
    call echov (" Warning: COMMJAMMER DEFINITION has not been ENTERED")
 
    #$% set status flag to NO
#   istat = $no
  }
 
 
#$% clear error flags to
NoEntry       = $no
BlankInTable  = $no
NotAscending  = $no
 
#$% the following test for both non-ascending MuRho values and "holes"
#$% within the MuRho table
 
#$% loop through each mrv entry in the table until table end or an error occurs
for (MuRho$ptr = 1;
( MuRho$ptr <= MuRho$Last$value$ptr  &
  BlankInTable == $no  &
  NotAscending == $no );
  MuRho$ptr = MuRho$ptr + 1)	
   {
 
     #$% if an element was found not used
     if ( noEntry == $yes )
       {
 
         #$% if element is used
         if ( MuRho$mrv != $EntryNotUsed )
           {
 
             #$% an unused element is in table followed by used element(s)
             #$% i.e. a hole exists in table
             BlankInTable = $yes
           }
       }
 
     #$% if pointer past first element
     else if ( MuRho$ptr >= 2 )
       {
 
         #$% if the MuRho value is greater than the save value
         if ( MuRho$mrv > MrvSave )
           {
 
             #$% MuRho values are not (descending or equal)
             NotAscending = $yes
           }
       }
     #$% if element is not used
     if ( MuRho$mrv == $EntryNotUsed )
       {
         #$% set flag
         NoEntry = $yes
       }
 
     #$% save the MuRho value
     MrvSave = MuRho$mrv
 
   }
 
#$% if an unused element in MuRho table, and was follwed by a valid entry
if ( BlankInTable  == $yes )
  {
    call echor
 
    call echov ("   Blank entry in MuRho Table.")
 
    #$% set status flag to NO
    istat = $no
    return
 
  }
#$% if MuRho values are not ( descending or equal )
else if ( NotAscending  == $yes )
 
  {
    call echor
    call echov ("  MuRho Table is not in loosely DESCENDING order.")
 
    #$% set status flag to NO
    istat = $no
    return
  }
 
 
return
end
 
 

subroutine fsavmrv  # save MuRho table to disk
 
#############################################################
#$%
#$% Purpose:   FSAVMRV writes communication MuRho scenario data to
#$%            disk for storage.
#$%
#$% Called By: FBYEGN
#$%
#$% Calls:     FDOPEN     ECHOH      ECHOR
#$%            FDCLOS
#$%
#$% Tables:    MuRho
#$%
#$% Date:      MARCH 1988
#$%
#$% Author:    R. HUNDT
#$%
#############################################################
 
Forcecommon
integer LFCS,
        ISTAT,
        NREC,
        KMURHO,
        M                                        # MJC 6/8/2K (E2145)
 
#$% the additional array element is for the variable Length indicator
literal MuRhodata[$MuRholen + 1 , $MuRho]
 
 
#$% open scenario file
call FDopen ($write,scenario$name,$lits,MuRho$file,220*4,lfcS,istat)
 
#$% set record pointer
nrec = 2
 
#$% only one MuRho table exists for a scenario
 
#$% the VLI is in the first element of the array, an offset is therefor needed
#$% update the work area
MuRhodata[ $MuRholen+1,1 ] =   MuRho$JS$increment
MuRhodata[ MuRho$JS$min$ptr+1,1 ] = MuRho$JS$minimum
 
#$% this set the variable length indicator to zero
MuRhoData [ 1, 1] = 0
 
#$% the temporary storage area is offset by the length of the VLI
for (MuRho$ptr=1; MuRho$ptr <= MuRho$Last$value$ptr ; MuRho$ptr=MuRho$ptr+1)
   {
      MuRhodata[ MuRho$ptr + 1 ,1 ] = MuRho$mrv
   }
 
#$% set record pointer
nrec = 2
 
#$% save record on scenario file
write (lfcS,rec=nrec) (MuRhodata [m,1],m=1,$MuRholen+1)
 
nMuRho = 2
#$% write MuRho count to record two
write (lfcS,rec=1) $count_w_fingerprint(nMuRho)  # write record count
 
#$% close scenario file
call FDclos (lfcS)
 
 
return
end
 
 
