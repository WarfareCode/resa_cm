# File: STROUTE.rat.
# This file was created bye AWSIMS and modified as required
 
# Created 21Jun85 YYY
# introduced into the NOSC RESA version 11/16/89
 
# This ASTAB is supposed to display all defined routes for the selected view.
 
#####   Blackboard defines and include ascii constants
 
include "bbcode.inc"
include "bbctl.inc"
include "ascii.inc"
include "bbrte.inc"
include "bbrto.inc"
include "plplay.inc"
include "stmain.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb  E2145     2/28/00
define ($low$order$key,ikey)
 

 
Subroutine RTESTA
 
#######################################################
#$%
#$% Purpose:   RTESTA generates the ROUTE status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     RTETIT   RTERTE
#$%
#$% Tables:    None
#$%
#$% Date:      21 JUN 85
#$%
#$% Author:    TSgt. James H. Wise
#$%
#######################################################
 
BBcommon
STATUScommon
 
#$% Display title
call RTETIT
 
#$% Display status board
call RTERTE
 
return
end
 

 
Subroutine RTETIT
 
#######################################################
#$%
#$% Purpose:   RTETIT generates a title for the ROUTE status board.
#$%
#$% Called By: RTEDSP
#$%
#$% Calls:     OUTH     OUTIZ   OUTIB
#$%
#$% Tables:    None
#$%
#$% Date:      21 Jun 85
#$%
#$% Author:    TSgt. James H. Wise
#$%
#########################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
$prepare$next$line
 
$column  1 ; $outV("View: ") ; $outH(nmvue,5)
$column 25 ; $OutV("DEFINED ROUTES [") ; $outI(iboard) # jb 25 vs 28 2/28/00
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $outV("Game Time: ") ; $outIZ(Game_DTGs(igmin),8)
 
return
end
 

 
Subroutine RTERTE
 
########################################################
#$%
#$% Purpose:   RTERTE executes the subroutines that gen-
#$%            erate the defined routes status board.
#$%
#$% Called By: RTESTA
#$%
#$% Calls:     RTEHED   NXTRTE
#$%            RTEENT   RTENUN
#$%
#$% Tables:    None
#$%
#$% Date:      21 Jun 85
#$%
#$% Author:    TSgt. James H. Wise
#$%
#$% Modified:  James Allen - 7/96 (E1443)
#$%            Added for displaying that the route is a continuously
#$%            repeating route.
#$%
#$%            Carol Kropp - 6/97 (E1818)
#$%            Added for displaying the subsequent route to be used.
#$%
##########################################################
BBcommon
STATUScommon
 
Integer ifound, ifrst,   RTE$Pointer    # jb E2145  2/28/00
 
#$% display heading
call RTEHED
 
$exit$on$overflow
 
#$% initialize flag
ifound = $no
ifrst = $Yes    #Flag that we have not done the 1st entry on this page
 
repeat
   {
    #$% get next valid route table entry
    call NXTRTE(Rte$Pointer)
 
    #$% if last one, break loop
    if (Rte$Pointer == 0) break
 
    #$% found one
    ifound = $yes
 
    #$% get history data
    call RTEENT(Rte$Pointer,ifrst)
 
    ifrst = $No         #Flag that we've done the 1st entry on this page
    $exit$on$overflow
   }
 
#$% if none, send message
if (ifound == $no) call RTENUN
 
return
end
 

 
Subroutine RTEHED
 
###########################################################
#$%
#$% Purpose:   RTEHED  generates heading for the
#$%            defined route status board.
#$%
#$% Called By: RTERTE
#$%
#$% Calls:     SMOVH
#$%
#$% Tables:    None
#$%
#$% Date:      30 Aug 05
#$%
#$% Author:    James O. Allen
#$%
###########################################################
BBcommon
STATUScommon
 
Integer ilen    # jb  E2145 2/28/00
 
# 11/92 khc, Point Numbers column heading is added.
## jb E2141 msg2,msg3,msg4 modified:     2/28/00
#            01234567890123456789012345678901234567890123456789012345678901234567890123456789
string MSG2 "Route   Q Ord Order"
string MSG3 "Name      Nbr"
string MSG4 "--------- --- ------------------------------------------------------------------"
#            01234567890123456789012345678901234567890123456789012345678901234567890123456789
#            xxxxxxxx nnn aaaaaaaa PROCEED POSITION DD-MM-SSH DDD-MM-SSH
ilen = 0; call smovh(MSG2,ARB,Ipage[1,2],ilen)
LINLEN[2] = ilen        # jb  2/28/00
ilen = 0; call smovh(MSG3,ARB,Ipage[1,3],ilen)
LINLEN[3] = ilen        # jb  2/28/00
ilen = 0; call smovh(MSG4,ARB,Ipage[1,4],ilen)
LINLEN[4] = ilen        # jb  2/28/00
 
#$% set line counter
LINCNT    = 4
 
return
end
 

 
Subroutine NXTRTE(nxtpnt)
 
#################################################
#$%
#$% Purpose:   NXTRTE locates next route entry.
#$%
#$% Called By: RTERTE
#$%
#$% Calls:
#$%
#$% Tables:    RTE
#$%
#$% Date:      21 Jun 85
#$%
#$% Author:    TSgt. James H. Wise
#$%
###################################################
BBcommon
StatusCommon
 
literal irte[1], keys[1],lowest[1],
            CSTRIP8                                     # jb E2145 2/28/00
Integer iblue,iorange,ineutral, iokay,nxtpnt,irsult,    # jb E2145 2/28/00
        RTE$Pointer,RTE$View$I                          # jb E2145 2/28/00
 
#$% KH 4Jan89 Added for route sharing.
iblue = $no
iorange = $no
ineutral = $no                                      # reh 2/4/91
 
#$% KH 4Jan89 Adding the following for route sharing among like views.
if (iview >= $FirstBlue$View & iview <= $LastBlue$View)
    {
    iblue = $yes
    }
else if (iview >= $FirstOrange$View & iview <= $LastOrange$View)
    {
    iorange = $yes
    }
else  if (iview == $Neutral$View)                   # reh 2/4/91
    {
    ineutral = $yes
    }
 
#$% get highest ascii
lowest[1] = $highest$ascii
 
#$% if only one, save lowest, else save key
if (ikey  == 1) keys[1] = $lowest$ascii
else            keys[1] = ikey
 
#$% initialize pointer
nxtpnt = 0
 
for (Rte$Pointer$First; Rte$Pointer$OK; Rte$Pointer$Next)
    {
    #$% KH 4Jan89 Adding the following for route sharing among like views.
    iokay = $no
    rte$View$i = xrte$View$i
    # No route sharing for blue views joa 4/10 kr10
    if  (iblue == $yes &
        (rte$View$i == iview))
         {
         iokay = $yes
         }
    else if (iorange == $yes &
            (rte$View$i >= $FirstOrange$View & rte$View$i <= $LastOrange$View))
         {
         iokay = $yes
         }
    #$% neutral stuff 2/4/91, reh
    else if (ineutral == $yes &
             rte$View$i == $Neutral$View)
         {
         iokay = $yes
         }
 
    if (iokay == $yes)
        {
        irte[1] = XRte$Name$c           # Get the route's name for sorting
 
        #$% compare the name to keys
        call COMPAR(1,irte,keys,irsult)
 
        if (irsult <  0) next                       # less than keys
 
        if (irsult == 0)                            # found exact match
            {
            #$% save pointer
            nxtpnt = Rte$Pointer
            return
            }
 
        #$% compare route name to lowest
        call COMPAR(1,irte,lowest,irsult)
 
        if (irsult > 0) next                        # larger than lowest found
 
        lowest[1] = irte[1]                         # at this point, have
                                                    # best candidate so far
        #$% save pointer
        nxtpnt = Rte$Pointer
        }
    }
 
#$% save lowest key
ikey  = lowest[1]
 
return
end
 

 
Subroutine RTEENT(Rte$Pointer,ifrst)
 
##################################################################
#$%
#$% Purpose:   RTEENT gets data for defined route status board.
#$%
#$% Called By: RTERTE
#$%
#$% Calls:     SMOVIB       SMOVH       SMOVLL
#$%
#$% Tables:    RTE
#$%
#$% Date:      30 Aug 05
#$%
#$% Author:    James O. Allen
#$%
######################################################################
BBcommon
STATUScommon
 
LITERAL RTE$Name$C, CSTRIP8, QRouteFlag
literal dest[40]
Integer icontinued, ifrst,ifirst
integer ind, kargs, len, itime, iseq, icnt, nord, kk
integer keyfound, ordindex
bbdeclare (rte$pointer, rto$pointer, rto$wrd$index, rte$NumOrders$i)
 
#           1         2         3         4         5         6         7
# 0123456789012345678901234567890123456789012345678901234567890123456789012
# Route   Leg  Order
# Name    Nbr
 
$save$line$count
 
$prepare$next$line                      #28 Oct 87, griff, If U use these macros
$test$next$line ; $exit$on$overflow     #always place them in the same order
                                        #when used more than once inside a
                                        #subroutine or your linecount could be
                                        #screwed and/or skewed.
 
if (ikey2 == 1)                             # new astab or complete route
    ikey2 = Xrte$RTOpntr$i
 
# Check integrity of route by comparing rte$numorders$i with orders in rto
#    Also check that key is in current route orders.
 
rte$NumOrders$i = Xrte$NumOrders$i
keyfound = $NO
ordindex = 0
for (rto$pointer = Xrte$RTOpntr$i; rto$pointer$ok; rto$pointer$next)
{
    if (rto$pointer == ikey2) keyfound = $YES   # Is key in route orders
    ordindex = ordindex + 1
    if (ordindex >= rte$NumOrders$i) break
}
if (ordindex != rte$NumOrders$i | keyfound == $NO)
{
    $increment$keys      #28 Oct 87, griff-last point in route reached. increment
    ikey2 = 1            #ikey for next route & reset ikey2 for 1st PAS entry.
    $save$keys
 
    $test$next$line       #This check is for if the last line of the route ends
                      #up on the last line of the screen. This prevents the
                      #screen from scrolling up 1 line.
    return
}
 
RTO$Pointer = ikey2
 
#28 Oct 87, griff-Ikey2 was added to allow a route to be display on more than
#     one page of the astab.
 
 
if (ifrst == $No)       #If this is not the 1st entry on this screen, add an
    {                   #extra blank line to separate entries.
    $prepare$next$line
    $test$next$line ; $exit$on$overflow
    }
 
 
ifirst = $Yes
if (RTO$pointer  > Xrte$RTOPntr$i)
    {
    icontinued = $yes
    }
 
for (;  RTO$pointer$ok;
        RTO$pointer$next)
    {
 
    ikey2 = RTO$Pointer     #28 Oct 87, griff-increment ikey2
 
    if (icontinued == $yes)   #28 Oct 87, griff-Is route a continuation
        {
        $Column 1 ; $OutV ("Route points continued from previous page.") # jb
        icontinued = $No
        $Prepare$Next$Line
        $Test$Next$Line
        $Exit$on$Overflow
        }
 
    if (ifirst == $Yes) #If this is the 1st time, display the route name
        {
        Rte$Name$c = XRte$Name$c
        $Column 1 ; $OutHn (Rte$Name$c,$$MAXname)    # jb E2141  2/28/00
 
        if (Xrte$QRouteFlag$i == $yes) QRouteFlag = 'Q'
        else
        {
           kk = 0; call smovv ("        ", QrouteFlag, kk)
        }
        $Column 9 ; $OutH (QRouteFlag, 1)
 
        ifirst = $No
        }
    else
        {
        $Save$Keys              #23 Oct 87, CJS & griff
        $Save$Line$Count        #
        $Prepare$Next$Line      #Save keys and finish page.
        $Test$Next$Line         #
        $Exit$on$Overflow       #
        }
 
    $Column 11  # 11/92 khc; jb E2141 (10 vice 8)  2/28/00
    rto$wrd$index = 6           # Sequence of sub-orders
    iseq = Xrto$wrd$$c
 
    rto$wrd$index = 7           # Sequence of sub-orders
    icnt = Xrto$wrd$$c
 
    $OutIB (iseq,3)
 
    #$% if not the first order in a sequence, set ind = no
    if (iseq != 1) ind = $yes
    else           ind = $no
 
    kargs = Xrto$NbrArgs$i - 7
    rto$wrd$index = 4           # Time
    itime = Xrto$wrd$$c
    rto$wrd$index = 3           # Order Number
    nord = Xrto$wrd$$c
    len = 0
    call synbld (_                            # Build text from lex data
                itime,                        # game minute when to be executed
                ind,                          # $yes/$no if time is phase dependent
                nord,                         # order number (code)
                kargs,                        # number of words in the lex array
                Xrto$Args$i,                  # lex code(s) array
                dest,                         # array to receive text (40 words)
                len)                          # value for number of bytes in dest
 
    $Column 15
    call fmtord(dest,len,15)       # format order for astab
 
 
    Linlen[lincnt] = ibyte
    if (iseq >= icnt) break      # Last Order
    } # End of the FOR loop
 
$increment$keys      #28 Oct 87, griff-last point in route reached. increment
ikey2 = 1            #ikey for next route & reset ikey2 for 1st PAS entry.
$save$keys
 
$test$next$line       #This check is for if the last line of the route ends
                      #up on the last line of the screen. This prevents the
                      #screen from scrolling up 1 line.
return
end
 

 
Subroutine RTENUN
 
#########################################################################
#$%
#$% Purpose:   RTENUN displays message if there are no defined routes
#$%            for this view
#$%
#$% Called By: RTERTE
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      21 Jun 85
#$%
#$% Author:    TSgt. James H. Wise
#$%
#########################################################################
BBcommon
STATUScommon
 
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% send no aircraft message
$column 1 ; $outV("No defined routes in this side")  #jb E2141 outV  2/28/00
 
return
end
 

 
Subroutine fmtord(dest,ilen,ihead)       # format order for astab
 
STATUScommon
 
integer dest[120],ilen,ihead,char,lchar,icol
integer IPNT, IGBYTE
 
char = 1
icol = 0
 
for (ipnt=1; ipnt <= ilen; ipnt = ipnt + 1)
{
    lchar = char
    char = igbyte (dest,ipnt)
 
    if (char == $null) next
 
    if (char == $tab)
    {
        char = $space
    }
    else if (char == $return)
    {
        char = $space
    }
 
    #$% if end of line
    if (($beyond$column 70) & lchar == $space)
    {
        #$% test for overflow
        $test$next$line ; $exit$on$overflow
 
        #$% prepare next line
        $prepare$next$line
 
        #$% set column counter
        $column ihead
    }
 
    $OutH(char,1)
}
 
return
end
 
