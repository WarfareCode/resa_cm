##                      File  WGMDROUT.rat
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 29 dec 1980
###
### smn prog    subr.           comments
### === ====    ======    =================================================
### 002 rjw     repout
###             rpsent
###             rpdlvr
###             rpkill
###             rpredy
###             rppnd2
###             rpsrcn
###             rpsdam
###             rpslcl
###             addcor
###             rppos2
###             rpinv2
###             rpbar2
###             frepnd
###             freinv
###             frecor
###
 
 
#####   new file after version 3.0
 
# 
 
#$%     MODULE                       UTILITY                     DATA
#$%   SUBROUTINES                  SUBROUTINES                  TABLES
#$%   ===========                  ===========                  ======
#$%
#$%     REPOUT                       ECHO                        REP
#$%     RPSENT                       ECHOH                       COM
#$%     RPDLVR                       ECHOHN                      UNT
#$%     RPKILL                                                   VUE
#$%     RPREDY                                                   OWN
#$%     RPPND2                                                   PND
#$%     RPSRCN                                                   DAM
#$%     RPSDAM                                                   RCN
#$%     RPSLCL                                                   INV
#$%     ADDCOR                                                   BAR
#$%     RPPOS2                                                   LCL
#$%     RPINV2                                                   COR
#$%     RPBAR2
#$%     FREPND
#$%     FREINV
#$%     FRECOR
#$%     RMTAGE <CORLAT>
#$%     CORLAT <CORLAT>
#$%     ADDINV <REPIN >
#$%     FNDOWN <REPIN >
#$%     CLRASS <CORLAT>
#$%
#$%
#$%
#$%   NOTES
#$%   =====
#$%
#$%   1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%   2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%   3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%   FLOWCHART FOR FILE REPOUT
#$%   =========================
#$%
#$%   REPOUT - RPREDY*
#$%          - RPSENT - RPSLCL*
#$%                   - RPSDAM*
#$%                   - RPSRCN*
#$%          - RMTAGE*
#$%          - RPDLVR - RPSDAM*
#$%                   - RPSRCN*
#$%                   - RPPND2 - FREINV*
#$%                            - FRECOR*
#$%                            - FREPND*
#$%                            - CLRASS* (in CORLAT, but commmented out)
#$%                            - RPBAR2 - ADDCOR*
#$%                            - RPINV2 - ADDINV*
#$%                            - RPPOS2 - FNDOWN*
#$%                            - ROTLAT* (in WGXCOTH.RAT)
#$%                            - CORLAT* (module CORLAT)
#$%          - RPKILL - RPSLCL*
#$%                   - RPSDAM*
#$%                   - RPSRCN*
#$%                   - FREPND*
 

 
 
#define ($debug,$$Debug$Control)
 
include "macros.inc"
include "bbctl.inc"
include "bbcode.inc"
include "bbbar.inc"
include "bbcom.inc"
include "bbdam.inc"
include "bblcl.inc"
 
include "bbown.inc"
include "bbinv.inc"
include "bbcor.inc"
 
include "bbpnd.inc"
include "bbrep.inc"
include "bbrcn.inc"
include "bbunt.inc"
include "bbvue.inc"
 
define(BBimplicit,IMPLICIT NONE)        # jb E2145  7/11/00

 
Subroutine REPOUT
 
########################################################
#$%
#$% Purpose:   REPOUT provides executive control
#$%            report delivery process.
#$%
#$% Called By: WAROUT
#$%
#$% Calls:     RPREDY     RPSENT     RPDLVR
#$%            RPKILL     RPREDY     RMTAGE
#$%
#$% Tables:    REP        COM        UNT
#$%            VUE
#$%
#$% Date:      29 DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer UNT$Pointer,VUE$Pointer,                # jb E2145  7/11/00
    REP$Pointer,REP$Comindx$I,REP$Senderindx$I, # jb E2145  7/11/00
    COM$Pointer,COM$Status$I,COM$RE$Index       # jb E2145  7/11/00
 
for (rep$pointer$first;rep$pointer$ok;rep$pointer$next)
   {
    rep$SenderIndx$i = Xrep$SenderIndx$i        # get sender index
 
    if (rep$SenderIndx$i == 0)  next            # if zero, get next
 
    rep$ComIndx$i = xrep$ComIndx$i              # get COMM pointer
 
    if (rep$ComIndx$i == 0)                     # Reports are bypassing comm
        {
        call RPREDY(rep$pointer)                # call report ready
        call RPSENT(rep$pointer)                # call report sent
        call RPDLVR(rep$pointer)                # call report deliver
 
        next
        }
 
    com$pointer$to rep$ComIndx$i                # get COMM pointer
 
    unt$pointer$to rep$SenderIndx$i             # set UNT pointer to sender
 
    vue$pointer$to Xunt$View$i                  # get unit view
 
    com$re$index = 1                            # set report index to one
 
    if (Xvue$EmbarkIndx$i != Xcom$re$Indx$i)    #if sent to different unit
        {
        call RPKILL(rep$pointer)                # call delete report
 
        PUTcom$Status$i ($BeingDeleted$code)    # set status to being deleted
        next
        }
 
    if (xrep$SenderSatisfied$i == $no &         # if COMM sender satisfied and
        xcom$SenderSatisfied$i != $no )         # had'nt been before
        {
        call RPSENT(rep$pointer)                # call report sent
        }
 
    if (xrep$InPreparation$i != $no               &     # if in preparation and
        (xcom$AnyReady$i != $no | xcom$Node$i > 1))     # someone is ready
        {
        call RPREDY(rep$pointer)                # call get report ready
        }
 
    com$status$i = xcom$status$i                # get COMM status
 
    if      (com$status$i == $BeingDeleted$code |
             com$status$i == $CantSend$code     |
             com$status$i == $DidntRoger$code   )  call RPKILL(rep$pointer)
    else if (com$status$i == $Received$code     )  call RPDLVR(rep$pointer)
   }
 
for (com$pointer$first;com$pointer$ok;com$pointer$next) # for each COMM entry
    {
    if (xcom$SenderIndx$i == $no) next          # if no sender, get next
 
    if (xcom$Type$i != $Report$code)  next      # if not report, get next
 
    com$status$i = xcom$status$i
 
    if (com$Status$i != $Received$code       &
        com$Status$i != $BeingDeleted$code   &
        com$Status$i != $CantSend$code       &
        com$Status$i != $DidntRoger$code     )  next
 
    com$zero
    }
 
call RMTAGE                                     # call detected track time
 
return
end
 

 
Subroutine RPDLVR(rep$pointer)
 
########################################################
#$%
#$% Purpose:   RPDLVR processes a complete
#$%            delivered report.
#$%
#$% Called By: REPOUT
#$%
#$% Calls:     ECHOR      ECHOH      ECHOHN
#$%            RPSLCL     RPSDAM     RPSRCN
#$%
#$% Tables:    REP        UNT
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
LITERAL    CSTRIP8                  # jb E2145  7/11/00
Integer UNT$Pointer,REP$Pointer     # jb E2145  7/11/00
 
if (trace$reporting != $no)
    {
    call echor
    call echov("Delivering report from ")
 
    unt$pointer$to xrep$SenderIndx$i
 
    call echohn(xunt$name$c,$$MaxLit)
    call echov("...[REP #")
    call echoi(rep$pointer$index)
    call echov("]")
    }
 
#$% call to update appropriate table, and call to flag damage and
#$% reconn reports
call RPPND2(rep$pointer)
call RPSDAM(rep$pointer,$ReportReceived$code)
call RPSRCN(rep$pointer,$ReportReceived$code)
 
rep$zero
 
return
end
 

 
 
 
Subroutine RPKILL(rep$pointer)
 
########################################################
#$%
#$% Purpose:   RPKILL removes a report package (REP &
#$%            PND) because:
#$%                      1)  report incomplete or
#$%                      2)  communication incomplete
#$%
#$% Called By: REPOUT
#$%
#$% Calls:     ECHOR      ECHOH      ECHOHN
#$%            RPSLCL     RPSDAM     RPSRCN
#$%
#$% Tables:    REP        UNT
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
LITERAL    CSTRIP8                  # jb E2145  7/11/00
Integer UNT$Pointer,UNT$Reportshiptracks$I,      # jb E2145  7/11/00
    UNT$Reportairtracks$I,UNT$Reportesmtracks$I, # jb E2145  7/11/00
    UNT$Reportnewship$I,UNT$Reportnewair$I,      # jb E2145  7/11/00
    UNT$Reportnewesm$I,UNT$Reportown$I,          # jb E2145  7/11/00
    UNT$Reportdamage$I,UNT$Reportreconn$I,       # jb E2145  7/11/00
    UNT$Reportwaiting$I,        REP$Pointer      # jb E2145  7/11/00
 
unt$pointer$to xrep$SenderIndx$i
 
if (trace$reporting != $no)
    {
    call echor
    call echov("Killing report from ")
    call echohn(xunt$name$c,$$MaxLit)
    }
 
#$% if sender is not satisfied
if (xrep$SenderSatisfied$i == $no)
   {
    if (trace$reporting != $no)
        {
        call echov("...will try again next minute")
        }
 
    #$% if ship tracks
    if (xrep$ShipTracks$i != $no)
       {
        #$% reset report ship tracks to YES
        unt$ReportShipTracks$i = $yes
        PUTunt$ReportShipTracks$i
       }
    #$% if aircraft tracks
    if (xrep$AirTracks$i != $no)
       {
        #$% reset report aircraft tracks to YES
        unt$ReportAirTracks$i = $yes
        PUTunt$ReportAirTracks$i
       }
    #$% if ESM tracks
    if (xrep$EsmTracks$i != $no)
       {
        #$% reset report ESM tracks to YES
        unt$ReportEsmTracks$i = $yes
        PUTunt$ReportEsmTracks$i
       }
    #$% if new ship, new aircraft, or new ESM
    if (xrep$NewShip$i != $no |
        xrep$NewAir$i  != $no |
        xrep$NewEsm$i  != $no )
       {
        #$% flag detection reports
        call RPSLCL(rep$pointer,$NeedsReport$code)
 
        #$% get new ship report
        unt$ReportNewShip$i = xrep$NewShip$i
        PUTunt$ReportNewShip$i
 
        #$% get new aircraft report
        unt$ReportNewAir$i  = xrep$NewAir$i
        PUTunt$ReportNewAir$i
 
        #$% get new ESM report
        unt$ReportNewEsm$i  = xrep$NewEsm$i
        PUTunt$ReportNewEsm$i
       }
    #$% if OWN force report
    if (xrep$Own$i != $no)
       {
        #$% reset OWN force report to YES
        unt$ReportOwn$i = $yes
        PUTunt$ReportOwn$i
       }
 
    #$% if first damage index
    if (xrep$FirstDamIndx$i != 0)
       {
        #$% reset report damage to YES
        unt$ReportDamage$i = $yes
        PUTunt$ReportDamage$i
       }
 
    #$% if first RECONN index
    if (xrep$FirstRcnIndx$i != 0)
       {
        #$% reset report RECONN to YES
        unt$ReportReconn$i = $yes
        PUTunt$ReportReconn$i
       }
 
    #$% flag damage reports
    call RPSDAM(rep$pointer,$NeedsReport$code)
 
    #$% flag RECONN reports
    call RPSRCN(rep$pointer,$NeedsReport$code)
   }
 
#$% restore pending queue for reports awaiting communication to free chain
call FREPND(xrep$FirstPndIndx$i)
 
#$% if report in preparation
if (xrep$InPreparation$i != $no)
   {
    #$% set report waiting to NO
    unt$ReportWaiting$i = $no
    PUTunt$ReportWaiting$i
   }
 
rep$zero
 
return
end
 

 
 
Subroutine RPPND2(rep$pointer)
 
########################################################
#$%
#$% Purpose:   RPPND2 updates appropriate table
#$%            INV, OWN, RMT from a report.
#$%
#$% Called By: RPDLVR
#$%
#$% Calls:     CLRASS     CORLAT     ROTLAT
#$%            RPPOS2     RPINV2     RPBAR2
#$%            FREPND     FREINV     FRECOR
#$%
#$% Tables:    REP        COM        UNT
#$%            VUE        OWN        PND
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
REAL    TIME                                 # jb E2145  7/11/00
Integer ICURR,IFINV,IFCOR,INEXT,             # jb E2145  7/11/00
    IOLDFI,IS2WAY,IUNIT,                     # jb E2145  7/11/00
    COM$Pointer,UNT$Pointer,VUE$Pointer      # jb E2145  7/11/00
Integer REP$Pointer,REP$Comindx$I,           # jb E2145  7/11/00
        REP$Firstpndindx$I                   # jb E2145  7/11/00
Integer PND$Pointer,PND$LCL$Index,           # jb E2145  7/11/00
        PND$Recordtype$I                     # jb E2145  7/11/00
Integer OWN$Pointer,                         # jb E2145  7/11/00
    OWN$Firstinvindx$I,OWN$Firstcorindx$I    # jb E2145  7/11/00
Integer ibar2_calls  # jb Flag for FRECOR call jb E2145  4/3/01
 
#$% get COMM index
rep$ComIndx$i = xrep$ComIndx$i
 
#$% if COMM index is zero
if (rep$ComIndx$i == 0)
   {
    #$% set two way flag
    is2way = $yes
   }
else
   {
    #$% set COM pointer, extract two way flag
    com$pointer$to rep$ComIndx$i
    is2way = xcom$TwoWay$i
   }
 
#$% set unit to sender index
iunit = xrep$SenderIndx$i
#$% set report time
time = xrep$ReportTime$f
 
#$% set unit pointer
unt$pointer$to iunit
 
#$% set view pointer
vue$pointer$to xunt$view$i
 
#if (xrep$AirTracks$i != $no) call CLRASS(unt$pointer,vue$pointer)
 
#$% get first pending index
rep$FirstPndIndx$i = xrep$FirstPndIndx$i
 
#$% set next to first pending index
inext = rep$FirstPndIndx$i
 
#$% zero pointers
own$pointer = 0
ifinv       = 0
ifcor       = 0
ibar2_calls = 0 #jb init. RPBAR2 calls in INEXT loop as 0 4/3/01
 
while (inext != 0)                      #for each record in chain
   {
    icurr = inext
 
    #$% set PND pointer
    pnd$pointer$to icurr
 
    #$% set to next index
    inext = xpnd$NextIndx$i
 
    #$% get record type
    pnd$RecordType$i = xpnd$RecordType$i
 
    #$% if record type is detection
    if      (pnd$RecordType$i == $detection$code)
       {
        #$% for each detection entry
        for (pnd$lcl$index=1;pnd$lcl$index$ok;pnd$lcl$index=pnd$lcl$index+1)
            {
             #$% call to correlate detection data
             call CORLAT(vue$pointer,pnd$lcl$pointer,iunit,time,is2way)
            }
       }
    #$% else if record type is Over the Horizon tracks...
    else if (PND$RecordType$i == $OTH$Code)
       {
        #$% call to update ROTHR detection data to the RMT table (no correlations)
        call ROTLAT(PND$Pointer,VUE$Pointer,iunit,time,is2way)
       }
    #$% else if record type is position
    else if (pnd$RecordType$i == $posit$code) # jb RPPOS2 duplicates
       {  # OWN from PND, but as of 4/4/01, always calls FRECOR
            #$% for aircraft  ($air$code)
        call RPPOS2(pnd$pointer,iunit,time,own$pointer)
       }
    #$% else if record type is inventory
    else if (pnd$RecordType$i == $inventory$code)
       {
        #$% call to update and report additional inventory data
        call RPINV2(pnd$pointer,own$pointer,ifinv)
       }
    #$% else if record type is barrier
    else if (pnd$RecordType$i == $barrier$code)
       {
        #$% jb Start insertion of 'updated' chain.  (The 'old' chain,
        #$%  if it existed. was just-cleared-out by RPPOS2..
        #$% jb Note: RPBAR2 calls ADDCOR to fill-in updated chain,
                                            # one member per call
        call RPBAR2(pnd$pointer,own$pointer,ifcor)
        # Note: ifcor is returned by ADDCOR as its IFIRST variable
 
        #$% set first corner index
        if(ibar2_calls == 0) # jb If this is first RPBAR2 call in  4/3/01
            { #  the INEXT loop for this REP entry, set own$FirstCORindx$I..
            ibar2_calls = 1 # jb Flag next call as NOT FIRST 4/3/01
            own$FirstCorIndx$i = ifcor
            PUTown$FirstCorIndx$i
            }
       }    # End if BARRIER
   }    # End of INEXT loop
 
#$% restore pending queue to free chain
call FREPND(rep$FirstPndIndx$i)
 
if (own$pointer != 0)                           #if "own" record updated
   {
    ioldfi = xown$FirstInvIndx$i
#    ioldfc = xown$FirstCorIndx$i       # jb removed 4/3/01
 
    #$% set first inventory index
    own$FirstInvIndx$i = ifinv
    PUTown$FirstInvIndx$i
 
    call FREINV(ioldfi)                         #add previous to free chain
 
#  jb  Note:  FRECOR called earlier, in RPPOS2  4/4/01
   }
 
return
end
 

 
 
Subroutine RPSDAM(rep$pointer,icode)
 
########################################################
#$%
#$% Purpose:   RPSDAM flags damage reports with
#$%            the code passed to it.
#$%
#$% Called By: RPKILL     RPDLVR     RPSENT
#$%
#$% Calls:     None
#$%
#$% Tables:    REP        DAM
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer  ICODE,REP$Pointer,     # jb  E2145 7/11/00
    DAM$Pointer,DAM$Nextindx$I, # jb  E2145 7/11/00
    DAM$Reportstatus$I          # jb  E2145 7/11/00
 
#$% get first damage index
dam$NextIndx$i = xrep$FirstDamIndx$i
 
while (dam$NextIndx$i != 0)                     #for each record in chain
   {
    #$% set DAM pointer to next index
    dam$pointer$to dam$NextIndx$i
 
    #$% get next index
    dam$NextIndx$i = xdam$NextIndx$i
 
    #$% set damage report status and store it
    dam$ReportStatus$i = icode
    putdam$ReportStatus$i
   }
 
return
end
 

 
 
Subroutine RPSRCN(rep$pointer,icode)
 
########################################################
#$%
#$% Purpose:   RPSRCN flags RECONN reports with
#$%            the code passed to it.
#$%
#$% Called By: RPKILL     RPDLVR     RPSENT
#$%
#$% Calls:     None
#$%
#$% Tables:    REP        RCN
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer ICODE,REP$Pointer,      # jb E2145  7/11/00
    RCN$Pointer,RCN$Nextindx$I  # jb E2145  7/11/00
 
#$% get first RECONN index
rcn$NextIndx$i = xrep$FirstRcnIndx$i
 
while (rcn$NextIndx$i != 0)             # for each record in chain;
   {
    rcn$pointer$to rcn$NextIndx$i #$% set RECONN pointer to next index
 
    putrcn$ReportStatus$i (icode)   #$% store RECONN report status
 
    rcn$NextIndx$i = xrcn$NextIndx$i #$% get next index for WHILE
   }
 
return
end
 

 
Subroutine RPPOS2(pnd$pointer,iunit,time,own$pointer)
 
########################################################
#$%
#$% Purpose:   RPPOS2 updates OWN entry from
#$%            report in PND
#$%
#$% Called By: RPPND2
#$%
#$% Calls:     FNDOWN
#$%
#$% Tables:    PND        OWN
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
REAL  TIME,                                  # jb E2145  7/11/00
    OWN$Timereported$F,OWN$Timeobserved$F,   # jb E2145  7/11/00
    OWN$Latitude$F,OWN$Longitude$F           # jb E2145  7/11/00
Integer IACFLG,IDUMMY,IUNIT,                 # jb E2145  7/11/00
    NOROOM,  PND$Pointer                     # jb E2145  7/11/00
Integer OWN$Pointer,OWN$Speed$I,             # jb E2145  7/11/00
    OWN$Course$I,OWN$Altitude$I,             # jb E2145  7/11/00
    OWN$Nbrac$I,OWN$Unit$I, own$type$i       # jb E2145   4/4/01
Integer  own$FirstCORindx$i                  # jb E2145   4/4/01
 
call FNDOWN(own$pointer,iunit,idummy,noroom)
 
#$% if no room
if (noroom != 0)
   {
    own$pointer = 0
    return
   }
 
own$Type$i = xown$Type$i    # jb (used twice below)        4/4/01
if (own$Type$i == $air$code) # jb If so, will call FRECOR, 4/5/01
    {                        # if there's a chain to clear out.
    own$FirstCORindx$i = Xown$FirstCORindx$i        # jb  4/4/01
    if(own$firstcorindx$i > 0)  # jb If there IS a chain, 4/3/01
        {
        call FRECOR(own$FirstCorIndx$i) # jb Delete it!  4/3/01
        own$firstcorindx$i = 0     # jb -- and initlz    4/5/01
        PUTown$firstcorindx$i      #  own$firstcorindx$i 4/5/01
        }
    }
 
#$% get time reported
own$TimeReported$f = xown$TimeReported$f
 
#$% if time is less than time reported (this is an old report)
if (time <= own$TimeReported$f)
   {
    own$pointer = 0
    return
   }
 
#$% get OWN time observed
own$TimeObserved$f = xown$TimeObserved$f
 
if (time < own$TimeObserved$f)
   {
    #$% save OWN latitude, longitude, speed, course
    own$Latitude$f  = xown$Latitude$f
    own$Longitude$f = xown$Longitude$f
    own$Speed$i     = xown$Speed$i
    own$Course$i    = xown$Course$i
 
    #$% if type is aircraft
    if (own$Type$i == $air$code)  # jb (no X)  4/4/01
       {
        #$% set aircraft flag to YES
        iacflg = $yes
        #$% save OWN altitude
        own$Altitude$i = xown$Altitude$i
        #$% save OWN number of aircraft
        own$NbrAc$i = xown$NbrAc$i
       }
    else
       {
        #$% set aircraft flag to NO
        iacflg = $no
       }
   }
 
#$% copy OWN information from PND entry
own$Duplicate$pnd
 
#$% if time is less than time observed
if (time < own$TimeObserved$f)
   {
    #$% store OWN latitude, longitude, speed, course
    PUTown$Latitude$f
    PUTown$Longitude$f
    PUTown$Speed$i
    PUTown$Course$i
 
    #$% if aircraft flag is YES
    if (iacflg == $yes)
       {
        #$% store altitude and number of aircraft
        PUTown$Altitude$i
        PUTown$NbrAc$i
       }
   }
 
#$% set OWN unit and store it
own$Unit$i = iunit
putown$Unit$i
 
#$% set OWN time reported and store it
own$TimeReported$f = time
putown$TimeReported$f
 
#$% store time observed
putown$TimeObserved$f
 
return
end
 

 
 
Subroutine RPINV2(pnd$pointer,own$pointer,ifirst)
 
########################################################
#$%
#$% Purpose:   RPINV2 updates and reports additional
#$%            inventory data.
#$%
#$% Called By: RPPND2
#$%
#$% Calls:     ADDINV
#$%
#$% Tables:    PND        OWN        INV
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer IFIRST,IDUMMY,NOROOM,           # jb E2145  7/11/00
    OWN$Pointer,INV$Pointer,PND$Pointer # jb E2145  7/11/00
 
#$% if OWN pointer is zero, return
if (own$pointer == 0)  return
 
#$% add an additional INV slot and connect it to a chain
call ADDINV(inv$pointer,ifirst,idummy,noroom)
 
#$% if no room, return
if (noroom != $no)  return
 
#$% copy INV information from PND entry
inv$Duplicate$pnd
 
return
end
 

 
 
Subroutine RPBAR2(bar$pointer,own$pointer,ifirst)
 
########################################################
#$%
#$% Purpose:   RPBAR2 updates sonobuoy table
#$%            from a report.
#$%
#$% Called By: RPDNN2
#$%
#$% Calls:     ADDCOR
#$%
#$% Tables:    BAR        OWN        COR
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer IDUMMY,IFIRST,KBARXX,NOROOM,     # jb E2145  7/11/00
    OWN$Pointer,COR$Pointer,BAR$Pointer  # jb E2145  7/11/00
 
#$% if OWN pointer is zero, return
if (own$pointer == 0)  return
 
#$% add an additional COR slot and connect it to a chain
call ADDCOR(cor$pointer,ifirst,idummy,noroom)
 
#$% if no room, return
if (noroom != $no)  return
 
#$% duplicate sonobuoy barrier information into COR entry
cor$Duplicate$bar
 
return
end
 

 
 
Subroutine RPSENT(rep$pointer)
 
########################################################
#$%
#$% Purpose:   RPSENT flags LCL and Damage and
#$%            RECONN data as being sent.
#$%
#$% Called By: REPOUT
#$%
#$% Calls:     RPSLCL     RPSDAM     RPSRCN
#$%
#$% Tables:    REP
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer  REP$Pointer,REP$Sendersatisfied$I   # jb E2145  7/11/00
 
#$% if report new ship, new aircraft, new ESM
if (xrep$NewShip$i != $no |
    xrep$NewAir$i  != $no |
    xrep$NewEsm$i  != $no )
   {
    #$% call to flag LCL detection data
    call RPSLCL(rep$pointer,$ReportSent$code)
   }
 
#$% set send satisfied and save
rep$SenderSatisfied$i = $yes
PUTrep$SenderSatisfied$i
 
#$% callflag damage and reconn reports
call RPSDAM(rep$pointer,$ReportSent$code)
call RPSRCN(rep$pointer,$ReportSent$code)
 
return
end
 

 
 
Subroutine RPREDY(rep$pointer)
 
########################################################
#$%
#$% Purpose:   RPREDY marks a waiting report as
#$%            ready to be sent.
#$%
#$% Called By: REPOUT
#$%
#$% Calls:     None
#$%
#$% Tables:    REP        UNT
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer REP$Pointer,REP$Inpreparation$I, # jb E2145  7/11/00
        UNT$Pointer,UNT$Reportwaiting$I  # jb E2145  7/11/00
 
#$% set preparation to NO and store
rep$InPreparation$i = $no
PUTrep$InPreparation$i
 
#$% set unit pointer to sender
unt$pointer$to xrep$SenderIndx$i
 
#$% set report waiting to NO and store
unt$ReportWaiting$i = $no
PUTunt$ReportWaiting$i
 
return
end
 

 
 
Subroutine RPSLCL(rep$pointer,icode)
 
########################################################
#$%
#$% Purpose:   RPSLCL flags LCL detection data
#$%            with the status code passed to it.
#$%
#$% Called By: RPSENT     RPKILL
#$%
#$% Calls:     None
#$%
#$% Tables:    REP        UNT        LCL
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
REAL  REP$Reporttime$F                  # jb E2145  7/11/00
Integer ICODE,REP$Pointer,UNT$Pointer,  # jb E2145  7/11/00
    LCL$Pointer, LCL$Nextindx$I,        # jb E2145  7/11/00
    LCL$Reportstatus$I                  # jb E2145  7/11/00
 
#$% get report time
rep$ReportTime$f = xrep$ReportTime$f
 
#$% set unit pointer to sender
unt$pointer$to xrep$SenderIndx$i
 
#$% get first LCL index
lcl$NextIndx$i = xunt$FirstLclIndx$i
 
#$% for each record in chain
while (lcl$NextIndx$i != 0)
   {
    #$% set LCL pointer and get next index
    lcl$pointer$to lcl$NextIndx$i
    lcl$NextIndx$i = xlcl$NextIndx$i
 
    #$% if report has begun and first detection time is not later than
    #$% report time
    if (xlcl$ReportStatus$i == $ReportBegun$code &
        xlcl$FirstDetTime$f <= rep$ReportTime$f  )
       {
        #$% set report status and store
        lcl$ReportStatus$i = icode
        putlcl$ReportStatus$i
       }
   }
 
return
end
 

 
 
Subroutine ADDCOR(cor$pointer,ifirst,idummy,noroom)
 
########################################################
#$%
#$% Purpose:   ADDCOR allocates one slot in the COR table
#$%            and adds it to the end of the COR chain.
#$%
#$% Called By: RPBAR2
#$%
#$% Calls:     None
#$%
#$% Tables:    COR
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer IDUMMY,     # jb E2145 (Unused ARGUMENT)    7/11/00
    IFIRST,INDEXX,NOROOM,         # jb E2145  7/11/00
    COR$Pointer,COR$Nextindx$I    # jb E2145  7/11/00
 
noroom = $no
 
index = Corner$First$Free                       #get first free slot
 
if (index == 0)                                 #if none free
   {
    noroom = $yes
    return
   }
 
if (ifirst == 0)                                #if chain currently empty
   {
    ifirst = index                              #begin at first free slot
   }
else                                            #otherwise
   {
    cor$NextIndx$i = index                      #connect free slot to previous
    putcor$NextIndx$i
   }
 
cor$pointer$to index
 
Corner$First$Free = xcor$NextIndx$i             #update first free slot
 
cor$NextIndx$i = 0                              #new slot is end of chain
putcor$NextIndx$i
 
return
end
 

 
 
Subroutine FREPND(index)                #restore PND chain to free chain
 
########################################################
#$%
#$% Purpose:   FREPND restores pending queue (for
#$%            reports awaiting communication) to
#$%            free chain.
#$%
#$% Called By: RPPND2     RPKILL
#$%
#$% Calls:     None
#$%
#$% Tables:    PND
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer INDEXX,ISAVE_PND_NEXTINDX_I,  # jb E2145  7/11/00
    INEXT,   ISAVE_PND_RECORDTYPE_I,  # jb E2145  7/11/00
    PND$Pointer, PND$Nextindx$I       # jb E2145  7/11/00
 
#$% if no free slots, return
if (index == 0)  return
 
#$% start at next index
inext = index
 
#$% for each record in chain
while (inext != 0)
   {
    #$% set PND pointer
    pnd$pointer$to inext
 
    #$% get next index
    inext = xpnd$NextIndx$i
 
    pnd$zero
   }
 
#$% insert slot at head of free list
pnd$NextIndx$i = Pending$First$Free
putpnd$NextIndx$i
 
#$% point to new head
Pending$First$Free = index
 
return
end
 

 
 
Subroutine FREINV(index)                #restore INV chain to free chain
 
########################################################
#$%
#$% Purpose:   FREINV restores inventory data
#$%            chain to free chain.
#$%
#$% Called By: RPPND2
#$%
#$% Calls:     None
#$%
#$% Tables:    INV
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer INDEXX,INEXT,             # jb E2145  7/11/00
    ISAVE_INV_NEXTINDX_I,         # jb E2145  7/11/00
    INV$Pointer,INV$Nextindx$I    # jb E2145  7/11/00
 
#$% if no free slots, return
if (index == 0)  return
 
#$% start at next index
inext = index
 
#$% for each record in chain
while (inext != 0)
   {
    #$% set INV pointer
    inv$pointer$to inext
 
    #$% set next index
    inext = xinv$NextIndx$i
 
    #$% clear INV
    inv$clear
   }
 
#$% insert slot at head of free list
inv$NextIndx$i = Inventory$First$Free
putinv$NextIndx$i
 
#$% point to new head
Inventory$First$Free = index
 
return
end
 

 
 
Subroutine FRECOR(index)                #restore COR chain to free chain
 
########################################################
#$%
#$% Purpose:   FRECOR restores corner of barriers
#$%            chain to free chain.
#$%
#$% Called By: RPPND2
#$%
#$% Calls:     None
#$%
#$% Tables:    COR
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Ron Williams
#$%
########################################################
BBcommon
 
Integer   ISAVE_COR_NEXTINDX_I,
          INDEXX,INEXT,             # jb E2145  7/11/00
          COR$Pointer,COR$Nextindx$I    # jb E2145  7/11/00
 
#$% if no free slots, return
if (index == 0)  return
 
#$% start at next index
inext = index
 
#$% for each record in chain
while (inext != 0)
   {
    #$% set COR pointer
    cor$pointer$to inext
 
    inext = xcor$NextIndx$i
 
    cor$clear
   }
 
#$% insert slot at head of free list
cor$NextIndx$i = Corner$First$Free
putcor$NextIndx$i
 
#$% point to new head
Corner$First$Free = index
 
return
end
 
