 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLCMB                        ECHO                       COB
#$%      GETSR  <WGLOAD>               ECHOH
#$%      GSLOTM <WGLOAD>               ECHOR
#$%      BADFLD <WGLOAD>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLCMB
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLCMB - GETSR *
#$%                                      - GSLOTM*
#$%                                      - BADFLD*
 

 
define(DEBUG,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbcob.inc"
include "ascii.inc"
 
define (BBImplicit, Implicit None)      # MJC 4/26/2000
 
subroutine wglcmb (reccnt,recsz,rec)    # load in the commbuoy scenario file
 
#########################################################
#$%
#$% Purpose:   WGLCMB loads in the commbuoy scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     BADFLD     ECHO       ECHOH
#$%            ECHOR      GETSR      GSLOTM
#$%
#$% Tables:    COB
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Ron Williams, Dana Wills
#$%
########################################################
 
BBcommon
 
Integer kk                         # jb E2209  11/29/00
integer reccnt,recsz,pnt
literal rec[1500]
 
integer LOOP, LEN, ISTAT, LPNT,
        COB$Pointer, COB$Life$I,
        COB$Multimsg$I, COB$Mtbf$I,
        COB$Timetorepair$I              # MJC 4/26/2000
literal COB$Type$C, COB$Comsuite1$C,
        COB$Comsuite2$C                 # MJC 4/26/2000
 
BBdeclare (COB$FullName$V)                  # jb  E2209    11/30/00
 
DEBUG call echov("<wglcmb:")
 
#    open(unit         = 31,
 
#$% if file empty
if (reccnt <= 1)
   {
    #$% send error message to user
    call echov ("Commbuoy File Empty")
    call echor
    return
   }
 
for (loop = 2; loop <= reccnt; )        # for each record in the file
   {
    call getsr (loop,recsz,rec)         # get scenario record
    len = rec[1]                        # save length
 
    #$% call to get commbuoy slots in table
    call gslotm (cob$pointer,$$cob,cob$entry,istat)
 
    #$% if status indicates file is full
    if (istat == $no)
       {
        #$% send error message to user
	call echov ("Items from ")
	call echohn (rec[3],$$MaxLit)
	call echov (" and on are not loaded.")
	call echor
	return
       }
 
    #$% get commbuoy name and save
    cob$type$c = rec[3]
    PUTcob$type$c
 
    lpnt = 1                            # save dummy last word pointer
    for (pnt = 4; pnt <= len; )         # for each word in the record
       {
	if (pnt == lpnt)                # if ==, didnt process.... error
	   {
	    call badfld (_              # display unknown field
			 "Commbuoy  ",  # file type
			 rec[3],        # record name
			 rec[pnt])      # ????? fld
 
            #$% increment pointer
	    pnt = pnt + 1
	   }
	lpnt = pnt
 
        #$% if record pointer at LIFE
	if      (rec[pnt] == 'LIFE')
	   {
            #$% get commbuoy life duration and save
	    cob$life$i = rec[pnt+1]
	    PUTcob$life$i
 
            #$% increment pointer
	    pnt = pnt + 2
	   }
 
        #$% else if record pointer at MULTI
	else if (rec[pnt] == 'MULTI')
	   {
            #$% if next pointer position is YES, set indicator to YES
	    if (rec[pnt+1] == 'YES') cob$multiMsg$i = $yes
            #$% else set indicator to NO
	    else                       cob$multiMsg$i = $no
            #$% save indicator value
	    PUTcob$multiMsg$i
 
            #$% increment pointer
	    pnt = pnt + 2
	   }
 
        #$% else if record pointer at COMM1
	else if (rec[pnt] == 'COMM1')
	   {
            #$% get name of first commsuite and save
	    cob$ComSuite1$c = rec[pnt+1]
	    PUTcob$ComSuite1$c
 
            #$% increment pointer
	    pnt = pnt + 2
	   }
 
        #$% else if record pointer at COMM2
	else if (rec[pnt] == 'COMM2')
	   {
            #$% get name of first commsuite and save
	    cob$ComSuite2$c = rec[pnt+1]
	    PUTcob$ComSuite2$c
 
            #$% increment counter
	    pnt = pnt + 2
	   }
 
        else if  ( rec [ pnt ] == 'MNFAL' )
          {
            #$% update blackboard with Mean time between failure data
            #$%from commcobte record
            cob$MTBF$I = rec [ pnt + 1 ]
 
            putcob$MTBF$I
 
            pnt = pnt + 2
          }
 
        else if  ( rec [ pnt ] == 'MNRPR' )
          {
            #$% update blackboard with Pulse value from commcobte record
            cob$TimeToRepair$I = rec [ pnt + 1 ]
 
            putcob$TimeToRepair$I
 
            pnt = pnt + 2
          }
 
        else if(rec[pnt] == 'NOMEN')  # jb E2209  11/29/00
          {
           COB$Fullname$V = ""
           kk = 0
           call vmovh (rec[pnt+1], 24, COB$Fullname$V, kk)
           putCOB$Fullname$V
           pnt = pnt + 4
          }
        else if(rec[pnt] == 'UDB')  # jb E2209  11/29/00
          {
           if      (rec[pnt+1] == 'YES') putCOB$UDB$i ($YES)
           else if (rec[pnt+1] != 'NO') putCOB$UDB$i (!$NO)
           pnt = pnt + 2
          }
 
       }                                # loop for next word in record
 
#   cob$last$to cob$pointer + cob$entry - 1
 
   }                                    # loop for next record
 
DEBUG call echo ($GREAT)
 
return
end
