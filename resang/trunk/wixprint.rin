
### WES version 3.1 converted to VAX11/780     dated- 15jan82
###
### module          smn#    prog init   comments
### ======          ====    =========   ===========================
### xprint         VAX00     kmd         modified code to work on
###                                      the VAX11/780 and to 
###                                      interface with the parser


### mod to version 3.0            dated- 07apr81
###
### module          smn#    prog init   comments
### ======          ====    =========   ===========================
### xprint          002     dew         added SOSUS VIEW format
###

#####   version 3.0  dated- 22dec80


# 


### mod a to version 3.0 (prelim) dated- 11dec80
###
### module          smn#    prog init   comments
### ======          ====    =========   ===========================
### xprint          001     dew         print common (user db) params
###

#####   version 3.0 (prelim) dated- 24nov80


#########################################################################
#  This code displays the information requested in the display command. #
#  The "DISPLAY" command used to be the "PRINT" command.  It was changed#
#  when the new parser was added to the system (Jan82) because the      #
#  initialization commands were combined with the other commands in the #
#  new parser program and a print command already existed in that file. #
#########################################################################

include "elevation.inc"             # joa 11/95 (E1422)
include "bbbom.inc"         
include "bbwet.inc"                 # joa 11/95 (E1422)
include "bbhwf.inc"                 # Heading/Wave Fuel Consumption Factors - joa 2/96 (E1467)
include "bbwvf.inc"                 # Wave Height Fuel Consumption Factors - joa 2/96 (E1467)

subroutine xprint(arg,                          # argument
                  ierror)
BBcommon
ElevationCommon

integer ierror,ilen
character ilat[12]
integer game_dtg
literal arg                  #VAX00 # arg holds the second argument of the
                                    # display command such as:
                                    # system, track, air, hfdf, comm, view

literal cstrip8
real    precover, pcrash, pmayday, pdisappear
integer iprt, i_switch_1
BBdeclare(WVF$Pointer, HWF$pointer, HWF$HDG$Index,
          unt$pointer, unt$status$i, unt$type$i)
BBDeclare(BOM$Pointer, BOM$TargetCode$i)
include "alsp_io_rat.inc"         

9009 format (80a1)
ierror = $yes
call echor

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$SYSTEM$)                     # SYSTEM
   {
    call echov ("  TIME (tags) ")
    if (time$tags == $no) call echov ("OFF")
    else                  call echov ("ON")
    call echor

    call echov ("  SAVE (interval of) ")
    call echoi (Save$Interval)
    call echov (" (with) ")
    call echoi (Save$Versions)
    call echov (" (versions) ")
    call echor

    #call echov ("  COMMON (user db save interval of) ")          # SMN-001
    #call echoi (CUDB$Interval)                                      # SMN-001
    #call echov (" (over) ")                                       # SMN-001
    #call echoi (CUDB$Set$Size)                                      # SMN-001
    #call echov (" (files) ")                                      # SMN-001
    #call echor                                                      # SMN-001

    call echov ("  RECORD (interval of) ")
    call echof (Time$Between$Records, 2)
    call echor

    call echov ("  NUMBER (of) STATION (entries extra) ")
    call echoi (Extra$Stations)
    call echor

    call echov ("  NUMBER (of) LOCAL ")
    call echov ("(un-correlated tracks to record) ")
    call echoi (Number$LCL$Record)
    call echor

    call echov ("  NUMBER (of) TRACK ")
    call echov ("(numbers to allocate) ")
    call echoi (Number$Track$Alloc)
    call echor


    call echov ("  LOCAL (record of uncorrelated ")
    call echov ("tracks) ON (for)")
    if (Record$LCL$Friendly != $no) call echov (" FRIENDLY (and foe) ")
    if (Record$LCL$Aircraft != $no) call echov (" AIRCRAFT")
    if (Record$LCL$Cruise   != $no) call echov (" CRUISE (missiles)")
    if (Record$LCL$Ground   != $no) call echov (" GROUND (units)")
    if (Record$LCL$Ships    != $no) call echov (" SHIPS")
    if (Record$LCL$Small    != $no) call echov (" SMALL (boats)") 
    call echor
    

    call echov ("  YEAR (of game) ")
    call echoi (int(start$year))
    call echor

    call echov ("  JULIAN (day of game) ")
    call echoi (julian$day)
    call echor

    call echov ("  ZULU (time of game start) ")
    call echoi (zulu$StartTime/60)
    call echov (" (hours) ")
    call echoiz (mod(zulu$StartTime,60),2)
    call echov (" (minutes) ")
    call echor

    call echov ("  POSITION ")
    ilen = 0
    call smovll (Weather$BaseLatitude,"NS",ilat,ilen)
    call echoh (ilat,ilen)
    call echo ($space)

    ilen = 0
    call smovll (Weather$BaseLongitude,"EW",ilat,ilen)
    call echoh (ilat,ilen)
    call echov (" (as s/w corner of) WEATHER (area)")
    call echor

    call echov ("  SIMULTANEOUS AIRCRAFT ")
    call echoi (Simultaneous$flights)
    call echor

    call echov ("  SIMULTANEOUS CRUISE (missiles) ")
    call echoi (Simultaneous$cruise)
    call echor

    call echov ("  SIMULTANEOUS SMALL (boats) ")
    call echoi (Simultaneous$boats)
    call echor

    call echov ("  SIMULTANEOUS GROUND (units) ")
    call echoi (Simultaneous$Ground)
    call echor

    call echov ("  SIMULTANEOUS GHOST (units) ")
    call echoi (Simultaneous$Ghosts)
    call echor

    call echov ("  PARALLEL (processing) ")
    if (Utilize$Parallel == $no) call echov ("OFF")
    else                         
        {
        call echov ("ON (with) ")
        call echoi (Utilize$Parallel)
        call echov (" (chunks per cpu)")
        }

    call echor

    call echov ("  REPLAY (capability) ")
    if (Provide$Replay == $no) call echov ("OFF")
    else                       call echov ("ON")
    call echor

    call echov ("  TEST (mode) ")
    if (Test$Mode == $OFF) call echov ("OFF")
    else                  call echov ("ON")
    call echor

    if (Test$Mode == $YES & Fixed$RandomValue != 0.0)
    {
        call echov ("  RANDOM (fixed) ")
        call echof (Fixed$RandomValue,102)
    }
    call echor

        
###########################################################################

    call echov ("  LIDAR (probability file as) ")
    if (LIDAR$File$Name != 0)
        call echohn (LIDAR$File$Name, $$MaxLit)
    else
        call echov ("<none>")
    call echor

    call echov  ("  TERRAIN (elevation data at resolution) ")
    call echoi  (elevation_region_resolution[1])
    call echov  (" (with southwest corner) ")
    ilen = 0
    call smovll (elevation_region_swlat[1],"NS",ilat,ilen)
    call echoh  (ilat,ilen)
    call echo   ($space)
    ilen = 0
    call smovll (elevation_region_swlon[1],"EW",ilat,ilen)
    call echoh  (ilat,ilen)
    call echov  (" (number of degrees across) ")
    call echoi  (elevation_region_width[1])
    call echov  (" (number of degrees up) ")
    call echoi  ( elevation_region_height[1] )
    call echor

    call echov  ("  TERRAIN MASKING (for detections) ")
    if (terrain_masking_flag == $OFF)  call echov ("OFF")
    else                               call echov ("ON")
    call echor
  
    call echov ("  SHORELINE CROSSING (check) ")
    if (shoreline_crossing_flag == $OFF)  call echov ("OFF")
    else                                  call echov ("ON")
    call echor
  
    call echov ("  ENVIRONMENT DIRECTORY (under [db.sonar_env]) ")
    call echohn (Environment$Subdir, $$Maxlit)
    call echor
  
    call echov ("  ENVIRONMENT FILE GOOD ")
    call echohn (EnvironmentGood$Name, $$Maxlit)
    call echor

    call echov ("  ENVIRONMENT FILE FAIR ")
    call echohn (EnvironmentFair$Name, $$Maxlit)
    call echor
  
    call echov ("  ENVIRONMENT FILE POOR ")
    call echohn (EnvironmentPoor$Name, $$Maxlit)
    call echor
  
    call echov ("  MAINTENANCE AIRCRAFT ")  # JOA 9/02 (E2306)
    if (AircraftMaintenance$Flag == $OFF) call echov ("OFF")
    else                                  call echov ("ON")
    call echor
  
    call echov ("  SYSTEM FAILURE AIRCRAFT ")
    if (AircraftSystemFailure$Flag == $OFF) call echov ("OFF")
    else                                    call echov ("ON")
    call echor
  
    call echov ("  SYSTEM FAILURE BOAT ")
    if (BoatSystemFailure$Flag == $OFF) call echov ("OFF")
    else                                call echov ("ON")
    call echor

    call echov ("  DETACHED SWAR KEYBOARD ")
    if (Detached$Mode == $NO) call echov ("NO")
    else                      call echov ("YES")
    call echor
  
  
    call echor
    ierror = $no
    }

###########################################################################

$no$vue if (arg == $lex$ALL$ | arg == $lex$VIEW$)               # VIEW
$no$vue    {
$no$vue     #call echov ("  LARGE (screen view) ")
$no$vue     #if (large$screen$view == 0 | large$screen$bottle == 0)
$no$vue     #   {
$no$vue     #    call echov ("OFF")
$no$vue     #   }
$no$vue     #else
$no$vue     #   {
$no$vue     #    if (large$screen$view == $exsup$view)
$no$vue     #       {
$no$vue     #        call echov ("EXSUP")
$no$vue     #       }
$no$vue     #    else if (large$screen$view <= $lastblue$view)
$no$vue     #       {
$no$vue     #        call echov ("BLUE ")
$no$vue     #        call echoi (large$screen$view - $exsup$view)
$no$vue     #       }
$no$vue     #    else
$no$vue     #       {
$no$vue     #        call echov ("ORANGE ")
$no$vue     #        call echoi (large$screen$view - $lastblue$view)
$no$vue     #       }
$no$vue     #
$no$vue     #    call echov (" BOTTLE ")
$no$vue     #    call echovn (large$screen$bottle)
$no$vue     #    
$no$vue     #   }
$no$vue     #call echor
$no$vue
$no$vue     #for (i = $first$view; i <= $last$view; i = i + 1)
$no$vue     #   {
$no$vue     #    vue$pointer$to i
$no$vue     #    call echov ("  BOTTLE ")
$no$vue     #    vue$bottle$c = Xvue$bottle$c
$no$vue     #    
$no$vue     #         call echov (vue$bottle$c)     
$no$vue     #    
$no$vue     #    call echov (" (for) ")
$no$vue
$no$vue     #    if (i == $exsup$view)
$no$vue     #       {
$no$vue     #        call echov ("EXSUP")
$no$vue     #       }
$no$vue     #    else if (i <= $lastblue$view)
$no$vue     #       {
$no$vue     #        call echov ("BLUE ")
$no$vue     #        call echoi (i - $exsup$view)
$no$vue     #       }
$no$vue     #    else
$no$vue     #       {
$no$vue     #        call echov ("ORANGE ")
$no$vue     #        call echoi (i - $lastblue$view)
$no$vue     #       }
$no$vue     #    call echor
$no$vue     #   }
$no$vue
$no$vue     #call echor
$no$vue     ierror = $no
$no$vue    }

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$EMI$)                        # EMI...
    {
    call echov ("  EMI GRANULARITY (as) ")
    call echoi (EMI$Granularity)
    call echor

    call echov ("  EMI ANALYSIS ")
    if (EMI$Analysis == $no) call echov ("OFF")
    else                     call echov ("ON")
    call echor

    call echov ("  EMI TIME (slice as) ")
    call echoi (EMI$TimeSlice)
    call echov (" (per second) ")
    call echor

    call echov ("  EMI MODE (of power sum as) ")
    if      (EMI$Phasing$Mode == $EMI$Worst)    call echov ("WORST")
    else if (EMI$Phasing$Mode == $EMI$RMS)      call echov ("RMS")
    else                                        call echov ("PHASE")
    call echor

    call echov ("  NUMBER (of) RADAR ")
    call echov ("(detections impacted by emi) ")
    call echoi (Number$Radar$Detections)
    call echor

    call echov ("  NUMBER (of) COMM ")
    call echov ("(transmissions impacted by emi) ")
    call echoi (Number$Comm$Transmitted)
    call echor

    call echov ("  NUMBER (of) INTRAEMI ")
    call echov ("(occurrences to record) ")
    call echoi (Number$Intra$Occurrences)
    call echor

    call echor
    ierror = $no
    }

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$LEVEL$)                      # LEVEL...
    {
    call echov ("  NUCLEAR (capability) ")
    if (Nuclear$Capable == $no) call echov ("OFF")
    else                        call echov ("ON")
    call echor

    call echov ("  CORRELATION (of) ESM ")
    if (Correlate$esm == $no) call echov ("OFF")
    else                      call echov ("ON")
    call echor

    call echov ("  CORRELATION (of) SONAR ")
    if (Correlate$sonar == $no) call echov ("OFF")
    else                        call echov ("ON")
    call echor

    call echov ("  LEVEL (of) AIR (defense as) ")
    call echoi (Level$AA)
    call echor

    call echov ("  LEVEL (of) ESM (processing as) ")
    call echoi (Level$ESM)
    call echor

    call echov ("  LEVEL (of) FLIGHT (operations as) ")
    call echoi (Level$FltOps)
    call echor

#    call echov ("  LEVEL (of) RADAR (processing as) ")
#    call echoi (Level$Radar)
#    call echor

    call echov ("  LEVEL (of) REJ (processing as) ")
    call echoi (Level$rej)
    call echor

    call echov ("  LEVEL (of) ACTIVE ")
    call echov ("(sonar processing as) ")
    call echoi (Level$ActiveSonar)
    call echor

    call echov ("  LEVEL (of) BISTATIC (processing as) ")      # 7/3/91
    call echoi (BISTATIC$Ops$Level)
    call echor

    call echov ("  LEVEL (of) ANTENNA (processing as) ")
    call echoi (Level$Antenna)
    call echor

    call echov ("  LEVEL (of) VISUAL (processing as) ")
    call echoi (Level$Visual)
    call echor

    call echov ("  LEVEL (of) IFF (processing as) ")
    call echoi (Level$IFF)
    call echor

    call echov ("  LEVEL (of) EMI (recording as) ")
    call echoi (EMI$Record$Level)
    call echor

    call echov ("  LEVEL (of) ENGAGEMENT AIR")    # clk 3/92
    call echov (" (processing as) ")
    call echoi (Level$Air$Engagement)
    call echor

    call echov ("  LEVEL (of) IR (processing as) ")              # clf 1/20/93
    call echoi (Level$ir)
    call echor

    call echor
    ierror = $no
    }

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$UAV$)                        # UAV...
    {
    call echov ("  UAV (engagement ceiling) ")
    call echoi (UAV$Engagement$Ceiling)
    call echor

    call echov ("  EOIR SWATH (angle) ")
    call echoi (EOIR$Swath$Angle)
    call echor

    call echov ("  EOIR RANGE (maximum) ")
    call echoi (EOIR$Range$Max)
    call echor

    call echov ("  EOIR DAMAGE (recog for destroyed) ")
    call echoi (EOIR$Damage$Destroyed)
    call echov (" (severe) ")
    call echoi (EOIR$Damage$Severe)
    call echov (" (mod) ")
    call echoi (EOIR$Damage$Moderate)  
    call echov (" (minor) ")
    call echoi (EOIR$Damage$Minor)
    call echor

    call echov ("  ISAR RANGE ")   # clk 4/28/92
    call echov ("(maximum for classification) ")
    call echof (ISAR$ID$MaxRange, 2)
    call echor

    call echov ("  ISAR PROBABILITY ")      # clk 4/28/92
    call echov ("(of classification) ")
    call echof (ISAR$ID$Probability * 100.0, 2)
    call echor

    call echor
    ierror = $no
    }

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$ROTHR$)                      # ROTHR...
    {
    ###########################################################################
    # ROTHR commands:
    # DEFINE ROTHR RANGE (limit) <nautical-miles>
    # DEFINE ROTHR DOPPLER (minimum speed for) [AIR | SURFACE] (targets as) <knots>
    # DEFINE ROTHR RADICAL (maneuver percent) <percent>

    call echov ("  ROTHR RANGE (limit) ")
    call echoi (Rothr$Max$Range)
    call echor

    call echov ("  ROTHR DOPPLER (minimum speed for)")
    call echov (" AIR (targets as) ")
    call echoi (Rothr$Min$Air$Doppler)
    call echor

    call echov ("  ROTHR DOPPLER (minimum speed for)")
    call echov (" SURFACE (targets as) ")
    call echoi (Rothr$Min$Surf$Doppler)
    call echor

    call echov ("  ROTHR RADICAL (maneuver percent) ")
    call echof (Rothr$Radical$Percent,2)
    call echor

    call echor
    ierror = $no
    }

if (arg == $lex$ALL$ | arg == $lex$TRACK$)                      # TRACK
   {
    call echov ("  SONAR (maximum passive range) ")
    call echoi (Passive$MaxRange)
    call echor

    call echov ("  BISTATIC (maximum passive range) ")
    call echoi (Max$Bistatic$Range)
    call echor

    call echov ("  ESM (default maximum detection range) ")
    call echoi (ESM$DefaultMaxRange)
    call echor

    call echov ("  DUCTING (strength at level) ")
    call echoi (ducting$strength)
    call echov (" (a factor of ")
    call echof (ducting$factor,3)
    call echov (")")
    call echor

    call echov ("  FALSE (submarine Target Strength) ")
    call echoi (FALSE$STRENGTH)    # jb            2/20/91
    call echor

    call echov ("  TMA (target motion analysis time) ")
    call echoi ($TMA$Criteria)
    call echor

    call echov ("  TRACK FADE (time) ")
    call echoi (Minutes$to$Yellow)
    call echor

    call echov ("  TRACK LOSS (time) ")
    call echoi (Minutes$to$Old)
    call echor

    call echov ("  TRACK HISTORY ")
    if (Maintain$Track$History == $NO) call echov ("OFF")
    else                               call echov ("ON")
    call echor

    call echov ("  TRACK TIME (tags) ")
    if      (Track$Time$Tag == $Off) call echov("OFF")
    else if (Track$Time$Tag == $On)  call echov("ON")
    else if (Track$Time$Tag == 2)    call echov("RANDOM")
    call echor

    call echov ("  CHAFF (life of) ")
    call echoi (chaff$life)
    call echov ("  (width) ")
    call echoi (chaff$width)
    call echov ("  (depth) ")
    call echoi (chaff$thickness)
    call echov ("  (lowfreq) ")
    call echoi (chaff$lowfreq)
    call echor

    call echov ("  COUNTERMEASURE (ph factor) ")
    call echoi (int(CounterMeasure$Factor * 100))
    call echor

    call echov ("  MAD RANGE (maximum) ")
    call echoi (MAD$Detection$Range)
    call echor

    call echov ("  MAD FACTOR ")
    call echof (MAD$Performance$Factor,3)
    call echor

    call echor
    ierror = $no
   }

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$COMM$)                       # COMM
   {
    call echov ("  BUOY COMM (depth) ")
    call echoi (BUOY$Depth$max)
    call echor

    call echov ("  BUOY DEPLOY (time) ")
    call echoi (BUOY$Deploy$time)
    call echor

    call echov ("  BUOY RETRIEVE (time) ")
    call echoi (BUOY$Retreive$time)
    call echor

    call echov ("  BUOY SURVIVAL (speed) ")
    call echoi (BUOY$Survival$speed)
    call echor

    call echov ("  MAST COMM (depth) ")
    call echoi (MAST$Depth$max)
    call echor

    call echov ("  MAST DEPLOY (time) ")
    call echoi (MAST$Deploy$time)
    call echor

    call echov ("  MAST RETRIEVE (time) ")
    call echoi (MAST$Retreive$time)
    call echor

    call echov ("  MAST SURVIVAL (speed) ")
    call echoi (MAST$Survival$speed)
    call echor

    call echov ("  WIRE COMM (depth) ")
    call echoi (WIRE$Depth$max)
    call echor

    call echov ("  WIRE DEPLOY (time) ")
    call echoi (WIRE$Deploy$time)
    call echor

    call echov ("  WIRE RETRIEVE (time) ")
    call echoi (WIRE$Retreive$time)
    call echor

    call echov ("  WIRE SURVIVAL (speed) ")
    call echoi (WIRE$Survival$speed)
    call echor

    call echor
    ierror = $no
   }

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$HFDF$)                       # HFDF
   {
    call echov ("  POSITION ")
    ilen = 0
    call smovll (HFDF$BaseLatitude,"NS",ilat,ilen)
    call echoh (ilat,ilen)
    call echo ($space)
    ilen = 0
    call smovll (HFDF$BaseLongitude,"EW",ilat,ilen)
    call echoh (ilat,ilen)
    call echov (" (as s/w corner of) HFDF (area)")
    call echor


    call echov ("  HFDF BEAM (width, fixed orange sites) ")
    call echoi (int(HFDF$BWidth$Orange$Fixed*180/$pi))
    call echov (" (mobile orange) ")
    call echoi (int(HFDF$BWidth$Orange$Mobile*180/$pi))
    call echor
    call echov ("            (fixed blue sites) ")
    call echoi (int(HFDF$BWidth$Blue$Fixed*180/$pi))
    call echov (" (mobile blue) ")
    call echoi (int(HFDF$BWidth$Blue$Mobile*180/$pi))
    call echor

    call echov ("  HFDF RANGE (for mobile detections) ")
    call echoi (HFDF$MobileDetectRange)
    call echov (" (prob detect) ")
    call echoi (int(HFDF$MobileDetectProb*100))
    call echor

    call echov ("  HFDF TIME (till track old) ")
    call echoi (HFDF$Time$track)
    call echov (" (for ship ellipse update) ")
    call echoi (HFDF$Time$ellipse$ship)
    call echor
    call echov ("            (for air ellipse) ")
    call echoi (HFDF$Time$ellipse$air)
    call echor

    call echov ("  SOSUS VIEW (blue) ")                            #smn002
    call echoi (SOSUS$View - $FirstBlue$view + 1)                     #smn002
    call echor                                                        #smn002

    call echov ("  SOSUS TIME (till track old) ")
    call echoi (SOSUS$Time$track)
    call echov (" (for ellipse update) ")
    call echoi (SOSUS$Time$ellipse)
    call echor
    call echov ("             (glimpse interval) ")
    call echoi (SOSUS$Glimpse$Interval)
    call echor

    call echov ("  SWABS VIEW BLUE ")                           
    call echoi (SWABS$B_View - $FirstBlue$view + 1)
    call echor                                                       
    call echov ("  SWABS VIEW ORANGE ")                           
    call echoi (SWABS$O_View - $FirstOrange$view + 1)
    call echor                                                       

    call echor
    ierror = $no
   }

###########################################################################

if (arg == $lex$ALL$ | arg == $lex$AIR$)                        # AIR
   {
    call echov ("  NIGHT (factor) ")
    call echoi (int(Night$factor*100))
    call echor

    call echov ("  SEASTATE (factor) ")
    call echoi (int(SeaState$factor*100))
    call echor

    call echov ("  ENGAGE (recover factor) ")
    call echoi (int(Recover$engage$factor*100))
    call echor

    call echov ("  FATIGUE (launch factor) ")
    call echoi (int(Launch$fatigue$factor*100))
    call echor

    call echov ("  LAUNCH (wind factor for helicopter) ")
    call echoi (int(Launch$wind$factor$helo*100))
    call echov (" (fixed wing) ")
    call echoi (int(Launch$wind$factor$fixed*100))
    call echor

    call echov ("  WIND (speed max for helicopter) ")
    call echoi (Wind$max$helo)
    call echov (" (max for fixed wing) ")
    call echoi (Wind$max$fixed)
    call echov (" (min) ")
    call echoi (Wind$min$fixed)
    call echor

    PRecover   = BingoRcvr$CumProb
    PCrash     = BingoCrash$CumProb - PRecover 
    PMayday    = BingoMayday$CumProb - PRecover - Pcrash 
    PDisappear = BingoNoMayday$CumProb - PRecover - Pcrash - PMayday 

    call echov ("  AIR (probabilities after a system ")
    call echov ("failure for crash on deck) ")
    call echoi (int(PCrash * 100 + 0.5))                # +0.5  5/9/83
    call echor

    call echov ("      (ditch w/mayday) ")
    call echoi (int(PMayday *100 + 0.5))                # +0.5  5/9/83

    call echov ("  (ditch w/o mayday) ")
    call echoi (int(PDisappear * 100 + 0.5))            # +0.5  5/9/83

    call echov ("  # (Recover ok) ")
    call echoi (int(PRecover *100 + 0.5))               # +0.5  5/9/83
    call echor

    ######################################################################
    # Air-to-air upgrade algorithm variables                      clk 3/92
    call echov ("  INTERCEPT RATIO (for probability of success)" )
    call echoi (int(PSI$Ratio*100))
    call echor

    call echov ("  INTERCEPT MINIMUM (probability of success) ")
    call echoi (int(PSI$Min*100))
    call echor

    call echov ("  INTERCEPT LOW (altitude/low ")
    call echov ("aem probability of success) ")
    call echoi (int(PSI$Low*100))
    call echor

    call echov ("  INTERCEPT LPD (low altitude/high ")
    call echov ("aem probability of success) ")
    call echoi (int(PSI$LowPD*100))
    call echor

    call echov ("  INTERCEPT NIGHT (with low aem ")
    call echov ("probability of success) ")
    call echoi (int(PSI$Nite*100))
    call echor

    call echov ("  INTERCEPT NPD (night/high ")
    call echov ("aem probability of success) ")
    call echoi (int(PSI$NitePD*100))
    call echor

    call echov ("  INTERCEPT HOLD (minutes from")
    call echov (" time of intercept) ")
    call echoi (PSI$Hold)
    call echor

    call echov ("  CONTINUE DAY (probability ")
    call echov ("of continuing engagement) ")
    call echoi (int(DayContEngage$Prob$Blue*100))
    call echov (" BLUE")
    call echor

    call echov ("  CONTINUE NIGHT (probability")
    call echov (" of continuing engagement) ")
    call echoi (int(NightContEngage$Prob$Blue*100))
    call echov (" BLUE")
    call echor

    call echov ("  CONTINUE DAY (probability ")
    call echov ("of continuing engagement) ")
    call echoi (int(DayContEngage$Prob$Orange*100))
    call echov (" ORANGE")
    call echor

    call echov ("  CONTINUE NIGHT (probability ")
    call echov ("of continuing engagement) ")
    call echoi (int(NightContEngage$Prob$Orange*100))
    call echov (" ORANGE")
    call echor

    call echov ("  TAILCHASE (minutes) ")
    call echoi (Tail$Chase)
    call echor

    call echov ("  REACTION (to attack probability of) ")
    call echof (ReactToAttack$Prob,2)
    call echor
    ######################################################################
    # air-to-air upgrade scaling values             SMM 5/4/92

    call echov ("  SCALE (probability scalar for) NIGHT ")
    call echof (Night$Scale,2)
    call echor

    call echov ("  SCALE (probability scalar for) SPEED ")
    call echoi (Speed$Scale)
    call echor

    call echov ("  SCALE (probability scalar for) ")
    call echov ("TARGET (target difficulty multiplier scalar,")
    call echor
    call echov ("      overall) ")
    call echof (Target$Scale$Orange,2)
    call echov (" (for) ORANGE (firing at blue view)") 
    call echor

    call echov ("  SCALE (probability scalar for) ")
    call echov ("TARGET (target difficulty multiplier scalar,")
    call echor
    call echov ("      overall) ")
    call echof (Target$Scale$Blue,2)
    call echov (" (for) BLUE (firing at orange view)") 
    call echor

    call echov ("  SCALE (probability scalar for) ALTITUDE ")
    call echoi (Altitude$Scale)
    call echor

    call echov ("  SCALE (probability scalar for) AIR")
    call echov (" (Firing Opportunity For Air-To-Air) ")
    call echor
    call echov ("      ")
    call echof (AirToAir$Prob$Launch$Orange,2)
    call echov (" (for) ORANGE (firing at blue view)")     
    call echor

    call echov (  "  SCALE (probability scalar for) AIR ")
    call echov (  "(Firing Opportunity For Air-To-Air) ")
    call echor
    call echov ("      ")
    call echof (AirToAir$Prob$Launch$Blue,2)
    call echov (" (for) BLUE (firing at blue view)")     
    call echor
    
    call echov ("  CRUISE (missile max speed for ")
    call echov ("air-to-air engagement) ")
    call echof (MaxCruiseMissile$Speed,2)
    call echor

    call echor
    ierror = $no
   }

###########################################################################
###########################################################################

if (arg == $lex$ALL$ | arg == $lex$ANALYTICAL$) #--- thegreat 1/88
   {
    call echov ("  ANALYTICAL (run) ")
    if (Analytical$run == YES) call echov(" ON")
    else                       call echov(" OFF")
    call echor

    call echov("  DATA (collection) ")
    if (skip$DataCollect == NO ) call echov(" ON")
    else                         call echov(" OFF")
    call echor

    call echov("  MINUTE (to) RANDOMIZE ")
    call echoi(Minute$to$Randomize)
    call echor

    for (iprt = 1 ; iprt <= random$tbl$entry ; iprt = iprt + 1)
        {
         call echov("  NEXT RANDOM (seed) ")
         call echoi(random$tbl$seed(iprt))
         call echor
        }

    call echor
    ierror = $no
   }

###########################################################################
###########################################################################

if (arg == $lex$ALL$ | arg == $lex$FUEL$)    # joa 2/96 (E1467)
  {
   call echov  ("  FACTOR WAVE (height on ship fuel consumption) ")
   call echor
   call echov ("   ")
   for (WVF$Pointer$First; WVF$Pointer$OK; WVF$Pointer$Next)
     {
      call echof (xWVF$WaveFuelFactor$F, 301)
      call echov (" ")
     }
   call echor

   call echov  ("  FACTOR HEADING")
   call echor
   HWF$Pointer$First
   call echov  ("    (into waves less than 4 ft) ")
   HWF$HDG$Index = HeadingInto$Waves
   call echof  (xHWF$HDG$FuelFactor$F, 301)
   call echor
   call echov  ("    (across waves less than 4 ft) ")
   HWF$HDG$Index = HeadingAcross$Waves
   call echof  (xHWF$HDG$FuelFactor$F, 301)
   call echor
   call echov  ("    (with waves less than 4 ft) ")
   HWF$HDG$Index = HeadingWith$Waves
   call echof  (xHWF$HDG$FuelFactor$F, 301)
   call echor

   HWF$Pointer$Next
   call echov  ("    (into waves 4 ft or more) ")
   HWF$HDG$Index = HeadingInto$Waves
   call echof  (xHWF$HDG$FuelFactor$F, 301)
   call echor
   call echov  ("    (across waves 4 ft or more) ")
   HWF$HDG$Index = HeadingAcross$Waves
   call echof  (xHWF$HDG$FuelFactor$F, 301)
   call echor
   call echov  ("    (with waves 4 ft or more) ")
   HWF$HDG$Index = HeadingWith$Waves
   call echof  (xHWF$HDG$FuelFactor$F, 301)
   call echor

   call echov  ("  FUEL SHIP (consumption) ")
   if(ShipFuelConsumption$Flag == $ON)
     call echov ("ON")
   else
     call echov ("OFF")
   call echor

   call echov  ("       AIRCRAFT (consumption) ")
   if(AirFuelConsumption$Flag == $ON)
     call echov ("ON")
   else
     call echov ("OFF")
   call echor

   call echov  ("      BOAT (consumption) ")
   if(BoatFuelConsumption$Flag == $ON)
     call echov ("ON")
   else
     call echov ("OFF")
   call echor

   # Display individual fuel consumption states
   for (UNT$Pointer$First; UNT$Pointer$Ok; UNT$Pointer$Next)
     {
      if (xUNT$InUse$I == $no)  # if slot is not in use, skip it
        next

      UNT$Status$I = xUNT$Status$I                # get status
      if (UNT$Status$I == $BeingDeleted$code |
          UNT$Status$I == $DeadInWater$code  |
          UNT$Status$I == $Sinking$code      )
        next

      if (xUNT$GhostedUnit$I == $yes)
        NEXT

      UNT$Type$I = xUNT$Type$I

      switch (UNT$Type$I)
        {
         case $Surface$Code, $SurfaceWithAC$Code, $Air$Code :
           {
            if (xUNT$FuelConsumptionFlag$I == $OFF)
              {
               call echov ("For ")
               call echohn (xUNT$Name$C, $$Maxlit)
               call echov ( " CONSUMPTION OFF")
               call echor
              }   # end of if unit is not processing fuel consumption
           }   # end of case boat, surface platform, or aircraft
        }   # end of switch statement
     }   # end of loop through the unit table to display fuel states
  }   # end of if DISPLAY ALL or DISPLAY FUEL
###########################################################################
###########################################################################

if (arg == $lex$ALL$ | arg == $lex$MINES$) 
  {
   call echov  ("  Mine Information")
   call echor
   for (BOM$Pointer$First; BOM$Pointer$OK; BOM$Pointer$Next)
     {
      if (xBOM$TYPE$I != $MINE$CODE) next

        call echov (" Mine ")
        call echohn (xBOM$Name$C, $$Maxlit)
        call echov (" Payload(pnds) = ")
        call echoi (xBOM$Weight$I)
        call echov (" Range(yds) = ")
        call echoi (xBOM$MaxRangeYards$I)
        call echov (" Target = ")
        BOM$TargetCode$i = XBOM$TargetCode$i
        if      (BOM$TargetCode$i == $Surface$Code) call echov ("Surface")
        else if (BOM$TargetCode$i == $Sub$Code)     call echov ("Subsurface")
        else                                        call echov ("Both")
        call echor
     }
   ierror = $no

  }   # end of if DISPLAY ALL or DISPLAY MINES
###########################################################################


###########################################################################
###########################################################################

if (arg == $lex$ALL$ | arg == $lex$GAME$)
   {
    call echov  ("  TIME SPEC ")
    call echoi  (Nint(time$spec))
    call echor

    call echov  ("  CYCLE TIME ")
    call echoi  (cycle$time)
    call echor

    call echov  ("  CYCLE COUNT ")
    call echoi  (cycle$count)
    call echor

    call echov  ("  GAME MIN ")
    call echoi  (game$minute)
    call echor

    call echov  ("  ZULU TIME ")
    call echoiz (Game_dtg (Game$time), 6)   # clk 11/95 (E1505)
    call echor

    call echov  ("  GAME RATE ")
    call echof  (cycle$game$rate, 602)
    call echor

    call echov  ("  AVG RATE ")
    call echof  (Average$game$rate, 602)
    call echor

    call echov  ("  CYCLE RECURRENCE (motion) ")
    call echoi  (motion$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (flight ops) ")
    call echoi  (flight$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (rej) ")
    call echoi  (rej$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (active sonar) ")
    call echoi  (ActiveSonar$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (passive sonar) ")
    call echoi  (PassiveSon$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (eoir) ")
    call echoi  (eoir$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (visual) ")
    call echoi  (visual$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (sosus) ")
    call echoi  (sosus$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (swab) ")
    call echoi  (swabs$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (survsat) ")
    call echoi  (survsat$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (rothr) ")
    call echoi  (rothr$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (comms and hfdf) ")
    call echoi  (comms$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (ir) ")
    call echoi  (ir$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (engage) ")
    call echoi  (engage$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (mad) ")
    call echoi  (mad$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (lidar) ")
    call echoi  (lidar$recurrence)
    call echor

    call echov  ("  CYCLE RECURRENCE (message generator) ")
    call echoi  (message$recurrence)
    call echor

    call echov  ("  ALSP GAME (joined) ")
    if (alsp$game == $no)
        {
        call echov ("OFF")
        }
    else 
        {
        if (alsp$active != $no) call echov ("YES")
        else                    call echov ("NO")

        call echov  (" (confed=")
        call echoi  (confederation)
        call echov  (",  actor=")
        call echoi  (actor)
        call echov  (")")
        call echor

        call echov ("  ALSP VIEW (for ghosts as) ")
        call echoi (ALSP$BlueGhost$View - $FirstBlue$view + 1)
        call echov (" (for) BLUE ")
        call echor

        call echov ("  ALSP VIEW (for ghosts as) ")
        call echoi (ALSP$OrangeGhost$View - $FirstOrange$view + 1)
        call echov (" (for) ORANGE ")
        call echor

        call echov ("  ALSP FEDERATION (number) ")
        call echoi (ALSPConfederation$Number)
        call echor

        call echov ("  ALSP FEDERATE (number) ")
        call echoi (ALSPActor$Number)
        call echor

        call echov ("  ALSP AIRSUPPORT (ghosts chop) BLUE VIEW ") # JOA 9/02 (E2304)
        call echoi (ALSP$BlueAirSupportGhost$View - $FirstBlue$view + 1)
        call echor

        call echov ("  ALSP LOGGING ") # JOA UFL05
        if (ALSP$LOGGING == $ON) call echov ("ON")
        else                     call echov ("OFF")
        }
    call echor        


    call echov  ("  DIS GAME ")
    if (DIS$game == $no)
        {
        call echov ("OFF")
        call echor        
        }
    else 
        {
        call echov  ("ON")
        call echor        

        call echov ("  DIS VIEW (for ghosts as) ")
        call echoi (DIS$Blue$View - $FirstBlue$view + 1)
        call echov (" (for) BLUE ")
        call echor

        call echov ("  DIS VIEW (for ghosts as) ")
        call echoi (DIS$Orange$View - $FirstOrange$view + 1)
        call echov (" (for) ORANGE ")
        call echor

        call echov ("  DIS (processing is) ")
        if (RTU$Passive == $YES) call echov ("PASSIVE")
        else                     call echov ("ACTIVE")
        call echor
        }

    if (JTIDS$Capable$Game != $no)
        {
        call echov  ("  JTIDS (capable) ")   # clk 11/95 (E1469)
        if (JTIDS$Interface$State == $no)   call echov ("  [not active]")
        else                                call echov ("  [connected]")
        call echor        
        }

    call echov  ("  CEC Capable Game = ")   # clk 10/96 (E1695)
    if (CEC$Interface$State == $CEC$NonCEC_Game)                    call echov ("NO")
    else if (CEC$Interface$State == $CEC$Interface_Disconnected)    call echov ("YES - NOT ACTIVE")
    else                                                            call echov ("YES - CONNECTED")
    call echor        

    call echov  ("  JTMD Participating Game = ")   # clk 4/96 (E1536/E1561)
    if (JTMD$Participating$Game != $no)
       call echov ("YES")
    else
       call echov ("NO")
    call echor        

    ierror = $no
   }

###########################################################################

return
end

