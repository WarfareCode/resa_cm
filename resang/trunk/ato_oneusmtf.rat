include "ascii.inc"
 
define (number_args, 4)         # prescript file name
 
undefine write   # use the standard fortran write statement
undefine read
undefine err
 
program ATO_oneusmtf
#########################################################################
#$%
#$% Purpose:    This program creates a file for each mission from the
#$%             USMTF ATO file
#$%
#$% Calls:      initr4         <rlib.olb>
#$%             read_arguments
#$%             ctoi
#$%             remark
#$%             exit
#$%             smov..
#$%             echo..
#$%             write
#$%             close
#$%
#$% Tables:     global variables
#$%
#$% Date:       Aug 2012
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
 
integer          arg_len[number_args]
vaxcharacter*80  args[number_args], params
 
vaxcharacter*80  ato_root
vaxcharacter*80  atoid
vaxcharacter*80  atoid_update
vaxcharacter*80  infile
 
vaxcharacter*80  atoid_dir
 
integer kk, atodir_len
 
call initR4
 
call Read_Arguments (number_args, args, arg_len, params)
 
ato_root     = args[1][1:arg_len[1]]
atoid        = args[2][1:arg_len[2]]
atoid_update = args[3][1:arg_len[3]]
infile       = args[4][1:arg_len[4]]
 
# Get ato directory
atoid_dir = ""
kk = 0
call smovvn(ato_root, atoid_dir, kk)
call smovv("/", atoid_dir, kk)
call smovvn(atoid, atoid_dir, kk)
call smovv("/",atoid_dir, kk)
call smovvn(atoid_update, atoid_dir, kk)
call smovv("/", atoid_dir, kk)
 
 
call do_preprep (atoid_dir, infile)
 
End

Subroutine do_preprep (atoid_dir, infile)
implicit none
 
vaxcharacter*80  infile
 
vaxcharacter*80  atoid_dir
vaxcharacter*80  t_atodir
vaxcharacter*80  prefile
vaxcharacter*80  outfile
 
integer equal, getatowrd, length
integer k, kk, i
integer name_len, ipos, isize
integer return_val
integer t_len, atodir_len
integer np
integer mission_cnt
logical NavyTasking
logical USTasking
logical inMission
 
vaxcharacter    a_line*140
vaxcharacter    t_line_v*140
character       t_line[140]
equivalence     (t_line, t_line_v)
 
character my_misn[10]
vaxcharacter*10 my_misn_v
equivalence (my_misn, my_misn_v)
 
character keyword[30000]
character token[30000]
character mtype[300]
character misn[300]
character country[300]
 
string C$TSKCNTRY "TSKCNTRY"
string C$SVCTASK  "SVCTASK"
string C$CNXMSN   "CNXMSN"
string C$AMSNDAT  "AMSNDAT"
string C$MSNACFT  "MSNACFT"
string C$AMPN     "AMPN"
string C$DEPLOC   "DEPLOC"
string C$ARRLOC   "ARRLOC"
string C$AMSNLOC  "AMSNLOC"
string C$GTGTLOC  "GTGTLOC"
string C$MTGTLOC  "MTGTLOC"
string C$ARINFO   "ARINFO"
string C$US       "US"
string C$N        "N"
 
prefile = ""
kk = 0
call smovvn(atoid_dir, prefile, kk)
call smovvn(infile, prefile, kk)
 
open(unit    =   10,                            #open input file
     file    =   prefile,
     status  =  'old',
     access  =  'sequential',
     recl    =   140,
     iostat  =   return_val)
 
if (return_val != 0)
{
    print *, prefile," USMTF ATO file not found"
    return
}
 
mission_cnt = 0
repeat
{
    #read USMTF ATO file
    read (10,9001,end=8002,err=8001) a_line
    9001 format (A)
    call Trim_Compress (a_line, t_line_v, kk)
    t_len = kk
    if (t_len == 0) next
 
	 call smov(EOS, t_line, kk)
    call upper (t_line)
	t_line_v[kk:kk] = " "			# Eliminate EOS
 
    ipos = 0
    isize = getatowrd (t_line, ipos, keyword)
 
    #!------------------------------------------
    #! Set country tasking
    if (equal (keyword,C$TSKCNTRY) == YES)
    {
        isize = getatowrd (t_line, ipos, country)
        if (equal(country, C$US) == YES)
            USTasking = .true.
        else
        {
            USTasking = .false.
            NavyTasking = .false.
        }
        next
    }
    #!------------------------------------------
    #! Set Navy tasking
 
    if (equal (keyword,C$SVCTASK) == YES)
    {
        isize = getatowrd (t_line, ipos, keyword)
        if (equal(keyword, C$N) == YES)
            NavyTasking = .true.
        else
            NavyTasking = .false.
        next
    }
 
    # Only process us navy missions
    if (USTasking == .false.) next
    if (NavyTasking == .false.) next
 
    if ((equal(keyword, C$AMSNDAT) == YES | equal(keyword, C$MTGTLOC) == YES) &
         inMission == .true. & length(my_misn) != 0)
    {
        close(unit=11)
    }
 
    if (inMission == .false.)
    {
        if (equal(keyword, C$AMSNDAT) == YES | equal(keyword, C$MTGTLOC) == YES)
            inMission = .true.
        else
            next
    }
 
    if (equal(keyword, C$AMSNDAT) == YES)
    {
        #2000 AMSNDAT/1021/-/-/-/CAS/-/-/DEPLOC:NABE/ARRLOC:NABE//
        #2004 AMSNDAT/F/0250/-/-/-/REC/-/-/DEPLOC:RODN/032120IJUN/
        #             ARRLOC:RODN/040825IJUN//
        isize = getatowrd (t_line, ipos, token)  # 2 not used
        isize = getatowrd (t_line, ipos, misn)   # 3 mission number
        isize = getatowrd (t_line, ipos, token)  # 4 not used
        isize = getatowrd (t_line, ipos, token)  # 5 not used
        isize = getatowrd (t_line, ipos, token)  # 6 not used
        isize = getatowrd (t_line, ipos, mtype)  # 7 mission type
 
        #!------------------------------------------
        #! Skip Ground alert mission types
        #!------------------------------------------
        if (mtype[1] == $LETG)
        {
            inMission = .false.
            next
        }
        #!------------------------------------------
        #! Get Mission Number
        kk = 0
        call smovhn (misn, ARB, my_misn, kk)
        call smov   (EOS, my_misn, kk)
    }
 
    if (equal(keyword, C$MTGTLOC) == YES)
    {
        # sample raw ato 2004
        #  1     2  3   4  5           6           7                  8  9 a
        #MTGTLOC/P/0445/-/NET:032221I/NLT:032236I/ID:0380-06193PA001/UNK/C/2
        #   b   c   d     e                           f
        #/00042/-/M00R6B/DMPIT:3954.0980N12747.7145E/WE//
        isize = getatowrd (t_line, ipos, token)  # 2 Ignore
        isize = getatowrd (t_line, ipos, misn)   # 3 Mission Number
        #!------------------------------------------
        #! Get mission number
        kk = 0
        call smovhn (misn, ARB, my_misn, kk)
        call smov   (EOS, my_misn, kk)
    }
 
    if (equal(keyword, C$MTGTLOC) == YES | equal(keyword, C$AMSNDAT) == YES)
    {
		call fold(my_misn)
		outfile = ""
		kk = 0
		call smovvn(atoid_dir, outfile, kk)
		call smovvn(my_misn_v, outfile, kk)
		call smovvn(".usmtf", outfile, kk)
 
        open(unit    =   11,                            #open output file
             file    =   outfile,
             status  =  'unknown',
             access  =  'sequential',
             recl    =   120,
             iostat  =   return_val)
 
        if (return_val != 0)
        {
            print *, "Error opening USMTF mission file ", outfile
            break
        }
        mission_cnt = mission_cnt + 1
    }
 
    write (11,9002) "#",t_line_v[1:t_len]
 
 
9002    format(A,A)
 
}
 
repeat
    {
    break
 
    8001 continue       # Comes here for ERROR on open or READ
    }
repeat
    {
    break
 
    8002 continue       # Comes here for END
    }
 
close (unit=10)
close (unit=11)
 
Print 9003, "USMTF ATO mission files created = ", mission_cnt
9003 format (1x, A, i4)
 
return
end
