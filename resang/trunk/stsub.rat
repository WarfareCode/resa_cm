 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 9-mar-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw             modularized routine and made compatible with
###                     use of search keys in main driver;
###                     added checks on validity of data to avoid
###                     problems which could result now that the blackboard
###                     can be read at any time
###
 
###
### mod to version 3.0          dated 5-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 sfc             changed routine to write position and logistics
###                     data from the OWN & INV Tables to the status board;
###
 
 
#####   version 3.0     dated 22-dec-1980
 
 
# 
 
 
#$%        MODULE                 UTILITY               DATA
#$%     SUBROUTINES             SUBROUTINES            TABLES
#$%     ===========             ===========            ======
#$%
#$%        SUBSTA                  OUTH                 OWN
#$%        SUBTIT                  OUTI                 UNT
#$%        SUBHED                  SMOVH                EMC
#$%        SUBSUB                  SMOVIZ               RVU
#$%        NXTSUB                  SMOVIB
#$%        SUBENT                  INT
#$%        SUBNUN                  OUTV   # jb    2/3/00
#$%        COMPAR<STATUS>
#$%        OWNSTA<STATUS>
#$%        FMTEXP<STATUS>
#$%        LSTEXP<STATUS>
#$%
#$%
#$%    NOTES:
#$%    =====
#$%
#$%     1. <filename> indicates where subroutine is located.
#$%
#$%     2.  Utility subroutines not shown on flowchart.
#$%
#$%     3.  * indicates no other subroutines called.
#$%
#$%
#$%    FLOWCHART FOR FILE SUBSTA
#$%    =========================
#$%
#$%     STDISP<STATUS> - SUBSTA - SUBTIT *
#$%                             - SUBSUB - SUBHED *
#$%                                      - SUBNUN *
#$%                                      - NXTSUB - COMPAR *
#$%                                      - SUBENT - OWNSTA *
#$%                                               - FMTEXP *
#$%                                               - LSTEXP *
 
 
# 
 
 
include "bbcode.inc"                                  # blackboard defines
include "bbctl.inc"
include "ascii.inc"                                   # include ascii constants
include "bbunt.inc"                       # jb Replaces DUP  4/4/89
include "bbemc.inc"
include "bbown.inc"
include "bbrvu.inc"
include "bbshc.inc"                     # SMM 1/17/92
include "stmain.inc"
include "bbdeq.inc"             # SMM 2/97 (E1732)
include "bbiff.inc"             # SMM 2/97 (E1732)
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  2/3/00
define ($low$order$key,ikey)
 
Subroutine SUBSTA
 
##############################################################
#$%
#$% Purpose:   SUBSTA controls display of the submarine status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     SUBTIT     SUBSUB
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################_
 
BBcommon
STATUScommon
 
#$% call for display of titles for status board
call SUBTIT
 
#$% call for display of status board data
call SUBSUB
 
return
end
 

 
 
Subroutine SUBTIT
 
########################################################
#$%
#$% Purpose:   Generates submarine status board titles for display.
#$%
#$% Called By: SUBSTA
#$%
#$% Calls:     OUTH     OUTI    OUTV    # jb    2/3/00
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
########################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
#$% go to next line
$prepare$next$line
 
#$% display titles for submarine status board
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
$column 21 ; $OutV("SUBMARINE STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
 
Subroutine SUBSUB
 
############################################################################
#$%
#$% Purpose:   SUBSUB executes subroutines that generate submarine status
#$%            board.
#$%
#$% Called By: SUBSTA
#$%
#$% Calls:     SUBHED     SUBENT
#$%            SUBNUN     NXTSUB
#$%
#$% Tables:    OWN
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
############################################################################
BBcommon
STATUScommon
 
Integer ifound,  OWN$Pointer    # jb E2145      2/3/00
 
#$% call for display of status board headings
call SUBHED
 
#$% exit if status board full
$exit$on$overflow
 
#$% set found flag
ifound = $no
 
repeat
   {
    #$% find next submarine entry
    call NXTSUB(own$pointer)
 
    #$% if none, break loop
    if (own$pointer == 0) break
 
    #$% set found flag to yes
    ifound = $yes
 
    #$% get data for submarine entry
    call SUBENT(own$pointer)
 
    #$% exit if status board full
    $exit$on$overflow
   }
 
#$% if no submarine entries, send message to user
if (ifound == $no)  call SUBNUN
 
return
end
 

 
 
Subroutine SUBHED
 
#######################################################################
#$%
#$% Purpose:   Generates the status board headings for the submarine
#$%            status board.
#$%
#$% Called By: SUBSUB
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
#######################################################################
BBcommon
STATUScommon
 
Integer ilen    # jb E2145      2/3/00
 
#$% jb  E2141   Strings MSG2 and MSG3 modified:         2/3/00
#string MSG2 "NAME  CRS SPD DEPTH  LAT    LONG   PLAN  WPN  EMCON  STAT M W B  REPT BATT"
#string MSG3 "----- --- --- ----  ------ ------- ----- ---- -----  ---- - - -  ---- ----"
#            0123456789012345678901234567890123456789012345678901234567890123456789012345678
string MSG2 " NAME    CRS SPD DEPTH   LAT   LONG  WPN  EMCON   STAT M W B REPT BATT     "
string MSG3 "------   --- --- ----- ------ ------- -- ------   ---- - - - ---- ----     "
 
ilen = 0;  call smovh(MSG2,ARB,IPAGE[1,2], ilen)
ilen = 0;  call smovh(MSG3,ARB,IPAGE[1,3], ilen)
 
 
#$% set line length
LINLEN[2] = 73  # jb E2141  (73 vice 74)    2/3/00
LINLEN[3] = 73  # jb E2141  (73 vice 74)    2/3/00
 
#$% set line count
LINCNT    = 3
 
return
end
 

 
 
Subroutine NXTSUB(nxtpnt)
 
#################################################################
#$%
#$% Purpose:   Locates the next submarine status board entry.
#$%
#$% Called By: SUBSUB
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    OWN
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
#################################################################
BBcommon
StatusCommon
 
literal isub[1],        CSTRIP8     # jb E2145  (CSTRIP*)  2/3/00
literal keys[1],lowest[1]
Integer nxtpnt,irsult,                          # jb E2145  2/3/00
        OWN$Pointer,OWN$Unit$I,OWN$SuperType$I, # jb E2145  2/3/00
        UNT$Pointer                             # jb E2145  2/3/00
#$% initialize array to high ASCII
lowest[1] = $highest$ascii
 
#$% if first key save lowest, else save key
if (ikey  == 1) keys[1] = $lowest$ascii
else            keys[1] = ikey
 
#$% zero next pointer
nxtpnt = 0
 
#$% search OWN table
#for (own$pointer$first ; own$pointer$ok ; own$pointer$next)
for_all_ok (own)
   {
    #$% get unit, if none get next entry
    own$Unit$i = xown$Unit$i
    if (own$Unit$i == 0) next
 
    #$% if wrong view, get next entry
    if (xown$View$i != iview) next
 
    #$% if not sub, get next entry
#    if (own$SUPERtype$i doesn't indicate submarine) next
    OWN$SuperType$i = xOWN$SuperType$i    # jb                1/3/91
    if (OWN$SuperType$i != $Submarine$SuperCode  &       # reh  5/90
        OWN$SuperType$i !=$FalseContact$SuperCode ) NEXT # jb 1/3/91
 
    #$% set UNT pointer and save name
    UNT$pointer$to own$unit$i
 
    #$% exclude units that are being deleted
    if (xUNT$Status$i == $BeingDeleted$Code) next            # AM.    8/23/89
 
    isub[1] = XUNT$Name$c
 
    #$% compare sub name to keys
    call COMPAR(1,isub,keys,irsult)
 
    #$% if lower, get next entry
    if (irsult <  0) next                       # less than keys
 
    #$% if match
    if (irsult == 0)                            # found exact match
       {
	#$% save pointer
	nxtpnt = own$pointer
	return
       }
 
    #$% compare sub to lowest
    call COMPAR(1,isub,lowest,irsult)
 
    #$% if larger, get next entry
    if (irsult > 0) next                        # larger than lowest found
 
    #$% save lowest entry so far
    lowest[1] = isub[1]                         # at this point, have
						# best candidate so far
    #$% save next pointer
    nxtpnt = own$pointer
   }
 
#$% save lowest entry
ikey  = lowest[1]
 
return
end
 

 
 
Subroutine SUBENT(own$pointer)
 
#################################################################
#$%
#$% Purpose:   SUBENT gets data for each submarine display.
#$%
#$% Called By: SUBSUB
#$%
#$% Calls:     SMOVH      SMOVIZ     SMOVIB     Display_IFF
#$%            SMOVLL     OWNSTA     FMTEXP
#$%            LSTEXP     INT        OUTv     # jb    2/3/00
#$%
#$% Tables:    OWN     EMC
#$%            RVU
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
#$% Modified:  Susan Miller 2/97 (E1732)
#$%            If a unit has an IFF, it's on and is a transponder,
#$%            display the modes
#$%
#$%            Susan Miller - 4/98 (E1506)
#$%            Count the number of SAMs and check for JECEWSI jamming
#$%            with call to Check_for_degraded_SAM_launch.
#$%
#################################################################
BBcommon
STATUScommon
InventoryCommon # number_of_sams  SMM 4/98 (E1506)
 
literal Astab_ROE,
        UNT$Name$C, EMC$Name$C,     CSTRIP8             # jb E2141 2/3/00
REAL*4  OWN$Latitude$F,OWN$Longitude$F,OWN$TimeReported$F, # jb E2141 2/00
        UNT$TrueLatitude$F,UNT$TrueLongitude$F,         # jb E2141 2/3/00
        UNT$TrueCourse$F                                # jb E2141 2/3/00
integer has_IFF, IFF$Pointer     # smm 2/97
integer UNT$View$I, only_mode3   # (E1732)
integer DEQ$Ident$I              # SMM 4/98 (E1506)
Integer COURSE, Game_Time,                              # jb E2145 2/3/00
        ic,istat,ispeed,none,inp,                       # jb E2145 2/3/00
        OWN$Pointer,OWN$Unit$I,OWN$Course$I,OWN$Mast$I, # jb E2141 2/3/00
        OWN$Speed$I,OWN$Depth$I,OWN$EmconINDX$I,        # jb E2141 2/3/00
        OWN$Wire$I,OWN$WireBuoy$I,OWN$Status$I,         # jb E2141 2/3/00
        RVU$Pointer,RVU$EmbarkIndx$I,                   # jb E2141 2/3/00
        UNT$Pointer,UNT$PropulsionMode$I,               # jb E2141 2/3/00
        SHC$Pointer,SHC$NuclearPowered$I,               # jb E2141 2/3/00
        EMC$Pointer,  DEQ$Pointer                       # jb E2141 2/3/00
 
#$% exit if status board full and go to next line
$test$next$line ; $exit$on$overflow
 
#$% save line count and increment keys
$save$line$count
$update$keys
 
#$% go to next line
$prepare$next$line
 
#$% get unit pointer and set UNT table pointer
own$unit$i = xown$unit$i
UNT$pointer$to own$unit$i
 
#$% get sub name
UNT$NAME$C = XUNT$NAME$C
 
IBYTE = 0
 
#$% load sub name into IPAGE for display
call SMOVH(_
     UNT$NAME$C,
     $$MAXname,     # jb E2141 ($$MAXname vice 5)   2/3/00
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get sub course
own$course$i = xown$course$i
 
IBYTE = 9   # jb E2141  (9 vice 6)    2/3/00
 
#$% load sub course into IPAGE for display
call SMOVIZ(_
     own$course$i,
     3,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get sub speed
own$speed$i = xown$speed$i              # make assumed speed an int
 
IBYTE = 13  # jb E2141  (13 vice 10)    2/3/00
 
#$% load sub speed into IPAGE for display
call SMOVIB(_
     own$speed$i,
     3,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get sub depth
own$depth$i = xown$depth$i
 
IBYTE = 17  # jb E2141  (17 vice 14)    2/3/00
 
#$% load sub depth into IPAGE for display
call SMOVIB(_
     own$depth$i,
     5,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get sub latitude
own$latitude$f = xown$latitude$f
 
IBYTE = 23  #   (23 vice 22)
 
#$% load sub latitude into IPAGE for display
call SMOVLL(_
     own$latitude$f,
     "NS",
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get sub longitude
own$longitude$f = xown$longitude$f
 
IBYTE = 30
 
#$% load sub longitude into IPAGE for display
call SMOVLL(_
     own$longitude$f,
     "EW",
     IPAGE[1,LINCNT],
     IBYTE)
 
IBYTE = 38
 
#$% load sub rules of engagement into IPAGE for display
call SMOVH(__
     Astab_ROE(Xown$roe$i, xOWN$NucFree$I),
     4,                                 # 4 vice 2  2/93
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get EMCON index
own$emconindx$i = xown$emconindx$i
 
#$% if index there is an index number
if (own$emconindx$i != 0)
  {
   #$% set EMC pointer
   emc$pointer$to own$emconindx$i
 
   #$% get EMCON plan name
   EMC$NAME$C = XEMC$NAME$C
 
   IBYTE = 41
 
   #$% load EMCON plan name into IPAGE for display
   call SMOVH(_
	EMC$NAME$C,
	$$MAXname,          # jb E2141  ($$MAXname vice 5)  2/3/00
	IPAGE[1,LINCNT],
	IBYTE)
  }
 
#$% get sub and display status code
own$status$i = xown$status$i
call OWNSTA (_
	      own$status$i,
	      istat)
 
IBYTE = 50
 
#$% load sub status into IPAGE for display
call SMOVH(_
     ISTAT,
     4,         # jb  (NOTE:  4 char's from OWNSTA)
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get mast status code
own$mast$i = xown$mast$i
 
#$% test for mast status and set inp accordingly
if (own$mast$i == $allup$code)         inp = $LETY
else if (own$mast$i == $halfup$code)   inp = $PLUS
else if (own$mast$i == $alldown$code)  inp = $LETN
else if (own$mast$i == $halfdown$code) inp = $MINUS
 
IBYTE = 55
 
#$% load mast status into IPAGE for display
call SMOVH(INP,1,IPAGE[1,LINCNT],IBYTE)
 
#$% get wire status code
own$wire$i = xown$wire$i
 
#$% test for wire status and set inp accordingly
if (own$wire$i == $allup$code)         inp = $LETY
else if (own$wire$i == $halfup$code)   inp = $PLUS
else if (own$wire$i == $alldown$code)  inp = $LETN
else if (own$wire$i == $halfdown$code) inp = $MINUS
 
IBYTE = 57
 
#$% load wire status into IPAGE for display
call SMOVH(INP,1,IPAGE[1,LINCNT],IBYTE)
 
#$% get wire buoy status code
own$wirebuoy$i = xown$wirebuoy$i
 
#$% test for wire buoy status and set inp accordingly
if (own$wirebuoy$i == $allup$code)         inp = $LETY
else if (own$wirebuoy$i == $halfup$code)   inp = $PLUS
else if (own$wirebuoy$i == $alldown$code)  inp = $LETN
else if (own$wirebuoy$i == $halfdown$code) inp = $MINUS
 
IBYTE = 59
 
#$% load wire status into IPAGE for display
call SMOVH(INP,1,IPAGE[1,LINCNT],IBYTE)
 
#$% get report time
own$TimeReported$f = xown$TimeReported$f
 
IBYTE = 61
 
#$% load report time into IPAGE for display
call SMOVIZ(_
     Game_Time(own$TimeReported$f),
     4,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% set RVU table pointer and get embarked code
RVU$pointer$to iview
RVU$EmbarkIndx$i = xRVU$EmbarkIndx$i
 
IBYTE = 66
 
#$% extract nuclear powered flag and propulsion mode
SHC$Pointer = xUNT$SHCPntr$I
SHC$NuclearPowered$I = xSHC$NuclearPowered$I
UNT$PropulsionMode$I = xUNT$PropulsionMode$I
 
#$% if sub is a diesel display the charge on the battery
if (SHC$NuclearPowered$I != $yes)
    {
    call SMOVIZ(_
                INT(xOWN$PercentFuel$I),
                3,
                IPAGE[1,LINCNT],
                IBYTE)
    $over 1
 
    if (UNT$PropulsionMode$I == $Electric$Code)
        {
        $OutV("E")  # jb    2/3/00
        }
    else if (UNT$PropulsionMode$I == $Diesel$Code)
        {
        $OutV("D")  # jb    2/3/00
        }
 
    } # end if not nuclear powered
 
#$% set line length
LINLEN[LINCNT] = IBYTE
 
#$% if CONTROL view
if(mside == $Control$code)
  {
   #$% test and exit if status board full
   $test$next$line ; $exit$on$overflow
   #$% go to next line
   $prepare$next$line
 
   IBYTE = 8    # jb E2141  (8 vice 5)      2/3/00
 
   #$% get true course
   UNT$TRUECOURSE$F = XUNT$TRUECOURSE$F
 
   #$% convert to degrees
   IC = COURSE[UNT$TRUECOURSE$F]
 
   #$% load left paren into IPAGE for display
   call SMOVv("(",IPAGE[1,LINCNT],IBYTE)
 
   #$% load course into IPAGE for display
   call SMOVIZ(_
	IC,
	3,
	IPAGE[1,LINCNT],
	IBYTE)
 
   IBYTE = 13   # jb E2141  (13 vice 10)      2/3/00
 
   #$% get true speed
   ISPEED =INT(XUNT$TRUESPEED$F + .5)
 
   #$% load true speed into IPAGE for display
   call SMOVIB(_
	ISPEED,
	3,
	IPAGE[1,LINCNT],
	IBYTE)
 
   #$% load right paren into IPAGE for display
   call SMOVv(")",IPAGE[1,LINCNT],IBYTE)
 
   IBYTE = 22
 
   #$% load left paren into IPAGE for display
   call SMOVv("(",IPAGE[1,LINCNT],IBYTE)
 
   #$% get latitude and longitude
   UNT$TRUELATITUDE$F = XUNT$TRUELATITUDE$F
   UNT$TRUELONGITUDE$F = XUNT$TRUELONGITUDE$F
 
   #$% load true latitude into IPAGE for display
   call SMOVLL(_
	UNT$TRUELATITUDE$F,
	"NS",
	IPAGE[1,LINCNT],
	IBYTE)
 
   IBYTE = 30
 
   #$% load true longitude into IPAGE for display
   call SMOVLL(_
	UNT$TRUELONGITUDE$F,
	"EW",
	IPAGE[1,LINCNT],
	IBYTE)
 
   #$% load right paren into IPAGE for display
   call SMOVv(")",IPAGE[1,LINCNT],IBYTE)
 
   LINLEN[LINCNT] = IBYTE
  }
 
# does this unit have an IFF - SMM 2/97 (E1732)
has_IFF = $no
number_of_sams = 0  # initialize before loop SMM 4/98 (E1506)
 
for_DEQ_chain (UNT$Pointer$index)
   {
    DEQ$Ident$I = xDEQ$Ident$I
    if ((DEQ$Ident$I == $IFF$Code) &
        (xDEQ$On$I == $yes))
      {
       IFF$Pointer = xDEQ$Pntr$i
       if (xIFF$Function$i != $INTERROGATOR$Code)
         {
          has_IFF = $yes
          break
         }
      }
    else if ((DEQ$Ident$I == $SAM$Code) |   # SMM 4/98 (E1506)
        (DEQ$Ident$I == $AdvancedSAM$Code))
      {
       call Check_for_degraded_SAM_launch(UNT$Pointer,
                                          DEQ$Pointer$Index)
      }
   } # end of search through DEQ table
 
 only_mode3 = $no
 UNT$View$I = xUNT$View$I
 
 if ((UNT$View$I == $Neutral$View) |
     (UNT$View$I >= $FirstOrange$View &
      UNT$View$I <= $LastOrange$View))
   {
    only_mode3 = $yes
   }
 if ((only_mode3 == $yes) &
     (xUNT$Type$I != $Air$Code))
   {
    has_IFF = $no
   }
 
if (has_IFF == $yes)
   {
    $test$next$line ; $exit$on$overflow    #$% list overflow
    $prepare$next$line
 
    $column 5
    $outV("IFF Modes:")  # jb    2/3/00
    $over 2
 
    call display_iff(DEQ$Pointer,20,only_mode3)
   }
 
#$% get list of expendables
call LSTEXP(own$pointer,none)
 
#$% if expendable list not empty
if (none == $no)
   {
    #$% test and exit if status board full
    $test$next$line ; $exit$on$overflow
    #$% go to next line
    $prepare$next$line
 
    #$% format expendables list
    $column 11 ; $OutV("Exp:")  # jb    2/3/00
    $over 2    ; call FMTEXP(17)
   }
 
#$% get ground equipment
 
call LSTGND(own$pointer,none)
 
if (none == $no)
   {
    #$% test and exit if status board full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% display "GND" and format
    $column 11 ; $OutV("Gnd:")  # jb    2/3/00
    $over 2   ; call FMTEXP(17)
   }
 
return
end
 

 
 
Subroutine SUBNUN
 
#################################################################
#$%
#$% Purpose:   Generates message to the user when there are no
#$%            submarine status board entries.
#$%
#$% Called By: SUBSUB
#$%
#$% Calls:     OUTV       # jb    2/3/00
#$%
#$% Tables:    None
#$%
#$% Date:      27 JAN 82
#$%
#$% Author:    F. Jones
#$%
#############################################################
BBcommon
STATUScommon
 
#$% exit if status board full
$test$next$line ; $exit$on$overflow
 
#$% go to next line
$prepare$next$line
 
#$% display "No submarines" message to user
$column 1 ; $OutV("No submarines in this view")  # jb    2/3/00
 
return
end
