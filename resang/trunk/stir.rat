include "ascii.inc"                             #$% include ascii constants
include "bbacc.inc"
include "bbcode.inc"                            #$% and blackboard defines
include "bbctl.inc"
include "bbird.inc"
include "bbrvu.inc"
include "bbshc.inc"
include "bbunt.inc"                   # clf 9/10/92
include "stmain.inc"
 
define ($low$order$key,ikey)
define ($low$order$key,ikey2)
define (BBimplicit, IMPLICIT NONE)   # jb    E2145   3/9/00
Subroutine IRSTA
 
#####################################################################
#$%
#$% IRSTA generates electro-optical/infrared detection status board.
#$%
#$% Call sequence :           |
#$%                           |
#$%                           V
#$%             |--------- IRSTA ---------|
#$%             |                          |
#$%             V                          V
#$%          IRTIT          |--------- IRDATA ---------|
#$%                          |                           |
#$%                          V                           V
#$%                       IRHED                       NXTIR
#$%                                                      |
#$%                                                      V
#$%                                                    SORTIR
#$%                                                      |
#$%                                                      V
#$%                                                    IRBLD
#$%
#$% Description :
#$%
#$% The Electro-Optical/Infrared status display is generated as follows :
#$% The driver, IRDATA, calls NXTIR to determine the lowest detector
#$% name within the view. When that has been found, NXTIR calls IRSORT
#$% which determines the lowest target name within that detector. Successive
#$% iterations identify and print all entries within a detector name, in
#$% ascending order. When no more targets for a detector can be found, (i.e.
#$% when the lowest name of the current pass is equal to the lowest name
#$% in the last pass) control is returned to IRDATA via NXTIR and the
#$% cycle is repeated.
#$%
#$% author : hfisher - CSC 3/90
#$%
########################################################################
 
BBcommon
STATUScommon
 
call IRTIT      #$% Display title
 
call IRDATA     #$% Call main driver routine
 
RETURN
END
 

 
Subroutine IRDATA
 
#######################################################################
#$%
#$% IRDATA is the driver for the electro-optical/infrared status board
#$% generation subroutines.
#$%
#######################################################################
 
BBcommon
STATUScommon
 
Common Ifound
Common Headswitch
Common Endpoint
Common Cont_Ind
 
Integer ifound,headswitch,endpoint,cont_ind    # jb E2145  3/9/00
 
call IRHED                      #$% Display heading
 
Endpoint = 0                     #$% Initialize end flag
 
ifound = $no                     #$% Initialize test flag
 
IF  (IKEY != 1)
    Cont_Ind = 1
ELSE
    Cont_Ind = 0
 
repeat
   {
    call NXTIR                  #$% Get next IRD table entry
    IF  (Endpoint == 1) BREAK    #$% At end break loop
    $exit$on$overflow        # Exit if overflow
   }
if (ifound == $no)  call IRNUN  #$% No entries in table - display message
 
RETURN
END
 
 

Subroutine NXTIR
 
##########################################################
#$%
#$% Purpose:   NXTIR locates next DETECTOR entry
#$%
#$%  This module contains the first (major level) sort.
#$%  The routine walks the entire IRD table, determining the
#$%  lowest value of the Detector name. When the lowest name
#$%  has been identified, it is stored in IKEY and IRSORT
#$%  is called.
#$%
##########################################################
 
BBcommon
StatusCommon
 
Common Ifound
Common Headswitch
Common Endpoint
Common Cont_Ind
 
Literal iplat,keys
Literal lowest
LITERAL CSTRIP8                 # jb E2145  3/9/00
Integer ifound,headswitch,endpoint,cont_ind    # jb E2145  3/9/00
 
Integer irsult,               # jb E2145  3/9/00
        IRD$Pointer,UNT$Pointer # jb E2145  3/9/00
 
lowest = $highest$ascii    #$% Set identifier to zzzzzzzz
 
Endpoint = 0               #$% Reset endpoint indicator
 
Headswitch = 0             #$% Reset indicator to print platform name
                           #$% (used by IRBLD)
 
IF  (ikey  == 1)           #$% On the first pass, load nil
    {
    keys = $lowest$ascii
    lkey = 200
    }
ELSE
    keys = ikey            #$% else use lowest from last pass
 
FOR ( ird$pointer$first; Ird$Pointer$valid; Ird$pointer$next )
   {
    UNT$pointer$to (xIRD$Detector$I)   # clf 9/10/92
    IF  (xUNT$View$I == iview)         # clf 9/10/92
        CONTINUE
    ELSE
        NEXT                           #$% If not same view, ignore
 
    Iplat = xUNT$Name$C                #$% Get detector name # clf 9/10/92
 
    call COMPAR(1,iplat,keys,irsult)   #$% Compare keys
 
    IF  (irsult <  0) NEXT             #$% Record has already been processed
 
    IF  (irsult == 0) NEXT             #$% Ignore - only first occurrence of
                                       #$% name is processed
    call COMPAR(1,iplat,lowest,irsult)
    IF  (irsult > 0)
        NEXT                           #$% Larger than lowest found
    lowest = iplat                     #$% The new lowest
   }
 
IF  ( ikey == lowest )    #$% This condition is true one pass after the last
    {                     #$% entry has been processed
    Endpoint = 1          #$% Set exit switch
    RETURN
    }
 
IF  (Cont_Ind == 1)
    {
    cont_Ind = 0
    IKEY2 = NKEY2
    }
ELSE
   {
   ikey  = lowest            #$% The lowest key
   IKEY2 = 1
   }
 
repeat
      {
       call IRSORT                    #$% Loop thru target entries
       IF  (Endpoint == 1) BREAK       #$% At end, break loop
       $exit$on$overflow        # Exit if overflow
      }
Endpoint = 0                           #$% Reset exit switch
RETURN
END
 

 
Subroutine IRSORT
 
##########################################################
#$%
#$% Purpose:   IRSORT locates next TARGET within DETECTOR
#$%
#$% This routine compares the platform name to IKEY.
#$% The lowest entry is found among those
#$% entries that meet this requirement. The lowest track
#$% number is contained in IKEY2.
#$%
##########################################################
BBcommon
StatusCommon
 
Common Ifound
Common Headswitch
Common Endpoint
Common Cont_Ind
 
LITERAL CSTRIP8                 # jb E2145  3/9/00
Integer ifound,headswitch,endpoint,cont_ind    # jb E2145  3/9/00
integer iplat2,keys2,lowest2,
        UNT$Pointer, IRD$Pointer   # jb E2145  3/9/00
 
lowest2 = 999           #$% Set to highest 3 digit number (track is 3 digits)
 
IF  (lkey  == 200)
     {
      ikey2 = 0
      lkey = 0
      keys2 = 0
     }
ELSE
    keys2 = ikey2                  #$% else use the last lowest for comparison
 
FOR ( ird$pointer$first; Ird$Pointer$valid; Ird$pointer$next )
   {
    UNT$Pointer$to (xIRD$Detector$I) # clf 9/10/92
    IF  ( xUNT$Name$C == IKEY )     #$% Current detector only # clf 9/10/92
        {
         IF  (xUNT$View$I == iview) # clf 9/10/92
             CONTINUE
         ELSE
             NEXT                              #$% If not same view, ignore
 
         Iplat2 = xIrd$TrackSEQ$I              #$%  Get track number
 
         IF  (iplat2 < keys2) NEXT             #$% Has already been processed
 
         IF  (iplat2 == keys2)                 #$% Print the table entry
             {
             call IRBLD(ird$pointer)          #$% Build display data
             ifound = $yes                     #$% At least one entry was found
             $exit$on$overflow                 #$% Exit if overflow
             }
         ELSE                                  #$% Possibly a lower number
             {
             IF  (iplat2 > lowest2)            #$% Larger than lowest found
                 NEXT
             ELSE
                lowest2 = iplat2               #$% Lowest so far this pass
             }
        }
   }
IF  ( ikey2 == lowest2 )            #$% End condition - one pass after last
    {                               #$% processed record in this series
     Endpoint = 1
     RETURN
    }
ELSE
    {
     ikey2  = lowest2               #$% Save low key
    }
RETURN
END
 

 
 
Subroutine IRBLD(IRD$Pointer)
 
##########################################################################
#$%
#$% Purpose:   IRBLD builds display for electro-opt/infrared detectors
#$%
##########################################################################
BBcommon
STATUScommon
 
Common Ifound
Common Headswitch
Common Endpoint
Common Cont_Ind
 
Integer D_Track
Integer D_Time
Integer D_Course
Integer D_Speed
Integer kk
 
literal  D_Type, Astab_EOIR_Class
literal  Icode, a_track
literal  D_Platform
LITERAL CSTRIP, CSTRIP8                        # jb E2145  3/9/00
Real D_Lat
Real D_Long
Integer ifound,headswitch,endpoint,cont_ind    # jb E2145  3/9/00
integer iclch / "I  " /
 
Integer I_SWITCH_1, GAME_DTG                    # jb E2145  3/9/00
Integer UNT$Pointer,UNT2$Pointer,RVU$Pointer,   # jb E2145  3/9/00
        IRD$Pointer,Ird$DamageLevel$I           # jb E2145  3/9/00
 
$test$next$line
IF   (LINCNT >= LIMIT)
     {
      IOVFLO = 1
      RETURN
     }
#$exit$on$overflow        # Exit if overflow
 
LINSAV=LINCNT
NSECT=ISECT
NSECT2=ISECT2
NKEY=IKEY
NKEY2=IKEY2
 
$prepare$next$line
 
UNT$Pointer$to (xIRD$Detector$I)      # clf 9/10/92
UNT2$Pointer$to (xIRD$Target$I)       # clf 9/10/92
D_Type      =   Astab_EOIR_Class (IRD$pointer)
 
D_Track     =   xIrd$TrackSEQ$I       #   Items not dependent on
D_Time      =   xird$Time$f           #   level of detection are
D_Lat       =   xIrd$Latitude$F       #   loaded here
D_Long      =   xIrd$Longitude$F      #
D_Course    =   xIRD$Course$I         # clf 12/15/92
D_Speed     =   xIRD$Speed$I          # clf 12/15/92
 
 
RVU$pointer$to iview                  #$% Set RVU pointer; set track code
icode = xRVU$trackcode$c
 
#$% Load Track into output line
 
Ibyte = 10
$OutHN(a_track(icode,iclch,d_track),$$MaxLit)            # (E2172)
 
IF  (Headswitch == 0)                                   #$% If name has
    {                                                   #$% appeared before,
     Headswitch = 1                                     #$% Don't print it
     D_Platform  = xUNT$Name$c                 # clf 9/10/92
    }
ELSE
{
     D_Platform = $BLANKLIT
}
#$% Load Detector Platform into output line
Ibyte = 0
CALL SMOVH (D_Platform,$$MAXname,IPAGE[1,LINCNT],Ibyte) # jb E2145  3/9/00
 
 
IF  (xIrd$Motion$I == 0)
     {
      Ibyte = 57
      CALL SMOVv ("STATIONARY",IPAGE[1,LINCNT],Ibyte)
     }
ELSE
     {
      Ibyte = 58
      CALL SMOVIZ (D_Course,3,IPAGE[1,LINCNT],Ibyte)
      Ibyte = 61
      CALL SMOVv ("/",IPAGE[1,LINCNT],Ibyte)
      Ibyte = 62
      CALL SMOVI (D_Speed,IPAGE[1,LINCNT],Ibyte)
     }
 
Ird$DamageLevel$I = xIrd$DamageLevel$I        # 4/9/90
SWITCH ( Ird$DamageLevel$I )
       {
        Case $Destroyed$code :
              {
              Ibyte = 70
              CALL SMOVv ("DESTROYED",IPAGE[1,LINCNT],Ibyte)
              }
        Case $Severe$Code    :
              {
              Ibyte = 71
              CALL SMOVv ("SEVERE   ",IPAGE[1,LINCNT],Ibyte)
              }
        Case $Moderate$Code  :
              {
              Ibyte = 70
              CALL SMOVv ("MODERATE ",IPAGE[1,LINCNT],Ibyte)
              }
        Case $Minor$Code     :
              {
              Ibyte = 71
              CALL SMOVv ("MINOR    ",IPAGE[1,LINCNT],Ibyte)
              }
        DEFAULT :                            # i.e. $NODamage$Code
              {
              Ibyte = 72
              CALL SMOVv ("NONE     ",IPAGE[1,LINCNT],Ibyte)
              }
       }
 
#$% Load Type into output line
Ibyte = 25
CALL SMOVH (D_Type,$$MAXname,IPAGE[1,LINCNT],Ibyte)     # jb E2145  3/9/00
 
#$% Convert time to Zulu and load into output line
$column 18
$outIZ(Game_DTG(FLOAT(D_Time)),6)  # jb E2208   9/27/00
 
#$% Load Latitude into output line
Ibyte = 34
CALL SMOVLLS (D_Lat,"NS",IPAGE[1,LINCNT],Ibyte)
 
#$% Load Longitude into output line
Ibyte = 45
CALL SMOVLLS (D_Long,"EW",IPAGE[1,LINCNT],Ibyte)
 
#$% set line length
linlen[lincnt] = 79
 
IF  (mside == $Control$code)         #$% Control view parenthetical data :
   {
    $test$next$line
    $exit$on$overflow
    $save$line$count
    $prepare$next$line
    D_Type = xUNT2$Name$C             # clf 9/10/92   target name
    Ibyte = 24
    CALL SMOVvN ("(",IPAGE[1,LINCNT],Ibyte)
    CALL SMOVHN (D_Type,$$MAXname,IPAGE[1,LINCNT],Ibyte)  # jb E2145  3/9/00
    CALL SMOVvN (")",IPAGE[1,LINCNT],Ibyte)
    linlen[lincnt] = 79
   }
ELSE
    CONTINUE
 
 
 
RETURN
END
 

 
#####  Headers and fixed displays ########### :
 
Subroutine IRNUN
 
#####################################################################
#$%
#$% Purpose:   IRNUN displays message if no electro-optical/infra-
#$%                   red detctions have been made
#$%
#####################################################################
 
BBcommon
STATUScommon
 
#$% test for overflow
$test$next$line
$exit$on$overflow
 
$prepare$next$line
 
#$% send message                                # \/ jb outV vs outH  4/11/00
$column 1 ; $outV("No Electro-Optical/InfraRed Detections for this view")
 
RETURN
END
 

 
Subroutine IRHED
 
##########################################################################
#$%
#$% Purpose:   IRHED generates heading for electro-optical/infrared
#$%            status board.
#$%
##########################################################################
 
BBcommon
STATUScommon
 
string  MSG2 "PLATFORM  TRACK   TIME     TYPE         LOCATION           MOTION      DAMAGE  "
string IDASH "--------  -----  ------  -------- ---------------------   --------    ---------"
#             CF001     BI001  010140  SUKENSIN  32-23-14N 165-12-18E    MOBILE     DESTROYED
#                                                                       270/1234
#                      1         2         3         4         5         6         7         8
#             12345678901234567890123456789012345678901234567890123456789012345678901234567890
 
#$% Write report headers
 
#$% set line length
ibyte = 0; CALL SMOVH (MSG2,ARB,ipage[1,2],ibyte)
LINLEN[2] = ibyte       # jb 3/9/00
ibyte = 0; CALL SMOVH (IDASH,ARB,ipage[1,3],ibyte)
LINLEN[3] = ibyte       # jb 3/9/00
 
#$% set line count
LINCNT = 3
 
RETURN
END
 
 

Subroutine IRTIT
 
############################################################################
#$%
#$% Purpose:   IRTIT generates title for electro-optical/infrared data
#$%                   status board.
#$%
############################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
$prepare$next$line
 
#$% load title for aircraft availability status board.
$column  1
$outV("View: ")
$outHN(nmvue,$$maxlit)
$column 15
$outV("INFRA-RED TRACKS STATUS BOARD [") ; $outI(iboard)
$outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $outV("Game Time: ") ;  $outIZ(Game_DTGs(igmin),8)
 
RETURN
END
 
 
