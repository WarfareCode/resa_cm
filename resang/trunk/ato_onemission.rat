 
define (number_args, 4)         # ato_ropt, atoid, atoid_update, prescript file name
 
undefine write   # use the standard fortran write statement
undefine read
undefine err
 
program ATO_onemission
#########################################################################
#$%
#$% Purpose:    This program creates a file for each mission from a file
#$%             containing resa orders for all missions
#$%
#$% Calls:      initr4         <rlib.olb>
#$%             read_arguments
#$%             ctoi
#$%             remark
#$%             exit
#$%             smov..
#$%             echo..
#$%             write
#$%             close
#$%
#$% Tables:     global variables
#$%
#$% Date:       Aug 2012
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
implicit none
 
integer          arg_len[number_args]
vaxcharacter*80  args[number_args], params
 
vaxcharacter*80  ato_root
vaxcharacter*80  atoid
vaxcharacter*80  atoid_update
vaxcharacter*80  infile
 
vaxcharacter*80  atoid_dir
 
integer kk, atodir_len
 
call initR4
 
call Read_Arguments (number_args, args, arg_len, params)
 
ato_root     = args[1][1:arg_len[1]]
atoid        = args[2][1:arg_len[2]]
atoid_update = args[3][1:arg_len[3]]
infile       = args[4][1:arg_len[4]]
 
# Get ato directory
atoid_dir = ""
kk = 0
call smovvn(ato_root, atoid_dir, kk)
call smovv("/", atoid_dir, kk)
call smovvn(atoid, atoid_dir, kk)
call smovv("/",atoid_dir, kk)
call smovvn(atoid_update, atoid_dir, kk)
call smovv("/", atoid_dir, kk)
 
 
call do_preprep (atoid_dir, infile)
 
End

Subroutine do_preprep (atoid_dir, infile)
implicit none
 
vaxcharacter*(*)  infile
 
vaxcharacter*(*)  atoid_dir
vaxcharacter*80  t_atodir
vaxcharacter*80  prefile
vaxcharacter*80  outfile
 
integer k, kk, i
integer block_cnt
integer name_len
integer return_val
integer t_len, atodir_len
integer np
integer mission_cnt
integer outfile_open
 
vaxcharacter    a_line*140
vaxcharacter    t_line_v*140
character       t_line[140]
equivalence     (t_line, t_line_v)
vaxcharacter    w1*120
vaxcharacter    w2*120
vaxcharacter    w3*120
vaxcharacter    w4*120
vaxcharacter    w5*120
vaxcharacter    t_w5_v*120
character       t_w5[120]
equivalence     (t_w5, t_w5_v)
vaxcharacter    w6*120
vaxcharacter    t_w6_v*120
character       t_w6[120]
equivalence     (t_w6, t_w6_v)
 
prefile = ""
kk = 0
call smovvn(atoid_dir, prefile, kk)
call smovvn(infile, prefile, kk)
 
open(unit    =   10,                            #open input file
     file    =   prefile,
     status  =  'old',
     access  =  'sequential',
     recl    =   140,
     iostat  =   return_val)
 
if (return_val != 0)
{
    print *, "prescript file not found"
    return
}
 
mission_cnt = 0
outfile_open = NO
repeat
{
    #read all mission prescript file
    read (10,9001,end=8002,err=8001) a_line
    9001 format (A)
    call Trim_Compress (a_line, t_line_v, kk)
    t_len = kk
    if (t_len == 0) next
	call smov(EOS, t_line, kk)
    call upper (t_line)
	t_line_v[kk:kk] = " "			# Eliminate EOS
 
    call str_element (w1, 0, " ", t_line_v )
    call str_element (w2, 1, " ", t_line_v )
    call str_element (w3, 2, " ", t_line_v )
    call str_element (w4, 3, " ", t_line_v )
    call str_element (w5, 4, " ", t_line_v )
    call str_element (w6, 5, " ", t_line_v )
 
    if (((w1 == "FOR" | w1 == "#FOR") & (w3 == "CANCEL") & (w4 == "FIRE")) |
        ((w1 == "FOR" | w1 == "#FOR") & (w3 == "CANCEL") & (w4 == "SCRAMBLE" )))
    {
        if ((w1 == "FOR" | w1 == "#FOR") & (w3 == "CANCEL") & (w4 == "SCRAMBLE" ))
        {
            call Trim_Compress (w5, t_w5_v, kk)
			call smov (EOS, t_w5, kk)
			call fold(t_w5)
			outfile = ""
			kk = 0
			call smovvn(atoid_dir, outfile, kk)
			call smovvn(t_w5, outfile, kk)
			call smovvn(".pre", outfile, kk)
        }
 
        if ((w1 == "FOR" | w1 == "#FOR") & (w3 == "CANCEL") & (w4 == "FIRE"))
        {
            call Trim_Compress (w6, t_w6_v, kk)
			call smov(EOS, t_w6, kk)
			call fold(t_w6)
			outfile = ""
			kk = 0
			call smovvn(atoid_dir, outfile, kk)
			call smovvn(t_w6, outfile, kk)
			call smovvn(".pre", outfile, kk)
        }
        open(unit    =   11,                            #open output file
             file    =   outfile,
             status  =  'unknown',
             access  =  'sequential',
             recl    =   140,
             iostat  =   return_val)
 
        if (return_val != 0)
        {
            print *, "prescript output file cannot be opened"
            break
        }
		outfile_open = YES
    }
 
	if (outfile_open == YES)
	{
    	write (11,9002) t_line_v[1:t_len]
9002    format(A)
 
	    if ((w1 == "STOP" | w1 == "!STOP") | (w1 == "BINGO" | w1 == "!BINGO") | ((w1 == "FOR" | w1 == "!FOR") & (w3 == "FIRE" | w3 == "!FIRE")))
	    {
	        close(unit=11)
			outfile_open = NO
	        mission_cnt = mission_cnt + 1
	    }
	}
}
 
repeat
    {
    break
 
    8001 continue       # Comes here for ERROR on open or READ
    }
repeat
    {
    break
 
    8002 continue       # Comes here for END
    }
 
close (unit=10)
close (unit=11)
 
Print 9003, "RESA ATO Missions command files created = ", mission_cnt
9003 format (1x, A, i4)
 
return
end
