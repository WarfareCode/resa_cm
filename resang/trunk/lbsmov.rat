###
### modification of wes version 3.1 to the VAX 11/780
###
###    started 17-Nov-81
###
### number prog    module      comments
### =====  ====    ======      ================================================
### #VAX00
###
###
###
###
###
###
###
 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      SMOVLL                       IPBYTE                      NONE
#$%      SMOVH                        IGBYTE
#$%      SMOVHN
#$%      SMOVV
#$%      SMOVI
#$%      SMOVIZ
#$%      SMOVLN
#$%      SMOVR
#$%      SMOVST
#$%      SMOV
#$%	 smovF
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  EACH SUBROUTINE IN THIS FILE IS CALLED BY, AND USED
#$%        BY, MANY OTHER SUBROUTINES IN DIFFERENT FILES.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE SMOV
#$%    =======================
#$%
#$%    SMOVLL - SMOVIB*
#$%           - SMOVIZ - SMOV*
#$%    SMOVH  - SMOV  *
#$%    SMOVI  - SMOV  *
#$%           - SMOVST - SMOV*
#$%    SMOVLN - SMOVST - SMOV*
#$%           - SMOVR  - SMOV*
 

 
define($pi,3.14159265)
define($DEBUG,#)
include "ascii.inc"
include "macros.inc"
 
 
 
Subroutine smovll (radian,hems,dest,len2)
 
###########################################################
#$%
#$% Purpose:   SMOVLL builds ASCII representation of
#$%            a latitude or longitude into a buffer.
#$%
#$% Called By: FLTENT     GNDTRK     HFDENT
#$%            OUTLL      RCNENT     SHPENT
#$%            SOSENT     SUBENT     TRKENT
#$%
#$% Calls:     SMOV       SMOVIB     SMOVIZ
#$%            IGBYTE
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
#$% Modified:  Dec 1993, DEW, changed datatype of 2nd argument
#$%
###########################################################
 IMPLICIT NONE               # jb 6/29/98
 
 REAL*4 radian,xbdeg,xbmin   # jb 6/29/98
 Integer i,k,len2,ideg,imin    # jb 6/29/98
 vaxcharacter hems*2
 character char
 character dest[ARB]
 
 xbdeg = abs(radian*(180./$pi))                 #convert to absolute degrees
 
 ideg = int(xbdeg)                              #take integer part
 
 xbmin = 60. * (xbdeg - float(ideg))            #convert excess to minutes
 
 imin = int(xbmin + .5)                         #round to nearest whole minute
 
 if(imin >= 60)                                 #if 60 minutes
   {
    ideg = ideg + 1                             #make one more degree
    imin = 0                                    #and zero minutes
   }                                            #end if 60 minutes
 
 if (radian >= 0.0) i = 1                       # N or E
 else               i = 2                       # S or W
 
 #$% set char to N/E or S/W
 char = ichar(hems[i:i])
 
 #$% set k to norther N/S or E/W
 if (char == $letN | char == $letS) k = 2
 else                               k = 3
 
 #$% move degrees/minutes into array for display
 call smovib (ideg,k,dest,len2)
 call smov ($minus,dest,len2)
 call smoviz (imin,2,dest,len2)
 call smov(char,dest,len2)
 
 return
 end
 

Subroutine smovlls (radian,hems,dest,len2)
 
###########################################################
#$%
#$% Purpose:   SMOVLL builds ASCII representation of
#$%            a latitude or longitude (with seconds) into a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     SMOV       SMOVIB     SMOVIZ
#$%            IGBYTE
#$%
#$% Date:      JAN 90
#$%
#$% Author:    Dana Wills
#$%
#$% Modified:  Dec 1993, DEW, changed datatype of 2nd argument
#$%
###########################################################
 IMPLICIT NONE                      # jb 6/29/98
 
 REAL*4 radian,xbdeg,xbmin,xbsec,rsec
 Integer i,k,len2,ideg,imin,isec,tees
 vaxcharacter hems*2
 character char
 character dest[ARB]
 
 tees = NO
 
 repeat
    {
    break
    entry smovllst (radian,hems,dest,len2)
    tees = YES
    }
 
 xbdeg = abs(radian*(180./$pi))                 #convert to absolute degrees
 
 ideg = int(xbdeg)                              #take integer part
 
 xbmin = 60. * (xbdeg - float(ideg))            #convert excess to minutes
 
 imin = int(xbmin)                              # take integer part
 
 xbsec = 60. * (xbmin - float(imin))            #convert excess to seconds
 
 if (tees == YES) rsec = xbsec + 0.05           #round to nearest second/tenth
 else             rsec = int(xbsec + 0.5)
 isec = rsec
 
 if(rsec >= 60.0)                               #if 60 seconds
   {
    imin = imin + 1                             #make one more minute
    rsec = rsec - 60.0                          #and zero seconds
    isec = 0
   }                                            #end if 60 seconds
 
 if(imin >= 60)                                 #if 60 minutes
   {
    ideg = ideg + 1                             #make one more degree
    imin = 0                                    #and zero minutes
   }                                            #end if 60 minutes
 
 if (radian >= 0.0) i = 1                       # N or E
 else               i = 2                       # S or W
 
 #$% set char to N/E or S/W
 char = ichar(hems[i:i])
 
 #$% set k to norther N/S or E/W
 if (char == $letN | char == $letS) k = 2
 else                               k = 3
 
 #$% move degrees/minutes into array for display
 call smovib (ideg,k,dest,len2)
 call smov ($minus,dest,len2)
 call smoviz (imin,2,dest,len2)
 call smov ($minus,dest,len2)
 if (tees == YES) call smovfz (rsec,401,dest,len2)
 else             call smoviz (isec,2,dest,len2)
 call smov(char,dest,len2)
 
 return
 end
 

Subroutine smovvt (vaxchar,dest,len2)
##############################################################
#$%
#$% Purpose:   smovVT moves a VaxCharacter string
#$%            until a null is encountered, or trailing blanks.
#$%
#$% Calls:     ECHOVT
#$%
#$% Tables:    None
#$%
#$% Date:      Sep 2000
#$%
#$% Author:    Dane Wills
#$%
##############################################################
IMPLICIT NONE           # jb    7/7/98
 
VMSChar*(*) vaxchar
integer     KK, len2
character   dest[ARB]
 
KK = len_trim(vaxchar)
 
call smovv (vaxchar[1:kk],dest,len2)
 
 
return
end
 

Subroutine smovV (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   SMOVV builds a vax character string into
#$%            a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     SMOV
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                      # jb 6/29/98
 
 integer            i,LEN,ilen,len2 # jb 6/29/98
 vaxcharacter*(*)   vaxchar
 character          dest[ARB], a_char
 
 ilen = len(vaxchar)
 
 #$% for each character in the string
 for (i=1; i <= ilen; i=i+1)
   {
    a_char = ichar ( vaxchar[i:i] )
    IF (a_char == EOS) break
 
    call smov ( a_char, dest, len2 )
   }
 
 end
 
 

Subroutine smovVN (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   SMOVVN builds a vax character string into
#$%            a buffer, stopping at the first space.
#$%
#$% Called By:
#$%
#$% Calls:     SMOV
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                          # jb 6/29/98
 
 integer            i,LEN,ilen,len2     # jb 6/29/98
 vaxcharacter*(*)   vaxchar
 character          dest[ARB], a_char
 
 ilen = len_trim(vaxchar)
 
 #$% for each character in the string
 for (i=1; i <= ilen; i=i+1)
   {
    a_char = ichar ( vaxchar[i:i] )
 
    if (a_char == $space | a_char == $null) break
 
    call smov ( a_char, dest, len2 )
   }
 
 end
 
 

Subroutine smovH (hstrng,len,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   SMOVH builds a hollerith string into
#$%            a buffer.
#$%
#$% Called By: AIRENT     AVAENT     CFORK
#$%            CMDLVR     COMACK     DAMENT
#$%            DAMFLM     DEFARG     DISP
#$%            ESMENT     EXPARG     FLTENT
#$%            FMOVH      FMOVT      FPORDS
#$%            FPRPMX     GNDTRK     HFDENT
#$%            IDENT      LFORK      NAMEBB
#$%            OBLIP      OCIRKT     OCUDB
#$%            ODROP      OEMBRK     OEXECU
#$%            OSEARC     OUTH       PASENT
#$%            PLOTUP     PUTORD     RCNENT
#$%            ROGER      SAVEBB     SHPENT
#$%            SOSENT     SUBENT     SYNBLD
#$%            TORAT      TRKENT     TRKNUM
#$%            WARCYC     WARGAM     XBLAUN
#$%            XBLEQ      XLOAD      XVLAUN
#$%            XVLOAD
#$%
#$% Calls:     SMOV       IPBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
###########################################################
 IMPLICIT NONE              # jb 6/29/98
 
 Integer i,len,len2         # jb 6/29/98
 character hstrng[ARB],dest[ARB]
 
 #$% for each character in the string
 for (i=1; i <= len; i=i+1)
   {
    #$% break out of loop when a null is reached
    if (hstrng[i] == $null) break
 
    #$% move string into array for display
    call smov(hstrng[i],dest,len2)
   }
 return
 end
 
 

Subroutine smovHn (hstrng,len,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   SMOVHN builds a hollerith string into
#$%            a buffer, stopping at the first "SPACE.
#$%
#$% Called By: BBSMAP     BBTEST     CFORK
#$%            CMDLVR     COMACK     DAMFLM
#$%            DISP       FDAIR      FEAIR
#$%            FPORDS     FPRPMX     GETSUB
#$%            LFILE      LFORK      NAMEBB
#$%            OCUDB      OEMBRK     OEXECU
#$%            OSEARC     OUTHN      PUTORD
#$%            ROGER      SAVEBB     SYNBLD
#$%            TORAT      WARCYC     XLOAD
#$%            XTAKE      XVLAUN     XVLOAD
#$%
#$% Calls:     SMOV       IGBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
###########################################################
 IMPLICIT NONE              # jb 6/29/98
 
 Integer i,len,len2         # jb 6/29/98
 character hstrng[ARB],dest[ARB]
 
#$% for each character in the string
for (i=1; i <= len; i=i+1)
   {
    #$% break out of loop when character is a space or a null
    if (hstrng[i] == $space | hstrng[i] == $null) break
 
    #$% move string into array for display
    call smov(hstrng[i],dest,len2)
   }
 return
 end
 

 
Subroutine smovi(i,dest,len2)
 
##########################################################
#$%
#$% Purpose:   SMOVI builds the ASCII representation
#$%            of an integer into a buffer.
#$%
#$% Called By: ASKTSK     CHKLL      CMDLVR
#$%            COMACK     DAMFLM     DEFARG
#$%            DISP       FPORDS     GNDTRK
#$%            NAMEBB     NAMEVU     OCIRKT
#$%            OUTI       PUTORD     ROGER
#$%            SYNBLD     TORAT      TSARGS
#$%            XBLAUN     XLOAD
#$%
#$% Calls:     SMOV       SMOVST
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98
 
 Integer i,j,k,len2         # jb 6/29/98
 character strng[21],dest[ARB]
 
 #$% establish null position
 strng[21] = $NULL
 
 #$% get absolute value of the input number
 k = iabs(i)
 
 #$% for each chaaracter in the string working backwards
 for (j = 20; j>0; j = j - 1)
    {
     strng[j] = mod(k,10) + $DIG0
     k = k/10
    }
 
 #$% for each character in the string
 for (j=1; j < 20; j=j+1)
    {
     #$% break loop if character is a zero
     if (strng[j]!=$DIG0) break
    }
 
 #$% if the inputted character is negative, add the minus sign
 if (i < 0) call smov ($minus,dest,len2)
 
 #$% build the RATFOR string into a buffer
 call smovst(strng[j],dest,len2)
 
 return
 end
 

Subroutine smoviz(i,n,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
##########################################################
#$%
#$% Purpose:   SMOVIZ builds an integer string of a
#$%            given width (with preceeding zeroes) into
#$%            a buffer.
#$%
#$% Called By: AVAENT     BLDTKN     ESMENT
#$%            FDAIR      FEAIR      FLTENT
#$%            FPSST      HFDENT     OUTIZ
#$%            PASENT     PRD        RDDET
#$%            SHPENT     SMOVLL     SOSENT
#$%            SUBENT     TRKENT     TRKNUM
#$%
#$% Calls:     SMOV
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE                      # jb 6/29/98
 
Integer i,j,k,n,len2,ifill,isign    # jb 6/29/98
character strng[11],dest[ARB]
 
#$% set ifill at zero
ifill = $dig0
 
#$% continue processing in next subroutine
go to 100
 
entry smovib(i,n,dest,len2)
 
#############################################################
#$%                                                         #
#$% Purpose:   SMOVIB builds an integer string of a given   #
#$%            width (with preceeding blanks) into a buf-   #
#$%            fer.                                         #
#$%                                                         #
#############################################################
 
#$% set ifill as a space
ifill = $space
 
#$% ifill is either a zero (smoviz) or a space
#$% set character to  a null
100  strng[11] = $NULL
 
#$% get rid of negative signs (make absolute value)
k = iabs(i)
 
#$% for each character
for (j = 1; j<= 10; j = j+1)
   {
    strng[j] = mod(k,10) + $DIG0
    k = k/10
   }
 
#$% for each character working backwards
for (j=10; j > 1; j = j-1)
    if (strng[j]!=$DIG0) break
 
#$% if the inputted character was negative, set sign to minus
if (i < 0)  isign = $minus
#$% else make sign a zero or a space
else        isign = ifill
 
#$% for each character in the string
for (k=n; k>= 1; k=k-1)
   {
    #$% return minus sign and fill spaces with zeros
    if (ifill == $dig0 & isign == $minus)
       {
	call smov(isign,dest,len2)
	isign = ifill
	next
       }
 
    #$% return minus sign and fill spaces with spaces
    if      (k-1== j) call smov(isign,dest,len2)
    else if (k  >  j) call smov(ifill,dest,len2)
    else              call smov(strng[k],dest,len2)
   }
 
return
end
 

 
Subroutine smovLN(strng,dest,len2)
 
##########################################################
#$%
#$% Purpose:   SMOVLN builds a string and a carriage
#$%            return into a buffer.
#$%
#$% Called By: None
#$%
#$% Calls:     SMOVST     SMOVR
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98
 
 Integer len2               # jb 6/29/98
 character strng[ARB],dest[ARB]
 
 #$% enter charater string into a buffer
 call smovst(strng,dest,len2)
 
 #$% add a carraige return to end of string
 call smovR (dest,len2)
 
 return
 end
 
 
 
Subroutine smovR (dest,len2)
 
##########################################################
#$%
#$% Purpose:   SMOVR builds a carriage return into
#$%            a buffer.
#$%
#$% Called By: SMOVLN
#$%
#$% Calls:     SMOV
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98
 
 Integer len2               # jb 6/29/98
 character dest[ARB]
 
 #$% call each function to create a carraige return
 call smov($Return,dest,len2)
 call smov($LINEFEED,dest,len2)
 
 return
 end
 
 
Subroutine smovST(strng,dest,len2)
 
##########################################################
#$%
#$% Purpose:   SMOVST builds a string (RATFOR) into
#$%            a buffer.
#$%
#$% Called By: SMOVI      SMOVLN
#$%
#$% Calls:     SMOV
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98
 
 Integer i,len2
 character strng[ARB],dest[ARB]
 
 #$% for each character in a string until a null is reached
 for (i=1;strng[i]!=$null;i=i+1)
   {
    #$% enter string into a buffer
    call smov(strng[i],dest,len2)
   }
 return
 end
 

Subroutine smov(i,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
##########################################################
#$%
#$% Purpose:   SMOV builds a single character into
#$%            a buffer.
#$%
#$% Called By: BBSMAP     BBTEST     BLDTKN
#$%            CHKLL      CMDLVR     COMACK
#$%            DAMFLM     DEFARG     DISP
#$%            EXPARG     FMOVX      FPORDS
#$%            FPRPMX     FPSST      GETLN
#$%            GETLNH     GETWD      IDENT
#$%            LFILE      LFORK      NAMEBB
#$%            OCIRKT     OCUDB      ODROP
#$%            OEMBRK     OLAUNC     OLOAD
#$%            OUT        PASENT     PUTORD
#$%            REVORD     ROGER      SAVEBB
#$%            SEND       SHPENT     SMOVV
#$%            SMOVHN     SMOVI      SMOVIZ
#$%            SMOVLL     SMOVR      SMOVST
#$%            SYNBLD     TRKNUM     TSARGS
#$%            XTAKE      XVLAUN
#$%
#$% Calls:     IPBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98
 
 Integer len2               # jb 6/29/98
 character i,dest[ARB]      # jb i is character??? 6/29/98
 
 len2 = len2 + 1
 dest[len2] = i
 return
 end
 

subroutine smovx (ival,ilen,dest,len2)    # Format value in Hex
IMPLICIT NONE                       # jb 6/29/98
 
integer*4   i,j,k, ival, ilen, len2 # jb 6/29/98
character   dest[ARB]
 
i = ival
 
for (k=(ilen-1)*4; k>=0; k=k-4)
   {
    j = istrip (i,k,M4Bits)
 
    if (j <= 9) call smov (j+$dig0  ,dest,len2)
    else        call smov (BIGA-10+j,dest,len2)
   }
 
return
end
 

 
subroutine smovo (ival,ilen,dest,len2)    # Format value in Octal   # DEW 10/99
IMPLICIT NONE                       # jb 6/29/98
 
integer*4   i,j,k, ival, ilen, len2 # jb 6/29/98
character   dest[ARB]
 
i = ival
 
for (k=(ilen-1)*3; k>=0; k=k-3)
   {
    j = istrip (i,k,M3Bits)
 
    call smov (j+$dig0  ,dest,len2)
   }
 
return
end
 

 
subroutine smovf (fval,idec,dest,len2)     # format in floating point
 IMPLICIT NONE              # jb 6/29/98
 
# move a floating point value with a specified number of decimal places
#   fval = Real* 4 value to format
#   idec = number of decimal places (0..99)
#          and an overall field width if > 99
#          FVAL     IDEC    Output
#           5.246     1     '5.2'
#           5.246     2     '5.25'
#           5.246     3     '5.246'
#           5.246   501     '  5.2'
#           5.246   502     ' 5.25'
#           5.246   503     '5.246'
#
 
real*4      fval, r,rval
integer*4   i,idec,len2, len,ndec,ival,len_W,len_F # jb 6/29/98
character   dest[ARB], fill
 
fill = $SPACE
 
repeat
    {
    break
    entry smovfz (fval,idec,dest,len2)     # format in floating point (zero fill)
    fill = '0'
    }
 
len = idec/100                              # width of field
ndec = mod(idec,100)                        # number of decimal places
 
r = (.5 / 10 ** ndec)                       # Amount to round
rval = sign(abs(fval) + r,fval)             # Round Up (away from zero)
ival = rval                                 # Whole Number
 
len_w = len - ndec - 1                      # Length (width) of Whole number
len_f = ndec  # Length (width) of decimal portion
              # --but ndec is used below-- NOT len_f??? jb 6/29/98
 
len = len_w
 
if (len <= 0)
   {
    if (ival == 0 & rval < 0) call smovV ("-0",dest,len2)
    else                      call smovi (ival,dest,len2)
   }
else
   {
    if (ival == 0 & rval < 0)
       {
        while (len > 2) {call smov (fill,dest,len2); len=len-1}
        call smovV ("-0",dest,len2)
       }
    else if (fill == $SPACE)
       {
        call smovib (ival,len,dest,len2)
       }
    else
       {
        call smoviz (ival,len,dest,len2)
       }
   }
 
call smov ($period,dest,len2)
r = rval - ival                             # Rounded Fraction
i = abs(r) * 10 ** ndec                     # decimal
call smoviz (i,ndec,dest,len2)
 
return
end
 

 
Subroutine smov_tgtlls (radian, hems, dest, len2)
################################################################################
#$%
#$% Purpose:    Smov_tgtlls builds ASCII representation of a latitude/longitude
#$%             into a buffer.  The format is DDDMMSS (N/S, E/W).  This
#$%             subroutine was cloned form smovlls for use with the TMS interface.
#$%
#$% Called By:
#$%
#$% Calls:      SMOV..
#$%
#$% Date:       Jun 89
#$%
#$% Author:     TSgt Kim Harris  (AWSIM)
#$%
################################################################################
IMPLICIT NONE              # jb E2145      6/20/00
 
real       radian
VMSchar*2  hems
character  dest[ARB]
integer    len2
 
real       xbdeg
integer    ideg
real       xbmin
integer    imin
real       xbsec
integer    isec
character  char
integer    i, k     # jb E2145 (Implicit None)  6/20/00
 
#$% Convert to absolute degrees.
xbdeg = abs(radian * (180./$pi))
 
#$% Take integer part.
ideg = int(xbdeg)
 
#$% Convert excess to minutes.
xbmin = 60. * (xbdeg - float(ideg))
 
#$% Take integer part.
imin = int(xbmin)
 
#$% Convert excess to seconds.
xbsec = 60. * (xbmin - float(imin))
 
#$% Round to nearest whole second.
isec = int(xbsec + .5)
 
#$% If more than 60 seconds, make one more minute and zero seconds.
if (isec >= 60)
   {
    imin = imin + 1
    isec = 0
 
    #$% If more than 60 minutes, make one more degree and zero minutes.
    if (imin >= 60)
       {
        ideg = ideg + 1
        imin = 0
       }
   }
 
if (radian >= 0.0) i = 1        # N or E
else               i = 2        # S or W
 
#$% Set char to N/E or S/W.
char = ichar(hems[i:i])
 
#$% Set k to northern N/S or E/W.
if (char == $letN | char == $letS) k = 2
else                               k = 3
 
#$% Move degrees/minutes into array for display.
call smoviz (ideg,k,dest,len2)
call smoviz (imin,2,dest,len2)
call smoviz (isec,2,dest,len2)
call smov   (char,dest,len2)
 
return
end

 
define ($powsize,5)
 
subroutine smovf_abrev (_     # Float to text with K,M,B,T for 1000's
                    value,      # in:     floating point number
                    str,        # out:    text
                    len)        # in/out: string length
################################################################################
#$%
#$% Purpose:    smovf_abrev buils an abreviated ASCII representation of
#$%             a floating point number into the character buffer str.  The
#$%             format is xK for thousandsm xM for millions, xB for billions
#$%             xT for trillions, xX for quadrillions (or bigger).  There are
#$%             no leading zeros or blanks.
#$%
#$%             Note:  The most significant digit displayed is rounded, so
#$%                    9999999.0 will be displayed as 10.000M.
#$%
#$% Called By:
#$%
#$% Calls:      NINT     (fortran intrinsic)
#$%             INT      (fortran intrinsic)
#$%             Log10    (fortran intrinsic)
#$%             ABS      (fortran intrinsic)
#$%             SMOV..
#$%
#$% Date:       March 1996 (E1467)
#$%
#$% Author:     James Allen
#$%
#$% Modified:   Carol Kropp - 8/96 (E1643)
#$%             Values less than 1 million do not receive an abreviation and
#$%             values larger are now real numbers with 3 significant digits.
#$%
################################################################################
IMPLICIT NONE              # jb E2145      6/20/00
 
real       value
character  str[ARB]
integer    len
 
integer    ipow [$powsize]
real       float_value
real       abrev_float_value
integer    is_negative
integer    iexp
integer    size_needed
character  abrev_letter
integer    ipow_index
 
data       ipow /$letK, $letM, $letB, $letT, $letX/
 
  float_value = value
  is_negative = no
 
  if (float_value == 0.0)
     iexp = 0
  else if (float_value > 0.0)
     iexp = INT (Log10 (float_value))
  else
    {
     is_negative = yes
     float_value = ABS (float_value)
     iexp = INT (Log10 (float_value))
    }
 
  if (iexp < 6)   # if 999,999 or less than no size information
    {             # needed for the number
     size_needed = no
     abrev_letter = $Null
     abrev_float_value = float_value
    }
  else
    {
     size_needed = yes
     ipow_index = iexp / 3
     abrev_letter = ipow[min(ipow_index,$powsize)]
     abrev_float_value = float_value / (10.0**(ipow_index*3))
 
     if (INT (Log10 (abrev_float_value)) >= 3)    # for cases like 999999
       {                                          # which should be 1m not 1000K
        abrev_letter = ipow[min(ipow_index+1,$powsize)]
        abrev_float_value = abrev_float_value / 1000.0
       }
    }
 
  #$% display amount of fuel, the letter "M","B", "T" or "X"
  if (is_negative == yes)
    call smov (MINUS, str, len)
 
  if (size_needed == yes)
    {
     call smovf (abrev_float_value, 3, str, len)   # 3 decimal place accuracy
     call smov  (abrev_letter, str, len)
    }
  else
    {
     call smovi (INT(abrev_float_value + 0.5), str, len)
    }
 
return
end
