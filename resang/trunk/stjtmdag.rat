#  File:     STJTMDAG.RAT
#  Date:     May 1997 (E1791)
#  Purpose:  JTMD Air-to-Ground Engagement ASTAB
#            Displays information on current engagements which
#            are processing the JTMD specific air-to-ground model.
 
include "ascii.inc"
include "bbcode.inc"
include "bbctl.inc"
include "stmain.inc"
 
include "bbaml.inc"
include "bbdeq.inc"
include "bbiff.inc"
include "bbjag.inc"
include "bbshc.inc"
include "bbunt.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145  3/22/00
define ($low$order$key,ikey)

 
 
subroutine JTMD_Air_to_Ground_ASTAB
#################################################################
#$%
#$% Purpose:   JTMD_Air_to_Ground_Astab controls the displaying
#$%            of data from the JTMD Air-to-Ground Engagement
#$%            Model Table (JAG).
#$%
#$% Called By: STDISP
#$%
#$% Calls:     Next_JAG
#$%            JAG_Entry
#$%            No_JAG_Entries
#$%
#$% Tables:    JAG
#$%
#$% Date:      May 1997
#$%
#$% Author:    Carol Kropp
#$%
#################################################################
BBcommon
STATUScommon
 
Integer  GAME_DTGs
integer  msg_len
integer  ifound
integer  JAG$Pointer
 
#$% jb E2141  msg1 and msg2 changed for 9-character EVENT name  3/14/00
#                       1         2         3         4         5         6         7         8
#             012345678901234567890123456789012345678901234567890123456789012345678901234567890
string   msg1 "CALLSIGN  EVENT         IFF DATA       LATITUDE  LONGITUDE    EST TOT           "
string   msg2 "-------- --------  ------------------  --------- ----------   -------           "
#              aannn    xxxxxxxx  1/nn 2/nnnn 3/nnnn  dd-mm-ssH ddd-dd-ddH   ddhhmmZ
#
 
  $prepare$next$line
  $column  1
  $outv  ("View: ")
  $outh  (nmvue, 5)
  $column 15
  $outv  ("JTMD AIR-TO-GROUND ENGAGEMENTS [")
  $outi  (iboard)
  $outV  ("] - Page ")
  $outib (kpage,2)
  $column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
  msg_len = 0
  call smovh (msg1, arb, ipage[1,2], msg_len)
  linlen[2] = msg_len
  msg_len = 0
  call smovh (msg2, arb, ipage[1,3], msg_len)
  linlen[3] = msg_len
  lincnt = 3
 
  $exit$on$overflow
  ifound = $no
 
  repeat
    {
     call Next_JAG (JAG$Pointer)
 
     if (JAG$Pointer$Valid)
       {
        ifound = $yes
        call JAG_Entry (JAG$Pointer)
 
        $exit$on$overflow
       }  # end of if the JAG is good
     else
        break
    }   # end of repeat loop
 
  if (ifound == $no)
    call No_JAG_Entries
 
return
end   # end of JTMD_Air_to_Ground_ASTAB

 
subroutine Next_JAG (next_jag_pointer)
#################################################################
#$%
#$% Purpose:   Next_JAG locates the next JTMD air-to-ground
#$%            engagement entry for display on the astab.  The
#$%            entries are displayed in alphabetical order
#$%            of the callsign.
#$%
#$% Called By: JTMD_Air_to_Ground_ASTAB
#$%
#$% Calls:     compar    <asformat.rat>
#$%
#$% Tables:    JAG     UNT     AML
#$%
#$% Date:      May 1997
#$%
#$% Author:    Carol Kropp
#$%
#################################################################
BBcommon
StatusCommon
 
integer  next_jag_pointer
 
literal  cstrip8          # function used in extracting names from the BlackBoard
 
literal  lowest_name[1]
integer  JAG$Pointer, JAG$AMLIndx$I
integer  UNT$Pointer, unit_view, UNT2$Pointer
integer  AML$Pointer
literal  name_key[1], callsign[1]
integer  compare_result
 
  lowest_name[1] = $Highest$Ascii
 
  if (ikey == 1)
     name_key[1] = $Lowest$Ascii            # last reported name
  else
     name_key[1] = ikey
 
  next_jag_pointer = $null
  for (JAG$Pointer$First; JAG$Pointer$Valid; JAG$Pointer$Next)
    {
     if (xJAG$InUse$I != $no)
       {
        UNT$Pointer$To  (xJAG$AttackAircraftIndx$I)
        JAG$AMLIndx$I = xJAG$AMLIndx$I
        if (JAG$AMLIndx$I == xUNT$AmlIndx$I)
          {
           unit_view = xUNT$View$I
           callsign[1] = xUNT$Name$C
          }   # end of if the attack a/c is still in the UNT
        else
          {
           AML$Pointer$To   (JAG$AMLIndx$I)
           UNT2$Pointer$To  (xAML$OwnerIndx$I)
           unit_view = xUNT2$View$I
           callsign[1] = xAML$SideNumber$C
          }  # the attack aircraft no longer fills the UNT slot
 
        if (unit_view == iview)     # is the attack a/c in the current view
          {
           call compar (1, callsign, name_key, compare_result)
           if (compare_result > 0)
             {
              call compar (1, callsign, lowest_name, compare_result)
              if (compare_result <= 0)
                {
                 lowest_name[1] = callsign[1]
                 next_jag_pointer = JAG$Pointer
                }   # end of if alphabetically before the "lowest"
             }   # end of if alphabetically after the last reported
          }   # end of if in the correct view
       }   # end of if the entry is in use
    }   # end of loop through the JAG table
 
  ikey = lowest_name[1]
 
return
end   # end of Next_JAG

 
 
subroutine JAG_Entry (JAG$Pointer)
#################################################################
#$%
#$% Purpose:   JAG_Entry formats the JTMD Air-to-Ground
#$%            Engagement table data for display on the astab.
#$%
#$% Called By: JTMD_Air_to_Ground_ASTAB
#$%
#$% Calls:     smov..              <lbsmov.rat>
#$%            base_10_to_Base_8   <lbmisc.rat>
#$%            RLL2RB              <lbmath.rat>
#$%            Display_JAG_Targets
#$%
#$% Tables:    JAG     UNT     AML
#$%
#$% Date:      May 1997
#$%
#$% Author:    Carol Kropp
#$%
#################################################################
BBcommon
STATUScommon
 
LITERAL  CSTRIP8    # jb E2145  3/22/00
integer  JAG$Pointer
 
integer  Game_DTG         # function to compute zulu time
integer  Base_10_to_Base_8
 
integer  UNT$Pointer
integer  JAG$AMLIndx$I, AML$Pointer
literal  callsign, event_name
integer  DEQ$Pointer, IFF$Pointer
integer  DEQ$IFFMode1_Digit1$I, DEQ$IFFMode1_Digit2$I
integer  DEQ$IFFMode2$I, DEQ$IFFMode3$I
real     JAG$Latitude$F, JAG$Longitude$F
real     range_nmi, bearing, speed
real     time_over_target
 
  $test$next$line
  $exit$on$overflow
  $save$line$count
  $save$keys
 
  $prepare$next$line
 
  UNT$Pointer$To  (xJAG$AttackAircraftIndx$I)
  JAG$AMLIndx$I = xJAG$AMLIndx$I
  if (JAG$AMLIndx$I == xUNT$AmlIndx$I)
    {
     callsign = xUNT$Name$C
     event_name = xUNT$Event$C
    }   # end of if the attack a/c is still in the UNT
  else
    {
     AML$Pointer$To   (JAG$AMLIndx$I)
     callsign = xAML$SideNumber$C
     if (xAML$Status$I == $Destroyed$Code)
       event_name = 'KILLED'
     else
       event_name = 'LANDED'
    }  # the attack aircraft no longer fills the UNT slot
 
  $column 1
  call smovhn (callsign, $$MaxLit, ipage[1,lincnt], ibyte)
  $column 10        # jb E2141  10 vs 11)  3/14/00
  call smovhn (event_name, $$MaxName, ipage[1,lincnt], ibyte) # jb E2141 3/14/00
 
  for_DEQ_chain (UNT$Pointer$index)
    {
     if ((xDEQ$Ident$I == $IFF$Code) &
         (xDEQ$On$I == $yes))
       {
        IFF$Pointer = xDEQ$Pntr$i
        if (xIFF$Function$i != $INTERROGATOR$Code)
          {
           $column 20        # jb E2141  20 vs 19)  3/14/00
           DEQ$IFFMode1_Digit1$I = xDEQ$IFFMode1_Digit1$I
           DEQ$IFFMode1_Digit2$I = xDEQ$IFFMode1_Digit2$I
           DEQ$IFFMode2$I = xDEQ$IFFMode2$I
           DEQ$IFFMode3$I = xDEQ$IFFMode3$I
           if (DEQ$IFFMode1_Digit1$I != 0 &
               DEQ$IFFMode1_Digit1$I != 0 )
             {
              call smovv ("1/", ipage[1,lincnt], ibyte)
              call smovi (DEQ$IFFMode1_Digit1$I, ipage[1,lincnt], ibyte)
              call smovi (DEQ$IFFMode1_Digit2$I, ipage[1,lincnt], ibyte)
              call smovv (" ", ipage[1,lincnt], ibyte)
             }
           if (DEQ$IFFMode2$I != 0)
             {
              call smovv ("2/", ipage[1,lincnt], ibyte)
              call smovi (base_10_to_Base_8(DEQ$IFFMode2$I),
                          ipage[1,lincnt], ibyte)
              call smovv (" ", ipage[1,lincnt], ibyte)
             }
           if (DEQ$IFFMode3$I != 0)
             {
              call smovv ("3/", ipage[1,lincnt], ibyte)
              call smovi (base_10_to_Base_8(DEQ$IFFMode3$I),
                          ipage[1,lincnt], ibyte)
             }
          }   # end of if the Transponder
       }   # end of if this is an IFF that is on
    } # end of search through DEQ table
 
  $column 40        # jb E2141  40 vs 39)  3/14/00
  JAG$Latitude$F = xJAG$Latitude$F
  call smovlls (JAG$Latitude$F, "NS", ipage[1,lincnt], ibyte)
 
  $column 50        # jb E2141  50 vs 49)  3/14/00
  JAG$Longitude$F = xJAG$Longitude$F
  call smovlls (JAG$Longitude$F, "EW", ipage[1,lincnt], ibyte)
 
  $column 63        # jb E2141  63 vs 62)  3/14/00
  if      (xJAG$AttackCompleted$I   == $yes) $OutV("Attack Complete")
  else if (xJAG$AttackTerminated$I  == $yes) $OutV("Out of Range")
  else if (xJAG$RTURestarted$I      == $yes) $OutV("Invalid")
  else if (xJAG$AttackCancelled$I   == $yes) $OutV("Cancelled")
  else if (xJAG$AttackIssued$I      == $yes) $OutV("Engaging")
  else if (xJAG$ScanCompleted$I     == $yes) $OutV("Scan Complete")
  else
    {
     call RLL2RB (xUNT$TrueLatitude$F, xUNT$TrueLongitude$F,
                  xUNT$CosTrueLat$F,
                  JAG$Latitude$F, JAG$Longitude$F,
                  COS (JAG$Latitude$F), range_nmi, bearing)
     speed = xUNT$TrueSpeed$F
     speed = MAX (0.001, speed)
     time_over_target = Game$Time +
                        ($Minutes$Per$Hour * (range_nmi / speed))
     call smoviz (Game_DTG (time_over_target),
                  6, ipage[1,lincnt], ibyte)
     call smovv  ("Z", ipage[1,lincnt], ibyte)
    }
  linlen[lincnt] = ibyte
 
  call Display_JAG_Targets (JAG$Pointer)
 
return
end   # end of JAG_Entry

 
subroutine Display_JAG_Targets (JAG$Pointer)
#################################################################
#$%
#$% Purpose:   Display_JAG_Targets displays the list of
#$%            "acquired" targets, including the engagement
#$%            status, for the JAG table entry.
#$%
#$% Called By: JAG_Entry
#$%
#$% Calls:     smov..      <lbsmov.rat>
#$%
#$% Tables:    JAG     SHC
#$%
#$% Date:      May 1997
#$%
#$% Author:    Carol Kropp
#$%
#################################################################
BBcommon
STATUScommon
 
LITERAL  CSTRIP8    # jb E2145  3/22/00
integer  JAG$Pointer
 
#                       1         2         3         4         5         6         7         8
#              12345678901234567890123456789012345678901234567890123456789012345678901234567890
string   msg1 "   TM Element  Other Red  Convoy     Struct     Sites      MilOps     Other    "
#                 aaaaa (s)   aaaaa (s)  aaaaa (s)  aaaaa (s)  aaaaa (s)  aaaaa (s)  aaaaa (s)
 
integer  i, j
integer  max_targets_in_a_caregory
integer  target_counts [$Hi_JAG$TGT$Category$I+1]
integer  sorted_targets [$Hi_JAG$TGT$Category$I+1, JAG$TGT$Slots]
integer  JAG$TGT$Index, JAG$TGT$Category$I, JAG$TGT$EngagementStatus$I
integer  SHC$Pointer
 
integer  column_value [$Hi_JAG$TGT$Category$I+1]
data     column_value /4, 16, 27, 38, 49, 60, 71/
 
character eng_code [$Hi_JAG$TGT$EngagementStatus$I+1]
data      eng_code /$SPACE, $LETP, $LETE, $LETM, $LETH/
 
  $test$next$line
  $exit$on$overflow
  $prepare$next$line
 
  max_targets_in_a_caregory = 0
  for (i = 1; i <= $Hi_JAG$TGT$Category$I+1; i = i + 1)
    {
     target_counts [i] = 0
     for (j = 1; j <= JAG$TGT$Slots; j = j + 1)
       sorted_targets [i, j] = 0
    }
 
  for (JAG$TGT$Index = 1; JAG$TGT$Index <= xJAG$NbrTargetsAcquired$I;
                          JAG$TGT$Index = JAG$TGT$Index + 1)
    {
     if (xJAG$TGT$InUse$I != $no)
       {
        JAG$TGT$Category$I = xJAG$TGT$Category$I
        if (JAG$TGT$Category$I == $JAG$TargetType$Other)
          i = $Hi_JAG$TGT$Category$I + 1
        else
          i = JAG$TGT$Category$I
        target_counts [i] = target_counts [i] + 1
        sorted_targets [i, target_counts [i]] = JAG$TGT$Index
        if (target_counts [i] > max_targets_in_a_caregory)
          max_targets_in_a_caregory = target_counts [i]
       }   # end of if the subtable entry is in use
    }   # end of collecting target data
 
  if (max_targets_in_a_caregory == 0)
    {
     $column 4
     call smovv ("No Acquired Targets", ipage[1,lincnt], ibyte)
     linlen[lincnt] = ibyte
    }   # end of if no targets
  else
    {
     $column 1
     call smovh (msg1, arb, ipage[1,lincnt], ibyte)
     linlen[lincnt] = ibyte
 
     for (i = 1; i <= max_targets_in_a_caregory; i = i + 1)
       {
        $test$next$line
        $exit$on$overflow
        $prepare$next$line
        $column 1
 
        for (j = 1; j <= $Hi_JAG$TGT$Category$I+1; j = j + 1)
          {
           JAG$TGT$Index = sorted_targets [j, i]
           if (JAG$TGT$Index > 0)
             {
              SHC$Pointer = xJAG$TGT$SHCPntr$I
              JAG$TGT$EngagementStatus$I = xJAG$TGT$EngagementStatus$I + 1
 
              $column column_value[j] # jb \/ E2141 3/14/00
              call smovhn (xSHC$Type$C,$$MAXname, ipage[1,lincnt], ibyte) #
              call smovv  (" (", ipage[1,lincnt], ibyte)
              call smov   (eng_code[JAG$TGT$EngagementStatus$I],
                                           ipage[1,lincnt], ibyte)
              call smovv  (")", ipage[1,lincnt], ibyte)
             }   # end of if there is a target for this type
          }   # end of loop through Ith element of each type
 
        linlen[lincnt] = ibyte
       }   # end of displaying target data lines
    }   # end of if there are any targets to display
 
return
end   # end of Display_JAG_Targets

 
subroutine No_JAG_Entries
#################################################################
#$%
#$% Purpose:   No_JAG_Entries displays a message if there are
#$%            no aircraft mission histories for the view.
#$%
#$% Called By: Air_Mission_History_Astab
#$%
#$% Calls:     smov..      <lbsmov.rat>
#$%
#$% Tables:    None
#$%
#$% Date:      May 1997
#$%
#$% Author:    Carol Kropp
#$%
#################################################################
BBcommon
STATUScommon
 
  $test$next$line
  $exit$on$overflow
  $prepare$next$line
 
  $column 1
  call smovv ("No JTMD Air-to-Ground ", ipage[1,lincnt], ibyte)
  call smovv ("Engagements for this view", ipage[1,lincnt], ibyte)
  linlen[lincnt] = ibyte
 
return
end   # end of No_JAG_Entries
