 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 9-mar-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw             modularized routine and made compatible with
###                     use of search keys in main driver;
###                     added checks on validity of data to avoid
###                     problems which could result now that the blackboard
###                     can be read at any time
###
 
###
### mod to version 3.0          dated 6-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 sfc             changed routine to access RMT Table for data
###                     to be displayed on Active Track Status Board;
###
 
 
#####   version 3.0     dated 22-dec-1980
 
 
# 
 
#$%      MODULE                        UTILITY                  DATA
#$%    SUBROUTINES                   SUBROUTINES               TABLES
#$%    ===========                   ===========               ======
#$%
#$%      TRKSTA                         OUTH                     RMT
#$%      TRKTIT                         OUTI                     RVU
#$%      TRKTRK                         OUT                      UNT
#$%      TRKHED                         OUITZ
#$%      NXTTRK                         OUTIB
#$%      TRKENT                         SMOVIB
#$%      TRKNUN                         SMOVIZ
#$%      TRKDSH                         SMOVLL
#$%      IDHED                          SMOVH
#$%      COMPAR<STATUS>                 TRUBRG
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1. <filename> indicates where subroutine is located.
#$%
#$%    2. Utility subroutines not shown on flowchart.
#$%
#$%    3. * indicates no other subroutines called.
#$%
#$%
#$%    FLOWCHART FOR FILE TRKSTA
#$%    =========================
#$%
#$%    STDISP<STATUS> - TRKSTA - TRKTIT*
#$%                            - TRKTRK - TRKHED*
#$%                                     - NXTTRK - COMPAR*
#$%                                     - TRKENT - IDHED*
#$%                                     - TRKNUN - TRKDSH*
 
 
# 
 
 
include "ascii.inc"                                     # include ascii constants
include "bbacc.inc"                                    # blackboard defines
include "bbcode.inc"                                    # blackboard defines
include "bbctl.inc"
include "bbunt.inc"                       # jb Replaces DUP  4/4/89
include "bbrmt.inc"
include "bbshc.inc"
include "bbrvu.inc"
include "stmain.inc"
 
define (BBimplicit, IMPLICIT NONE)   # jb E2145  3/14/00
define ($low$order$key,ikey2)
 
Subroutine TRKSTA			## Active Track Status Board
 
BBcommon
STATUScommon
 
#$% call for display active track status board titles
call TRKTIT
 
#$% call for active track status board data
call TRKTRK
 
return
end
 

 
 
Subroutine TRKTIT				## Active Track Title
 
##############################################################################
#$%
#$% Purpose:   TRKTIT generates titles for the active track status board.
#$%
#$% Called By: TRKSTA
#$%
#$% Calls:     OUTH     OUTI
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
#$% go to next line
$prepare$next$line
 
#$% display active track status board titles
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
$column 16 ; $OutV("ACTIVE TRACK STATUS BOARD [") ; $OutI(iboard)
             $outv("] - Page ") ; $OutIB(kpage,2)
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
 
Subroutine TRKTRK
 
############################################################################
#$%
#$% Purpose:   TRKTRK executes the subroutines that generate the active
#$%            track status board.
#$%
#$% Called By: TRKSTA
#$%
#$% Calls:     TRKHED     TRKENT
#$%            NXTTRK     TRKNUN
#$%
#$% Tables:    RMT
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
############################################################################
BBcommon
STATUScommon
 
Integer ifound, lstsec,  RMT$Pointer    # jb E2145  3/14/00
 
#$% call for active track status board headings
call TRKHED
 
#$% exit if status board full
$exit$on$overflow
 
#$% initialize test flag
ifound = $no
lstsec = 0
 
repeat
   {
    #$% get next active track entry
    call NXTTRK(rmt$pointer)
 
    #$% if no active track, break loop
    if (rmt$pointer == 0) break
 
    #$% set flag
    ifound = $yes
 
    #$% get active track data
    call TRKENT(rmt$pointer,lstsec)
 
    #$% exit if status board full
    $exit$on$overflow
   }
 
#$% if no active tracks found, display message
if (ifound == $no)  call TRKNUN
 
return
end
 

 
 
Subroutine TRKHED
 
##############################################################################
#$%
#$% Purpose:   TRKHED generates headings for the active track status board.
#$%
#$% Called By: TRKTRK
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer ilen    # jb E2145  3/14/00
 
#$% move headings to IPAGE for display
#string MSG1 "PLATFORM   TRK #   BEARING  RANGE   TIME    LAT      LONG       CLASS "
#             0123456789012345678901234567890123456789012345678901234567890123456789012345678
string MSG1  "PLATFORM   TRK #   BEARING  RANGE   TIME    LAT      LONG      CLASS "
#              0123456789012345678901234567890123456789012345678901234567890123456789012345678
#string IDASH "--------  -------    ---     ---    ----   ------   -------  ---------" # jb  2/17/00
 
 
 
ilen = 0; call smovh (MSG1,ARB,Ipage[1,2],ilen)
 
#$% set line length
LINLEN[2] = ilen        # jb E2141  2/17/00
 
 
 
#$% set line count
LINCNT = 2
 
return
end
 

 
 
Subroutine NXTTRK(nxtpnt)
 
###########################################################################
#$%
#$% Purpose:   NXTTRK locates the next active track entry for display.
#$%
#$% Called By: TRKTRK
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    RVU     RMT
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
##########################################################################
BBcommon
STATUScommon
 
literal itrk[3]
LitCharEquiv(iorder,0:3)
LitCharEquiv(iclsch,0:3)
literal keys[3],lowest[3]   # jb E2145 (delete ialfa)   3/14/00
integer ctoi,
        kk,nxtpnt,lstrmt,irsult,                        # jb  E2145 3/14/00
        RVU$Pointer,                                     # jb  E2145 3/14/00
        RMT$Pointer,RMT$DetectionType$I,RMT$TrackNumber$I # jb  E2145 3/14/00
 
data iorderC[$unknown$code ]/ "1       " /
data iorderC[$enemy$code   ]/ "2       " /
data iorderC[$neutral$code ]/ "3       " /
data iorderC[$friendly$code]/ "4       " /
 
data iclschC[$air$code     ]/ "A       " /
data iclschC[$surface$code ]/ "S       " /
data iclschC[$sub$code     ]/ "U       " /
data iclschC[$null$code    ]/ "        " /
 
#$% initialize search array
lowest[1] = '9'
lowest[2] = $highest$ascii
lowest[3] = '99999999'
 
#$% save key
kk = 0; call smovv ("        ", keys[1], kk)
kk = 0; call smovi (isect,keys[1],kk)
 
#$% if first entry, save lowest; else save key
if (ikey == 1) keys[2] = $lowest$ascii
else           keys[2] = ikey
 
#$% save key
keys[3] = ikey2
 
#$% pointer to zero
nxtpnt = 0
 
#$% if CONTROL view, return
if (iview == $neutral$view) return
 
#$% set RVU pointer
RVU$pointer$to iview
 
#$% set RMT pointer
rmt$pointer$to xRVU$LastRmtIndx$i
lstrmt = rmt$pointer
 
#$% search RMT table
for (rmt$pointer$to xRVU$FirstRmtIndx$i;rmt$pointer<=lstrmt;rmt$pointer$next)
   {
    #$% if slot not in use, get next
    if (xrmt$InUse$i    == $no) next
    if (xRMT$Detector$I == $no) next
 
    #$% get detection type
    rmt$DetectionType$i = xrmt$DetectionType$i
 
    #$% if detection does not have a visual or non-visual code, get next entry
    if (rmt$DetectionType$i != $ActiveVisual$code    &
	rmt$DetectionType$i != $ActiveNonVisual$code  ) next
 
    #$% get track number
    rmt$TrackNumber$i = xrmt$TrackNumber$i
 
    #$% if track number is not valid, get next entry
    if (rmt$TrackNumber$i == 0) next            # means data is garbage
 
    #$% set friendly,enemy,etc. & target identification
    itrk[1] = iorder[xrmt$TargetId$i]
    #$% set air,surface,etc & target class
    itrk[2] = ICLSCH[xrmt$Class$i]
    #$% save entries
    kk = 0; call smovv ("        ", itrk[3], kk)
    kk = 0; call smoviz (rmt$TrackNumber$i,5,itrk[3],kk)    # DEW 11/99 (E2172)
 
    #$% compare track number to keys
    call COMPAR(3,itrk,keys,irsult)
 
    if (irsult <  0) next                       # less than keys
 
    if (irsult == 0)                            # found exact match
       {
	#$% save pointer and return
	nxtpnt = rmt$pointer
	return
       }
 
    #$% compare track numbers to lowest
    call COMPAR(3,itrk,lowest,irsult)
 
    if (irsult > 0) next                        # larger than lowest found
 
    lowest[1] = itrk[1]                         # at this point, have
    lowest[2] = itrk[2]                         # best candidate so far
    lowest[3] = itrk[3]
 
    #$% save pointer
    nxtpnt = rmt$pointer
   }
 
#$% save lowest keys
#kk = 0; call smovh (lowest[1],4,isect,kk)	# isect = lowest[1]
kk    = 1
 
#$% convert characters to integers
isect = ctoi(lowest[1],kk)
 
#$% set lowest tracks as keys
ikey  = lowest[2]
ikey2 = lowest[3]
 
return
end
 

 
 
Subroutine TRKENT(rmt$pointer,lstsec)
 
#####################################################################
#$%
#$% Purpose:   TRKENT gets the active track data for display.
#$%
#$% Called By: TRKTRK
#$%
#$% Calls:     IDHED      OUTH       OUT
#$%            OUTIZ      OUTIB      SMOVIB
#$%            SMOVIZ     SMOVLL     SMOVH
#$%            TRUBRG
#$%
#$% Tables:    RVU     RMT
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
#####################################################################
BBcommon
STATUScommon
 
Literal icode, A_TRACK,
        UNT$Name$C, CSTRIP, CSTRIP8                 # jb E2145 3/14/00
 
REAL*4  RMT$ApparentLAT$F,RMT$ApparentLON$F,        # jb  E2145 3/14/00
        RMT$LastDetTime$F, UNT$HeadingError$F,      # jb  E2145 3/14/00
        UNT$TrueLatitude$F,UNT$TrueLongitude$F      # jb  E2145 3/14/00
Integer TRUBRG, Game_Time,kk,CTOI,itseq,            # jb  E2145 3/14/00
        lstsec,irange,itrue,iBrgR, iclch,           # jb  E2145 3/14/00
        RMT$Pointer,RMT$Detector$I,RMT$Bearing$I,   # jb  E2145 3/14/00
        RMT$Detectee$I,                             # jb  E2145 5/9/00
        UNT$Pointer, RVU$Pointer                    # jb  E2145 3/14/00
 
VMSchar ASTAB_Class*($$MaxName+1)
 
#$% test and exit on overflow, save line count
$test$next$line ; $exit$on$overflow
$save$line$count
 
#$% save keys
kk=0; call smovh (ikey,4,iclch,kk)	# iclch = ikey
kk = 1; itseq = ctoi(ikey2,kk)                              # DEW 11/99 (E2172)
 
#$% increment keys
$update$keys
 
#$% go to next line
$prepare$next$line
 
#$% if section not valid
if (isect != lstsec)
   {
    #$% get "ENEMY","FRIENDLY",etc headings for display
    call IDHED
 
    #$% test and exit if status board full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% save last section
    lstsec = isect
   }
 
#$% set RVU pointer; set track code
RVU$pointer$to iview
icode = xRVU$trackcode$c
 
#$% get detector making the contact
rmt$detector$i = xrmt$detector$i
 
$column 1   # jb E2141  (1 vice 3; room for 8-character name    2/17/00
 
#$% if detector is a valid one
if (rmt$detector$i != $no)
   {
    #$% set UNT pointer to the detector and  get name of platform
    UNT$POINTER$TO rmt$detector$i
    UNT$NAME$C = XUNT$NAME$C
 
    #$% if name is valid, display name of platform
    if (UNT$NAME$C != $NO) $OutHN(UNT$Name$c,$$MAXname)  # jb E2141  2/22/00
   }
 
#$% display track codes and number
$column 12 ; $OutHN(a_track(icode,iclch,itseq),$$MaxLit)            # (E2172)
 
#$% get bearing to target
rmt$bearing$i = xrmt$bearing$i
 
IBYTE = 21
 
#$% move bearing to IPAGE for display
call SMOVIZ(_
     rmt$bearing$i,
     3,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get range to target
irange = Xrmt$range$f + 0.5
 
IBYTE = 29
 
#$% move range to IPAGE for display
call SMOVIB(_
     irange,
     3,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get last detection time
rmt$LastDetTime$f = xrmt$LastDetTime$f
 
IBYTE = 36
 
#$% move last detection time to IPAGE for display
call SMOVIZ(_						## tpa
     Game_Time(rmt$LastDetTime$f),
     4,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get apparent latitude
rmt$apparentlat$f = xrmt$apparentlat$f
 
IBYTE = 43
 
#$% move apparent latitude to IPAGE for display
call SMOVLL(_
     rmt$apparentlat$f,
     "NS",
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get apparent longitude
rmt$apparentlon$f = xrmt$apparentlon$f
 
IBYTE = 52
 
#$% move apparent longitude to IPAGE for display
call SMOVLL(_
     rmt$apparentlon$f,
     "EW",
     IPAGE[1,LINCNT],
     IBYTE)
 
ibyte = 61      # jb E2141  (61 vice 63)    2/17/00
$outV (Astab_Class(RMT$Pointer))        # Get the Track Classification (E2183)
 
#$% set line length
linlen[lincnt] = IBYTE
 
#$% if view is CONTROL view
if (mside == $control$code)
   {
    #$% test and exit if status board is full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% get detectee unit number
    rmt$detectee$i = xrmt$detectee$i
 
    #$% set pointer to detectee
    UNT$POINTER$TO rmt$detectee$i
 
    #$% get name of detectee
    UNT$NAME$C = XUNT$NAME$C
 
    #$% display left paren
    $column 11 ; $OutV("(")                      # jb $OUTV 2/8/00)
 
    #$% if there is a detectee name, display it
    if (UNT$NAME$C != 0) $OutHN(UNT$NAME$C,$$MAXname)    # jb E2141  2/22/00
    #$% else display "M" & detectee unit number
    else               { $OutV("M") ; $OutIZ(rmt$detectee$i,4) } # jb $OUTV 2/00
    #$% display right paren
    $OutV(")")                                   # jb $OUTV 2/8/00
 
    $column 21
 
    #$% if no detector indicated, display "(Removed)"
    if (rmt$detector$i == 0) $OutV("(Removed)") # jb $OUTV 2/8/00
    #$% else if detector indicated
    else
       {
	#$% set position pointer to detector
	UNT$POINTER$TO rmt$detector$i
 
	#$% get heading error
	UNT$HEADINGERROR$F = XUNT$HEADINGERROR$F
 
	#$% convert to true bearing
    if (Xrmt$LastDetType$i != $Bistatic$type)
      ITRUE = TRUBRG(UNT$HEADINGERROR$F, rmt$bearing$i)
    else   # bistatic detection (which includes std dev brg error)
      {
       iBrgR = INT (UNT$HeadingError$F) + xRMT$BrgError$i
       itrue = rmt$bearing$i - iBrgR
       if (itrue > 360) itrue = itrue - 360
       else if (itrue < 0) itrue = itrue + 360
       else if (itrue == 360) itrue = 0
      }
 
	#$% display true bearing in parens
	$OutV("(") ; $OutIZ(iTrue,3) ; $OutV(")") # jb $OUTV 2/8/00
       }
 
    #$% get UNT pointer to detectee (target)
    UNT$POINTER$TO rmt$detectee$i
 
    #$% get true latitude and longitude of target
    UNT$TRUELATITUDE$F = XUNT$TRUELATITUDE$F
    UNT$TRUELONGITUDE$F = XUNT$TRUELONGITUDE$F
 
    #$% display true latitude and longitude in parens
    $column 43 ; $OutV("(") ; $OutLL(UNT$TRUELATITUDE$F,"NS")  # jb $OUTV 2/8/00
    $column 53 ; $OutLL(UNT$TRUELONGITUDE$F,"EW") ; $OutV(")") # jb $OUTV 2/8/00
   }
 
return
end
 

Subroutine TRKNUN
 
#############################################################################
#$%
#$% Purpose:   TRKNUN generates a message when there is no active track
#$%            data for display.
#$%
#$% Called By: TRKTRK
#$%
#$% Calls:     TRKDSH     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
#############################################################################
BBcommon
STATUScommon
 
#$% test if status board full; go to next line
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% get dashes for display
call TRKDSH
 
#$% test if status board full; go to next line
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% display "No active track" message
$column 1 ; $OutV("No active tracks for this view") # jb  $outV vice H 2/8/00
 
return
end
 

 
 
Subroutine TRKDSH
 
############################################################################
#$%
#$% Purpose:   TRKDSH outputs appropriately spaced dashes in the track
#$%            status board.
#$%
#$% Called By: TRKNUN
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
############################################################################
BBcommon
STATUScommon
 
##string IDASH "  -----    -----     ---     ---    ----   ------   -------     ----- "
#             0123456789012345678901234567890123456789012345678901234567890123456789012345678
string IDASH "--------  -------    ---     ---    ----   ------   -------  ---------" # jb  2/17/00
 
#$% display dashes
$column 1 ; $OutH(idash,70)     # jb  70 vice 73
 
return
end
 

 
 
Subroutine IDHED
 
##############################################################################
#$%
#$% Purpose:   IDHED generates type of track headings (re: friendly, enemy,
#$%            etc.) for the status board.
#$%
#$% Called By: TRKENT
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      28 JAN 82
#$%
#$% Author:    F. Jones
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer kk          # jb E2145  3/14/00
 
#$% position and display dashes
kk = 0
call smovv ("--------  -------    ---    ",ipage[1,LINCNT],kk)
##           0123456789012345678901234567890123456789012345678901234567890123456789012345678
 
#$% position headings and display
if      (isect == 1 ) call smovv("---UNKNOWN--",ipage[1,LINCNT],kk)
else if (isect == 2 ) call smovv("----ENEMY---",ipage[1,LINCNT],kk)
else if (isect == 3 ) call smovv("---NEUTRAL--",ipage[1,LINCNT],kk)
else if (isect == 4 ) call smovv("---FRIENDLY-",ipage[1,LINCNT],kk)
 
#$% position and display dashes
call smovv ("   ------   -------  --------",ipage[1,LINCNT],kk)
##           0123456789012345678901234567890123456789012345678901234567890123456789012345678
 
LINLEN[LINCNT] = kk
 
return
end
