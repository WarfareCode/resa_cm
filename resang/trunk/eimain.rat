include "alsp.inc"
include "alsp_resa.inc"
#include "gcgam.inc"
 
define (BBImplicit, Implicit None)
 
define ($not_mapped,  -1)
define ($debug1,       #)
 
define (ERR, -3)
 
define (output_unit, 10)
 
undefine write   # use the standard fortran write statement
 
# Check for non-generic outgoing mapping of all federation objects in RESA
# Federation object types include air, sea, cm, weapons
# Outgoing Federation objects with a generic mapping are output.
 
# This is a standalone program that maps the BB currently being used in a federation
 
program Check_incoming_enumerations
BBCommon
 
integer   game_number
VMSchar*30  bbname
character   bbmsg[ARB]
integer   error
integer nl
 
call initR4
 
game_number = 0
call who_am_i (game_number, bbname)
BBmap (bbname)
call check_version (error, bbmsg)
 
if (bbmsg[1] != EOS)
    call remark (bbmsg)
if (error == YES)
    call exit
 
 call help_pgm(0,
              "enumin: Check incoming enumerations",
              "enmin Tags: Enumerations",
              "Usage: enumin",
              "",
              "",
              "",
              "",
              "Example: enumin")
 
call Initialize_ALSP_Mapping()
 
call Init_Collection_File
 
nl = 0
call check_incoming_aircraft_enums(nl)
call check_incoming_sea_enums(nl)
call check_incoming_sonar_enums(nl)
call check_incoming_emitter_enums(nl)
call check_incoming_missile_enums(nl)
call check_incoming_weapon_enums(nl)
call check_incoming_sonobuoy_enums(nl)
 
 
call echov ("Number of unmapped incoming enumerations = ")
call echoi (nl)
call echor
 
close (output_unit)
 
end

 
subroutine who_am_i (igame, bbname)
###########################################################
#$%
#$% Purpose:   WHO_AM_I allows user to start a game using
#$%            a command line input
#$%
###########################################################
implicit none
VMSchar*(*) BBname
character  buf[30]
integer    igame, ctoi
integer    ic, k
 
igame = 0
 
if (igame == ERR)
    {
    call REMARK_v ("Missing Game Index")
    call exit                # exit program
    }
 
call make_CSF_bb_name (igame,$$BBNAME,bbname)
 
end
 

 
Subroutine Init_Collection_File
#########################################################################
#$%
#$% Purpose:    Init_Collection_File will open the data collection file
#$%             and write the enumeration information.
#$%
#########################################################################
BBcommon
 
integer    name_len
integer    return_val, msg_len
 
 
character  file_name[ARB]
vaxcharacter*ARB v_file_name
Equivalence  (file_name, v_file_name)
 
character  msg[80]
vaxcharacter*80 v_msg
Equivalence  (msg, v_msg)
 
name_len = 0
call smovhn (Scenario$Name, $$MaxLit, file_name, name_len)
call smovv  ("_check_incoming_enums.dat", file_name, name_len)
call smov   (EOS, file_name, name_len)
open (unit   = output_unit,  file   = v_file_name,
      iostat = return_val, recl = 120,   status = 'unknown')
if (return_val != 0)
{
 call echov ("Output file not opened")
 call echor
 call exit
}
 
call echov ("Output file is ")
call echohn (file_name,30)
call echor
 
return
end
 

Subroutine check_incoming_aircraft_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$Aircraft_Common
 
literal cstrip8
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
literal literal_class_name
literal reported_name[2000]
integer nreported, i
 
integer nl
integer mapping_index, enumeration_index
integer acc$pointer
 
nreported = 0
for (mapping_index = 1; mapping_index <= number_of_aircraft_maps; mapping_index = mapping_index + 1)
{
    enumeration_index = aircraft_unit_type [1, mapping_index]
    literal_class_name = aircraft_unit_type [2, mapping_index]
 
    for (ACC$Pointer$First; ACC$Pointer$OK; ACC$Pointer$Next)
    {
        if (literal_class_name == Xacc$Type$C) break
    }
 
    if (!ACC$Pointer$OK)
    {
        for (i = 1; i <= nreported; i = i + 1)
        {
            if (literal_class_name == reported_name[i]) break
        }
        if ( i > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = literal_class_name
 
            msg_len = 0
            call smovv ("No map for Aircraft type: ", msg, msg_len)
            call smovhn(literal_class_name, 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
return
end
 

Subroutine check_incoming_sea_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$sea_Common
 
literal cstrip8
literal class_name
 
literal reported_name[2000]
integer nreported, i
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer nl
integer shc$pointer
integer mapping_index, enum_index
 
nreported = 0
for (mapping_index = 1; mapping_index <= number_of_sea_maps;
     mapping_index = mapping_index + 1)
{
    enum_index = sea_unit_mappings [1, mapping_index]
    class_name = sea_unit_mappings [2, mapping_index]
 
    for (SHC$Pointer$First; SHC$Pointer$OK; SHC$Pointer$Next)
    {
        if (XSHC$Category$i == $Shorebase$code) next
 
        if (xSHC$Type$C == class_name)
          break
    }
 
    if (!SHC$Pointer$OK)
    {
        for (i = 1; i <= nreported; i = i + 1)
        {
            if (class_name == reported_name[i]) break
        }
        if ( i > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = class_name
 
            msg_len = 0
            call smovv ("No map for Ship Class: ", msg, msg_len)
            call smovhn(class_name, 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}   # end of loop through RESA ship classes
 
return
end
 

Subroutine check_incoming_emitter_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$emitter_Common
 
integer nl
 
literal reported_name[2000]
integer nreported, i
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  JAM$Pointer, RAD$Pointer
integer  mapping_index
literal  literal_emitter_name
literal  cstrip8
 
nreported = 0
for (mapping_index = 1; mapping_index <= number_of_emitter_maps;
                        mapping_index = mapping_index + 1)
{
    literal_emitter_name = alsp_emitter_list [2, mapping_index]
    for (JAM$Pointer$First; JAM$Pointer$OK; JAM$Pointer$Next)
    {
        if (xJAM$Type$C == literal_emitter_name)
        {
            break
        }
    }
    if (!JAM$Pointer$OK)
    {
        for (i = 1; i <= nreported; i = i + 1)
        {
            if (literal_emitter_name == reported_name[i]) break
        }
        if ( i > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = literal_emitter_name
 
            msg_len = 0
            call smovv ("No map for Jammer: ", msg, msg_len)
            call smovhn(literal_emitter_name, 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
nreported = 0
for (mapping_index = 1; mapping_index <= number_of_emitter_maps;
                          mapping_index = mapping_index + 1)
{
    literal_emitter_name = alsp_emitter_list [2, mapping_index]
    for (RAD$Pointer$First; RAD$Pointer$OK; RAD$Pointer$Next)
    {
        if (xRAD$Type$C == literal_emitter_name)
        {
            break
        }
    }
    if (!RAD$Pointer$OK)
    {
        for (i = 1; i <= nreported; i = i + 1)
        {
            if (literal_emitter_name == reported_name[i]) break
        }
        if ( i > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = literal_emitter_name
 
            msg_len = 0
            call smovv ("No map for Radar: ", msg, msg_len)
            call smovhn(literal_emitter_name, 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
return
end
 

Subroutine check_incoming_missile_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$missile_Common
 
integer nl
 
literal reported_name[2000]
integer nreported, j
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  i             # loop control variable
integer  enum_index    # alsp common enumeration index
literal  missile_name  # the RESA recognized missile type name
integer  CMC$Pointer, indx  # SMM 3/00
literal  cstrip8	    # SMM 3/00
 
nreported = 0
for (i = 1; i <= number_of_missile_maps ; i = i + 1)
{
    enum_index = missile_unit_mappings [1, i]
    missile_name = missile_unit_mappings [2, i]
 
    for (CMC$Pointer$First; CMC$Pointer$OK; CMC$Pointer$Next)
    {
        if (xCMC$Type$C == missile_name)
          break
    }
 
    if (!CMC$Pointer$OK)
    {
        for (j = 1; j <= nreported; j = j + 1)
        {
            if (missile_name == reported_name[j]) break
        }
        if ( j > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = missile_name
 
            msg_len = 0
            call smovv ("No map for Missile: ", msg, msg_len)
            call smovhn(missile_name, 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
return
end

Subroutine check_incoming_sonar_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$sonar_Common
 
integer nl
 
literal reported_name[2000]
integer nreported, j
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  i             # loop control variable
integer  enum_index    # alsp common enumeration index
literal  sonar_name   # the RESA recognized sonar type name
integer  SON$Pointer, indx  # SMM 3/00
literal  cstrip8	    # SMM 3/00
 
nreported = 0
for (i = 1; i <= number_of_sonar_maps ; i = i + 1)
{
    enum_index = alsp_sonar_list [1, i]
    sonar_name = alsp_sonar_list [2, i]
 
    for (SON$Pointer$First; SON$Pointer$OK; SON$Pointer$Next)
    {
        if (xSON$Type$C == sonar_name)
          break
    }
 
    if (!SON$Pointer$OK)
    {
        for (j = 1; j <= nreported; j = j + 1)
        {
            if (sonar_name == reported_name[j]) break
        }
        if ( j > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = sonar_name
 
            msg_len = 0
            call smovv ("No map for Sonar: ", msg, msg_len)
            call smovhn(sonar_name, 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
return
end
 

Subroutine check_incoming_sonobuoy_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$sonobuoy_Common
 
integer nl
 
literal reported_name[2000]
integer nreported, j
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer  i             # loop control variable
integer  enum_index    # alsp common enumeration index
literal  sonobuoy_name  # the RESA recognized sonobuoy type name
integer  SOB$Pointer, indx  # SMM 3/00
literal  cstrip8	    # SMM 3/00
 
nreported = 0
for (i = 1; i <= number_of_sonobuoy_maps ; i = i + 1)
{
    enum_index = sonobuoy_unit_mappings [1, i]
    sonobuoy_name = sonobuoy_unit_mappings [2, i]
 
    for (SOB$Pointer$First; SOB$Pointer$OK; SOB$Pointer$Next)
    {
        if (xSOB$Type$C == sonobuoy_name)
          break
    }
 
    if (!SOB$Pointer$OK)
    {
        for (j = 1; j <= nreported; j = j + 1)
        {
            if (sonobuoy_name == reported_name[j]) break
        }
        if ( j > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = sonobuoy_name
 
            msg_len = 0
            call smovv ("No map for Sonobuoy: ", msg, msg_len)
            call smovhn(sonobuoy_name, 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
return
end

Subroutine check_incoming_weapon_enums(nl)
BBcommon
ALSP_Unit_Enum_Common
ALSP$weapon_Common
 
literal cstrip8
 
literal reported_name[2000]
integer nreported, i
 
integer nl
 
integer   msg_len
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
integer index
integer mc$pointer, bom$pointer, tor$pointer
integer bom$type$i
 
nreported = 0
for (index = 1; index <= number_of_weapon_maps; index = index + 1)
{
    if (weapon_type [3, index] != $CruiseMissile$Code &
        weapon_type [3, index] != $AAM$Code           &
        weapon_type [3, index] != $ASM$Code           &
        weapon_type [3, index] != $SAM$Code           &
        weapon_type [3, index] != $Mine$Code          &
        weapon_type [3, index] != $Bomb$Code          &
        weapon_type [3, index] != $Gun$Code) next
 
    for (BOM$Pointer$First; BOM$Pointer$OK; BOM$Pointer$Next)
    {
        if (weapon_type [2, index] == XBOM$Name$C)    # if the name matches,
        {                                                # check the weapon type
            bom$type$i = Xbom$type$i
            if (bom$type$i != $CruiseMissile$Code &
                bom$type$i != $AAM$Code           &
                bom$type$i != $ASM$Code           &
                bom$type$i != $SAM$Code           &
                bom$type$i != $Mine$Code          &
                bom$type$i != $Bomb$Code          &
                bom$type$i != $Gun$Code) next
 
            if (weapon_type[3, index] == XBOM$Type$i)    # if DEQ$Ident codes match,
            {                                             # a proper match has been found!
                break
            }
        }
    }        # end of loop through weapon mappings
    if (!BOM$Pointer$OK)
    {
        for (i = 1; i <= nreported; i = i + 1)
        {
            if (weapon_type [2, index] == reported_name[i]) break
        }
        if ( i > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = weapon_type [2, index]
 
            msg_len = 0
            call smovv ("No map for bomb: ", msg, msg_len)
            call smovhn(weapon_type[2, index], 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
nreported = 0
for (index = 1; index <= number_of_weapon_maps; index = index + 1)
{
    if (weapon_type [3, index] != $AAM$Code &
        weapon_type [3, index] != $ASM$Code &
        weapon_type [3, index] != $SAM$Code &
        weapon_type [3, index] != $CIWS$Code) next
 
    for (MC$Pointer$First; MC$Pointer$OK; MC$Pointer$Next)
    {
        if (weapon_type [2, index] == XMC$Name$C)    # if the name matches,
        {                                                # check the weapon type
            if (weapon_type [3, index] == XMC$Type$i)    # if DEQ$Ident codes match,
            {                                             # a proper match has been found!
                break
            }
        }
 
    }        # end of loop through weapon mappings
 
    if (!MC$Pointer$OK)
    {
        for (i = 1; i <= nreported; i = i + 1)
        {
            if (weapon_type [2, index] == reported_name[i]) break
        }
        if ( i > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = weapon_type [2, index]
 
            msg_len = 0
            call smovv ("No map for weapon: ", msg, msg_len)
            call smovhn(weapon_type[2, index], 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
nreported = 0
for (index = 1; index <= number_of_weapon_maps; index = index + 1)
{
    if (weapon_type [3, index] != $Gun$Code) next     # Only interested in guns
 
    for (TOR$Pointer$First; TOR$Pointer$OK; TOR$Pointer$Next)
    {
        if (xTOR$Ident$I != $Gun$Code) next     # Only interested in guns
 
        if (weapon_type [2, index] == XTOR$Type$C)    # if the name matches,
        {                                                # check the weapon type
            if (weapon_type [3, index] == XTOR$ident$i)    # if DEQ$Ident codes match,
            {                                             # a proper match has been found!
                break
            }
        }
    }        # end of loop through weapon mappings
 
    if (!TOR$Pointer$OK)
    {
        for (i = 1; i <= nreported; i = i + 1)
        {
            if (weapon_type [2, index] == reported_name[i]) break
        }
        if ( i > nreported)
        {
            nreported = nreported + 1
            reported_name[nreported] = weapon_type [2, index]
 
            msg_len = 0
            call smovv ("No map for gun: ", msg, msg_len)
            call smovhn(weapon_type[2, index], 8, msg, msg_len)
            nl = nl + 1
            write (output_unit, fmt=*)  v_msg[1:msg_len]
        }
    }
}
 
 
return
end
 

Block Data ALSP_Enumerations
 
#
#   This module actually include the ALSP Enumeration data file (RIN)
#   and allows the 5 common blocks to be populated.
#
#   # E2151 - DEW 9/30/99
 
alsp$aircraft_common
alsp$emitter_common
alsp$missile_common
alsp$sea_common
alsp$weapon_common
alsp$sonar_common
alsp$torpedo_common
alsp$sonobuoy_common
alsp$countermeasure_common
alsp$mine_common
 
include "alsp_enumeration_data_jlcctc.rin"
 
end
