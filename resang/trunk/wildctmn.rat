 
define($DEBUG,#)
define($DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbctm.inc"
include "bbshn.inc"
 
include "ascii.inc"
 
define (BBImplicit, Implicit None)              # MJC 4/26/2000
 
undefine write
undefine read
undefine err
 
subroutine wglctm_noise   (reccnt, recsz, rec)
 
BBcommon
 
integer reccnt,recsz,pnt,loop
literal rec[1500]
 
integer LEN, ISTATX,
        CTM$Pointer,
        CTM$Noiseindx$I,
        SHN$SPD$Index,
        SHN$Pointer,
        SHN$SPD$TN$Index,
        SHN$SPD$TN$freq$I,
        SHN$SPD$TN$level$I          # MJC 4/26/2000
real    SHN$SPD$bbnoise$F           # MJC 4/26/2000
literal CSTRIP8                     # MJC 4/26/2000
 
if (reccnt <= 1)
    {
    call echov("Countermeasure Noise file empty.")
    call echor
    return
    }
 
 #$% for each countermeasure record entry
 for (loop = 2; loop <= reccnt; )
    {
    #$% get scenerio data and set len
    call getsr(loop,recsz,rec)
    len = rec[1]
 
    FOR ( CTM$pointer$first; CTM$pointer$valid; CTM$Pointer$Next)
        {
        IF (rec[ 3 ] == XCTM$Name$c)
            break
        }
 
    IF ( ! CTM$Pointer$valid )
        {
        call echov("Could not find countermeasure characteristics")
        call echoh(rec[ 3 ],6)
        call echov(" in $$CTM.")
        call echor
        return
        }
 
    SHN$SPD$index = 1
 
    for (pnt = 4; pnt <= len; )
        {
        #$% if array word is BroadBand Noise
        if (rec[pnt] == 'BBN')    # required field should be ahead of 'NBN'
            {
            #$% get slots for broadband radiated acoustic noise
            call gslotm (SHN$Pointer,$$SHN,SHN$Entry,istatx)
 
            #$% if found
            if (SHN$Pointer !=0)
                {
                #$% set ship noise index to broad band noise pointer & save
                CTM$NoiseIndx$I = SHN$Pointer$Index
                putCTM$NoiseIndx$I
 
                #$% get acoustic noise matrix and save
                SHN$SPD$BbNoise$F = rec[pnt+1]
 
                #$% loop through 6 preset speeds of 5,10,15,20,25,30 kts
                do SHN$SPD$Index = 1, SHN$SPD$Slots
                    {
                    #$% get acoustic noise matrix and save
                    putSHN$SPD$BbNoise$F
                    }
                #$% set up for NBN loading
                SHN$SPD$index = 1
                }
            #$% increment pointer by number of acoustic noise positions
            #$% for countermeasure model
            pnt = pnt + 2
            }
 
        #$% if array word is NarrowBand Noise             # 10/31/90 trs
        if (rec[pnt] == 'NBN')        #optional field
            {
            IF ( SHN$SPD$index > SHN$SPD$Slots )
                {
                call echov ('SPD Subtable overloaded.')
                call echor
                return
                }
 
            for (SHN$SPD$Tn$index = 1;
                 SHN$SPD$Tn$index <= shn$SPD$tn$slots;
                 SHN$SPD$Tn$index = SHN$SPD$Tn$index + 1)
                {
                SHN$SPD$Tn$Freq$I = rec[pnt+1]
                putSHN$SPD$Tn$Freq$I
 
                #$% get acoustic noise matrix and save
                SHN$SPD$Tn$Level$I = rec[pnt+2]
                putSHN$SPD$Tn$Level$I
                }
 
            #$% increment speed for next index pointer
            SHN$SPD$index = SHN$SPD$index + 1
 
            #$% increment pointer by number of acoustic noise positions
            #$% for countermeasure model
            pnt = pnt + 3
            }
 
        #$% ELSE if equipment type is countermeasure
        #$%                   or U.DataBase  ('UDB') # jb  E2209  11/30/00
        ELSE if(rec[pnt] == 'LIFE' |
                rec[pnt] == 'UDB'  )              # jb  E2209  11/30/00
            {
            #$% increment pointer
            pnt = pnt + 2
            next
            } # end if countermeasure characteristics; or, NOMEN
 
        ELSE if(rec[pnt] == 'NOMEN' )
            {
            pnt = pnt + 4
            next
            } # end if FULLname ('NOMEN')    # jb  E2209  11/30/00
 
        #$% else if array word is none of the above
        else
           {
            #$% display to user that field is invalid
            call badfld('Countermeasure        ',rec[3],rec[pnt])
            call echov ('While loading Countermeasure Noise Data.')
            call echor
            #$% increment pointer
            pnt = pnt + 1
           }
       } # for remaining fields in countermeasure record
 
    }  # for (loop = 2; loop <= reccnt; loop=loop+1)
 
end
