##      FILE:STESM.RAT
#
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 9-mar-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw             modularized routine and made compatible with
###                     use of search keys in main driver;
###                     added checks on validity of data to avoid
###                     problems which could result now that the blackboard
###                     can be read at any time
###
 
###
### mod to version 3.0          dated 17-feb-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 rjw             added REPT field;
###
###
 
###
### mod to version 3.0          dated 6-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 sfc             changed routine to access RMT Table for data
###                     to be displayed on ESM Status Board;
###
 
 
#####   version 3.0     dated 22-dec-1980
 
 
# 
 
 
#$%      MODULE              UTILITY            DATA
#$%    SUBROUTINES         SUBROUTINES         TABLES
#$%    ===========         ===========         ======
#$%
#$%      ESMSTA               OUTH               RMT
#$%      ESMTIT               OUTI               RVU
#$%      ESMESM               OUT                UNT
#$%      ESMHED               OUTIZ
#$%      NXTESM               SMOVH
#$%      ESMENT               SMOVIB
#$%      ESMNUN               SMOVIZ
#$%      COMPAR<STATUS>
#$%
#$%
#$%  NOTES:
#$%  =====
#$%
#$%     1.  <filename> indicates where the file is located.
#$%
#$%     2.  Utility subroutines are not shown on flowchart.
#$%
#$%     3.  * indicates no other subroutines are called.
#$%
#$%
#$%  FLOWCHART FOR FILE ESMSTA
#$%  =========================
#$%
#$%    STDISP<STATUS> - ESMSTA - ESMTIT *
#$%                            - ESMESM - ESMHED *
#$%                                     - ESMNUN *
#$%                                     - ESMENT *
#$%                                     - NXTESM - COMPAR *
 
 
include "bbcode.inc"                                     # blackboard defines
include "bbctl.inc"
include "ascii.inc"                                      # include ascii constants
include "bbrmt.inc"
include "bbrvu.inc"
include "bbunt.inc"                   # jb Replaces DUP  4/4/89
include "stmain.inc"
include "bbsta.inc"
 
define (BBimplicit, IMPLICIT NONE)      # jb E2145      1/27/00
define ($low$order$key,ikey2)
 
Subroutine ESMSTA(iBRDcode,      # iBRDcode      jb      6/5/86
                  STA$Pointer)   # for esm suppression - bmb 4/6/93
 
    ## NOTE:  consider iBRDcode a CONSTANT - don't try to change it!
############################################################################
#$%
#$% Purpose:   ESMSTA controls generation of the ESM status boards' displays.
#$%
#$% Called By: STDISP (stmain); and FORMAT_ASTAB (asformat)
#$%
#$% Calls:     ESMTIT     ESMESM
#$%
#$% Tables:    None
#$%
#$% Date:      26 JAN 82
#$%
#$% Author:    F. Jones
#$%
#############################################################################
BBcommon
STATUScommon
 
Integer iBRDcode, STA$Pointer    # jb E2145      1/31/00
 
#$% display status board titles
call ESMTIT(iBRDcode)                           # iBRDcode jb   6/5/86
 
#$% display status board entries
call ESMESM(iBRDcode,                # iBRDcode jb   6/5/86
            STA$Pointer) # for esm suppression - bmb 4/6/93
 
 
return
end
 

 
 
Subroutine ESMTIT(iBRDcode)             # iBRDcode jb   6/5/86
    ## NOTE:  consider iBRDcode a CONSTANT - don't try to change it!
####################################################
#$%
#$% Purpose:   ESMTIT outputs ESM status board titles.
#$%
#$% Called By: ESMSTA
#$%
#$% Calls:     outH, outV     OUTI
#$%
#$% Tables:    None
#$%
#$% Date:      26 JAN 82
#$%
#$% Author:    F. Jones
#$%
######################################################
BBcommon
STATUScommon
 
integer Game_DTGs,
        iBRDcode, I_SWITCH_1    # jb  E2145                         1/31/00                       1/27/00
 
#$% see stmain.inc for definintion
$prepare$next$line
 
#$% display ESM status board titles
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
Switch (iBRDcode)                               # jb    6/5/86
 {
  CASE $SURFesm$Board:                          # jb    6/9/86
   $column 24;$OutV("SURFACE ESM STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
  CASE $AIResm$Board:                           # jb    6/5/86
   $column 24;$OutV("AIR ESM STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
  DEFAULT:      # (presumably, CASE $ESM$Board:)  jb    6/5/86
   $column 24 ; $OutV("ESM STATUS BOARD [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
 }      # End of Switch on (iBRDcode)           # jb    6/5/86
 
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
Subroutine ESMESM(iBRDcode,      # iBRDcode jb   6/5/86
                  STA$Pointer)   # for esm suppression - bmb 4/6/93
    ## NOTE:  consider iBRDcode a CONSTANT - don't try to change it!
###################################################################
#$%
#$% Purpose:   ESMESM executes status board display subroutines.
#$%
#$% Called By: ESMSTA
#$%
#$% Calls:     ESMHED    NXTESM
#$%            ESMENT    ESMNUN
#$%
#$% Tables:    RMT
#$%
#$% Date:      26 JAN 82
#$%
#$% Author:    F.Jones
#$%
####################################################################
BBcommon
STATUScommon
 
Integer iBRDcode,ifound,RMT$Pointer, STA$Pointer    # jb E2145      1/31/00
 
call ESMHED
 
#$% test for full table
$exit$on$overflow
 
#$% initialize found flag
ifound = $no
 
#$% search RMT table
repeat
   {
    #$% get next ESM entry
    call NXTESM(iBRDcode, rmt$pointer,     # jb iBRDcode 6/5/86
                sta$pointer) # for esm suppression - bmb 4/8/93
 
    #$% if no entry, break loop
    if (rmt$pointer == 0) break
 
    #$% set found flag to yes
    ifound = $yes
 
    #$% get ESM entry data
    call ESMENT(rmt$pointer)
 
    #$% test for full table
    $exit$on$overflow
   }
 
#$% if no entries, display message to user
if (ifound == $no)  call ESMNUN(sta$pointer) #STA$Pointer is for esm suppression - bmb 4/6/93
 
return
end
 

 
 
Subroutine ESMHED
 
##########################################################################
#$%
#$% Purpose:   ESMHED loads heading for ESM status board into IPAGE array.
#$%
#$% Called By: ESMESM
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##########################################################################
BBcommon
STATUScommon
 
Integer ilen    # jb E2145      1/27/00
 
#$% jb E2141    MSG2 & MSG3 modified; AND 7 vice 5 spcs for TRACK   2/15/00
#string MSG2 "TRACK   EMITTER   HELD BY   BEARING  UP   DOWN  PLATFORM REPT"
#string MSG3 "-----   -------   -------   ------- ----  ----  -------- ----"
#                      1         2         3         4         5         6
#            0123456789012345678901234567890123456789012345678901234567890123456
string MSG2 "TRACK   EMITTER  HELD BY  BRG  UP  DOWN PLATFORM REPT COMPOS "
string MSG3 "------  -------- -------- --- ---- ---- -------- ---- ------ "
 
 
ilen = 0;  call smovh(MSG2, ARB, IPAGE[1,2], ilen)
ilen = 0;  call smovh(MSG3, ARB, IPAGE[1,3], ilen)
 
LINLEN[2] = 61                                 # set line lengths.
LINLEN[3] = 61
 
LINCNT    = 3                                  # set line cntr.
 
return
end
 

 
 
Subroutine NXTESM(iBRDcode, nxtpnt,     # iBRDcode jb   6/5/86
                  STA$Pointer)          # for esm suppression - bmb 4/6/93
    ## NOTE:  consider iBRDcode a CONSTANT - don't try to change it!
############################################################
#$%
#$% Purpose:   NXTESM gets data for next ESM entry to be displayed.
#$%
#$% Called By: ESMESM
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    RVU     RMT      UNT
#$%
#$% Date:      26 JAN 82
#$%
#$% Author:    F. Jones
#$%
#############################################################
BBcommon
STATUScommon
 
literal itrk[2]
literal keys[2],lowest[2]
LITERAL CSTRIP8, RMT$EmitterName$C              # jb E2145 1/31/00
Integer kk,irsult,iBRDcode,nxtpnt,lstrmt,       # jb E2145 1/27/00
        RVU$Pointer,                            # jb E2145 1/27/00
        RMT$Pointer,RMT$DetectionType$I,RMT$TrackNumber$I,
        UNT$Pointer,UNT$Type$I,                 # jb E2145 1/27/00
        STA$Pointer,STA$DEA$Index,STA$DEAnum$I  # jb E2145 1/31/00
integer found               # for esm suppression
literal sta$DEA$name$c
 
 
#$% initialize save array
lowest[1] = '99999999'
lowest[2] = $highest$ascii
 
##------------------ jb 'key' logic modified:   1/27/00 ----------
#$% save key
##keys[1] = ikey
#$% if first key, save lowest, else save key
##if (ikey2 == 1) keys[2] = $lowest$ascii
##else            keys[2] = ikey2
 
if (ikey  == 1)
    {
    keys[1] = $lowest$ascii
    keys[2] = $lowest$ascii
    }
else
    {
    #$% save key arrays
    keys[1] = ikey
    keys[2] = ikey2
    }
 
##-----------------  End of 'key' logic modification --------
 
#$% zero pointer
nxtpnt = 0
 
#$% if CONTROL view, return
if (iview == $neutral$view) return
 
#$% set pointer to RVU table
RVU$pointer$to iview
 
#$% set RMT pointer to last index and save
rmt$pointer$to xRVU$LastRmtIndx$i
lstrmt = rmt$pointer
 
#$% search RMT table
for (rmt$pointer$to xRVU$FirstRmtIndx$i;rmt$pointer<=lstrmt;rmt$pointer$next)
   {
    #$% if slot not in use, get next entry
    if (xrmt$InUse$i == $no)    NEXT
    if (xRMT$Detector$I == $no) NEXT
 
    #$% if correlation (or user order) ignores this line, NEXT
    if (xRMT$Ignore$i == YES | xRMT$DontShow$i == YES ) NEXT # jb 6/5/86
 
    rmt$DetectionType$i = xrmt$DetectionType$i
    if (rmt$DetectionType$i != $Esm$code) NEXT
 
    #$% if emitter is to be suppressed, get next entry - bmb 4/6/93
    if (STA$Pointer != 0 ) # if caller was STMAIN stdisp, do not suppress - bmb 4/8/93
      {
      found = $no
      sta$DEAnum$i = xsta$DEAnum$i
      rmt$emittername$c = xrmt$emittername$c
      for (sta$dea$index = 1; sta$dea$index <= sta$deanum$i; sta$dea$index = sta$dea$index + 1)
          {
          sta$DEA$name$c = xsta$DEA$name$c
          if (sta$DEA$name$c == rmt$emittername$c)
              {
              found = $yes
              BREAK
              }
          }
      if (found == $yes) NEXT
      }
 
    UNT$Pointer$TO (Xrmt$Detectee$i)            # jb    6/5/86
    UNT$Type$i    = XUNT$Type$i                 # jb    6/5/86
 
    if(iBRDcode == $ESM$Board)                  # jb    6/5/86
     {}                                         #       6/10/86
    else if(iBRDcode == $AIResm$Board)          # jb    6/5/86
     {
      if(UNT$Type$i !=$AIR$code & UNT$Type$i !=$CruiseMissile$Code)
                NEXT                            # jb    6/5/86
     }
    else if(iBRDcode == $SURFesm$Board)         # jb    6/5/86
     {
      if(UNT$Type$i !=$SurfaceWithAC$Code &     # jb    6/5/86
        UNT$Type$i !=$Surface$Code & UNT$Type$i !=$SUB$code )
                NEXT                            # jb    6/5/86
     }
    else        NEXT # Invalid iBRDcode: What Happened? 6/5/86
 
    rmt$TrackNumber$i = xrmt$TrackNumber$i
    #$% if track number not valid, get next entry
    if (rmt$TrackNumber$i == 0) next            # means data is garbage
 
    #$% save track number and emitter name
    itrk[1] = $BLANKLIT
    kk = 0; call smoviz (rmt$TrackNumber$i,5,itrk[1],kk)
    itrk[2] = xrmt$EmitterName$c
 
    #$% compare track to keys
    call COMPAR(2,itrk,keys,irsult)
 
    #$% if less than keys, get next entry
    if (irsult <  0) next                       # less than keys
 
    #$% if exact match
    if (irsult == 0)                            # found exact match
       {
        #$% save RMT pointer and return
        nxtpnt = rmt$pointer
        return
       }
 
    #$% compare track to lowest
    call COMPAR(2,itrk,lowest,irsult)
 
    #$% if larger than lowest, get next entry
    if (irsult > 0) next                        # larger than lowest found
 
    #$% save track number and emitter name for this entry
    lowest[1] = itrk[1]                         # at this point, have
    lowest[2] = itrk[2]                         # best candidate so far
 
    #$% save RMT pointer
    nxtpnt = rmt$pointer
   }
 
#$% save track number and emitter name for lowest entry
ikey  = lowest[1]
ikey2 = lowest[2]
 
return
end
 
 

 
 
Subroutine ESMENT(rmt$pointer)
 
################################################################
#$%
#$% Purpose:   ESMENT gets data for next ESM entry in display.
#$%
#$% Called By: ESMESM
#$%
#$% Calls:     OUTH       OUT        OUTIZ
#$%            SMOVH      SMOVIZ     SMOVIB
#$%
#$% Tables:    RVU     RMT
#$%
#$% Date:      26 JAN 82
#$%
#$% Author:    F. Jones
#$%
###################################################################
BBcommon
STATUScommon
 
LITERAL UNT$Name$C, CSTRIP, CSTRIP8, COMP   # jb E2145  1/31/00
literal icode, iemnam, a_track  # , sta$DEA$name$c
Integer kk, ctoi, itseq         # sta$DEAnum$i,
REAL    RMT$UpTime$F ,RMT$DownTime$F,        # jb E2145  1/31/00
        UNT$HeadingError$F,RMT$TimeReported$F # jb E2145 1/31/00
Integer TRUBRG, Game_Time, icomp, itrue,     # jb E2145  1/27/00
        RMT$Pointer,RMT$Detector$I,RMT$Bearing$I, # jb   1/27/00
        RMT$Detectee$I,RMT$BrgError$I,       # jb E2145  1/27/00
        RMT$Composition$I,                   # jb E2145  1/27/00
        UNT$Pointer, RVU$Pointer             # jb E2145  1/27/00
 
#$% test for full board and save line count
$test$next$line ; $exit$on$overflow
$save$line$count
 
#$% set sequence number and emitter name
kk = 1; itseq  = ctoi(ikey,kk)
iemnam = ikey2
 
#$% update keys
$update$keys
 
#$% prepare next line as defined in stmain.inc
$prepare$next$line
 
#$% set pointer to RVU table
RVU$pointer$to iview
 
#$% get track code
icode = xRVU$trackcode$c
 
#$% output track code, sequence number, and emitter name
$column 1 ; $OutHN(a_track(icode,$letE,itseq),$$MaxLit)     # DEW 11/99 (E2172)
$column 9 ; $OutH(iemnam,$$MAXname)
 
#$% get pointer to detector
rmt$detector$i = xrmt$detector$i
 
#$% if detector pointer valid
if (rmt$detector$i != 0)
   {
    #$% set UNT pointer to detector
    UNT$POINTER$TO rmt$detector$i
 
    #$% get unit name
    UNT$NAME$C = XUNT$NAME$C
 
    IBYTE = 17  # jb E2141 (17 vice 19)     2/15/00
 
    #$% output unit name
    call SMOVH(UNT$NAME$C,$$MAXname,IPAGE[1,LINCNT],IBYTE) # jb $$MAX  1/27/00
   }
 
 
IBYTE = 26                        # jb E2141  (26 vice 30)  2/15/00
 
#$% get target bearing
rmt$bearing$i = xrmt$bearing$i             # get detection bearing
 
#$% output bearing
call SMOVIZ(_
     rmt$bearing$i,                        # and convert it to
     3,
     IPAGE[1,LINCNT],                      # ascii chars
     IBYTE)
 
#$% get first detection time
rmt$uptime$f = xrmt$uptime$f
 
#$% get last detection time
rmt$DownTime$f = xrmt$DownTime$f
 
IBYTE = 30                      # jb E2141  (30 vice 36)  2/15/00
 
#$% output last uptime
call SMOVIZ(_
     Game_Time(rmt$uptime$f),
     4,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% if last downtime valid              # downtime is not last detection time
if (rmt$DownTime$f != 0)
   {
    IBYTE = 35                  # jb E2141  (35 vice 42)  2/15/00
 
    #$% output last downtime            # downtime is the last time the track
    call SMOVIZ(_                       # was reported down even though it may
         Game_Time(rmt$DownTime$f),                # be up at present
         4,
         IPAGE[1,LINCNT],
         IBYTE)
   }
 
#$% if target is fingerprinted emitter
if (xrmt$fingerprinted$i == $YES)          # is emitter fingerprinted?
   {
    #$% get pointer to UNT table
    rmt$detectee$i = xrmt$detectee$i
 
    #$% set UNT pointer to target
    UNT$pointer$to rmt$detectee$i
 
    #$% get target name
    UNT$name$c = xUNT$name$c
 
    IBYTE = 40                  # jb E2141  (40 vice 49)  2/15/00
 
    #$% output target name
    call SMOVH(_
         UNT$name$c,                       # load platform name
         $$MAXname,             # jb E2141 ($$MAXname vs 5) 1/27/00
         IPAGE[1,LINCNT],
         IBYTE)
   }                                       # end if xrmt$finger ...
 
#$% get time target reported
rmt$TimeReported$f = xrmt$TimeReported$f
 
IBYTE = 49                      # jb E2141  (49 vice 57)  2/15/00
 
#$% output report time
call SMOVIZ(Game_Time(rmt$TimeReported$f), 4, IPAGE[1,LINCNT], IBYTE)
 
rmt$Composition$i = xrmt$composition$i
 
if (rmt$composition$i > 1)
    {
    if   (rmt$composition$i >= 3) comp = 'MANY'  # jb comp vice icomp 1/27/00
    else                          comp = 'FEW'  # jb comp vice icomp 1/27/00
 
    IBYTE = 54                  # jb E2141  (54 vice 64)  2/15/00
 
    #$% output composition
    call SMOVH (comp,4,IPAGE[1,LINCNT], IBYTE)    # jb comp vice icomp 1/27/00
    }
 
#$% set line length
LINLEN[LINCNT] = IBYTE
 
#$% if view is CONTROL view
if (mside == $Control$code)                 # is CONTROL signed on?
   {
    #$% test for full board
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% get pointer to target
    rmt$detectee$i = xrmt$detectee$i
 
    #$% set UNT pointer to target
    UNT$POINTER$TO rmt$detectee$i
 
    #$% get target name
    UNT$NAME$C = XUNT$NAME$C
 
    IBYTE = 0
 
    call SMOVv("(",IPAGE[1,LINCNT],IBYTE)
 
    #$% if target name valid
    if (UNT$NAME$C != 0)
       {
        #$% output target name
        call SMOVHN(__              # jb E2141 (hN vice H)  2/22/00
             UNT$NAME$C,
             $$MAXname,             # jb E2141  ($$MAXname)  1/27/00
             IPAGE[1,LINCNT],
             IBYTE)
       }
 
    else
       {
        call SMOVv ("M", IPAGE[1,LINCNT], IBYTE)
 
        #$% output pointer to target
        call SMOVIB(_
             rmt$detectee$i,
             4,
             IPAGE[1,LINCNT],
             IBYTE)
       }
 
    call SMOVv (")", IPAGE[1,LINCNT], IBYTE)
 
    IBYTE = 25                      # jb E2141 (25 vice 29)  2/15/00
 
    #$% if detector index is valid
    if (rmt$detector$i != 0)
       {
        #$% set UNT pointer to detector
        UNT$POINTER$TO rmt$detector$i     # get POS index
 
        call SMOVv("(",IPAGE[1,LINCNT],IBYTE)
 
        #$% get heading error
        UNT$HeadingError$F = XUNT$HeadingError$F
        RMT$BrgError$I = xRMT$BrgError$I                #<- \   10/1/85
        UNT$HeadingError$F =UNT$HeadingError$F +RMT$BrgError$I *$PI/180.
 
        #$% compute target bearing
        ITRUE = TRUBRG(UNT$HeadingError$F, rmt$bearing$i)
 
        call SMOVIZ(_
             ITRUE,
             3,
             IPAGE[1,LINCNT],
             IBYTE)
 
        call SMOVv(")",IPAGE[1,LINCNT],IBYTE)
       }                                  # endif rmt$detector$i
    else
       {
        call SMOVV ("(Removed)", IPAGE[1,LINCNT], IBYTE)
       }
 
    if (rmt$composition$i > 1)
        {
        icomp = rmt$composition$i
 
        IBYTE = 54              # jb E2141 (54 vice 63)  2/15/00
 
        #$% output composition
        call smovv  ('(',    IPAGE[1,LINCNT], IBYTE)
        call smovib (icomp,4,IPAGE[1,LINCNT], IBYTE)
        call smovv  (')',    IPAGE[1,LINCNT], IBYTE)
        }
 
    #$% set line length
    LINLEN[LINCNT] = IBYTE               # set line length
   }
 
 
return
end

 
Subroutine ESMNUN(STA$Pointer) #STA$Pointer is for esm suppression - bmb 4/6/93
 
########################################################################
#$%
#$% Purpose:   ESMNUN sends message to user if there are no ESM entries.
#$%
#$% Called By: ESMESM
#$%
#$% Calls:     OUTV
#$%
#$% Tables:    None
#$%
#$% Date:      26 JAN 82
#$%
#$% Author:    F. Jones
#$%
##########################################################################
BBcommon
STATUScommon
 
Integer STA$Pointer                             # jb E2145  1/27/00
integer sta$deanum$i
 
#$% test for full board
$test$next$line ; $exit$on$overflow
 
#$% prepare next line as defined in stmain.inc
$prepare$next$line
 
sta$deanum$i = xsta$deanum$i
#$% display no entry message to the user
if ( sta$deanum$i == 0 | sta$pointer == 0 ) #for esm suppression - bmb 4/15/93
    {
    $column 1
    $OutV("No ESM tracks for this view")    # jb $outV vs $outH:        4/3/00
    }
else
    {
    $column 1       # jb $outV vs $outH:        4/3/00
    $OutV("No ESM tracks  Emitters for this ASTAB may be suppressed")#bmb 4/15/93
    }
 
return
end
 
 
