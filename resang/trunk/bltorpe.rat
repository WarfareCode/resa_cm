 
 
##			File BLTORPE.rat
 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine torpe
      ##################################################
      #$%
      #$% Purpose:   TORPE allows the user to inter-
      #$%            act with the torped
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      APRIL 90
      #$%
      #$% Author:    Susan Miller
      #$%
      #$% Modified:  Susan Miller 4/99 (E2079)
      #$%            Allow entry of TORP for target type.
      ##################################################
 
#
#     New TORPEDO
#
      IMPLICIT NONE     # jb    E2145   4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENSIONS
####
##############################################################################
 
define (zdccom, 19)     # The number of entries in the defCOM table.
define (zdctyp,  8)     # The size of the defTYP table.
define (zdcfld,175)     # The size of the defFLD table.		
define (zdsarg,  6)     # The size of entries in the defARG table. # SMM 4/99 (E2079)
define (zdcarg, 15)     # The number of entries in the defARG table.
define (zdcfmt,  3)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
      literal    argcnt,qfld,qarg,arg1
 
 
      Integer  actcnt   # jb    E2145   4/4/00
      Integer  m
 
 ##     Note:  See also declarations in BLSUB1.rin..
 
      character line[ARB]
 
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("        ","     Tor","pedo"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of torpedo
 DATA$com("SPEED",  1)      # Average speed
 DATA$com("RUNTM",  1)      # Maximum effective torpedo runtime
 DATA$com("EPU  ",  1)      # Warhead weight
 DATA$com("PL   ",  1)      # Probability of a launch
 DATA$com("PD   ",  1)      # Probability of detection
 DATA$com("PH   ",  1)      # Probability of a hit
 DATA$com("BBN  ",  1)      # Torpedo broadband noise
 DATA$com("MXALT",  1)      # Max. altitude for deployment by aircraft
 DATA$com("ACQ  ",  1)      # Sensor acquisition range in default environ.
 DATA$com("ACQ1 ",- 1)      # Sensor acq. range in acoustic environ. #1
 DATA$com("ACQ2 ",- 1)      # Sensor acq. range in acoustic environ. #2
 DATA$com("ACQ3 ",- 1)      # Sensor acq. range in acoustic environ. #3
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("TARGT",- 1)      # Target type:  SHIP, SUB, or BOTH or TORP # SMM 4/99 (E2079)
 DATA$com("SOWRG",- 1)      # Range greater than 0, then SOW
 DATA$com("BURST",- 1)      # Nuclear burst type
 DATA$com("YIELD",- 1)      # Yield of nuclear weapon in kilotons of TNT
 
 
 $set (Data_Count,0)
 DATA$typ("     ",  0)      # rec type 1
 DATA$typ("     ",  1)      #
 DATA$typ("     ",  0)      # rec type 2
 DATA$typ("     ",  1)      #
 
 $set (Data_Count,0)
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","torpedo ","        ","      ")
 DATA$fld1("SPEED", 1, 2,"KNOTS", 1,"Average ","speed   ","        ","      ")
 DATA$fld1("RUNTM", 1, 2,"MINUT", 1,"Maximum ","eff. tor","pedo run","time  ")
 DATA$fld1("EPU  ", 1, 2,"EPUs ", 1,"TNT equi","valence "," 100 s o","f lbs ")
 DATA$fld1("ACQ  ", 1, 2,"YARDS", 1,"Sensor a","cq rng i","n def en","viron ")
 DATA$fld1("ACQ1 ", 1, 2,"YARDS", 1,"Sensor a","cq rng i","n acous ","env #1")
 DATA$fld1("ACQ2 ", 1, 2,"YARDS", 1,"Sensor a","cq rng i","n acous ","env #2")
 DATA$fld1("ACQ3 ", 1, 2,"YARDS", 1,"Sensor a","cq rng i","n acous ","env #3")
 DATA$fld3("NOMEN", 3,-3,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("PL   ", 1, 2,"%    ", 1,"Probabil","ity of a"," launch ","      ")
 DATA$fld1("PD   ", 1, 2,"%    ", 1,"Probabil","ity of a","detectio","n     ")
 DATA$fld1("PH   ", 1, 2,"%    ", 1,"Probabil","ity of a"," hit    ","      ")
 DATA$fld1("BBN  ", 1, 2,"dB   ", 1,"Torpedo ","broadban","d noise ","      ")
 DATA$fld1("MXALT", 1, 2,"FEET ", 1,"Max alt ","for depl","oyment b","y acft")
 DATA$fld1("TARGT", 1, 2,"TTYPE", 1,"Tgt type",":SHIP,SU","B,BOTH,o","r TORP")
 DATA$fld1("SOWRG", 1, 2,"YARD1", 1,"SOW if>0",",max rng"," of wate","r entr")
 DATA$fld1("BURST", 1, 1,"BTYPE", 1,"Nuclear ","burst ty","pe      ","      ")
 DATA$fld1("YIELD", 1, 2,"kt   ", 1,"Yld of n","uclear w","pn in ki","lotons")
 
 $set (Data_Count,0)
 DATA$arg6N("NAME ",6000,0,0)                 # Alphanumeric -- Anything
 DATA$arg6N("KNOTS",2002, 0,   100)           # Numeric Range 0 -> 100
 DATA$arg6N("MINUT",2002, 0,   100)           # Numeric Range 0 -> 100
 DATA$arg6N("EPUs ",2002, 1,    20)           # Numeric Range 1 -> 20
 DATA$arg6N("YARDS",2002, 1, 10000)           # Numeric Range 1 -> 10000
 DATA$arg6N("YARD1",2002, 0,100000)           # Numeric Range 0 -> 100000
 DATA$arg6N("dB   ",2002, 0,   300)           # Numeric Range 0 -> 300
 DATA$arg6N("FEET ",2002, 0,  1000)           # Numeric Range 0 -> 1000
 DATA$arg6N("%    ",2002, 0,   100)           # Numeric Range 0 -> 100
 DATA$arg6N("Text ",9024)                     # Alphanumeric string (24 bytes)
 DATA$arg6N("...  ",9000)                     # Alphanumeric string filler
 DATA$arg6C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg6C("TTYPE",8004,"SHIP ","SUB  ","BOTH ","TORP ") # Alphanumeric list -- SHIP/SUB/BOTH/TORP
 DATA$arg6C("BTYPE",8003,"AIR  ","SURF ","SUBSU") # Alphanumeric list -- AIR/SURF/SUBSU
 DATA$arg6N("kt   ",2002, 0, 32767)           # Numeric Range 0 -> 32767
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    NONE
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
		  #***********************************************************
		  #***********************************************************
		  if (argtyp<=0)          #*** SPECIAL ***
		   {
		   #
		   # increment PTRCNT for each additional input word processed
		   #
		   # on error: increment VERR and NEXT to the next loop
		   #
		    #*********************************************************
		    if (argn==1)                          # Special Test 1
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==2)                     # Special Test 2
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    else if (argn==3)                     # Special Test 3
		     {
		      continue   # insert code as needed
		     }
		    #*********************************************************
		    #*********************************************************
 
		    next
 
		   }
 
 
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
  actcnt = 0
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
   {
    if (lcomp_v(work[ptr], "EMIT ") == 0)                # Any EMIT?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
	 {actcnt = actcnt + 1
	 }
      }
 
   }
 
 
# test results ......
 
 if (actcnt < 1)
   {
    continue
   }
 
 
 
 
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
