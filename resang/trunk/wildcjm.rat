 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLCJM                        ECHOH                      CJC
#$%      GETSR  <WGLOAD>               ECHOR
#$%      GSLOTM <WGLOAD>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLCJM
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLCJM - GETSR *
#$%                                      - GSLOTM*
 

 
define(DEBUG,#)
define(DEBUGL,#)
include "bbctl.inc"
include "bbcode.inc"
include "bbcjc.inc"
include "ascii.inc"
include "wimain_eq.inc"               # MJC 4/27/2000
 
define (BBImplicit, Implicit None)    # MJC 4/26/2000
 
Subroutine wglcjm (reccnt,recsz,rec)  #load in the CommJammer scenario file
 
########################################################
#$%
#$% Purpose:   WGLCJM loads in commjammer scenario
#$%            file data.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOH      ECHOR      GETSR
#$%            GSLOTM
#$%
#$% Tables:    CJC
#$%
#$% Date:      APR 88
#$%
#$% Author:    R. Hundt
#$%
#$%
########################################################
BBcommon
EqErr$Common                                            # MJC 4/26/2000
 
#$% this define is used only for the local freqfld table
define ( FreqPos, 1 )
define ( BandPos, 2 )
define ( flds   , BandPos )
 
Integer kk                         # jb E2209  11/29/00
 
REAL*4       JPowerDbm
INTEGER*4    nfreq
INTEGER*4    pnt
LITERAL      rec[ 1500 ]
INTEGER*4    reccnt
INTEGER*4    recsz
REAL*4       DCBLS, DBEL3                            # jb        8/23/88
 
Real*4       Freqfld [ flds, CJC$FQ$slots ]
 
integer      ILEN, LOOP, LEN, ISTAT, LPNT,
             CJC$Pointer, CJC$FQ$Index, CJC$Maxrange$I,
             CJC$Jammerpower$I, CJC$Jammergain$I,
             CJC$Percentcovered$I, CJC$Tonejammer$I,
             CJC$Frequencyfollower$I, CJC$Timedelayfactor$I,
             CJC$FQ$bandwidth$I, CJC$Mtbf$I,
             CJC$Timetorepair$I, CJC$Numberfrequencies$I,
             CJC$FQ$performancefactor$I                 # MJC 4/26/2000
real         FLFREQJAMMED, CJC$FQ$frequencyjammed$F     # MJC 4/26/2000
literal      CJC$Type$C                                 # MJC 4/26/2000
 
BBdeclare (CJC$FullName$V)                  # jb  E2209    11/30/00
 
DEBUG call echov("<wglcjm:")
 
#$% set ilen to zero for smovh
ilen = 0
 
#$% move "CommJammr" to cfile for eventual display
call smovv ("CommJammr", cfile, ilen)
#$% set flag to YES
cflg = $yes
 
#$% if file empty
if (reccnt <= 1)
   {
    #$% display error message to user
    call echov ("CommJammer File Empty.  ")
    call echor
    return
   }
 
for (loop = 2; loop <= reccnt; )        #for each record in the file
  {
    call getsr (loop,recsz,rec)         #get scenario record
    len = rec[1]                        #save length
 
    #$% call to get slots
    call gslotm (cjc$pointer,$$cjc,cjc$entry,istat)
 
    #$% if status flag is NO (not loaded)
    if(istat == $no)
      {
       #$% send error message
       call echov ("CommJammer from ")
       call echohn (rec[3],$$MaxLit)
       call echov (" and on are not loaded.")
       call echor
       return
      }
 
    #$% this index is used by local freq table and BB FRQ table
    CJC$FQ$index = 1
 
    #$% init frequency counter for this record
    nfreq = 0
 
    #$% get name of communications jammer and save
    CJC$TYPE$C = rec[3]
    PUTCJC$TYPE$C
 
    DEBUGL  call echov ("Loading CommCJCte")
    DEBUGL  call echohn (rec[3],$$MaxLit)
    DEBUGL  call echor
 
 
    lpnt = 1                        # save last word pointer
 
    for (pnt = 4; pnt <= len; )     # for each word in the record
      {
        if (pnt == lpnt)            # if ==, didnt process on last pass.... error
	  {
	    call badfld (_              # display unknown field
			 "CommJammer",  # file type
			 rec[3],        # record name
			 rec[pnt])      # ????? fld
 
            #$% increment pointer
	    pnt = pnt + 1
	  }
 
        #$% save the pointer
        lpnt = pnt
 
        #$% get range of commJammer and save
        if  ( rec [ pnt ] == 'RANGE' )
          {
            CJC$MaxRange$I = rec [ pnt + 1 ]
 
            putCJC$MaxRange$I
 
            pnt = pnt + 2
          }
 
         else if(rec[pnt] == 'NOMEN')  # jb E2209  11/29/00
           {
           CJC$Fullname$V = ""
           kk = 0
           call vmovh (rec[pnt+1], 24, CJC$Fullname$V, kk)
           putCJC$Fullname$V
           pnt = pnt + 4
           }
         else if(rec[pnt] == 'UDB')  # jb E2209  11/29/00
           {
           if      (rec[pnt+1] == 'YES') putCJC$UDB$i ($YES)
           else if (rec[pnt+1] != 'NO')  putCJC$UDB$i (!$NO)
           pnt = pnt + 2
           }
 
        else if  ( rec [ pnt ] == 'POWER' )
          {
            CJC$JammerPower$I = rec [ pnt + 1 ]
 
            putCJC$JammerPower$I
 
            pnt = pnt + 2
          }
 
        else if  ( rec [ pnt ] == 'GAIN' )
          {
            #$% update blackboard with antenna gain from CommJammer record
            CJC$JammerGain$I = rec [ pnt + 1 ]
 
            putCJC$JammerGain$I
 
            pnt = pnt + 2
          }
 
        else if  ( rec [ pnt ] == 'COVER' )
          {
            #$% update blackboard with percent coverage from CommJammer record
            CJC$PercentCovered$I = rec [ pnt + 1 ]
 
            putCJC$PercentCovered$I
 
            #$% percent coverage indicates if commjammer is tone jammer
            if ( CJC$PercentCovered$I == $no )
              CJC$ToneJammer$I = $no
            else
              CJC$ToneJammer$I = $yes
 
            putCJC$ToneJammer$I
 
            pnt = pnt + 2
          }
 
        else if  ( rec [ pnt ] == 'FREQ' )
          {
 
            #$% if out of table bounds do nothing
            if ( !CJC$FQ$index$ok ) next
 
            #$% update local table with commjammer frequency and bandwidth from
            #$% commJammer record. This is done because calculations for
            #$% performance factor are contingent on this equipment being
            #$% a follower or non-follower type.
            freqFld [ FreqPos , CJC$FQ$Index ] = rec [ pnt + 1 ]
 
            freqFld [ BandPos , CJC$FQ$Index ] = rec [ pnt + 2 ]
 
            #$% increment frequency counter for this equipment record
            nfreq = nfreq + 1
 
            CJC$FQ$Index = CJC$FQ$Index + 1
 
            #$% if a "freq" field is present then the commjammer is a freq
            #$% follower.
            CJC$FrequencyFollower$I = $no
 
            putCJC$FrequencyFollower$I
 
            pnt = pnt + 3
          }
 
         #$% else if word is Pulse related, added 6/91 reh
         else if (rec[pnt] == 'PULSE')
            {
            #$% if pulse width specified
            if (rec[pnt+2] != 0)
                {
                putCJC$Pulsed$i ($yes)
                }
            #$% increment counter
            pnt = pnt + 3
            }
 
        #$%  Jammer frequency and delay entries are mutually exclusive
        else if  ( rec [ pnt ] == 'DELAY' )
          {
            #$% update blackboard with time delay factor and bandwidth
            #$% from commjammer record
            CJC$TimeDelayFactor$I = rec [ pnt + 1 ]
 
            putCJC$TimeDelayFactor$I
 
            #$% update blackboard with bandwith of delay
 
            CJC$FQ$BandWidth$I  = rec [ pnt + 2 ]
 
            putCJC$FQ$BandWidth$I
 
            #$% if a delay field is present then the commjammer is a freq
            #$% follower.
            CJC$FrequencyFollower$I = $yes
 
            putCJC$FrequencyFollower$I
 
            pnt = pnt + 3
          }
 
        else if  ( rec [ pnt ] == 'MNFAL' )
          {
            #$% update blackboard with Mean time between failure data
            #$%from commCJCte record
            CJC$MTBF$I = rec [ pnt + 1 ]
 
            putCJC$MTBF$I
 
            pnt = pnt + 2
          }
 
        else if (rec[pnt] == 'MODUL')    # jb        9/13/89
           {
#            call TypeModul (rec[pnt + 1],rec[pnt + 2], J) 6/12/90 reh
 
            #!! call routine to translate modulation type 6/12/90
 
        # the hard code "1" is a temp. measure
            PUTcjc$ModulationType$i (1)
            #$% increment pointer
            pnt = pnt + 3
           }
 
 
        else if  ( rec [ pnt ] == 'MNRPR' )
          {
            #$% update blackboard with Pulse value from commsuite record
            CJC$TimeToRepair$I = rec [ pnt + 1 ]
 
            putCJC$TimeToRepair$I
 
            pnt = pnt + 2
          }
 
      } # loop for next field in record
 
    #$% convert power from Watts to DBm
###  JPowerDbm = 30.0 +QKDB (FLOAT(xCJC$JammerPower$I)) # OLD    8/31/88
 
     JPowerDbm = FLOAT ( xCJC$JammerPower$I )            #       8/23/88
     If(JPowerDbm <= 1.0)    JPowerDbm = 30.0 # jb Protect LOG10; 9/2/88
     else JPowerDbm = 30.0 +(10.0 *log10(JPowerDbm)) #replc QKDB  9/2/88
 
    if ( xCJC$FrequencyFollower$I == $yes )
        {
        #$% update BB with number of frequencies for this commjammer
        CJC$NumberFrequencies$I = 1
 
        #$% init index to first entry in CJC FQ subtable
        CJC$FQ$index = 1
 
        #$% update blackboard with commjammer frequency and bandwidth from
        #$% commJammer record
        CJC$FQ$FrequencyJammed$F = 0
 
        putCJC$FQ$FrequencyJammed$F
 
#     type *, "follower :"
#     type *,"Jammer Power "
#     type *,xCJC$JammerPower$I
#     type *,"Bandwidth"
#     type *,xCJC$FQ$Bandwidth$I
 
        #$% algorithm for commjammer performance factor
 
        CJC$FQ$PerformanceFactor$I = NINT (
            JPowerDbm + FLOAT ( xCJC$JammerGain$I ) + 77.0 )
        CJC$FQ$PerformanceFactor$I = MAX ( 0, CJC$FQ$PerformanceFactor$I )
        putCJC$FQ$PerformanceFactor$I
 
#     type *,"Performance Factor,"
#     type *,xCJC$FQ$PerformanceFactor$I
 
      }
    else
      {
        #$% update number of frequencies for this commjammer
        CJC$NumberFrequencies$I = nfreq
 
        #$% for frequency entries in local table
        do CJC$FQ$index = 1, nfreq
          {
 
            #$% update with frequency
            CJC$FQ$FrequencyJammed$F = freqFld [ FreqPos , CJC$FQ$index ]
 
            putCJC$FQ$FrequencyJammed$F
 
            #$% update with bandwidth
            CJC$FQ$BandWidth$I  = freqFld [ BandPos , CJC$FQ$index ]
 
            putCJC$FQ$BandWidth$I
 
 
#     type *, "NON - follower :"
#     type *,"Jammer Power "
#     type *,xCJC$JammerPower$I
#     type *,"Bandwidth"
#     type *,xCJC$FQ$Bandwidth$I
 
 
            #$% algorithm for commjammer performance factor
 
            IF ( ( xCJC$FQ$BandWidth$I != 0 ) &
                 ( xCJC$FQ$FrequencyJammed$F != 0 ) )
                {
###-------------------------------------------------------------------
###             CJC$FQ$PerformanceFactor$I = NINT ( # jb (Old way) 8/31/88
###                JPowerDbm + FLOAT ( xCJC$JammerGain$I ) -
###                QKDB ( FLOAT ( xCJC$FQ$BandWidth$I ) ) +
###        2.0 * QKDB ( 3.0E4 / FLOAT ( xCJC$FQ$FrequencyJammed$I ) ) +
###                    77.0 )
###--------------------------------------------------------------------
                DCBLS = FLOAT (xCJC$FQ$BandWidth$I )       #     8/23/88
                if(  DCBLS <= 1.0)    DCBLS = 0.0          #      9/2/88
                else DCBLS = 10. * log10(DCBLS)  #jb replace QKDB 9/2/88
 
                FlFreqJammed = xCJC$FQ$FrequencyJammed$F        # 9/2/88
                If(FlFreqJammed < 1.0 | FlFreqJammed >= 3.0E4)  # 9/2/88
                  DBEL3 =  0.0                                  # 9/2/88
                else                                            # 9/2/88
                 {
                  # wavelength in centimeters
                  DBEL3 = 3.0E4 / FlFreqJammed                   #  9/2/88
                  DBEL3 = 10. * log10(DBEL3)      #jb replace QKDB 8/23/88
                 }
 
                CJC$FQ$PerformanceFactor$I = NINT (
                    JPowerDbm + FLOAT ( xCJC$JammerGain$I ) -
                    DCBLS +2.0 * DBEL3 +77.0 )                   # 8/23/88
###-----------------------------------------------------------------------
 
                CJC$FQ$PerformanceFactor$I = MAX (
                    0, CJC$FQ$PerformanceFactor$I )
                }
            ELSE
                {
                CJC$FQ$PerformanceFactor$I = 0
                }
            putCJC$FQ$PerformanceFactor$I
 
#     type *,"Performance Factor,"
#     type *,xCJC$FQ$PerformanceFactor$I
 
         } # looping thru local table
 
      } # else not a follower
 
    putCJC$NumberFrequencies$I
 
  } # loop for next record
 
return
end
 
 
