include "macros.inc"
include "ascii.inc"
include "bbctl.inc"
include "bbcode.inc"
include "bbrte.inc"
include "bbunt.inc"
include "plplay.inc"
define (BBImplicit, implicit none)

 
subroutine unit_notfor_offset (_
                       UNT$Pointer,    # in:  UNT Table referebce
                       istat)          # out: Offset
################################################################################
#$%
#$% Purpose:    Sets addressee restriction offset based on unit type.
#$%
#$% Called By:  chk_type_addressee
#$%             bldord
#$%
#$% Calls:      none
#$%
#$% Tables:     UNT
#$%
#$% Date:       December 1997 (E1832)
#$%
#$% Author:     James Allen
#$%
#$% Modified:   James Allen - 12/97 (E1853)
#$%             Set ghosted unit address restriction.
#$%
################################################################################
BBcommon
 
integer     istat
BBDeclare(unt$pointer, unt$type$i, unt$SuperType$i,
    	  UNT$LastManeuverOrderCode$I)
 
  istat = $Clear$NotFor
 
  UNT$SuperType$I = xUNT$SuperType$I
  UNT$Type$I = xUNT$Type$I
 
  UNT$LastManeuverOrderCode$I = XUNT$LastManeuverOrderCode$I
 
  # Critical maneuver orders that can't be overridden by maneuver orders
  if (UNT$LastManeuverOrderCode$I == ATTACK$order      |
      UNT$LastManeuverOrderCode$I == BINGO$order       |
      UNT$LastManeuverOrderCode$I == FUEL$order        |   # Also Unrep
      UNT$LastManeuverOrderCode$I == HIDE$order        |
      UNT$LastManeuverOrderCode$I == LAND$order        |   # Also Withdraw
      UNT$LastManeuverOrderCode$I == MOOR$order        |
      UNT$LastManeuverOrderCode$I == PERFORM$order     |
      UNT$LastManeuverOrderCode$I == REFUEL$order)
    {
     if      (UNT$SuperType$I == $Torpedo$SuperCode  ) istat = $Not$TorpedoMnvr
     else if (UNT$type$I == $Air$code                ) istat = $Not$AircraftMnvr
     else if (UNT$type$I == $Sub$code                ) istat = $Not$SubmarineMnvr
     else if (UNT$type$I == $CruiseMissile$code      ) istat = $Not$CruiseMissileMnvr
     else if (UNT$SuperType$I == $Surface$Supercode  ) istat = $Not$SurfaceMnvr
     else if (UNT$SuperType$I == $SmallBoat$Supercode) istat = $Not$SmallBoatMnvr
    }
  else
    {
     if      (UNT$type$I == $ShoreBase$code          ) istat = $Not$ShoreBase
     else if (UNT$SuperType$I == $Torpedo$SuperCode  ) istat = $Not$Torpedo # E1832
     else if (UNT$type$I == $Air$code                ) istat = $Not$Aircraft
     else if (UNT$type$I == $Sub$code                ) istat = $Not$Submarine
     else if (UNT$type$I == $CruiseMissile$code      ) istat = $Not$CruiseMissile
     else if (UNT$SuperType$I == $Surface$Supercode  ) istat = $Not$Surface
     else if (UNT$SuperType$I == $SmallBoat$Supercode) istat = $Not$SmallBoat
 
     if (XUNT$GhostedUnit$I == $yes)                   istat = $Not$GhostedUnit
    }
 
return
end
 

 
integer function isPlottableOrder(iseq, nord, nargs, args)
 
##########################################################
#$%
#$% Purpose:    isPlottableOrder (for route) looks for fixed position
#$%             in order from route order set
#$%
#$% Called By:  PLOT_ROUTES
#$%
#$% Calls:
#$%
#$% Tables:
#$%
#$% Date:       6 Sep 05
#$%
#$% Author:     James O. Allen
#$%
##########################################################
implicit NONE
 
integer iseq, nord, nargs, isok
literal args[ARB]
 
isok = $no
 
if (nord == pair$order)
{
    if (args[5] == $lex$position$) isok = $yes    #Drop Mine
}
 
if (nord == strike$order)
{
    if (args[2] == $lex$position$) isok = $yes    #Drop Mine
}
 
if (nord == proceed$order)
    isok = $yes
 
if (nord == barrier$order)
    if (args[1] == $lex$barrier$)
        isok = $yes
 
if (nord == take$order)
    if (args[2] == $lex$base$)
        isok = $yes
 
if (nord == orbit$order)
    isok = $yes
 
if (iseq == 1)                  # Skip proceed course if no initial position
{
    if (nord == proceed$order)
        if(args[2] == $lex$course$)
            isok = $no
}
 
return (isok)
end
 

 
Subroutine get_position_from_order(nord,
                                   nargs,
                                   args,
                                   lat,     # inout in is prior lat; out is lat
                                   lon)     # inout in is prior lon; out is lon
 
##########################################################
#$%
#$% Purpose:    GET_POSITION_FROM_ORDER get lat and lon from order syntax
#$%
#$% Called By:  PLOT_ROUTES
#$%
#$% Calls:      UNTFND   RRB2LL    DMS2rad
#$%
#$% Tables:     UNT
#$%
#$% Date:       6 Sep 05
#$%
#$% Author:     James O. Allen
#$%
##########################################################
BBcommon
 
integer nord, nargs
literal args[ARB]
real lat, lon, DMS2rad, brg, frange,fcos
literal base_name
 
BBDeclare (unt$pointer, unt$view$i)
 
if (nord == barrier$order & args[1] == $lex$barrier$)
{
    lat = DMS2rad(args[3])
    lon = DMS2rad(args[4])
}
else if (nord == strike$order)
{
    lat = DMS2rad(args[3])
    lon = DMS2rad(args[4])
}
else if (nord == pair$order)
{
    if (args[5] == $lex$position$)       # Drop Mine
    {
        lat = DMS2rad(args[6])
        lon = DMS2rad(args[7])
    }
}
else if (nord == proceed$order)
{
    if (args[2] == $lex$course$)
    {
        BRG = args[3] * ($PI/180.)
        FRange = args[4]
        FCOS = COS(lat)
 
        call RRB2LL (lat,      #Compute where we wind up at
                    lon,
                    FRange,
                    BRG,
                    0.0,
                    FCOS)
    }
    else                            # Must be position
    {
        lat = DMS2rad(args[3])
        lon = DMS2rad(args[4])
    }
}
else if (nord == take$order & args[2] == $lex$base$)
{
    base_Name = args[3]
    unt$view$i = $neutral$view          # Use neutral view since view validated above
    call untfnd(unt$view$i, base_Name, unt$pointer)
    if (unt$pointer$ok)
    {
        lat = Xunt$TrueLatitude$f
        lon = Xunt$TrueLongitude$f
    }
 
}
return
end

integer function fndrte (rteName)
BBcommon
 
BBdeclare (rte$pointer)
literal rteName, CSTRIP8
integer NAMslot, litcmp
 
NAMslot = 0                 # Indicates route not found
 
for (Rte$Pointer$First; Rte$Pointer$OK; Rte$Pointer$Next)
{
    If (litcmp(XRte$Name$c, rteName) == 0)  #If the 2 names are the same, check to
    {
            NAMslot = Rte$Pointer$Index
            BREAK
    }
}
 
return (NAMslot)
end
 
