###
### modification of wes version 3.1 to the VAX 11/780
###
###    started DATE:   21 NOV 18
###
### number prog    module      comments
### =====  ====    ======      ================================================
### #VAX00 RAK     FREPLAT     Changes to adapt form the DEC-20 to
###                            the VAX 11/780
###
###
###
###
###
###
 
#####   version 3.1  dated-  7apr81
 
###
### mod to version 3.0          dated 12-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 dew     fbpeq   Chg- added TRKS field to build file description
###             fbaeq   Chg- added TRKS field to build file description
###
 
#####   version 3.0  dated- 22dec80
 
 
#$%     MODULE                       UTILITY                     DATA
#$%   SUBROUTINES                  SUBROUTINES                  TABLES
#$%   ===========                  ===========                  ======
#$%
#$%     FESHIP                        ECHOH                     FORCE
#$%     FXSHIP                        ECHOR                     BUILD
#$%     FBPEQ                         ECHOI                     SHORE
#$%     FVEQ                          ECHO                      AIR
#$%     FVOTHR                        FFCHAR                    CRUISE
#$%     FVAIR                         FSUSE                     COMMB
#$%     FVCRU                         FSTBL                     SAT
#$%     FVBOY                         FBAEQ
#$%     FVSAT                         FBCEQ
#$%     FEBASE                        FBBEQ
#$%     FXBASE                        FBSEQ
#$%     FESITE                        FINSEQ
#$%     FXSITE                        FGERR1
#$%                                   FGERR2
#$%
#$%
#$%
#$%   NOTES
#$%   =====
#$%
#$%   1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%   2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%   3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%   4. jb  E2141 =>  8-chacacter names    12/9/99
#$%
#$%   FLOWCHART FOR FEPLAT
#$%   ====================
#$%
#$%   FENTER<FORCE> - FESHIP - FXSHIP - FSTBL *
#$%                                   - FFCHAR*
#$%                                   - FBPEQ - FINSEQ*
#$%                                   - FVEQ  - FVAIR *
#$%                                           - FVCRU *
#$%                                           - FVBOY *
#$%                                           - FVSAT *
#$%                                           - FOTHR *
#$%                                   - FCUSE *
#$%                                   - FSUSE *
#$%                   FEBASE - FXBASE - FSTBL *
#$%                                   - FFCHAR*
#$%                                   - FBPEQ - FINSEQ*
#$%                                   - FVEQ  - FVAIR *
#$%                                           - FVCRU *
#$%                                           - FVBOY *
#$%                                           - FVSAT *
#$%                                           - FVOTHR*
#$%                                   - FSUSE *
#$%                                   - FCUSE *
#$%                   FESITE - FXSITE - FSTBL *
#$%                                   - FFCHAR*
#$%                                   - FBPEQ - FINSEQ*
#$%                                   - FVEQ  - FVAIR *
#$%                                           - FVCRU *
#$%                                           - FVBOY *
#$%                                           - FVSAT *
#$%                                           - FVOTHR*
#$%                                   - FSUSE *
#$%                                   - FCUSE *
 
 

 
 
include "bbcode.inc"
include "plplay.inc"
include "frmain.inc"
include "ascii.inc"
#define ($DEBUG,$DEBUGEP)
define ($DEBUG,#)
define (ForceImplicit, Implicit None)               # MJC 6/12/2K (E2145)
 
# X array
define (Data$x_name, DATA xC [1,$use(Data_Count)])
define (Data$x_data, DATA x  [2,$use(Data_Count)])
define (Data$x,
     $incr(Data_Count)
     Data$x_name / @1 /
     Data$x_data / @2 /
)
 
 
 
 
 
subroutine FEship (nargs,args)
 
#####################################################################
#$% Purpose:   FESHIP controls the entry and loading of ship data.
#$%
#$% Called By: FRENTER
#$%
#$% Calls:     FXSHIP     FSUSE      ECOHR
#$%            FCUSE      ECHOH
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#####################################################################
 
Forcecommon
integer ITASK,
        ILAT,
        ILONG,
        ICOURS,
        ISPEED,
        IDEPTH,
        IBEAR,
        IRANGE,
        ISTAT                                       # MJC 6/9/2K (E2145)
integer nargs
literal args[$max$args],guide,name,class, dummy
 
#$% set unit task number
itask = args[3]
if (itask <= 9999) itask = itask * 10 # convert to 5-digit
#$% set unit name
name  = args[4]
#$% set unit class
class = args[5]
 
#$% if position given for unit
if (args[6] == $lex$position$)
   {
    #$% set latitude
    ilat   = args[7]
    #$% set longitude
    ilong  = args[8]
    #$% set course
    icours = args[9]
    #$% set speed
    ispeed = args[10]
 
    #$% if sub, set depth
    if (args[11] == $lex$depth$) idepth = args[12]
    #$% else set depth to zero
    else                         idepth = 0
 
    #$% initialize guide, bearing and range
    guide  = 0
    ibear  = 0
    irange = 0
   }
 
#$% else if station given for unit
else   # ==     $lex$station$
   {
    #$% set zero latitude
    ilat   = 0
    ilong  = 0
    icours = 0
    #$% set zero speed
    ispeed = 0
 
    if (args[10] == $lex$depth$) idepth = args[11]
    #$% else, set zero depth
    else                         idepth = 0
 
    #$% set guide, bearing and range
    guide  = args[7]
    #$% set bearing
    ibear  = args[8]
    irange = args[9]
   }
 
#$% set in use flag
call FSuse
 
#$% verify ship status
call FXship (istat,             # returned status
             itask ,            # task number
             name,              # name to be known by
             class,             # ship class
             ilat  ,            # A initial lat (or zero)   |
             ilong ,            # A initial long (or zero)  | Tese
             icours,            # A initial course (or zero)|
             ispeed,            # A initial speed (or zero) |  or...
             idepth,            # initial depth
              guide,            # B station guide name (or zero)|
             ibear ,            # B station bearing (or zero)   |These
             irange,            # B station range (or zero)     |
             dummy)             # reh 1/19/90
 
#$% if status is YES
if (istat == $yes)
   {
    #$% set in use flag
    call FSuse
    #$% increment force counter
    nforce = nforce + 1
   }
 
#$% else
else
   {
    #$% clear in use flag
    call FCuse
    #$% send message
##    call echohn (name,5)
    call echohn (name,$$maxname)    # jb  E2141     12/9/99
    call echov (" is not loaded because of the above errors.")
    call echor
   }
 
 return
 end
 

 
 
Subroutine FXship (istat,             # returned status
                   itask ,            # task number
                   name ,             # name to be known by
                   class,             # ship class
                   ilat  ,            # A initial lat (or zero)   |
                   ilong ,            # A initial long (or zero)  | Tese
                   icours,            # A initial course (or zero)|
                   ispeed,            # A initial speed (or zero) |  or...
                   idepth,            # initial depth
                    guide,            # B station guide name (or zero)|
                   ibear ,            # B station bearing (or zero)   |These
                   irange,            # B station range (or zero)     |
                   type)              # added 1/19/90, reh
#####################################################
#$%
#$% Purpose:   FXSHIP verifies input ship data.
#$%
#$% Called By: FESHIP     FCVFOR
#$%
#$% Calls:     FSTBL      FBPEQ      ECHOH
#$%            FFCHAR     FVEQ       ECHOI
#$%            ECHOR
#$%
#$% Tables:    FORCE      BUILD
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#$% Modified:  Carol Kropp - 2/94 (E1081)
#$%            Removed if task number and name (together)
#$%            duplicate another unit and replace with a
#$%            name duplication check.  Task numbers can be
#$%            duplicated, but names must be unique (even
#$%            across views).
#$%
#####################################################
 
ForceCommon
integer  ISTAT,
         ISAME_TASK,
         KFORCE,
         ITASK,
         IT_IS_DUP,
         ILAT,
         ILONG,
         ICOURS,
         ISPEED,
         IDEPTH,
         IBEAR,
         IRANGE,
         JSTAT,
         LADD,
         KCLASS                                      # MJC 6/9/2K (E2145)
integer  duplicate_name_flag, lcomp_vb, lcomp
literal  guide,name,class,type
 
#$% set status to NO
istat = $no
 
#$% if maximum number of forces is greater
if ((nforce + norg) >= $forces) #forces + ground org's > $forces --JFR 5/30/91
   {
    #$% send message that maximum number of forces are loaded
    call echoi ($forces)
    call echov (" forces and org's are loaded and that is the maximum.")
    call echor
    return
   }
 
#$% if unit name is the guide name
if (lcomp(name,guide) == 0)
   {
    #$% send message that a ship cannot guide on itself
    call echov ("A ship cannot station on itself.")
    call echor
    return
   }
 
call check_force_name (name, duplicate_name_flag)   # clk 2/94 (E1081)
if (duplicate_name_flag == $YES)
  {
   call echov  ("The unit name (")
   call echohn (name, $$MaxLit)
   call echov  (") duplicates the name of an existing Force.")
   call echor
   return
  }
 
isame_task = 0
#$% for each force entry
for (force$index = 1; force$index<=nforce; force$index=force$index+1)
   {
    #$% if same task number
    if (force$task == itask)
       {
        isame_task = isame_task + 1
       }
 
    #$% if force is guiding on another force 5/21/90, reh
    if ( guide != 0 )
        {
        #$% if guide is not in same view as force being guided
        if (force$task/1000 != itask/1000 &
            force$name == guide )
            {
            call echov ("   Guide must be in the same view.")
            call echor
            return
            }
        } # end, if guiding on another force
 
    #$% if task and force are same name
    if (force$task/1000 == itask/1000 & force$name == name)
       {
        #$% send message that force name exists already
        call echov ("A force with that name exists for the same view.")
        call echor
        return
       }
   }
 
if (isame_task > 0) # jb Moved up here (BEFORE call to check_org_task) 12/4/91
    {
    call echost ("Warning: ")
    call echoi (isame_task)
    call echost (" force(s) with that task number exist.")
    call echor
    }
 
#check for duplicate task number/names within ground organizations-JFR 6/3/91
call check_org_task (itask , isame_task)   #JFR 5/30/91
call check_org_name (name, it_is_dup)      #JFR 5/30/91
 
if ( it_is_dup == $YES )                   #JFR 5/30/91
    {
    call echov ("The force name ")
    call echohn (name,$$maxname)    # jb  E2141     12/9/99
    call echov (" duplicates the name of an organization.")
    call echor
    return
    }
 
call check_aml_name ( name, it_is_Dup )                 # DEW 4/2/90
 
if ( it_is_dup == $YES )                                # DEW 4/2/90
    {
    call echov ("The force name ")
    call echohn (name,$$maxname)    # jb  E2141     12/9/99
    call echov (" duplicates the name of an aircraft.")
    call echor
    return
    }
 
call check_bml_name ( name, it_is_Dup )                 # DEW 4/2/90
 
if ( it_is_dup == $YES )                                # DEW 4/2/90
    {
    call echov ("The force name ")
    call echohn (name,$$maxname)    # jb  E2141     12/9/99
    call echov (" duplicates the name of a boat.")
    call echor
    return
    }
 
#$% save ship data
force$index  = nforce + 1       # save the info but don't increment nforce yet
force$task   = itask
force$name   = name
force$class  = class
force$lat    = ilat
force$long   = ilong
force$course = icours
force$speed  = ispeed
force$depth  = idepth
force$guide  = guide
force$bearing= ibear
force$range  = irange
force$indicator = 2             # indicate a ship   KHC 6/1/92
 
 
type = $BLANKLIT                  # reh 1/19/90, used as flag for ENTER SHIP
 
entry add_boat_class(class, type, istat )              # 5/9/89 reh
entry add_ship_class(class, type, istat )
 
#$% search ship class table
call FSTBL (nclass,wrclass, class,jstat)         # search table return with
                                                # jstat as index ($no =0)
#$% if status is NO
if (jstat == $no)
   {
    #$% if maximum number of ship classes is greater
    if (nclass >= $class)
       {
        #$% send message that maximum number of ship classes are loaded
        call echoi ($Class)
        call echov (" ship classes are loaded and that is the maximum.")
        call echor
        return
       }
 
    #$% find and load ship class characteristics
    call FFCHAR (build$name,$litc,class$file, class,rrec,ladd)
 
    #$% if ship class cannot be found
    if (rrec[1] == 0)
       {
        #$% send message that ship class cannot be found
        call echohn (class,$$maxname)    # jb  E2141     12/9/99
        call echov (" cannot be found.")
        call echor
        return
       }
 
    #$% if "ENTER SHIP" command was used with a small boat
    IF ( lcomp_vb(RREC [ 5 ],"BOAT") == 0 &
         lcomp_vb(type,"BOAT") != 0)     # reh 1/18/90
        {
        call echov ("Class ")
        call echohn (class,$$maxname)    # jb  E2141     12/9/99
        call echov (" is a BOAT.")
        call echor
        return
        }
 
    #$% ensure class type is boat for boat characteristics     # AM. 5/17/89
    if ((lcomp_vb(type,"BOAT") == 0) &
        (lcomp_vb(rrec[5],"BOAT") != 0 ))
       {
        type = $BLANKLIT                                         # clear boat type
        #$% send message that class is inappropriate for a boat
        call echov ("Class ")
        call echohn (class,$$maxname)    # jb  E2141     12/9/99
        call echov (" is inappropriate for a boat.")
        call echor
        return
       }
 
    #$% increment ship class counter
    nclass = nclass + 1                 # add class to tables
 
    #$% save ship class data
    class$index   = nclass
    class$name    = class              # store data in class table
    class$addr    = ladd
    class$used    = 0
    class$oldaddr = 0
    class$type = rrec [ 5 ]             # reh 6/90
 
    #$% load equipment data into tables
    call FBPeq (rrec)                    # add equipment to tables
   }
ELSE    # check also if class already in class table
    {
    #$% set index to matching class entry
    class$index   = jstat
 
    #$% if "ENTER SHIP" command was used with a small boat
    IF ( class$type == 'BOAT' & type != 'BOAT')     # reh 1/18/90
        {
        call echov ("Class ")
##        call echoh (class,5)
        call echohn (class,$$maxname)    # jb  E2141     12/9/99
        call echov (" is a BOAT.")
        call echor
        return
        }
 
    #$% ensure class type is boat for boat characteristics
    if ((lcomp_vb(type,"BOAT") == 0) & (lcomp_vb(class$type,"BOAT") != 0))
       {
        type = $BLANKLIT                                         # clear boat type
        #$% send message that class is inappropriate for a boat
        call echov ("Class ")
        call echohn (class,$$maxname)    # jb  E2141     12/9/99
        call echov (" is inappropriate for a boat.")
        call echor
        return
       }
    } # end if class is already in class table
 
#$% verify equipment data
call FVeq                               # verify equipment
 
#$% if error count is zero, set status flag to YES
if (errcnt == 0) istat = $yes
 
#$% set error counter to zero
errcnt = 0
 
return
end
 

 
Subroutine FBPeq (work)                           # build equip into tables
 
##########################################################################
#$%
#$% Purpose:   FBPEQ controls loading of data while checking the ship
#$%            equipment list for required equipment type.
#$%
#$% Called By: FXSHIP     FXBASE    FXUNIT (JFR 5/9/91)    FXSITE (KHC 5/26/92)
#$%
#$% Calls:     FINSEQ     ECHOH
#$%            ECHO       ECHOR
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
##########################################################################
 
ForceCommon                                       # from platform (ship/base)
integer LEN,
        INC,
        IFLG,
        lcomp_v,lcomp,lcomp_vb,
        K                                # MJC 6/9/2K (E2145)
literal work[1500],type                  # joa 2/96 (E1467)
                                         # added AFUEL, FHOSE, LAAF,
                                         # LASF, SFC, SFRES, SFUEL, UNREP
                                         # joa 3/96 (E1467)
                                         # added FUSTA and JPSTA
LitCharEquiv(X,2,77)
 
integer pnt
 
# define field names used in both ship, shore, and hide site records
 
# Note : The second field in the following array increments the pointer
# as we move through the ship record
 
$set(data_count,0)
data$X("AIR  ",-3)      #      ..Opt(NAME QTY)
data$X("AFUEL",-2)      #      ..Opt(QTY)       # joa 2/96 (E1467)
data$X("ARMOR",-2)      #      ..opt(mm)    JFR 5/7/91
data$X("BBD  ", 7)      #      ...(dB dB dB dB dB dB)
data$X("BBN  ", 7)      #      ...(dB dB dB dB dB dB)
data$X("BLIP ", 2)      #      ..Opt(ANSWR)
data$X("BUOY ",-4)      #      ..Opt(NAME BTYPE QTY)
data$X("CAT  ", 2)      #        SURF
data$X("CBUOY",-3)      #      ..Opt(Name Qty)  SMM 4/90
data$X("CJAMR",-3)      #      ..Opt(Name)m #$% REH 10/5/89
data$X("GRND ",-3)      #      ..Opt(Name)m #$% REH 11/89
data$X("CHAFF",-3)      #      ..Opt(Name)m #$% jb    7/11/90
data$X("CLASS", 2)      #      ...(NAME)
data$X("CLRNG", 2)      #      ...(RANGE)
data$X("CMISS",-4)      #      ..Opt(NAME NTYPE QTY) ntype:"CRUZ ","BALL "
data$X("COMMS",-3)      #      ..Opt(NAME FEET)
data$X("DECM ", 2)      #      ..Opt(ANSWR)
data$X("DETEC", 2)      #      ...(km)      JFR  5/7/91
data$X("DR   ",-2)      #      ...(NAME)
data$X("DRATE", 2)      #      ...(ft/mn)
data$X("DTRNG", 2)      #      ...(RANGE)
data$X("FHOSE",-3)      #      ..Opt(NAME QTY GAL/HR)     # joa 2/96 (E1467)
data$X("FUSTA",-2)      #      ..Opt(NAME QTY)            # joa 3/96 (E1467)
data$X("HDG  ",-2)      #      ...(NAME)
data$X("HFDF ", 2)      #      ...(NAME)
data$X("IFF  ",-3)      #      ..Opt(NAME FEET)     # cml 2/28/91
data$X("JAMMR",-3)      #      ..Opt(NAME FEET)
data$X("JP   ", 2)      #      ...(POUNDS)
data$X("JPSTA",-2)      #      ..Opt(NAME QTY)  # joa 3/96 (E1467)
data$X("KEEL ", 2)      #      ...(FEET)
data$X("LAAF ",-2)      #      ...(%)           # joa 2/96 (E1467)
data$X("LAAIR", 2)      #      ...(%)
data$X("LACOM", 2)      #      ...(%)
data$X("LAFLD", 2)      #      ...(%)
data$X("LAJP ", 2)      #      ...(%)
data$X("LASAM", 2)      #      ...(%)
data$X("LASEN", 2)      #      ...(%)
data$X("LASF ",-2)      #      ...(%)           # joa 2/96 (E1467)
data$X("LASPD", 2)      #      ...(%)
data$X("LASTO", 2)      #      ...(%)
data$X("LAT  ", 2)      #      ...(LAT)  JFR  5/7/91
data$X("LAWPN", 2)      #      ...(%)
data$X("LCHRT", 2)      #      ..Opt(QTY)
data$X("LONG ", 2)      #      ...(LONG)
data$X("MISS ",-4)      #      ..Opt(NAME MTYPE QTY) mtype:"SAM  ","CRUZ ","BALL ","
data$X("MOBLE",-2)      #      ..Opt(ANSWR) JFR  5/9/91
data$X("LAVEH", 2)      #      ...(%)
data$X("NAME ", 2)      #      ...(NAME)
data$X("NAV  ",-2)      #      ..Opt(NAME)
data$X("NBD  ", 3)      #      ..Opt(Hz dB)
data$X("NBN  ", 3)      #      ..Opt(Hz dB)
data$X("NBUOY",-3)      #      ..Opt(NAME QTY)
data$X("OMEGA",-2)      #      ...(NAME)
data$X("RBOC ", 3)      #      ...(qt/mn QTY)
data$X("RDESM",-3)      #      ..Opt(NAME FEET)
data$X("RECRT", 2)      #      ..Opt(QTY)
data$X("SFC  ",-8)      #      ..Opt(QTY...)    # joa 2/96 (E1467)
data$X("SFRES",-2)      #      ..Opt(QTY)       # joa 2/96 (E1467)
data$X("SFUEL",-2)      #      ..Opt(QTY)       # joa 2/96 (E1467)
data$X("SONAR",-2)      #      ..Opt(NAME)
data$X("SPD  ",-2)      #      ...(NAME)
data$X("TORP ",-3)      #      ..Opt(NAME QTY)
data$X("TRACK", 2)      #      ...(NUMBR)      JFR  5/7/91
data$X("TRKS ", 2)      #      ...(QTY1)                              #smn002
data$X("TRPDO",-3)      #      ..Opt(NAME QTY2)      SMM 4/90
data$X("TYPE ", 2)      #      ...(NAME)
data$X("UNREP",-2)      #      ..Opt(ANSWR)        # joa 2/96 (E1467)
data$X("USIZE", 2)      #      ...(SIZE)    JFR   5/7/91
data$X("UTYPE", 2)      #      ...(TYPE)    JFR   5/7/91
data$X("VCRU ",-2)      #      ..Opt(KNOTS)  KHC 5/26/92
data$X("VEHIC",-3)      #      ...(NAME QTY)   JFR   5/7/91
data$X("VMAX ", 2)      #      ...(KNOTS)
data$X("WBUOY", 3)      #      ..Opt(NAME QTY)  ( dont search for buoy)
data$X("WEAP ",-4)      #      ..Opt(NAME WTYPE QTY)
data$X("WIRES", 2)      #      ..Opt(QTY)
data$X("XSECT", 2)      #      ...(dB)
data$X("zzzzz", 0)                                                    #smn002
 
$debug call echov(" FBPeq ")
 
#$% get working array length
len = work[1]
 
#$% for each array entry
for (pnt = 2; pnt <= len; pnt = pnt + inc)
    {
    #$% set increment to one
    inc = 1
    #$% set type to zero
    type = 0
    #$% set flag to NO
    iflg = $no
 
    $debug call echov(" Fld=")
##    $debug call echoh(work[pnt],5)
    $debug call echohn(work[pnt],$$maxname) # jb    E2141   12/9/99
 
    #$% for each entry in X array
    for (k=1; lcomp_vb(X[1,k], "zzzzz") != 0; k=k+1)                               #smn002
       {
 
        #$% if work entry is not equal to X entry, get next entry
        if (lcomp(work[pnt],X[1,k]) != 0) next
 
        $debug call echo ($exclaim)
 
        inc = iabs( int( X[2,k] ) )
 
        #$% set flag to YES if entry is optional
        if ( int( X[2,k] ) < 0) iflg = $yes
       }
 
    #$% if flag is NO, get next
    if (iflg == $no) next
 
    $debug call echov("  Eq=")
##    $debug call echoh(work[pnt],5)
    $debug call echohn(work[pnt],$$maxname) # jb    E2141   12/9/99
 
    #$% if entry is navigational equipment
    if (lcomp_vb(work[pnt],"HDG")   == 0 |
        lcomp_vb(work[pnt],"SPD")   == 0 |
        lcomp_vb(work[pnt],"DR")    == 0 |
        lcomp_vb(work[pnt],"OMEGA") == 0 |
        lcomp_vb(work[pnt],"NAV")   == 0  )
 
       {
        #$% if equipment type is not navaid
        if (lcomp_vb(work[pnt],"NAV") != 0)   type = work[pnt]
 
        #$% load navaid data
        call Finseq (nnavad,wrnavad,$navaid,work[pnt+1],  type,"Navaid    ")
       }
 
    #$% else if equipment type is RADAR/ESM
    else if (lcomp_vb(work[pnt],"RDESM") == 0)
       {
        #$% load RADAR/ESM data
        call Finseq (nsenso,wrsenso,$sensors,work[pnt+1],  type,"Radar/ESM ")
       }
 
    #$% else if aircraft
    else if (lcomp_vb(work[pnt],"AIR") == 0)
       {
        #$% load aircraft data
        call Finseq (nair,wrair,$air,work[pnt+1],  type,"Aircraft  ")
       }
 
    #$% else if weapon
    else if (lcomp_vb(work[pnt],"WEAP") == 0)
       {
        #$% load weapon data
        call Finseq(nweap,wrweap,$weapons,work[pnt+1],work[pnt+2],"Weapon    ")
       }
 
    #$% else if torpedo
    else if (lcomp_vb(work[pnt],"TORP") == 0)
       {
        #$% load torpedo data
        type = 'TORP'
        call Finseq (nweap,wrweap,$weapons,work[pnt+1],type,"Weapon    ")
       }
 
    else if (lcomp_vb(work[pnt],"TRPDO") == 0)
       {
        #$% load enhanced torpedo data
        call Finseq (ntrpdo,wrtrpdo,$trpdo,work[pnt+1],  type,"Torpedo   ")
       }
 
    #$% else if jammer
    else if (lcomp_vb(work[pnt],"JAMMR") == 0)
       {
        #$% load jammer data
        call Finseq (njamme,wrjamme,$jammers,work[pnt+1],  type,"Jammer    ")
       }
 
    #$% else if sonar
    else if (lcomp_vb(work[pnt],"SONAR") == 0)
       {
        #$% load sonar data
        call Finseq (nsonar,wrsonar,$sonar,work[pnt+1],  type,"Sonar     ")
       }
 
    #$% else if communication path
    else if (lcomp_vb(work[pnt],"COMMS") == 0)
       {
        #$% load commpath data
        call Finseq (ncomms,wrcomms,$commsuite,work[pnt+1],  type,"Commsuites")
       }
 
    #$% else if missile, what kind of missile
    else if (lcomp_vb(work[pnt],"MISS") == 0)
       {
        #$% "CRUZ ","BALL ",or "SAM  "
        #$% load missile data
        call Finseq (ncruis,wrcruis,$cruise,work[pnt+1],  type,"Missile   ")
       }
 
    #$% else if buoy, load...
    else if (lcomp_vb(work[pnt],"BUOY") == 0)
       {
        #$% commbuoy data, or...
        if (lcomp_vb(work[pnt+2],"COMM") == 0)
            call Finseq(ncommb,wrcommb,$commbuoy,work[pnt+1],type,"Commbuoy  ")
 
        #$% sonobuoy data
        if (lcomp_vb(work[pnt+2],"SONO") == 0)
            call Finseq(nsonob,wrsonob,$sonobuoy,work[pnt+1],type,"Sonobuoy  ")
 
        #$% countermeasure data
        if (lcomp_vb(work[pnt+2],"CM") == 0)
            call Finseq(nctrme,wrctrme,$ctrme,work[pnt+1],type,"Countermea")
       }
 
    #$% else if nbuoy...
    else if (lcomp_vb(work[pnt],"NBUOY") == 0)
       {
        #$% load commbuoy data
        call Finseq (ncommb,wrcommb,$commbuoy,work[pnt+1],  type,"Commbuoy  ")
       }
 
    #$% else if cbuoy...
    else if (lcomp_vb(work[pnt],"CBUOY") == 0)
       {
        #$% load countermeasure data
        call Finseq (nctrme,wrctrme,$ctrme,work[pnt+1],  type,"Countermea")
       }
 
    #$% REH 03/22/88
    #$% else if cjamr...
    else if (lcomp_vb(work[pnt],"CJAMR") == 0)
       {
        #$% load commjammer data into work area
        call Finseq (ncomjm,wrcomjm,$comjm,work[pnt+1],  type,"CommJammer")
       }
    else if (lcomp_vb(work[pnt],"GRND") == 0)      # 11/30/89 reh
       {
        #$% load ground data into work area
        call Finseq (nground,wrground,$ground,work[pnt+1],  type,"Ground Unt")
        #$% load joint ground unit into work area  -JFR 5/9/91
        call Finseq (ngroundunit,wrgroundunit,$groundunit,work[pnt+1],  type,"Joint Unit")
       }
    else if (lcomp_vb(work[pnt],"CHAFF") == 0)      # jb    7/10/90
       {
        #$% load chaff data into work area
        call Finseq (nchaff,wrchaff,$chaff,work[pnt+1],  type,"Chaff")
       }
    else if (lcomp_vb(work[pnt],"IFF") == 0)      # cml    2/28/91
       {
        #$% load iff data into work area
        call Finseq (niff,wriff,$iffs,work[pnt+1],  type,"IFF")
       }
    #$% else if vehicle
    else if (lcomp_vb(work[pnt],"VEHIC") == 0)   # JFR 5/7/91
       {
	#$% load vehicle data into work area # JFR 5/7/91 {call finseq}
	call Finseq (nvehicle,wrvehicle,$vehicle,work[pnt+1],type,"Vehicle   ")
       }
 
    }
 
$debug call echor
return
end
 

 
Subroutine FBAeq (work)                           # build equip into tables
 
#####################################################################
#$%
#$% Purpose:   FBAEQ controls the loading of required aircraft
#$%            equipment data.
#$%
#$% Called By: FVAIR
#$%
#$% Calls:     FINSEQ
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#####################################################################
 
ForceCommon                                       # from aircraft record
integer LEN,
        INC,
        IFLG,
        lcomp_v,lcomp_vb, lcomp,
        K                                         # MJC 6/9/2K (E2145)
 
# decremented 49 to 48 on 11/93, since MISS not allowed as of 12/86 as
# shown in BLAIR.RAT
literal work[1500],type
integer pnt
 
LitCharEquiv(X,2,48)
 
# define field names used in aircraft
 
# Note : The second field in the following array increments the pointer
# as we move through the ship record
 
$set(data_count,0)
data$X("AMAX ", 2)               # ...(FEET2)
data$X("BUOY ",-4)               # ..Opt(NAME BTYPE QTY)
data$X("CAT  ", 2)               # ...(CAT)
data$X("CLIMB", 2)               # ...(FEET1)
data$X("CLRNG", 2)               # ...(RANGE)
data$X("COMMS",-2)               # ..Opt(NAME)
data$X("CJAMR",-2)               # ..Opt(NAME) REH 10/5/89
data$X("DTRNG", 2)               # ...(RANGE)
data$X("HDG  ",-2)               # ...(NAME)
data$X("IFF  ",-2)               # ..Opt(NAME)  cml  2/28/91
data$X("JAMMR",-2)               # ..Opt(NAME)
data$X("JP   ", 2)               # ...(POUND)
data$X("LDELY", 2)               # ...(MINUT)
data$X("MAINT", 2)               # ...(MAINT)
data$X("MNALT",-2)               # ..Opt(FEET3)   #JFR 5/9/91
data$X("MNFAL", 2)               # ...(MNFAL)
data$X("MNMNT", 2)               # ...(MAINT)
data$X("MNRPR", 2)               # ...(MNRPR)
data$X("NAME ", 2)               # ...(NAME)
data$X("NAV  ",-2)               # ..Opt(NAME)
data$X("ODELY", 2)               # ...(DELAY)
data$X("PBFAL", 2)               # ...(%)
data$X("PBLCH", 2)               # ...(%)
data$X("PBREC", 2)               # ...(%)
data$X("VECSP", 2)               # ...(MILES)
data$X("LOTSP", 2)               # ...(MILES)
data$X("FLXPT", 2)               # ...(EXPONT)
data$X("FLPRX", 2)               # ...(PREFIX)
data$X("LOTFL", 2)               # ...(LOITER)
data$X("LBSKT", 2)               # ...(EXPONT)
data$X("LOITF", 2)               # ...(PREFIX)
data$X("HOVER", 2)               # ...(LOITER)
data$X("RDELY", 2)               # ...(DELAY)
data$X("RDESM",-2)               # ..Opt(NAME)
data$X("SDMNT", 2)               # ...(MAINT)
data$X("SONAR",-2)               # ..Opt(NAME)
data$X("SPD  ",-2)               # ...(NAME)
data$X("SYSFL", 2)               # ...(FAIL)
data$X("TRKS ", 2)               # ...(QTY1)                          #smn002
data$X("VCRU ", 2)               # ...(MPH2)
data$X("VMAX ", 2)               # ...(MPH1)
data$X("WEAPO",-4)               # ..Opt(NAME WTYPE QTY)
data$X("XSECT", 2)               # ...(dB)
data$X("FLIR ",-2)               # ...(NAME)                    # clf 8/12/92
data$X("IRNAM",-2)               # ...(NAME)                    # clf 8/12/92
data$X("HGT  ",-2)               # ...Opt(FEET3)               # jms 11/17/92
data$X("WIDTH",-2)               # ...Opt(FEET3)               # jms 11/17/92
data$X("zzzzz", 0)               #                                    #smn002
 
#$% get working array length
len = work[1]
 
#$% for each array entry
for (pnt = 2; pnt <= len; pnt = pnt + inc)
   {
    #$% set increment to one
    inc = 1
    #$% set type to zero
    type = 0
    #$% set flag to NO
    iflg = $no
 
    #$% for each entry in X array
    for (k=1; lcomp_vb(X[1,k], "zzzzz") != 0; k=k+1)                               #smn002
       {
        #$% if work entry is not equal to X entry, get next entry
        if (lcomp(work[pnt],X[1,k]) != 0) next
        inc = iabs( int( X[2,k] ) )
        #$% set flag to YES if entry optional
        if ( int( X[2,k] )  < 0) iflg = $yes
       }
 
    #$% if flag is NO, get next entry
    if (iflg == $no) next
 
    #$% if entry is navagational equipment
    if (lcomp_vb(work[pnt],"HDG") == 0 |
        lcomp_vb(work[pnt],"SPD") == 0 |
        lcomp_vb(work[pnt],"NAV") == 0 )
       {
        #$% if equipment type is not navaid
        if (lcomp_vb(work[pnt],"NAV") != 0)   type = work[pnt]
 
        #$% load navaid data
        call Finseq (nnavad,wrnavad,$navaid,work[pnt+1],  type,"Navaid    ")
       }
 
    #$% else if equipment type is RADAR/ESM/IR
    else if (lcomp_vb(work[pnt],"RDESM") == 0 |
			 lcomp_vb(work[pnt],"IRNAM") == 0 )    #clf 8/12/92
       {
        #$% load RADAR/ESM/IR data
        call Finseq (nsenso,wrsenso,$sensors,work[pnt+1],  type,"Rdr/ESM/IR")
       }
 
    #$% else if weapon
    else if (lcomp_vb(work[pnt],"WEAPO") == 0)
       {
        #$% load weapon data
        call Finseq(nweap,wrweap,$weapons,work[pnt+1],work[pnt+2],"Weapon    ")
       }
 
    #$% else if jammer
    else if (lcomp_vb(work[pnt],"JAMMR") == 0)
       {
        #$% load jammer data
        call Finseq (njamme,wrjamme,$jammers,work[pnt+1],  type,"Jammer    ")
       }
 
    #$% else if sonar
    else if (lcomp_vb(work[pnt],"SONAR") == 0)
       {
        #$% load sonar data
        call Finseq (nsonar,wrsonar,$sonar,work[pnt+1],  type,"Sonar     ")
       }
 
    #$% else if communication path
    else if (lcomp_vb(work[pnt],"COMMS") == 0)
       {
        #$% load commpath data
        call Finseq (ncomms,wrcomms,$commsuite,work[pnt+1],  type,"Commsuite ")
       }
 
    #$% else if buoy
    else if (lcomp_vb(work[pnt],"BUOY") == 0)
       {
        #$% load commbuoy
        if (lcomp_vb(work[pnt+2],"COMM") == 0)
            call Finseq(ncommb,wrcommb,$commbuoy,work[pnt+1],type,"Commbuoy  ")
 
        #$% load sonobuoy
        if (lcomp_vb(work[pnt+2],"SONO") == 0)
            call Finseq(nsonob,wrsonob,$sonobuoy,work[pnt+1],type,"Sonobuoy  ")
       }
    #$% else if communications jammer   # REH 03/23/88
    else if (lcomp_vb(work[pnt],"CJAMR") == 0)
       {
        #$% load communications jammer data
        call Finseq (ncomjm,wrcomjm,$comjm,work[pnt+1],  type,"CommJammer")
       }
    else if (lcomp_vb(work[pnt],"IFF") == 0)
       {
        #$% load iff equipment data
        call Finseq (niff,wriff,$iffs,work[pnt+1],  type,"IFF")
       }
 
   }
 
return
end
 

 
 
Subroutine FBCeq (work)                           # build equip into tables
 
#########################################################################
#$%
#$% Purpose:   FBCEQ controls the loading of the cruise missile data.
#$%
#$% Called BY: FVCRU
#$%
#$% Calls:     FINSEQ
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#$% Modified:  Jim Allen - 2/98 (E1864)
#$%            Added RBLSM, RBLMD, RBLLG, WAYPT, LNDAQ, and MNRNG entries.
#$%
#########################################################################
 
ForceCommon                                       # from cruise record
integer LEN,
        INC,
        IFLG,
		lcomp_vb, lcomp,
        K                                         # MJC 6/9/2K (E2145)
literal work[1500],xcnt,type
LitCharEquiv(X,2,49)
 
integer pnt
 
# define field names used in Cruise missiles
# SMM 11/93 added fields that were missing along with new fields
# created for SAM in hopes that it may speed up the looping process
# by incrementing the loop by the appropriate amount
 
data Xcnt /49/           # SMM
 
$set(data_count,0)
data$X("ACRU ", 2)               # ...(FEET1)
data$X("ALT1 ", 4)               # ...(FEET4 % NMI2) SMM 11/93
data$X("ALT2 ", 4)               # ...(FEET4 % NMI2) SMM 11/93
data$X("ALT3 ", 4)               # ...(FEET4 % NMI2) SMM 11/93
data$X("ALT4 ", 4)               # ...(FEET4 % NMI2) SMM 11/93
data$X("ALT5 ", 4)               # ...(FEET4 % NMI2) SMM 11/93
data$X("AMAX ", 2)               # ...(FEET3)
data$X("ARC  ", 2)               # ...(DEGRS)
data$X("BURST", 2)               # ...(BTYPE)
data$X("BDPTH", 2)               # ...(DTYPE)
data$X("CAT  ", 2)               # ...(CAT)     Alex V.  june 1993
data$X("CEP  ", 2)               # ...(YARDS)
data$X("DAMR ", 2)               # ...(YARDS)
data$X("DEPTH", 2)               # ...(FEET2)
data$X("EMIT ",-2)               # ..Opt(NAME)
data$X("EPU  ", 2)               # ...(POUND)
data$X("FLDUR", 2)               # ...(MINUT)
data$X("HDG  ",-2)               # ...(NAME)
data$X("IRNAM",-2)               # ...(NAME)     Alex V. sept. 1993
data$X("LNDAQ", 2)               # ...(NoYes)    joa (e1864)
data$X("MXALT", 2)               # ...(FEET4)   SMM 11/93
data$X("MXRNG", 2)               # ...(NMI2)    SMM 11/93
data$X("MXSEC", 8)               # ...(7 DBX)
data$X("NAME ", 2)               # ...(NAME)
data$X("NAV  ",-2)               # ..Opt(NAME)
data$X("PH   ", 2)               # ...(%)
data$X("PHB  ", 2)               # ...(%)
data$X("PHC  ", 2)               # ...(%)
data$X("PHD  ", 2)               # ...(%)
data$X("PHJ  ", 2)               # ...(%)
data$X("PL   ", 2)               # ...(%)
data$X("PROTL", 2)               # ...(TARGT)
data$X("RADAR",-2)               # ...(NAME)
data$X("RANGE", 2)               # ...(NMI)
data$X("RATE ", 2)               # ...(QTY)
data$X("RBLLG", 4)               # ...(NMI3 NMI4 kt2)   joa (E1864)
data$X("RBLMD", 4)               # ...(NMI3 NMI4 kt2)   joa (E1864)
data$X("RBLSM", 4)               # ...(NMI3 NMI4 kt2)   joa (E1864)
data$X("SEEKR", 2)               # ...(SEEKR)
data$X("SIMUL", 2)               # ...(NUM1)    SMM 11/93
data$X("SKRNG", 2)               # ...(MILES)
data$X("SPD  ",-2)               # ...(NAME)
data$X("TAIRC", 2)               # ...(NoYes)
data$X("TCRUZ", 2)               # ...(NoYes)
data$X("TSHIP", 2)               # ...(NoYes)
data$X("VCRU ", 2)               # ...(MPH)
data$X("WAYPT", 2)               # ...(NUM6)    joa (E1864)
data$X("XSECT", 2)               # ...(dB)
data$X("YIELD", 2)               # ...(kt)
 
#$% get working array length
len = work[1]
 
#$% for each working array entry
for (pnt = 2; pnt <= len; pnt = pnt + inc)
   {
    #$% set increment to one
    inc = 1
    #$% set type to zero
    type = 0
    #$% set flag to NO
    iflg = $no
 
    #$% for each entry in X array
    for (k=1; k<=Xcnt; k=k+1)
       {
        #$% if working array entry is not equal to X array entry,
        #$% get next entry
        if (lcomp(work[pnt],X[1,k]) != 0) next
        inc = iabs ( int( X[2,k] ) )
        #$% set flag to YES if entry needs to be loaded
        if ( int( X[2,k] )  < 0) iflg = $yes
       }
 
    #$% if flag is NO, get next entry
    if (iflg == $no) next
 
    #$% if entry is navigational equipment
    if (lcomp_vb(work[pnt],"HDG") == 0 |
        lcomp_vb(work[pnt],"SPD") == 0 |
        lcomp_vb(work[pnt],"NAV") == 0 )
       {
        #$% load navaid data
        call Finseq (nnavad,wrnavad,$navaid,work[pnt+1],type,"Navaid    ")
       }
 
    #$% else if entry is RADAR/ESM
    else if (lcomp_vb(work[pnt],"RADAR") == 0|
             lcomp_vb(work[pnt],"EMIT")  == 0)
       {
        #$% load RADAR/ESM data
        type = 'RADAR'
        call Finseq(nsenso,wrsenso,$sensors,work[pnt+1],type,"Radar/ESM ")
       }
 
    else if (lcomp_vb(work[pnt],"IRNAM") == 0)
      {
        #$% load RADAR/ESM data
        call Finseq(nsenso,wrsenso,$sensors,work[pnt+1],type,"Rdr/ESM/IR ")
       }
   }
 
return
end
 

 
 
Subroutine FBWeq (work)                           # build equip into tables
 
#########################################################################
#$%
#$% Purpose:   FBWEQ controls the loading of the Weapon data.
#$%
#$% Called BY: FVWEP
#$%
#$% Calls:     FINSEQ
#$%
#$% Tables:    None
#$%
#$% Date:      June 1989
#$%
#$% Author:    D.E. Wills
#$%
#########################################################################
 
ForceCommon                                       # from cruise record
integer LEN,
        INC,
        IFLG,
		lcomp_vb, lcomp,
        K                                         # MJC 6/9/2K (E2145)
literal work[1500],xcnt,type  #JFR 5/9/91   (32 vice 29)
LitCharEquiv(X,2,32)
integer pnt
 
# define field names used in Weapons
 
data Xcnt /32/   # JFR  5/9/91  (32 vice 29)
 
$set(data_count,0)
data$X( "NAME ", 2)
data$X( "CAT  ", 2)
data$X( "MXRNG", 2)
data$X( "MNFAL", 2)
data$X( "MNRPR", 2)
data$X( "RADAR",-2)
data$X( "PH   ", 2)
data$X( "SALVO", 2)
data$X( "EPU  ", 2)
data$X( "PK   ", 2)
data$X( "SIMUL", 2)
data$X( "FRATE", 2)
data$X( "MXALT", 2)
data$X( "VCRU ", 2)
data$X( "ARM  ", 2)
data$X( "RPH10", 2)
data$X( "RPH9 ", 2)
data$X( "RPH8 ", 2)
data$X( "RPH7 ", 2)
data$X( "RPH6 ", 2)
data$X( "RPH5 ", 2)
data$X( "RPH4 ", 2)
data$X( "RPH3 ", 2)
data$X( "RPH2 ", 2)
data$X( "RPH1 ", 2)
data$X( "BURST", 2)
data$X( "DEPTH", 2)
data$X( "YIELD", 2)
data$X( "SUBS ", 2)
data$X( "PENTR",-2)   # ...Opt(mm)  #JFR  5/9/91
data$X( "DESTR",-2)   # ...Opt(METER) #JFR  5/9/91
data$X( "OPVAL",-2)   # ...Opt(VALUE) #JFR  5/9/91
 
 
#$% get working array length
len = work[1]
 
#$% for each working array entry
for (pnt = 2; pnt <= len; pnt = pnt + inc)
   {
    #$% set increment to one
    inc = 1
    #$% set type to zero
    type = 0
    #$% set flag to NO
    iflg = $no
 
    #$% for each entry in X array
    for (k=1; k<=Xcnt; k=k+1)
       {
        #$% if working array entry is not equal to X array entry,
        #$% get next entry
        if (lcomp(work[pnt],X[1,k]) != 0) next
        inc = iabs ( int( X[2,k] ) )
        #$% set flag to YES if entry is optional
        if ( int( X[2,k] )  < 0) iflg = $yes
       }
 
    #$% if flag is NO, get next entry
    if (iflg == $no) next
 
    #$% if entry is navigational equipment
    if (lcomp_vb(work[pnt],"RADAR") == 0 )
       {
        #$% load RADAR/ESM data
        type = 'RADAR'
        call Finseq(nsenso,wrsenso,$sensors,work[pnt+1],type,"Radar/ESM ")
       }
   }
 
return
end
 

 
Subroutine FBBeq (work)                           # build equip into tables
 
#############################################################################
#$%
#$% Purpose:   FBBEQ controls the loading of the communication buoy data.
#$%
#$% Called By: FVBOY
#$%
#$% Calls:     FINSEQ
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#############################################################################
 
ForceCommon                                       # from commbuoy record
integer LEN,
        INC,
        IFLG,
		lcomp_vb, lcomp,
        K                                         # MJC 6/9/2K (E2145)
literal work[1500],xcnt,type
LitCharEquiv(X,2,5)
integer pnt
 
# define field names used in Commbuoy
 
data Xcnt /5/
$set(data_count,0)
data$X("NAME ", 2)               # ...(NAME)
data$X("LIFE ", 2)               # ...(MINUT)
data$X("MULTI", 2)               # ...(ANSWR)
data$X("COMM1",-2)               # ...(NAME)
data$X("COMM2",-2)               # ...(NAME)
 
#$% get working array length
len = work[1]
 
#$% for each array entry
for (pnt = 2; pnt <= len; pnt = pnt + inc)
   {
    #$% set increment to one
    inc = 1
    #$% set type to zero
    type = 0
    #$% set flag to NO
    iflg = $no
 
    #$% for each entry in X array
    for (k=1; k<=Xcnt; k=k+1)
       {
        #$% if work array entry is not equal to X array entry, get next entry
        if (lcomp(work[pnt],X[1,k]) != 0) next
        inc = iabs( int( X[2,k] ) )
        #$% set flag to YES if entry is optional
        if ( int( X[2,k] )  < 0) iflg = $yes
       }
 
    #$% if flag is NO, get next entry
    if (iflg == $no) next
 
    #$% if entry is commsuite
    if (lcomp_vb(work[pnt],"COMM1") == 0 |
        lcomp_vb(work[pnt],"COMM2") == 0 )
       {
        #$% load commsuite data
        call Finseq (ncomms,wrcomms,$commsuite,work[pnt+1],  type,"Commsuite ")
       }
 
   }
 
return
end
 

 
 
Subroutine FBSeq (work)                           # build equip into tables
 
###################################################################
#$%
#$% Purpose:   FBSEQ controls the loading of the surveillance
#$%            satellite data.
#$%
#$% Called By: FVSAT
#$%
#$% Calls:     FINSEQ
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
###################################################################
 
ForceCommon                                       # from survsat record
integer LEN,
        INC,
        IFLG,
		lcomp_vb, lcomp,
        K                                         # MJC 6/9/2K (E2145)
literal work[1500],xcnt,type
LitCharEquiv(X,2,6)
integer pnt
 
# define field names used in Survsat
 
data Xcnt /6/
 
$set(data_count,0)
data$X("TYPE ", 2)               # ...(NAME)
data$X("SWATH", 2)               # ...(MILES)
data$X("SENSR",-2)               # ...(NAME)
data$X("DUTY ", 2)               # ...(MINUT)
data$X("HORBW", 2)               # ...(DEGRS)
data$X("VERBW", 2)               # ...(DEGRS)
 
#$% set working array length
len = work[1]
 
#$% for each array entry
for (pnt = 2; pnt <= len; pnt = pnt + inc)
   {
    #$% set increment to one
    inc = 1
    #$% set type to zero
    type = 0
    #$% set flag to NO
    iflg = $no
 
    #$% for each entry in X array
    for (k=1; k<=Xcnt; k=k+1)
       {
        #$% if work array entry is not equal to X array entry, get next entry
        if (lcomp(work[pnt],X[1,k]) != 0) next
        inc = iabs( int( X[2,k] ) )
        #$% set flag to YES if entry is optional
        if ( int( X[2,k] )  < 0) iflg = $yes
       }
 
    #$% if flag is NO, get next entry
    if (iflg == $no) next
 
    #$% if entry is RADAR/ESM
    if (lcomp_vb(work[pnt],"SENSR") == 0)
       {
        #$% load RADAR/ESM data
        call Finseq (nsenso,wrsenso,$sensors,work[pnt+1],  type,"Radar/ESM ")
       }
   }
 
return
end
 

 
 
Subroutine Finseq (nchar,wchar,max,name,type,title)     # add to table
 
#################################################################
#$%
#$% Purpose:   FINSEQ controls the loading of equipment data
#$%            into the data tables.
#$%
#$% Called By: FBAEQ      FBPEQ
#$%            FBCEQ
#$%
#$% Calls:     FGERR1     FGERR2
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#################################################################
 
ForceCommon
integer K,
        K5                                        # MJC 6/9/2K (E2145)
integer nchar,max,lcomp_vb, lcomp
literal name,type
VMSchar*(*) title
 
integer      wichar[$IntRealMatch,5,$sensors]     #jb 180 vice 140 2/8/89
literal      wrchar[5,$sensors],wchar[5,$sensors] #jb 180 vice 140 2/8/89
equivalence (wrchar,wichar)
 
#$% move to local array with integer and real overlay
for (k = 1; k <= nchar; k=k+1)
   {
    for (k5 = 1; k5 <= 5; k5=k5+1)
       {
        wrchar[k5,k] = wchar[k5,k]
       }
   }
 
#$% for each table entry
for (k = 1; k <= nchar; k=k+1)
   {
    #$% if character is not name, get next entry
    if (lcomp(wrchar[1,k],name) != 0) next
 
    #$% if type is valid, return
    if (type == 0) return
 
    #$% if entry type equals zero, set character
    if (wrchar[5,k] == 0)
      {
       wrchar[5,k] = type
        wchar[5,k] = type
      }
 
    #$% if entry type is equipment type, return
    if (wrchar[5,k] == type) return
 
    #$% send message that cannot find equipment type
    call fgerr2 (name,type,title)               # cannot satisfy
   }
 
#$% if maximum number of characteristics is loaded
if (nchar >= max)
   {
    #$% send message that table is full
    call fgerr1 (name,type)                     # table full
    return
   }
 
#$% increment equipment counter
nchar = nchar + 1                               # add to the tables to be
 
#$% save equipment data
wrchar[1,nchar] = name
wichar[$halfquad,2,nchar] = 0
wichar[$halfquad,3,nchar] = 0
wichar[$halfquad,4,nchar] = 0
wrchar[5,nchar] = type
 
#$% return array from local integer and real overlay
for (k = 1; k <= nchar; k=k+1)
   {
    for (k5 = 1; k5 <= 5; k5=k5+1)
       {
        wchar[k5,k] = wrchar[k5,k]
       }
   }
 
return
end
 
 
Subroutine Fgerr1 (name,type)                   # table full
 
##################################################################
#$%
#$% Purpose:   FGERR1 sets error flag when equipment table is
#$%            full and new equipment cannot be loaded.
#$%
#$% Called By: FINSEQ     FVOTHR
#$%
#$% Calls:     ECHOH      ECHOR
#$%            ECHO
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
##################################################################
 
ForceCommon
 
literal name,type
 
#$% send message that equipment table is full and cannot be loaded
call echov ("Cannot include ")
##  call echoh (name,5)
call echohn (name,$$maxname)    # jb  E2141     12/9/99
call echo ($space)
##call echoh (type,5)
call echohn (type,$$maxname)    # jb  E2141     12/9/99
call echov (" because the maximum number of items are used.")
call echor
 
#$% increment error counter by one
errcnt = errcnt + 1
 
return
end
 

 
 
Subroutine Fgerr2 (name,type,title)             # cannot satisfy
 
#########################################################################
#$%
#$% Purpose:   FGERR2 types an error message and sets an error
#$%            flag when equipment cannot be found.
#$%
#$% Called By: FINSEQ     FVOTHR
#$%
#$% Calls:     ECHOH      ECHO       ECHOR
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#########################################################################
 
ForceCommon
 
literal name,type
VMSchar*(*) title
 
#$% send message that equipment cannot be found
call echov ("Cannot find ")
call echov (title)
call echo ($space)
##  call echoh (name,5)
call echohn (name,$$maxname)    # jb  E2141     12/9/99
call echo ($space)
##   call echoh (type,5)
call echohn (type,$$maxname)    # jb  E2141     12/9/99
call echor
 
#$% increment error counter by one
errcnt = errcnt + 1
 
return
end
 

 
Subroutine FVeq                                 # Verify equip in tables
 
#############################################################################
#$%
#$% Purpose:   FVEQ controls verification of required equipment in tables.
#$%
#$% Called By: FXSHIP     FXBASE
#$%
#$% Calls:     FVAIR      FVBOY      FVOTHR
#$%            FVCRU      FVSAT
#$%
#$% Tables:    None
#$%
#$% Date:      FEBRUARY 82
#$%
#$% Author:    R. Kleiman/J. Kvederis
#$%
#############################################################################
 
ForceCommon
 
#$% verify aircraft
call FVair
#$% verify cruise missile
call FVcru
#$% verify commbuoy
call FVboy
#$% verify survsat
call FVsat
#$% verify navaid
call FVothr (build$name,$litc,navaid$file,nnavad,wrnavad,"Navaid    ")
#$% verify sonar
call FVothr (build$name,$litc,sonar$file,nsonar,wrsonar,"Sonar     ")
#$% verify sonobuoy
call FVothr (build$name,$litc,sonob$file,nsonob,wrsonob,"Sonobuoy  ")
#$% verify countermeasure   SMM 4/90
call FVothr (build$name,$litc,ctrme$file,nctrme,wrctrme,"Countermea")
 
#$% verify weapon
#call FVwep
call FVothr (build$name,$litc,weapon$file,nweap,wrweap,"Weapon    ")
 
#$% verify enhanced torpedo  SMM 4/90
call FVothr (build$name,$litc,trpdo$file,ntrpdo,wrtrpdo,"Torpedo   ")
 
#$% verify communications jammer # REH 03/22/88
call FVothr (build$name,$litc,comjm$file,ncomjm,wrcomjm,"CommJmr   ")
#$% verify ground units REH 12/4/89
call FVothr (build$name,$litc,ground$file,nground,wrground,"Ground Unt")
#$% verify CHAFF        jb    7/10/90
call FVothr (build$name,$litc,chaff$file,nchaff,wrchaff,"Chaff     ")
#$% verify commsuite
call FVothr (build$name,$litc,comms$file,ncomms,wrcomms,"Commsuite ")
#$% verify jammer
call FVothr (build$name,$litc,jammer$file,njamme,wrjamme,"Jammer    ")
#$% verify RADAR/ESM
call FVothr (build$name,$litc,sensor$file,nsenso,wrsenso,"Radar/ESM ")
#$% verify IFF          cml  2/28/91
call FVothr (build$name,$litc,iff$file,niff,wriff,"IFF Systems")
 
#$% verify vehicle      #JFR  6/10/91
call FVothr (build$name,$litc,vehicle$file,nvehicle,wrvehicle,"Vehicle   ")
 
return
end

 
Subroutine FVothr (base,code,opt,nchar,wchar,title)   # Verify equip in table
 
ForceCommon
integer K,
        K5,
        IADD                                      # MJC 6/9/2K (E2145)
integer nchar
literal base
integer code
VMSchar*(*) opt, title
 
integer      wichar[$IntRealMatch,5,$sensors]     #jb 180 vice 140 2/8/89
literal      wchar[5,$sensors],wrchar[5,$sensors] #jb 180 vice 140 2/8/89
equivalence (wrchar,wichar)
 
for (k = 1; k <= nchar; k=k+1)                  # move to local array with
   {
    for (k5 = 1; k5 <= 5; k5=k5+1)
       {
        wrchar[k5,k] = wchar[k5,k]
       }
   }
 
#$% for each equipment entry
for (k = 1; k <= nchar; k=k+1)
   {
    #$% if the item has a disk address
    #if (wrchar[2,k] != 0 | wrchar[4,k] != 0) next      ## tpa 6/3/83
    if (wichar[$halfquad,2,k] != 0 | wichar[$halfquad,4,k] != 0) next
 
    #$% get and load data
    call FFchar (base,code,opt,wrchar[1,k],rrec,iadd)
 
    #$% if the item is not found
    if (rrec[1] == 0)
       {
        #$% send message that equipment cannot be found, and get next
        call fgerr2 (wrchar[1,k],wrchar[5,k],title)
        next
       }
 
    #$% if check for category field
    if (rrec[4] == 'CAT')
       {
        #$% if array type is zero, set array type to equipment type
        if (wrchar[5,k] == 0) wrchar[5,k] = rrec[5]
 
        #$% if array type is not equipment type
        if (wrchar[5,k] != rrec[5])
           {
#            #$% send message that equipment table is full, and get next
            call fgerr2 (wrchar[1,k],wrchar[5,k],title)
            next
           }
       }
 
    #$% save disk address
    wichar[$halfquad,2,k] = iadd
 
    if (title == "Weapon")
        {
        #$% load weapon equipment data
        call FBWeq (rrec)                            # build in equipment
        }
 
    if (title == "Vehicle") # JFR 12/5/91 -load weap/sensor charicteristics
        {
        #$% load Vehicle equipment data
        call FBVeq (rrec)                            # build in equipment
        }
   }
 
for (k = 1; k <= nchar; k=k+1)                  # move to call array from
   {                                            # integer and real overlay
    for (k5 = 1; k5 <= 5; k5=k5+1)
       {
        wchar[k5,k] = wrchar[k5,k]
       }
   }
return
end

 
Subroutine FVair                                # Verify equip in air table
 
ForceCommon
integer KAIR,
        IADD                                     # MJC 6/9/2K (E2145)
#$% for each equipment entry
for (air$index = 1; air$index <= nair; air$index=air$index+1)
   {
    #$% if item has a disk address
    if (air$addr != 0 | air$oldaddr != 0) next   # has the item got a disk addr
 
    #$% get and load air data
    call FFchar (build$name,$litC,air$file,air$name,rrec,iadd)
 
    #$% if type is not found
    if (rrec[1] == 0)
       {
        #$% send message that type cannot be found, and get next
        call fgerr2 (air$name,air$type,"Aircraft  ")
        next
       }
 
    #$% if equipment type is category
    if (rrec[4] == 'CAT')
       {
        #$% if array type is zero, set array type to equipment type
        if (air$type == 0) air$type = rrec[5]
 
        #$% if array type is not equipment type
        if (air$type != rrec[5])
           {
            #$% send message that aircraft table is full, and get next
            call fgerr2 (air$name,air$type,"Aircraft  ")
            next
           }
       }
 
    #$% save disk address
    air$addr = iadd
 
    #$% load aircraft equipment data
    call FBAeq (rrec)                            # build in equipment
   }
 
return
end
 

 
 
Subroutine FVcru                         # Verify equip in cru table
ForceCommon
integer KCRUIS,
        IADD                             # MJC 6/9/2K (E2145)
 
#$% for each equipment entry
for (cruise$index = 1; cruise$index <= ncruis; cruise$index=cruise$index+1)
   {
    #$% if type has a disk address                      ## tpa 6/3/83
    if (cruise$addr != 0 | cruise$OLDaddr != 0) next    ## ck new and old addr
                                          # has the item got a disk addr
    #$% get and load data
    call FFchar (build$name,$litC,cruise$file,cruise$name,rrec,iadd)
 
    #$% if type not found
    if (rrec[1] == 0)
       {
        #$% send message that cruise missile cannot be found, and get next
        call fgerr2 (cruise$name,cruise$type,"Cruz Miss ")
        next
       }
 
    #$% save disk address
    cruise$addr = iadd
 
    #$% load cruise equipment data
    call FBCeq (rrec)                            # build in equipment
   }
 
return
end
 

 
 
Subroutine FVwep                          # Verify equip in weapon table
 
ForceCommon
integer KWEAP,
        IADD                              # MJC 6/9/2K (E2145)
literal zero
 
#$% for each equipment entry
for (weapon$index = 1; weapon$index <= nweap; weapon$index=weapon$index+1)
   {
    #$% if type has a disk address                      ## tpa 6/3/83
    if (weapon$addr != 0 | weapon$OLDaddr != 0) next    ## ck new and old addr
                                          # has the item got a disk addr
    #$% get and load data
    call FFchar (build$name,$litC,weapon$file,weapon$name,rrec,iadd)
 
    #$% if type not found
    if (rrec[1] == 0)
       {
        #$% send message that weapon cannot be found, and get next
        call fgerr2 (weapon$name,zero,"Weapon   ")
        next
       }
 
    #$% save disk address
    weapon$addr = iadd
 
    #$% load weapon equipment data
    call FBWeq (rrec)                            # build in equipment
   }
 
return
end
 

 
 
Subroutine FVboy                                # Verify equip in commbuoy tbl
 
ForceCommon
integer KCOMMB,
        IADD                                    # MJC 6/9/2K (E2145)
#$% for each equipment entry
for (commb$index = 1; commb$index <= ncommb; commb$index=commb$index+1)
   {
    #$% if type has a disk address
    if (commb$addr != 0 | commb$oldaddr != 0) next   # has the item got a disk addr
 
    #$% get and load data
    call FFchar (build$name,$litC,commb$file,commb$name,rrec,iadd)
 
    #$% if type not found
    if (rrec[1] == 0)
       {
        #$% send message that commbuoy equipment cannot be found, and get next
        call fgerr2 (commb$name,commb$type,"Commbuoys ")
        next
       }
 
    #$% save disk address
    commb$addr = iadd
 
    #$% load commbuoy equipment data
    call FBBeq (rrec)                            # build in equipment
   }
 
return
end
 

 
 
Subroutine FVsat                                # Verify equip in survsat tbl
 
ForceCommon
integer KSAT,
        IADD                                    # MJC 6/9/2K (E2145)
#$% for each equipment entry
for (sat$index = 1; sat$index <= nsat; sat$index=sat$index+1)
   {
    #$% if type has a disk address
    if (sat$addr != 0 | sat$oldaddr != 0) next   # has the item got a disk addr
 
    #$% get and load data
    call FFchar (build$name,$litC,sat$file,sat$name,rrec,iadd)
 
    #$% if type not found
    if (rrec[1] == 0)
       {
        #$% send message that SURVSAT equipment cannot be found, and get next
        call fgerr2 (sat$name,sat$type,"Survsat   ")
        next
       }
 
    #$% save disk address
    sat$addr = iadd
 
    #$% load SURVSAT equipment data
    call FBSeq (rrec)                            # build in equipment
   }
 
return
end
 

 
 
subroutine FEbase (nargs,args)
 
Forcecommon
integer ITASK,
        ISTAT                                       # MJC 6/9/2K (E2145)
integer nargs
literal args[$max$args], name
 
#$% set task number
itask  = args[3]
if (itask <= 9999) itask = itask * 10 # convert to 5-digit
 
#$% get base name
name  = args[4]
 
#$% set in use flag
call FSuse
 
#$% get shorebase status
call FXbase (istat,             # returned status
             itask,             # task number
              name)             # name to be known by
 
#$% if status is yes
if (istat == $yes)
   {
    #$% set in use flag
    call FSuse
    #$% increment force counter
    nforce = nforce + 1
   }
 
#$% else
else
   {
    #$% clear in use flag
    call FCuse
    #$% send message
    call echov ("The base is not loaded because of the above errors.")
    call echor
   }
 
 return
 end
 

 
 
Subroutine FXbase (istat,             # returned status
                   itask,             # task number
                    name)             # name to be known by
#$%
#$% Modified:  Carol Kropp - 2/94 (E1081)
#$%            Removed if task number and name (together)
#$%            duplicate another unit and replace with a
#$%            name duplication check.  Task numbers can be
#$%            duplicated, but names must be unique (even
#$%            across views).
#$%
 
ForceCommon
integer ISTAT,
        ISAME_TASK,
        KFORCE,
        ITASK,
        JSTAT,
        LADD,
        KSHORE                                      # MJC 6/9/2K (E2145)
literal name, ishore
 
integer  duplicate_name_flag
 
#$% set status to NO
istat = $no
 
#$% if maximum force is greater
if (nforce >= $forces)
   {
    #$% send message that force table is full
    call echoi ($forces)
    call echov (" forces are loaded and that is the maximum.")
    call echor
    return
   }
 
call check_force_name (name, duplicate_name_flag)   # clk 2/94 (E1081)
if (duplicate_name_flag == $YES)
  {
   call echov  ("The base name (")
   call echohn (name, $$MaxLit)
   call echov  (") duplicates the name of an existing Force.")
   call echor
   return
  }
 
isame_task = 0
#$% for each force entry
for (force$index = 1; force$index<=nforce; force$index=force$index+1)
   {
    #$% if task number is same
    if (force$task == itask)
       {
        isame_task = isame_task + 1
       }
 
    #$% if task number and unit name are same
    if (force$task/1000 == itask/1000 & force$name == name)
       {
        #$% send message that unit name exists
        call echov ("A force with that name exists for the same view.")
        call echor
        return
       }
   }
 
if (isame_task > 0)
    {
    call echost ("Warning: ")
    call echoi (isame_task)
    call echost (" force(s) with that task number exist.")
    call echor
    }
 
#$% increment force counter
force$index = nforce + 1
 
#$% save force data
force$task   = itask
force$name   =  name
force$class  = 0
force$lat    = 0
force$long   = 0
force$course = 0
force$speed  = 0
force$depth  = 0
force$guide  = 0
force$bearing= 0
force$range  = 0
force$indicator = 0             # indicate a shore base  KHC 6/1/92
 
#$% search shorebase table
call FSTBL (nshore,wrshore,ishore,jstat)         # search table return with
                                                # jstat as index ($no =0)
#$% if status is NO
if (jstat == $no)
 
   {
    #$% if maximum shorebases are greater
    if (nshore >= $shore)
       {
        #$% send message that shorebase table is full
        call echoi ($shore)
        call echov (" shore bases are loaded and that is the maximum.")
        call echor
        return
       }
 
    #$% get and load shorebase data
    call FFCHAR (build$name,$litc,shore$file,name,rrec,ladd)
 
    #$% if shorebase not found
    if (rrec[1] == 0)
 
       {
        #$% send message that shorebase cannot be found
#####        call echoh (name,5)
        call echohn (name,$$maxname)    # jb  E2141     12/9/99
        call echov (" cannot be found.")
        call echor
        return
           }
 
    #$% increment shorebase counter
    nshore = nshore + 1                 # add shore to tables
 
    #$% save shorebase data
    shore$index = nshore
    shore$name = name
    shore$addr = ladd
    shore$used = 0
    shore$oldaddr = 0
    shore$type = 0
 
    #$% load shorebase equipment data
    call FBPeq (rrec)                    # add equipment to tables
   }
 
#$% verify shorebase equipment data
call FVeq                               # verify equipment
 
#$% if error count is zero, set status flag to YES
if (errcnt == 0) istat = $yes
 
#$% set error count to zero
errcnt = 0
 
return
end
 

 
subroutine FEtone (nargs,args)
 
#####################################################################
#$%
#$% Purpose:   FETONE controls the entry and loading of ship data.
#$%
#$% Called By: FRENTER
#$%
#$% Calls:
#$%
#$% Tables:    RTL
#$%
#$% Date:      JUNE 1983
#$%
#$% Author:    J. Kvederis
#$%
#$% Modified:  Jonathan Richardson - 5/5/93   (E1142)
#$%            Change the tonal classifications to 1..4 entered
#$%            classifications vice POSSB, PRBSB, etc.
#$%
#$%            Jonathan Richardson - 4/24/94  (E1267)
#$%            Handling the new classification scheme for boats.
#$%
#####################################################################
 
Forcecommon
integer ISTAT,
        KTON,
        KTONA,
        KFORCE,
        ISRCH,
        KBML,
        KBMLA                                   # MJC 6/9/2K (E2145)
integer nargs
literal args[$max$args], name
 
#$% initialize status flag
istat = $no
 
#ton$pointer$first                              # Set pointer to first
#ton$map
 
#$% get ship name
name = args[3]
 
for (ton$pointer$first; ton$pointer$valid; ton$pointer$next)
    {
     ton$map
 
     if (name == ton$name)
        {
         call echov ("The ship ")
##         call echoh (name,5)
         call echohn (name,$$maxname)    # jb  E2141     12/9/99
         call echov (" is already assigned tonal values.")
         call echor
         call echov ("To make any changes, first delete the old entry")
         return
        }
 
     if (ton$InUse != 0) next
 
     #$% for each ship entered in the scenerio
     for (force$index = 1; force$index <= nforce; force$index = force$index+1)
       {
        #$% if ship name not found, look at next name
        if (name != force$name) next
 
        #$% if ship name found, set status flag to YES and break loop
        istat = $yes
        break
       }
 
     #$% if force name not found ( look for boats ) - JFR 4/25/94 (E1142)
     if (istat == $no)
        {
         isrch=0
 
         repeat   # loop thru the bml looking for boat
            {
             isrch = isrch + 1          # increment counter
 
             bml$pointer$to isrch       # set BML pointer to search
             bml$map
 
             if (name == BML$name)      # if boat name matches
               istat = $yes             # set status to $yes
            } until ((isrch > nbml) | (istat == $yes))
        }   # end of if name was not found in FORCE list, so search BML
 
     #$% if ship name not found
     if (istat == $no)
       {
        #$% display warning message to user and return
        call echov ("The ship ")
##        call echoh (name,5)
        call echohn (name,$$maxname)    # jb  E2141     12/9/99
        call echov (" cannot be found in the Scenerio File.")
        call echor
        return
       }
 
    #$% set ship name and classification name
    ton$name = args[3]
    ton$classification1 = args[4]  # first name - JFR 5/5/93
 
    ton$classification2 = 0 # zero the optional classification name - JFR 5/5/93
    ton$classification3 = 0 # zero the optional classification name - JFR 5/5/93
    ton$classification4 = 0 # zero the optional classification name - JFR 5/5/93
 
 
    if (nargs == 5) # 2 names and 2 tonals - JFR 5/5/93
       {
        ton$classification2 = args[5]      # JFR 5/5/93 - 2nd name
       }
    if (nargs == 6) # 3 names and 3 tonals - JFR 5/5/93
       {
        ton$classification2 = args[5]      # JFR 5/5/93 - 2nd name
        ton$classification3 = args[6]      # JFR 5/5/93 - 3rd name
       }
    if (nargs == 7) # 4 names and 4 tonals - JFR 5/5/93
       {
        ton$classification2 = args[5]      # JFR 5/5/93 - 2nd name
        ton$classification3 = args[6]      # JFR 5/5/93 - 3rd name
        ton$classification4 = args[7]      # JFR 5/5/93 - 4th name
      }
 
    #$% increment tonal entry to maintain total count
    nton = nton + 1
 
    #$% display message to user
    call echov ("Tonal Classes for ")
##    call echohn (name, 5)
    call echohn (name,$$maxname)    # jb  E2141     12/9/99
    call echov (" entered.")
    call echor
 
    return
   }
 
return
end

 
Subroutine FBVeq (work)                           # build equip into tables
 
#####################################################################
#$%
#$% Purpose:   FBVEQ controls the loading of required vehicle
#$%            equipment data.
#$%
#$% Called By: FVOTHR
#$%
#$% Calls:     FINSEQ
#$%
#$% Tables:    None
#$%
#$% Date:      MARCH 89 - Modified by J. Richardson 5/91
#$%
#$% Author:    Mark Brown - JC3S - PAR Government Systems Corp.
#$%
#$% Comments:  This routine is based on the FBAeq routine.
#$%
#####################################################################
 
ForceCommon
integer LEN,
        INC,
        IFLG,
        K                             # MJC 6/9/2K (E2145)
literal work[1500],xcnt,type  #JFR 5/9/91  (41 vice 14)
LitCharEquiv(X,2,41)
integer pnt
 
# define field names used in vehicle
 
data Xcnt /141/   #JFR 5/9/91  (41 vice 14)
 
$set(data_count,0)
data$X("NAME ", 2)               # ...(NAME)
data$X("SETUP", 2)               # ...(MINS)
data$X("MAXSP", 2)               # ...(km/hr)
data$X("TRKS ", 2)               # ...(QTY1)
data$X("XSECT", 2)               # ...(dB)
data$X("DTRNG", 2)               # ...(RANGE)
data$X("CLRNG", 2)               # ...(RANGE)
data$X("TDOWN", 2)               # ...(mins) #JFR 5/9/91
data$X("SPDON", 2)               # ...(km/hr) #JFR 5/9/91
data$X("SPDOF", 2)               # ...(km/hr) #JFR 5/9/91
data$X("OPVAL", 2)               # ...(VALUE) #JFR 5/9/91
data$X("PERS ", 2)               # ...(num) #JFR 5/9/91
data$X("LAVEH", 2)               # ...(%) #JFR 5/9/91
data$X("JP   ",-2)               # ..Opt(POUND) #JFR 5/9/91
data$X("FUEL ",-2)               # ..Opt(FTYPE) #JFR 5/9/91
data$X("MPG  ",-2)               # ..Opt(CSUME) #JFR 5/9/91
data$X("MPG1 ",-2)               # ..Opt(CSUME) #JFR 5/9/91
data$X("MPG2 ",-2)               # ..Opt(CSUME) #JFR 5/9/91
data$X("MPG3 ",-2)               # ..Opt(CSUME) #JFR 5/9/91
data$X("OPER ",-2)               # ..Opt(num) #JFR 5/9/91
data$X("EQWT ",-2)               # ..Opt(POUND) #JFR 5/9/91
data$X("FOR  ",-2)               # ..Opt(ANSWR) #JFR 5/9/91
data$X("FOVHZ",-2)               # ..Opt(DEG) #JFR 5/9/91
data$X("FOVVT",-2)               # ..Opt(DEG) #JFR 5/9/91
data$X("ARMOR",-2)               # ..Opt(mm) #JFR 5/9/91
data$X("SIMUL",-2)               # ..Opt(QTY1) #JFR 5/9/91
data$X("NVISN",-3)               # ..Opt(NAME QTY) #JFR 5/9/91
data$X("ANTEN",-4)               # ..Opt(NAME S-ANG E-ANG) #JFR 5/9/91
data$X("MISS ",-4)               # ..Opt(NAME MTYPE QTY) mtype:"CRUZ ","BALL "
data$X("VCRU1",-2)               # ..Opt(km/hr) #JFR 5/9/91
data$X("VCRU2",-2)               # ..Opt(km/hr) #JFR 5/9/91
data$X("VCRU3",-2)               # ..Opt(km/hr) #JFR 5/9/91
data$X("NAV  ",-2)               # ..Opt(NAME) #JFR 5/9/91
data$X("COMMS",-2)               # ..Opt(NAME) #JFR 5/9/91
data$X("CJAMR",-2)               # ..Opt(NAME) #JFR 5/9/91
data$X("HFDF ",-2)               # ..Opt(NAME) #JFR 5/9/91
data$X("MNFAL",-2)               # ..Opt(MNFAL)
data$X("MNRPR",-2)               # ..Opt(MNRPR)
data$X("RDESM",-2)               # ..Opt(NAME)
data$X("JAMMR",-2)               # ..Opt(NAME)
data$X("WEAPO",-4)               # ..Opt(NAME WTYPE QTY)
 
#$% get working array length
len = work[1]
 
#$% for each array entry
for (pnt = 2; pnt <= len; pnt = pnt + inc)
   {
    #$% set increment to one
    inc = 1
    #$% set type to zero
    type = 0
    #$% set flag to NO
    iflg = $no
 
    #$% for each entry in X array
    for (k=1; k<=Xcnt; k=k+1)
       {
	#$% if work entry is not equal to X entry, get next entry
	if (work[pnt] != X[1,k]) next
	inc = iabs( int( X[2,k] ) )
	#$% set flag to YES if entry optional
	if ( int( X[2,k] )  < 0) iflg = $yes
       }
 
    #$% if flag is NO, get next entry
    if (iflg == $no) next
 
    #$% if entry is navigational equipment  # JFR 5/9/91
    if (work[pnt] == 'NAV'  )
       {
        #$% load navaid data
        call Finseq (nnavad,wrnavad,$navaid,work[pnt+1],  type,"Navaid    ")
       }
 
    #$% if equipment type is RADAR/ESM
    if (work[pnt] == 'RDESM')
       {
	#$% load RADAR/ESM data
	call Finseq (nsenso,wrsenso,$sensors,work[pnt+1],  type,"Radar/ESM ")
       }
 
    #$% else if weapon
    else if (work[pnt] == 'WEAPO')
       {
	#$% load weapon data
	call Finseq(nweap,wrweap,$weapons,work[pnt+1],work[pnt+2],"Weapon    ")
       }
 
    #$% else if jammer
    else if (work[pnt] == 'JAMMR')  #JFR 5/9/91
       {
	#$% load jammer data
	call Finseq (njamme,wrjamme,$jammers,work[pnt+1],  type,"Jammer    ")
       }
 
    #$% else if communication path     #JFR 5/9/91
    else if (work[pnt] == 'COMMS')
       {
        #$% load commpath data
        call Finseq (ncomms,wrcomms,$commsuite,work[pnt+1],  type,"Commsuites")
       }
 
    #$% else if cruise missile       #JFR 5/9/91
    else if (work[pnt] == 'MISS')
       {#$% "CRUZ ","BALL "
        #$% load cruise missile data
        call Finseq (ncruis,wrcruis,$cruise,work[pnt+1],  type,"Missile   ")
       }
 
    #$% else if cjamr...
    else if (work[pnt] == 'CJAMR')     #JFR 5/9/91
       {
        #$% load commjammer data into work area
        call Finseq (ncomjm,wrcomjm,$comjm,work[pnt+1],  type,"CommJammer")
       }
 
   }
 
return
end

 
subroutine FEsite (nargs,args)
#####################################################################
#$% Purpose:   FESITE controls the entry and loading of site data.
#$%
#$% Called By: exeord
#$%
#$% Calls:     FXSITE     FSUSE      ECOHR
#$%            FCUSE      ECHOH
#$%
#$% Tables:    None
#$%
#$% Date:      MAY 92
#$%
#$% Author:    K.H. CHANG
#$%
#####################################################################
Forcecommon
integer ITASK,
        ILAT,
        ILONG,
        ISTAT                                       # MJC 6/9/2K (E2145)
integer nargs
literal args[$max$args],name,class
 
  itask = args[3]   #$% set unit task number
  if (itask <= 9999)
    itask = itask * 10 # convert to 5-digit
  name  = args[4]   #$% set unit name
  class = args[5]   #$% set unit class
  ilat   = args[6]  #$% set latitude
  ilong  = args[7]  #$% set longitude
 
  #$% verify site status
  call FXsite (istat,             # returned status
               itask ,            # task number
               name,              # name to be known by
               class,             # site class
               ilat  ,            # A initial lat
               ilong )            # A initial long
 
  if (istat == $yes)
    {
     call FSuse             #$% set in use flag
     nforce = nforce + 1    #$% increment force counter
    }
  else
    {
     call FCuse             #$% clear in use flag
##      call echohn (name,5)   #$% send message
     call echohn (name,$$maxname)    # jb  E2141     12/9/99
     call echov (" is not loaded because of the above errors.")
     call echor
    }
 
return
end

 
 
Subroutine FXsite (istat,             # returned status
                   itask ,            # task number
                   name ,             # name to be known by
                   class,             # site class
                   ilat  ,            # A initial lat
                   ilong )            # A initial long
#####################################################
#$%
#$% Purpose:   FXSITE verifies input site data.
#$%
#$% Called By: FESITE
#$%
#$% Calls:     FSTBL      FBPEQ      ECHOH
#$%            FFCHAR     FVEQ       ECHOI
#$%            ECHOR
#$%
#$% Tables:    FORCE      BUILD
#$%
#$% Date:      MAY 92
#$%
#$% Author:    K.H. CHANG
#$%
#####################################################
ForceCommon
integer ISTAT,
        ISAME_TASK,
        KFORCE,
        ITASK,
        ILAT,
        ILONG,
        JSTAT,
        LADD,
        KSITE                                       # MJC 6/9/2K (E2145)
literal name,class
 
  istat = $no    #$% set status to NO
 
  if (nforce >= $forces)  #$% if maximum number of forces is greater
    {
     #$% send message that maximum number of forces are loaded
     call echoi ($forces)
     call echov (" forces are loaded and that is the maximum.")
     call echor
     return
    }
 
  isame_task = 0
  for (force$index = 1; force$index<=nforce; force$index=force$index+1)
    {
     if (force$task == itask)        #$% if same task number
       isame_task = isame_task + 1
 
     #$% if task and force are same name
     if (force$task/1000 == itask/1000 & force$name == name)
       {
        #$% send message that force name exists already
        call echov ("A force with that name exists for the same view.")
        call echor
        return
       }
    }       # end of loop throuh force entries
 
  if (isame_task > 0)
    {
     call echost ("Warning: ")
     call echoi (isame_task)
     call echost (" force(s) with that task number exist.")
     call echor
    }
 
  #$% save site data
  force$index  = nforce + 1       # save the info but don't increment nforce yet
  force$task   = itask
  force$name   = name
  force$class  = class
  force$lat    = ilat
  force$long   = ilong
  force$indicator = 1             # indicate a site  KHC 6/1/92
 
  call FSTBL (nsite,wrsite, class,jstat)         # search site table & return with
                                                 # jstat as index ($no =0)
  if (jstat == $no)    #$% if status is NO
    {
     if (nsite >= $site)  #$% if maximum number of site classes is greater
       {
        #$% send message that maximum number of site classes are loaded
        call echoi ($Site)
        call echov (" site classes are loaded and that is the maximum.")
        call echor
        return
       }
 
     #$% find and load site class characteristics
     call FFCHAR (build$name,$litc,site$file, class,rrec,ladd)
 
     if (rrec[1] == 0)       #$% if site class cannot be found
       {
        #$% send message that site class cannot be found
        call echoh ( class,5)
        call echov (" cannot be found.")
        call echor
        return
       }
 
     #$% increment site class counter & save site class data
     nsite = nsite + 1                 # add class to tables
     site$index   = nsite
     site$name    = class              # store data in class table
     site$addr    = ladd
     site$used    = 0
     site$oldaddr = 0
 
     #$% load equipment data into tables
     call FBPeq (rrec)                    # add equipment to tables
    }
  ELSE    # check also if class already in class table
    {
     #$% set index to matching class entry
     site$index   = jstat
    } # end if class is already in class table
 
  call FVeq     # verify equipment data
 
  #$% if error count is zero, set status flag to YES
  if (errcnt == 0) istat = $yes
 
  #$% set error counter to zero
  errcnt = 0
 
return
end
