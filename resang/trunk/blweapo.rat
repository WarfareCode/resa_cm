#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine weapo
 
      ##################################################
      #$%
      #$% Purpose:   WEAPO allows the user to interact
      #$%            with all weapons characteristics
      #$%            data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Dana Wills
      #$%
      ##################################################
 
#
#     New WEAPON
#
#
        IMPLICIT NONE   # jb E2145  3/27/00
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom,  9)     # The number of entries in the defCOM table.
define (zdctyp,226)     # The size of the defTYP table.
define (zdcfld,505)     # The size of the defFLD table.
define (zdsarg, 12)     # The size of entries in the defARG table.
define (zdcarg, 33)     # The number of entries in the defARG table.
define (zdcfmt,  5)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
 
      Integer  m
 
      character  line[ARB]
 
    LitCharEquiv(qaltb,4)
    LitCharEquiv(qalta,4)
    LitcharEquiv(reqfld)
 
    data qaltbC/"ALT1 ","ALT2 ","ALT3 ","ALT4 "/
    data qaltaC/"ALT2 ","ALT3 ","ALT4 ","ALT5 "/
    data reqfldC/"*REQ*   "/
 
    Integer ifldpnt,iptr,ihldalt,       # jb E2145  3/28/00
            flag_gun,flag_asm,Flag_Epu, # jb E2145  3/28/00
            Flag_lbs,Flag_ssm           # jb E2145  3/28/00
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA  objectC/"        ","     Wea","pons"," "/
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of the Weapon
 DATA$com("CAT  ",  1)      # Type of weapon
 DATA$com("NOMEN", -1)      # Full name/Nomenclature of device
 DATA$com("UDB  ", -1)      # Universal DB Flag
 DATA$com("MNFAL", -1)      # Mean time between failure
 DATA$com("MNRPR", -1)      # Mean time to repair
 DATA$com("BURST", -1)      # Burst type (Nuclear)                  4/2/85
 DATA$com("DEPTH", -1)      # Depth of subsurface burst (Nuclear)   4/2/85
 DATA$com("YIELD", -1)      # Yield of Nuclear burst                4/2/85
 
 $set (Data_Count,0)
 DATA$typ("ASM  ",  8)           # ASM
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PH   ",  1)           # Probability of hit
 DATA$typ(    "SALVO",  1)           # Rounds per salvo
 DATA$typ(    "EPU  ", -1)           # Equivalent payload units
 DATA$typ(    "PAYLD", -1)           # payload weight
 DATA$typ(    "ARM  ", -1)           # anti rad missile capability
 DATA$typ(    "RADAR", -1)           # Type of radar
 DATA$typ(    "DESTR", -1)           # Radius of destruction   JFR 12/90
 DATA$typ("SAM  ",  13)          # SAM
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PK   ",  1)           # Pobability of Kill
 DATA$typ(    "SIMUL",  1)           # Num of simultanous engagments
 DATA$typ(    "RADAR", -1)           # Type of radar
 DATA$typ(    "MAXEF", -1)           # Max effective range
 DATA$typ(    "VCRU ", -1)           # Speed                 1/21/87
 DATA$typ(    "DESTR", -1)           # Radius of destruction   JFR 12/90
 DATA$typ(    "OPVAL", -1)           # Operational value of wep JFR 3/28/91
 DATA$typ(    "ALT1 ", -1)           # Altitude from 0 and PK     SMM 3/92
 DATA$typ(    "ALT2 ", -1)           # Altitude from ALT1 and PK  SMM 3/92
 DATA$typ(    "ALT3 ", -1)           # Altitude from ALT2 and PK  SMM 3/92
 DATA$typ(    "ALT4 ", -1)           # Altitude from ALT3 and PK  SMM 3/92
 DATA$typ(    "ALT5 ", -1)           # Altitude from ALT4 and PK  SMM 3/92
 DATA$typ("HHM  ",  6)           # Hand Held Missile for jc3s JFR 12/90
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PK   ",  1)           # Pobability of Kill      JFR 12/90
 DATA$typ(    "SIMUL",  1)           # Num of simultanous engagments JFR 12/90
 DATA$typ(    "VCRU ",  1)           # Speed                   JFR 12/90
 DATA$typ(    "DESTR", -1)           # Radius of destruction   JFR 12/90
 DATA$typ(    "OPVAL", -1)           # Operational value of wep JFR 3/28/91
 DATA$typ("SSM  ", 11)           # Surface to Surface missile JFR 12/90
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PH   ",  1)           # Probability of hit
 DATA$typ(    "SALVO",  1)           # Rounds per salvo
 DATA$typ(    "EPU  ", -1)           # Equivalent payload units
 DATA$typ(    "PAYLD", -1)           # Epu's in pounds [for AT] -JFR 6/6/91
 DATA$typ(    "PENTR", -1)           # Armor penetration in mm JFR 5/6/91
 DATA$typ(    "PH5  ", -1)           # PH at 500 meters 5/6/91 [for AT]
 DATA$typ(    "PH10 ", -1)           # PH at 1000 meters 5/6/91 [for AT]
 DATA$typ(    "PH20 ", -1)           # PH at 2000 meters 5/6/91 [for AT]
 DATA$typ(    "DESTR", -1)           # Radius of destruction   JFR 12/90
 DATA$typ(    "OPVAL", -1)           # Operational value of wep JFR 3/28/91
 DATA$typ("AAM  ",  9)           # AAM    SMM 3/13/92
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PK   ",  1)           # Probability of Kill
 DATA$typ(    "SALVO",  1)           # Rounds per salvo
 DATA$typ(    "FRATE",  1)           # Firing rate
 DATA$typ(    "RADAR", -1)           # Type of radar
 DATA$typ(    "DESTR", -1)           # Radius of destruction   JFR 12/90
 DATA$typ(    "ALTUP", -1)           # Altitude => attacker & PK  SMM 3/92
 DATA$typ(    "ALTDN", -1)           # Altitude <  attacker & PK  SMM 3/92
 DATA$typ(    "PKABV", -1)           # PK if target above max alt SMM 3/92
 DATA$typ("CIWS ",  9)           # CIWS
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PK   ",  1)           # Probability of kill
 DATA$typ(    "SIMUL",  1)           # Num of simultanous engagments
 DATA$typ(    "RADAR", -1)           # Type of radar
 DATA$typ(    "ALT1 ", -1)           # Altitude from 0 and PK     SMM 3/92
 DATA$typ(    "ALT2 ", -1)           # Altitude from ALT1 and PK  SMM 3/92
 DATA$typ(    "ALT3 ", -1)           # Altitude from ALT2 and PK  SMM 3/92
 DATA$typ(    "ALT4 ", -1)           # Altitude from ALT3 and PK  SMM 3/92
 DATA$typ(    "ALT5 ", -1)           # Altitude from ALT4 and PK  SMM 3/92
 DATA$typ("BOMB ",  5)           # BOMB
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PH   ",  1)           # Probability of hit
 DATA$typ(    "EPU  ",  1)           # Equivalent payload units
 DATA$typ(    "SALVO",  1)           # Rounds per salvo
 DATA$typ(    "DESTR", -1)           # Radius of destruction   JFR 12/90
 DATA$typ("TORP ", 18)           # TORP
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "PH   ",  1)           # Maximum Prob Hit      ## tpa 7/26/83
 DATA$typ(    "RPH10",  1)           # Range (yds) for 100% Prob Hit
 DATA$typ(    "RPH9 ",  1)           # Range (yds) for 90% Prob Hit
 DATA$typ(    "RPH8 ",  1)           # Range (yds) for 80% Prob Hit
 DATA$typ(    "RPH7 ",  1)           # Range (yds) for 70% Prob Hit
 DATA$typ(    "RPH6 ",  1)           # Range (yds) for 60% Prob Hit
 DATA$typ(    "RPH5 ",  1)           # Range (yds) for 50% Prob Hit
 DATA$typ(    "RPH4 ",  1)           # Range (yds) for 40% Prob Hit
 DATA$typ(    "RPH3 ",  1)           # Range (yds) for 30% Prob Hit
 DATA$typ(    "RPH2 ",  1)           # Range (yds) for 20% Prob Hit
 DATA$typ(    "RPH1 ",  1)           # Range (yds) for 10% Prob Hit
 DATA$typ(    "EPU  ",  1)           # Equivalent payload units
 DATA$typ(    "FRATE",  1)           # Firing rate
 DATA$typ(    "MXALT",  1)           # Max altitude for deployment
 DATA$typ(    "VCRU ",  1)           # Speed
 DATA$typ(    "SUBS ", -1)           # Subsurface target only <SCC>
 DATA$typ(    "AUTO ", -1)           # Auto Launch Allowed (defaluts yes)
 DATA$typ("GUN  ", 20)           # TORP    JFR 12/90 - 5/6/91
 DATA$typ(    "MXRNG",  1)           # Maximum range
 DATA$typ(    "RPH10",  1)           # Range (yds) for 100% Prob Hit
 DATA$typ(    "RPH9 ",  1)           # Range (yds) for 90% Prob Hit
 DATA$typ(    "RPH8 ",  1)           # Range (yds) for 80% Prob Hit
 DATA$typ(    "RPH7 ",  1)           # Range (yds) for 70% Prob Hit
 DATA$typ(    "RPH6 ",  1)           # Range (yds) for 60% Prob Hit
 DATA$typ(    "RPH5 ",  1)           # Range (yds) for 50% Prob Hit
 DATA$typ(    "RPH4 ",  1)           # Range (yds) for 40% Prob Hit
 DATA$typ(    "RPH3 ",  1)           # Range (yds) for 30% Prob Hit
 DATA$typ(    "RPH2 ",  1)           # Range (yds) for 20% Prob Hit
 DATA$typ(    "RPH1 ",  1)           # Range (yds) for 10% Prob Hit
 DATA$typ(    "SALVO",  1)           # Rounds per salvo
 DATA$typ(    "SIMUL",  1)           # Number of simultanous engagements
 DATA$typ(    "MAXEF",  1)           # Max effective range
 DATA$typ(    "PENTR", -1)           # Armor penetration in mm JFR 5/6/91
 DATA$typ(    "EPU  ", -1)           # Equivalent payload (100's Lbs)
 DATA$typ(    "PAYLD", -1)           # payload weight
 DATA$typ(    "VCRU ", -1)           # Speed
 DATA$typ(    "DESTR", -1)           # Radius of destruction   JFR 12/90
 DATA$typ(    "OPVAL", -1)           # Operational value of wep JFR 3/28/91
 DATA$typ("MINE ",  4)           # MINE
 DATA$typ(    "MXRNGYDS",1)          # Maximum effective range (yards)
 DATA$typ(    "PAYLD",  1)           # Pounds of TNT
 DATA$typ(    "TARGT",  1)           # Target type - ship, sub, both
 DATA$typ(    "PD   ", -1)           # Probability of Detonation - clk 1/97 (E1731)
 
 $set (Data_Count,0)
 
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","the Weap","on      ","      ")
 DATA$fld1("CAT  ", 1, 1,"CAT  ", 1,"Type of ","weapon  ","        ","      ")
 DATA$fld1("MXRNG", 1, 2,"MILES", 1,"Maximum ","range - ","nmi     ","      ")
 DATA$fld1("MXRNGYDS", 1, 2,"yards", 1,"Maximum ","range - ","yards  ","    ")
 DATA$fld1("MNFAL", 1, 2,"MINUT", 1,"Mean tim","e betwee","n failur","es    ")
 DATA$fld1("MNRPR", 1, 2,"MINUT", 1,"Mean tim","e to rep","air     ","      ")
 DATA$fld1("LIFE ", 1, 2,"MIN  ", 1,"Lifetime"," of Pers","istent E","ffects")
 DATA$fld1("RADAR", 1, 1,"NAME ", 1,"Type of ","radar   ","        ","      ")
 DATA$fld1("PH   ", 1, 2,"%    ", 1,"Probabil","ity of a"," hit    ","      ")
 DATA$fld1("PD   ", 1, 2,"%    ", 1,"Probabil","ity of D","etonatio","n     ")
 DATA$fld1("SALVO", 1, 2,"QTY2 ", 1,"Rounds p","er salvo","        ","      ")
 DATA$fld1("EPU  ", 1, 2,"epus ", 1,"Equivale","nt TNT, ","100 s po","unds  ")
 DATA$fld1("PAYLD", 1, 2,"lbs  ", 1,"Payload ","weight i","n pounds","      ")
 DATA$fld1("PK   ", 1, 2,"%    ", 1,"Probabil","ity of K","ill     ","      ")
 DATA$fld1("SIMUL", 1, 2,"QTY  ", 1,"Num simu","ltanous ","engageme","nts   ")
 DATA$fld1("MXDET", 1, 2,"QTY  ", 1,"Nbr of P","ersisten","t Detona","tions ")
 DATA$fld1("FRATE", 1, 2,"qt/mn", 1,"Firing r","ate, qty"," per min","ute   ")
 DATA$fld1("MXALT", 1, 2,"FEET ", 1,"Max alt ","for depl","oyment  ","      ")
 DATA$fld1("MAXEF", 1, 2,"yds  ", 1,"Max effe","ctive ra","nge of g","un    ")
 DATA$fld1("VCRU ", 1, 2,"KNOTS", 1,"Speed   ","        ","        ","      ")
 DATA$fld1("ARM  ", 1, 2,"ANSWR", 1,"Anti Rad","iation M","issile c","lass  ")
 DATA$fld1("DESTR", 1, 2,"METER", 1,"Radius o","f Destru","ction in","meters")
 DATA$fld1("OPVAL", 1, 2,"VALUE", 1,"Operatio","nal Valu","e of thi","s weap")
 DATA$fld1("RPH10", 1, 2,"yds  ", 1,"Range fo","r 100% P","rob hit ","      ")
 DATA$fld1("RPH9 ", 1, 2,"yds  ", 1,"Range fo","r 90% Pr","ob hit  ","      ")
 DATA$fld1("RPH8 ", 1, 2,"yds  ", 1,"Range fo","r 80% Pr","ob hit  ","      ")
 DATA$fld1("RPH7 ", 1, 2,"yds  ", 1,"Range fo","r 70% Pr","ob hit  ","      ")
 DATA$fld1("RPH6 ", 1, 2,"yds  ", 1,"Range fo","r 60% Pr","ob hit  ","      ")
 DATA$fld1("RPH5 ", 1, 2,"yds  ", 1,"Range fo","r 50% Pr","ob hit  ","      ")
 DATA$fld1("RPH4 ", 1, 2,"yds  ", 1,"Range fo","r 40% Pr","ob hit  ","      ")
 DATA$fld1("RPH3 ", 1, 2,"yds  ", 1,"Range fo","r 30% Pr","ob hit  ","      ")
 DATA$fld1("RPH2 ", 1, 2,"yds  ", 1,"Range fo","r 20% Pr","ob hit  ","      ")
 DATA$fld1("RPH1 ", 1, 2,"yds  ", 1,"Range fo","r 10% Pr","ob hit  ","      ")
 DATA$fld1("PENTR", 1, 2,"mm   ", 1,"Armor pe","netratio","n in mm ","      ")
 DATA$fld1("PH5  ", 1, 2,"%    ", 1,"Probabil","ity of h","it at 50","0 met.")
 DATA$fld1("PH10 ", 1, 2,"%    ", 1,"Probabil","ity of h","it at 10","00 met")
 DATA$fld1("PH20 ", 1, 2,"%    ", 1,"Probabil","ity of h","it at 20","00 met")
 DATA$fld1("BURST", 1, 1,"BTYPE", 1,"Nuclear ","burst ty","pe      ","      ")
 DATA$fld1("TARGT", 1, 1,"TTYPE", 1,"Target t","ype     ","        ","      ")
 DATA$fld1("DEPTH", 1, 1,"DTYPE", 1,"Depth of"," burst, ","if Nucle","ar sub")
 DATA$fld1("YIELD", 1, 2,"kt   ", 1,"Yield   ","        ","        ","      ")
 DATA$fld1("SUBS ", 1, 2,"ANSWR", 1,"Subsurfa","ce targe","t only  ","      ")
 DATA$fld1("AUTO ", 1, 2,"ANSWR", 1,"Allow Au","tomatic ","Launch (","D=yes)")
 DATA$fld2("ALTUP", 2, 3,"ALT  ", 1,"%    ", 1,"Altitude"," and PK ","=> attac","ker    ")
 DATA$fld2("ALTDN", 2, 3,"ALT  ", 1,"%    ", 1,"Altitude"," and PK ","< attack","er     ")
 DATA$fld1("PKABV", 1, 2,"%    ", 1,"PK if ta","rget abo","ve atkr ","max alt")
 DATA$fld3("NOMEN", 3,-5,"Text ", 1,"...  ", 1,"...     ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld3("ALT1 ", 3, 4,"ALT1 ", 1,"%    ", 1,"MILES", 1,"Altitude",", PK and"," Maximum"," Range ")
 DATA$fld3("ALT2 ", 3, 4,"ALT2 ", 1,"%    ", 1,"MILES", 1,"Altitude",", PK and"," Maximum"," Range ")
 DATA$fld3("ALT3 ", 3, 4,"ALT3 ", 1,"%    ", 1,"MILES", 1,"Altitude",", PK and"," Maximum"," Range ")
 DATA$fld3("ALT4 ", 3, 4,"ALT4 ", 1,"%    ", 1,"MILES", 1,"Altitude",", PK and"," Maximum"," Range ")
 DATA$fld3("ALT5 ", 3, 4,"ALT5 ", 1,"%    ", 1,"MILES", 1,"Altitude",", PK and"," Maximum"," Range ")
 
 
 $set (Data_Count,0)
 DATA$arg12N("ALPHA",6000,0,0)         # Alphanumeric -- Anything
 DATA$arg12N("NAME ",6000, 0,   0)     # Alphanumeric -- Anything
 DATA$arg12C("CAT  ",8010,"ASM  ","SAM  ","AAM  ","CIWS ","BOMB ","TORP ","GUN  ","MINE ","HHM  ","SSM  ")
 DATA$arg12N("QTY  ",2002, 1,  50)     # Numeric Range 1 -> 50
 DATA$arg12N("QTY2 ",2002, 1,1000)     # Numeric Range 1 -> 1000
 DATA$arg12N("KNOTS",2002, 1,6000)     # Numeric Range 1 -> 6000
 DATA$arg12N("FEET ",2002, 0,10000)    # Numeric Range 0 -> 10000  # clk 1/97 (E1731) - 10000 vs 1000
 DATA$arg12N("MILES",2002, 0, 510)     # Numeric Range 0 -> 510
 DATA$arg12N("MINUT",2002, 0, 300)     # Numeric Range 0 -> 300
 DATA$arg12N("MIN  ",2002, 0, 1440)    # Numeric Range 0 -> 1440   # clk 1/97 (E1731) - new field
 DATA$arg12N("qt/mn",2002, 1,  50)     # Numeric Range 0 -> 20
 DATA$arg12N("epus ",2002, 0, 600)     # Numeric Range 0 -> 600
 DATA$arg12N("lbs  ",2002, 0,10000)    # Numeric Range 0 -> 10000
 DATA$arg12N("yds  ",2002,100,655000)  # Numeric Range 100 -> 655000 incre SMM 3/99 (E2067)
 DATA$arg12C("ANSWR",8002,"YES  ","NO   ")  # Alphanumeric list -- YES/NO
 DATA$arg12N("%    ",2002, 0, 100)     # Numeric Range 0 -> 100
 DATA$arg12N("VALUE",2002, 0, 500)     # Numeric Range 0 -> 500 JFR 3/28/91
 DATA$arg12C("BTYPE",8003,"AIR  ","SURF ","SUBSU")
 DATA$arg12C("TTYPE",8003,"SHIP ","SUB  ","BOTH")
 DATA$arg12C("DTYPE",8002,"SHALL","DEEP ")  # Alphanumeric list -- SHALL/DEEP
 DATA$arg12N("yards",2002, 0, 18532)   # Numeric range 0 -> 18532  # clk 1/97 (E1731) 18532 vs 1000
 DATA$arg12N("METER",2002, 0, 18532)   # Numeric range 0 -> 18532  # clk 1/97 (E1731) 18532 vs 1000
 DATA$arg12N("mm   ",2002, 0,1000)     # Numeric range 0->1000 #JFR 6/6/91
 DATA$arg12N("kt   ",2002, 0, 32767)   # Numeric Range 0 -> 32767
 DATA$arg12N("Text ",9024, 0,   0)     # Alphanumeric string (24 bytes)
 DATA$arg12N("...  ",9000, 0,   0)     # Alphanumeric string filler
 DATA$arg12C("Ucode",8003,"NO   ","YES  ","DEFLT")
 DATA$arg12N("ALT  ",2002, 0,130000)
 DATA$arg12N("ALT1 ",0001, 0,     0)
 DATA$arg12N("ALT2 ",0002, 0,     0)
 DATA$arg12N("ALT3 ",0003, 0,     0)
 DATA$arg12N("ALT4 ",0004, 0,     0)
 DATA$arg12N("ALT5 ",0005, 0,     0)
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  ","    "," "," ")
 DATA$fmt( 2,"A5,I9)  ","    "," "," ")
 DATA$fmt( 3,"A5,I6,I6",")   "," "," ")
 DATA$fmt( 4,"A5,I6,I6",",I9)"," "," ")
 DATA$fmt( 4,"A5,3A8) ","    "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    For GUNS: there must be an EPU or PAYLD entry.
#                                    but not both.
 
9901 format (1x,"This weapon requires one (but not both) of EPU or PAYLD.")
 
#      SAVE VALIDATION:    For SAMs and CIWS:
#SMM 3/16/92 Special code format statements added here.
9100 format (1x,'The altitude band before ',a5,' was not located.',/,
             1x,'It must be entered before using ',a5)
9101 format (1x,'The altitude value of ',a5,' must be greater than',/,
             1x,'the altitude of the previous band.')
9102 format (1x,'The altitude value of ',a5,' must be less than',/,
             1x,'the altitude of the next band.')
 
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
#
##############################################################################
 
    include "blsub1.rin"                         # calls in main logic
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                   #added from AWSIM 3/16/92 ...
                   #YYY 12Aug86 All altitude bands are optional. 2nd and sub-
                   #sequent bands MUST have an altitude value HIGHER than the
                   #previous altitude band. Each altitude band must have an
                   #altitude value LOWER than the next altitude band. Why check
                   #both ways? Well, what happens if a band is deleted and then
                   #reentered? You must check both ways to insure data validity
                   #*********************************************************
 
                    if (! nutest(arg1))  #Is the altitude value numeric?
                     {          #If not, it's an error
                      print 9011,scan2,arg1,qfld
                      verr = verr + 1
                      next
                     }
 
                    #YYY 12Aug86 Loop thru the work array, looking for the
                    #previous altitude band, unless this is the first band.
 
                    if (argn != 1)
                     {
                      ifldpnt = 0    #Initialize the pointer
 
                      for (iptr = 2; iptr < work[1]; iptr = nxtwrk(iptr))
                       {
                        if (work[iptr] == qaltb[argn-1]) #Is this the band?
                         {          #If yes, save the pointer
                          ifldpnt = iptr
                          if (work[ifldpnt+2] == reqfld) #If not entered yet,
                           {       #the field will have "*REQ*   "
                            ihldalt = 0
                           }
                          else
                           {
                            ihldalt = aint(work[ifldpnt+2]) #save the altitude
                           }
                        break          #And quit looping
                         }
                       }
 
 
                      if (ifldpnt <= 1 | #Was the band found, or if it was, is
                          ihldalt == 0)  #the altitude 0?
                       {        #If not found, it's an error. If found,
                        print 9100,irtn[scan],irtn[scan]#then there must have been
                        verr = verr + 1  #previous altitude band specified, with
                        next     #a non-zero value. If not, it's an error
                       }
 
                    #YYY 12Aug86 If the previous band is there, then this band
                    #must have an altitude value > the previous altitude
 
                      if (ihldalt >= aint(arg1)) #Is this band < the previous?
                        {            #If yes, then it's an error
                         print 9101,irtn[scan]
                         verr = verr + 1
                         next
                        }
 
                     } # end of if argn != 1
 
                    #YYY 12Aug86 Loop thru the work array, looking for the
                    #next altitude band, unless this is the last band.
 
                     if (argn != 5)
                        {
                         ifldpnt = 0    #Initialize the pointer
 
                         for (iptr = 2; iptr < work[1]; iptr = nxtwrk(iptr))
                          {
                           if (work[iptr] == qalta[argn])   #Is this the band?
                            {          #If yes, save the pointer
                             ifldpnt = iptr
                             if (work[ifldpnt+2] == reqfld) #If not entered yet,
                              {       #the field will have "*REQ*   "
                               ihldalt = 999999
                              }
                             else
                              {
                               ihldalt = aint(work[ifldpnt+2]) #save the altitude
                              }
                             break          #And quit looping
                            }
                          }
 
                    #If the following band hasn't been entered, then ihldalt
                    #will be 999999, which should be greater than any entered
                    #altitude. Otherwise, ihldalt will have the entered alti-
                    #tude. Therefore, all we need to do is check to see if the
                    #altitude for this band is less than the altitude for the
                    #next band.
 
                    #YYY 12Aug86 If the next band is there, then this band
                    #must have an altitude value < the previous altitude
 
                    if (aint(arg1) >= ihldalt) #Is this band > the previous?
                     {            #If yes, then it's an error
                      print 9102,irtn[scan]
                      verr = verr + 1
                      next
                     }
 
                    } # end of if argn != 5
 
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==2)                     # Special Test 2
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
                   }
 
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
#
 
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
##  comcnt = 0  # jb E2145  (delete)    3/28/00
  flag_gun = 0
  flag_asm = 0
  Flag_Epu = 0
  Flag_lbs = 0
  Flag_ssm = 0 # JFR 6/6/91
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
   {
    if (lcomp_v(work[ptr], "CAT  ") == 0)                # Is this a GUN
      {if (work[ptr+2] == 'GUN')         #     ???
         {flag_gun = 1
         }
       else if (work[ptr+2] == 'ASM')         #     ???
         {flag_asm = 1
         }
       else if (work[ptr+2] == 'SSM')         # JFR 6/6/91
         {flag_ssm = 1
         }
      }
    else if (lcomp_v(work[ptr], "EPU    ") == 0)         # Any EPU ?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
         {flag_epu = 1
         }
      }
 
    else if (lcomp_v(work[ptr], "PAYLD  ") == 0)         # Any PAYLD
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
         {flag_lbs = 1
         }
      }
 
   }
 
 
# test results ......
 
 if (flag_gun != 0 & ( ( flag_epu + flag_lbs) != 1 ) )
   {print 9901
    serr = serr + 1
   }
 
 if (flag_asm != 0 & ( ( flag_epu + flag_lbs) != 1 ) )
   {print 9901
    serr = serr + 1
   }
 
 if (flag_ssm != 0 & ( ( flag_epu + flag_lbs) != 1 ) ) # JFR 6/6/91
   {print 9901
    serr = serr + 1
   }
 
 
#******************************** exit special code section *********
     go to zsave
 
 
#********************************************************************
 
      end
