 
 
##                      File BLCRUIS.rat
 
 
# 7/8/85 - added TSHIP, TAIRC & TCRUZ;       "NoYes";
#          added 3 to zdccom; 27 to zdcfld; 1 to zdcarg
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine cruis
      ##################################################
      #$%
      #$% Purpose:   CRUIS allows the user to inter-
      #$%            act with the cruise missile
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Dana Wills
      #$%
      #$% Modifications:
      #$%   1-17-91    trs    added aspect dependent cross section
      #$%   June 1993  Alex Vagus
      #$%              modified to accept ballistic and advanced cruise missiles
      #$%   November 1993  Susan Miller  added SAM in accordance with the
      #$%              Improved Air Defense Model, moved 8 defcom categories
      #$%              down into deftyp for each of 3 types of missile.
      #$%
      #$%              James Allen - 2/98 (E1864)
      #$%              Removed cruise missile type ADCRU and added
      #$%              the following optional entries for cruise
      #$%              missiles:  RBLSM; RBLMD; RBLLG; WAYPT; LNDAQ;
      #$%                         MNRNG; PHRNG; PHSPD; MNRCS; and TGRCS
      #$%
      #$%              John McCormick - 4/99 (E1975)
      #$%              Increased the range of XSECT to -30-55
      #$%
      ##################################################
 
#
#     New CRUISE
#
#
##      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT NONE             # jb E2145  4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom, 6)      # the number of entries in the defCOM table
define (zdctyp, 128)    # the size of defTYP table   (2 * 64)
 
define (zdcfld, 552)    # The size of the defFLD table
define (zdsarg, 6)      # The size of entries in the defARG table
 
define (zdcarg, 35)     # The number of entries in the defARG table
define (zdcfmt,  6)     # The number of entries in the defFMT table
 
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
# arguments for deffld
#     1) field name
#     2) number sub field names for this input
#     3) format element number
#     4) sub field
#     5) iterations of previous sub field
#
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      Integer    actcnt, m
##  Note:  See also declarations in BLSUB!.rin
 
      character  line[ARB]
 
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("Cruise/B","allistic","/SAM"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of missile
 DATA$com("CAT  ",  1)      # Type of missile
 DATA$com("VCRU ",  1)      # Average speed
 DATA$com("PL   ",  1)      # Probability of a launch
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 
 $set (Data_Count,0)
 DATA$typ("CRUZ ",  37)       # Cruise Missile       AV 6/9/93
 DATA$typ(   "EPU  ",  1)      # TNT equivalent payload #moved 11/93 SMM
 DATA$typ(   "RATE ",  1)      # Firing rate           #moved 11/93 SMM
 DATA$typ(   "XSECT",  1)      # Radar cross section   #moved 11/93 SMM
 DATA$typ(   "DEPTH",  1)      # Maximum launch depth of a missile #moved 11/93 SMM
 DATA$typ(   "FLDUR",  1)      # Maximum flight duration
 DATA$typ(   "ACRU ",  1)      # Altitude at which a missile travels
 DATA$typ(   "SEEKR",  1)      # Seeker type carried
 DATA$typ(   "RADAR",  1)      # Type of radar carried
 DATA$typ(   "SKRNG",  1)      # Maximum detection range
 DATA$typ(   "ARC  ",  1)      # Max view arc of missile sensors
 DATA$typ(   "PROTL",  1)      # Target select protocol
 DATA$typ(   "PHD  ",  1)      # Deception effectivity
 DATA$typ(   "PHB  ",  1)      # BLIP effectivity
 DATA$typ(   "PHC  ",  1)      # CHAFF effectivity
 DATA$typ(   "PHJ  ",  1)      # Jamming effectivity
 DATA$typ(   "PH   ",  1)      # Probability of a hit
 DATA$typ(   "HDG  ",  1)      # Heading Navaid
 DATA$typ(   "SPD  ",  1)      # Speed Navaid
 DATA$typ(   "MXSEC",- 1)      # Aspect Dependent Radar X section, dB//meter
 DATA$typ(   "BURST", -1)      # Burst type (Nuclear)                  4/2/85
 DATA$typ(   "BDPTH", -1)      # Depth of subsurface burst (Nuclear)   4/2/85
 DATA$typ(   "YIELD", -1)      # Yield of Nuclear burst                4/2/85
 DATA$typ(   "NAV  ",- 1)      # Other Navaid
 DATA$typ(   "EMIT ",-10)      # Emitters recognized
 DATA$typ(   "TSHIP", -1)      # Can this missile attack ships/subs?   7/8/85
 DATA$typ(   "TAIRC", -1)      # Can this missile attack aircraft?     7/8/85
 DATA$typ(   "TCRUZ", -1)      # Can missile attack cruisemissiles?    7/8/85
 DATA$typ(   "RBLSM", -1)      # R & B launch with small(SM) AOU   # E1864
 DATA$typ(   "RBLMD", -1)      # R & B launch with Medium(MD) AOU   # E1864
 DATA$typ(   "RBLLG", -1)      # R & B launch with large(LG) AOU   # E1864
 DATA$typ(   "WAYPT", -1)      # Max number of way points CM can maneuver
 DATA$typ(   "LNDAQ", -1)      # Yes if missile acquires land as target
 DATA$typ(   "MNRNG", -1)      # Minimum engagement range
 DATA$typ(   "PHRNG", -1)      # PH reduction factor if target exceeds max recommended range
 DATA$typ(   "PHSPD", -1)      # PH reduction factor if target exceeds max recommended speed
 DATA$typ(   "MNRCS", -1)      # Minimum RCS/XSECT the missile seeker can cquire
 DATA$typ(   "TGRCS", -1)      # Is RCS/XSECT size considered when more than 1 target is acquired
 
 DATA$typ("BALL ",  12)          # Ballistic Missile      AV 6/9/93
 DATA$typ(   "EPU  ",  1)      # TNT equivalent payload #moved 11/93 SMM
 DATA$typ(   "RATE ",  1)      # Firing rate           #moved 11/93 SMM
 DATA$typ(   "XSECT",  1)      # Radar cross section   #moved 11/93 SMM
 DATA$typ(   "DEPTH",  1)      # Maximum launch depth of a missile #moved 11/93 SMM
 DATA$typ(   "RANGE",  1)      # Missile maximun range
 DATA$typ(   "CEP  ",  1)      # Circular Error Probable
 DATA$typ(   "DAMR ",  1)      # Damage radius
 DATA$typ(   "AMAX ",  1)      # Maximum altitude
 DATA$typ(   "MXSEC",- 1)      # Aspect Dependent Radar X section, dB//meter
 DATA$typ(   "BURST", -1)      # Burst type (Nuclear)                  4/2/85
 DATA$typ(   "BDPTH", -1)      # Depth of subsurface burst (Nuclear)   4/2/85
 DATA$typ(   "YIELD", -1)      # Yield of Nuclear burst                4/2/85
 
 DATA$typ("SAM  ", 12)         # Surface-to-air Missile SMM 11/93
 DATA$typ(   "MXRNG",  1)      # Maximum range of SAM in nmi
 DATA$typ(   "MXALT",  1)      # Maximum altitude of SAM in feet
 DATA$typ(   "SIMUL",  1)      # Nbr SAMs that can be simul guided in flight
 DATA$typ(   "PH   ",  1)      # Prob of air target hits
 DATA$typ(   "SKRNG", -1)      # Seeker or semi-active guidance acquistion rangd
 DATA$typ(   "ARC  ", -1)      # Seeker arc
 DATA$typ(   "RADAR", -1)      # Name of associated radar
 DATA$typ(   "ALT1 ", -1)      # Upper end of alt band 1, PH, max range
 DATA$typ(   "ALT2 ", -1)      # Upper end of alt band 2, PH, max range
 DATA$typ(   "ALT3 ", -1)      # Upper end of alt band 3, PH, max range
 DATA$typ(   "ALT4 ", -1)      # Upper end of alt band 4, PH, max range
 DATA$typ(   "ALT5 ", -1)      # Upper end of alt band 5, PH, max range
 
 
 $set (Data_Count,0)
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","missile ","        ","      ")
 DATA$fld1("CAT  ", 1, 1,"CAT  ", 1,"Cat of C","RUZ/BALL","/SAM    ","      ")
 DATA$fld1("VCRU ", 1, 2,"MPH  ", 1,"Average ","speed   ","        ","      ")
 DATA$fld1("FLDUR", 1, 2,"MINUT", 1,"Maximum ","flight d","uration ","      ")
 DATA$fld1("EPU  ", 1, 2,"POUND", 1,"TNT equi","valence "," 100 s o","f lbs ")
 DATA$fld1("RATE ", 1, 2,"QTY  ", 1,"Firing r","ate     ","        ","      ")
 DATA$fld1("ACRU ", 1, 2,"FEET1", 1,"Cruising"," altitud","e       ","      ")
 DATA$fld1("XSECT", 1, 2,"dBM  ", 1,"Radar cr","oss sect","ion     ","      ")
 DATA$fld1("SEEKR", 1, 1,"SEEKR", 1,"Seeker t","ype carr","ied     ","      ")
 DATA$fld1("RADAR", 1, 1,"NAME ", 1,"Radar ty","pe carri","ed      ","      ")
 DATA$fld1("SKRNG", 1, 2,"MILES", 1,"Maximum ","seeker d","etection"," range")
 DATA$fld1("ARC  ", 1, 2,"DEGRS", 1,"Maximum ","view arc"," of miss","iles  ")
 DATA$fld1("PROTL", 1, 1,"TARGT", 1,"Target s","elect pr","otocol  ","      ")
 DATA$fld1("HDG  ", 1, 1,"NAME ", 1,"Heading ","sensor  ","        ","      ")
 DATA$fld1("SPD  ", 1, 1,"NAME ", 1,"Speed se","nsor    ","        ","      ")
 DATA$fld1("NAV  ", 1, 1,"NAME ", 1,"Navigati","on aid  ","        ","      ")
 DATA$fld1("PHD  ", 1, 2,"%    ", 1,"Hit Prob"," against"," Decepti","on    ")
 DATA$fld1("PHB  ", 1, 2,"%    ", 1,"Hit Prob"," against"," BLIP   ","      ")
 DATA$fld1("PHC  ", 1, 2,"%    ", 1,"Hit Prob"," against"," RBOC   ","      ")
 DATA$fld1("PHJ  ", 1, 2,"%    ", 1,"Hit Prob"," against"," Jamming","      ")
 DATA$fld1("PL   ", 1, 2,"%    ", 1,"Probabil","ity of a"," launch ","      ")
 DATA$fld1("PH   ", 1, 2,"%    ", 1,"Probabil","ity of a"," hit    ","      ")
 DATA$fld1("DEPTH", 1, 2,"FEET2", 1,"Max laun","ch depth"," of a mi","ssile ")
 DATA$fld1("EMIT ", 1, 1,"NAME ", 1,"Emitters"," recogni","zed     ","      ")
 DATA$fld1("BURST", 1, 1,"BTYPE", 1,"Nuclear ","burst ty","pe      ","      ")
 DATA$fld1("BDPTH", 1, 1,"DTYPE", 1,"Depth of"," burst, ","if Nucle","ar sub")
 DATA$fld1("YIELD", 1, 2,"kt   ", 1,"Yield   ","        ","        ","      ")
 DATA$fld1("TSHIP", 1, 2,"NoYes", 1,"1 if can"," attack ","subs/shi","ps    ")
 DATA$fld1("TAIRC", 1, 2,"NoYes", 1,"1 if can"," attack ","aircraft","      ")
 DATA$fld1("TCRUZ", 1, 2,"NoYes", 1,"1 if can"," attack ","CruiseMi","ssiles")
 DATA$fld7("MXSEC", 7, 3,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"Aspect D","ependent"," Xsectio","n    ")
 DATA$fld3("NOMEN", 3,-6,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("RANGE", 1, 2,"NMI  ", 1,"Missile ","maximum ","range   ","      ")
 DATA$fld1("CEP  ", 1, 2,"YARDS", 1,"Circular"," error p","robable ","      ")
 DATA$fld1("DAMR ", 1, 2,"YARDS", 1,"Damage r","adius   ","        ","      ")
 DATA$fld1("AMAX ", 1, 2,"FEET3", 1,"Maximum ","altitude","        ","      ")
 DATA$fld1("IRNAM", 1, 1,"NAME ", 1,"Name of ","IR      ","        ","      ")
 DATA$fld1("MXRNG", 1, 1,"NMI2 ", 1,"Max rang","e of SAM","        ","      ")
 DATA$fld1("MXALT", 1, 1,"FEET4", 1,"Max alti","tude of ","SAM     ","      ")
 DATA$fld1("SIMUL", 1, 1,"NUM1 ", 1,"Nbr SAMs"," simul g","uided in"," flght")
 DATA$fld3("ALT1 ", 3, 4,"FEET4", 1,"%    ", 1,"NMI2 ", 1,"Upper en","d of alt"," band,PH",",range")
 DATA$fld3("ALT2 ", 3, 4,"FEET4", 1,"%    ", 1,"NMI2 ", 1,"Upper en","d of alt"," band,PH",",range")
 DATA$fld3("ALT3 ", 3, 4,"FEET4", 1,"%    ", 1,"NMI2 ", 1,"Upper en","d of alt"," band,PH",",range")
 DATA$fld3("ALT4 ", 3, 4,"FEET4", 1,"%    ", 1,"NMI2 ", 1,"Upper en","d of alt"," band,PH",",range")
 DATA$fld3("ALT5 ", 3, 4,"FEET4", 1,"%    ", 1,"NMI2 ", 1,"Upper en","d of alt"," band,PH",",range")
 DATA$fld3("RBLSM", 3, 4,"NMI3 ", 1,"NMI4 ", 1,"kts  ", 1,"R&B laun","ch with ","small At","ck Crcl")
 DATA$fld3("RBLMD", 3, 4,"NMI3 ", 1,"NMI4 ", 1,"kts  ", 1,"R&B laun","ch with ","medium A","tck Crcl")
 DATA$fld3("RBLLG", 3, 4,"NMI3 ", 1,"NMI4 ", 1,"kts  ", 1,"R&B laun","ch with ","large At","ck Crcl")
 DATA$fld1("WAYPT", 1, 1,"NUM6 ", 1,"Max way ","points C","M can ma","neuver")
 DATA$fld1("LNDAQ", 1, 2,"NoYes", 1,"1 if can"," acquire"," land as"," target ")
 DATA$fld1("MNRNG", 1, 1,"NUM255",1,"Min eng ","rng from"," launch ","platform")
 DATA$fld1("PHRNG", 1, 5,"PCT  " ,1,"PH reduc","tion fac","tor exce","ed range")
 DATA$fld1("PHSPD", 1, 5,"PCT  " ,1,"PH reduc","tion fac","tor exce","ed speed")
 DATA$fld1("MNRCS", 1, 2,"dB500" ,1,"Min RCS/","XSECT se","eker can"," acquire")
 DATA$fld1("TGRCS", 1, 1,"NoYes", 1,"Use RCS/","XSECT in"," target ","select  ")
 
 
 $set (Data_Count,0)
 DATA$arg6N("NAME ",6000,0,0, 0, 0)                # Alphanumeric -- Anything
 DATA$arg6C("CAT  ",8003,"CRUZ ","BALL ","SAM  ")  # Alphanumeric --CRUZ/BALL/SAM
 DATA$arg6N("Text ",9024)                          # Alphanumeric string (24 bytes)
 DATA$arg6N("...  ",9000)                          # Alphanumeric string filler
 DATA$arg6C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg6N("MPH  ",2002, 0, 12000, 0, 0)          # Numeric Range 0 -> 12000 4/28/86
 DATA$arg6N("MINUT",2002, 0,   300, 0, 0)          # Numeric Range 0 -> 300
 DATA$arg6N("POUND",2002, 0,   600, 0, 0)          # Numeric Range 0 -> 600
 DATA$arg6N("QTY  ",2002, 0,    10, 0, 0)          # Numeric Range 0 -> 10
 DATA$arg6N("FEET1",2002, 0,100000, 0, 0)          # Numeric Range 0 -> 100000
 DATA$arg6N("dBM  ",2002, -200,  55,  0, 0)        # Numeric Range -200 -> 55 JOA UFL00
 DATA$arg6N("dB500",2002, -30, 500, 0, 0)          # Numeric Range -30 -> 500  SMM 4/99 (E2077)
 DATA$arg6C("SEEKR",8002,"RADAR","RDESM")          # Alphanumeric List-RADAR/ESM
 DATA$arg6N("MILES",2002, 0,   200, 0, 0,)         # Numeric Range 0-> 200
 DATA$arg6N("DEGRS",2002, 0,    90, 0, 0)          # Numeric Range 0 -> 90
 DATA$arg6C("TARGT",8002, "NEAR ","FAR  ")         # Alphanumeric List-NEAR/FAR
 DATA$arg6N("FEET2",2002, 0,   255, 0, 0)          # Numeric Range 0 -> 255
 DATA$arg6N("%    ",2002, 0,   100, 0, 0)          # Numeric Range 0 -> 100
 DATA$arg6N("PCT  ",-2000,0., 100., 0, 0)          # Numeric Range 0. -> 100.
 DATA$arg6C("BTYPE",8003,"AIR  ","SURF ","SUBSU")  # Alphanumeric list -- AIR/SURF/SUBSU
 DATA$arg6C("DTYPE",8002,"SHALL","DEEP ")          # Alphanumeric list -- SHALL/DEEP
 DATA$arg6N("kt   ",2002, 0, 32767,  0, 0)         # Numeric Range 0 -> 32767
 DATA$arg6N("kts  ",2002, 0,  4000,  0, 0)         # Numeric Range 0 -> 100
 DATA$arg6N("NoYes",2002, 0,     1,  0, 0)         # Numeric Range 0 -> 1       7/8/85
 DATA$arg6N("DBX  ",2002,-200,  55,  0, 0)         # Numeric Range -200 -> 55 JOA UFL00
 DATA$arg6N("YARDS",2002, 0, 10000,  0, 0)         # Numeric Range 0 -> 10000
 DATA$arg6N("NMI  ",2002, 0, 6000,   0, 0)         # Numeric Range 0 -> 6000
 DATA$arg6N("NMI2 ",2002, 0,  500,   0, 0)         # Numeric Range 0 -> 500
 DATA$arg6N("NMI3 ",2002, 0,  100,   0, 0)         # Numeric Range 0 -> 100
 DATA$arg6N("NMI4 ",2002, 0, 4000,   0, 0)         # Numeric Range 0 -> 1000
 DATA$arg6N("FEET3",2002, 0, 999999, 0, 0)         # Numeric Range 0 -> 999999
 DATA$arg6N("FEET4",2002, 0, 200000, 0, 0)         # Numeric Range 0 -> 200000
 DATA$arg6N("NUM1 ",2002, 0,     32, 0, 0)         # Numeric Range 0 -> 32
 DATA$arg6N("NUM6 ",2002, 0,      6, 0, 0)         # Numeric Range 0 -> 6
 DATA$arg6N("NUM255",2002,0,    255, 0, 0)         # Numeric Range 0 -> 255
 
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 8,"A5,7I4) "," "," "," ")
 DATA$fmt( 4,"A5,3I9) "," "," "," ")
 DATA$fmt( 2,"A5,F9.2)"," "," "," ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    NONE
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                    #*********************************************************
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==2)                     # Special Test 2
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
 
                   }
 
 
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
  actcnt = 0
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
   {
    if (lcomp_v(work[ptr],"EMIT ") == 0)                # Any EMIT?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)          #     is it filled in?
         {actcnt = actcnt + 1
         }
      }
 
   }
 
 
# test results ......
 
 if (actcnt < 1)
   {#type 9901
    #serr = serr + 1
    continue
   }
 
 
 
 
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
