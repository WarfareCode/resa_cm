 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
 
 
#$%      MODULE                      UTILITY                     DATA
#$%    SUBROUTINES                 SUBROUTINES                  TABLES
#$%    ===========                 ===========                  ======
#$%
#$%      WGLBML                       ECHOH                      BML
#$%      GETSR  <WGLOAD>              ECHOI                      SHC
#$%                                   ECHOR                      UNT
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLBML
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLBML - GETSR*
 

 
 include "bbctl.inc"
 include "bbcode.inc"
 include "bbbml.inc"
 include "bbshc.inc"
 include "bbunt.inc"
 include "ascii.inc"
 include "wimain_eq.inc"                # MJC 4/27/2000
 
 define (BBImplicit, Implicit None)     # MJC 4/25/2000
 
 Subroutine WGLBML(_
	    reccnt,
	    recsz,
	    rec)
 
 #######################################################
 #$%
 #$% Purpose:   WGLBML loads in the BOAT Main-
 #$%            tenance Log data.
 #$%
 #$% Called By: WGLOAD
 #$%
 #$% Calls:     ECHOH      ECHOI      ECHOR
 #$%            GETSR
 #$%
 #$% Tables:    BML        SHC        UNT
 #$%
 #$% Date:      OCT 80 (for AML)  Adapted MAY 89 for BML
 #$%                                        (jb)
 #$% Author:    Ron Williams, Dana Wills
 #$%
 #$% Modified:  Carol Kropp - 1/97 (E1658)
 #$%            Made all bases capable of handling boats.
 #$%
 #######################################################
 
 BBcommon
 
 integer   reccnt,recsz
 literal   rec[1500]
 
 integer   ILEN, LOOP, MAX,                     # MJC 4/25/2000
           UNT$Pointer,                         # MJC 4/25/2000
           BML$Pointer,                         # MJC 4/25/2000
           BML$Shcpntr$I,                       # MJC 4/25/2000
           BML$Ownerindx$I,                     # MJC 4/25/2000
           BML$Status$I,                        # MJC 4/25/2000
           SHC$Pointer,                         # MJC 4/25/2000
           SHC$Smallboat$I,                     # MJC 4/25/2000
           SHC$EQ$Index,                        # MJC 4/25/2000
           SHC$EQ$remaining$I,                  # MJC 4/25/2000
           SHC$Endurance$I                      # MJC 4/25/2000
 real*4    BOATFUEL                             # MJC 4/25/2000
 literal   CSTRIP8,                             # MJC 4/25/2000
           BML$Name$C, SHC$Type$C               # MJC 4/25/2000
 
 EqErr$Common                                   # MJC 4/27/2000
 
 #$% set length
 ilen = 0
 #$% move "Boat" to cfile for eventual display
 call smovv ("Boat   ", cfile, ilen)
 
 cflg = $yes
 
 #$% if file empty
 if(reccnt <= 1)
   {
    #$% display error message to user
    call echov("BOAT Maintainance Log File Empty.  ")
    call echor
    return
   }
 #$% go to first entry in table
 BML$POINTER$FIRST
 
 #$% for each BML entry
 for(loop=2;loop<=reccnt;)
    {
     #$% call to get scenario record
     call getsr(loop,recsz,rec)
 
     #$% if pointer not in valid position
     if(!BML$POINTER$VALID)
       {
        #$% display error message to user
	call ECHOv("Boat Maintainance Log from ")
	call ECHOI(rec[2])
	call ECHOv(" and on are not loaded.")
	call ECHOR
	return
       }
 
     #$% for each ship in the SHC table
     for(SHC$POINTER$FIRST;SHC$POINTER$OK;SHC$POINTER$NEXT)
	{
         SHC$SmallBoat$i = xSHC$SmallBoat$i        # jb    5/10/89
         if (SHC$SmallBoat$i != $YES)    NEXT      # jb    5/10/89
 
         #$% get NAME and save           # jb Moved down   5/10/89
         BML$NAME$C = rec[2]             # jb Moved down   5/10/89
         PUTBML$NAME$C                   # jb Moved down   5/10/89
 
         SHC$TYPE$c = Xshc$type$C
         #$% if Ship type found
	 if(SHC$TYPE$C == rec[3])
	   {
            #$% set BML pointer to characteristics pointer and save
	    BML$SHCPNTR$I = SHC$POINTER
	    PUTBML$SHCPNTR$I
 
            for (SHC$EQ$Index=1; SHC$EQ$Index <=SHC$EQ$SLOTS; # 5/11/89
                                 SHC$EQ$Index = SHC$EQ$Index + 1)
               {
                if (xSHC$Eq$Ident$i == $FUEL$CODE)
                   {            # jb  5/11/89
                    SHC$Eq$REMAINING$i = xSHC$Eq$REMAINING$i
                    BOATFUEL = float(SHC$Eq$REMAINING$i)
                    BREAK
                   }
               }
 
	    BREAK    # Break out of FOR(shc$pointer$first...
	   }
	}    # End of FOR(shc$pointer$first..
 
     #$% for each unit in the UNT table
     for(UNT$POINTER$FIRST;UNT$POINTER$OK;UNT$POINTER$NEXT)
	{
         #$% if unit found
	 if(XUNT$NAME$C == rec[4])
	   {
            #$% set BML owner index to unit pointer index & save
	    BML$OWNERINDX$I = UNT$POINTER$INDEX
	    PUTBML$OWNERINDX$I
 
            #$% initialize the BML chain for this unit:
            PUTBML$NextBML$i (Xunt$BMLindx$i)            # 5/31/89
            PUTunt$BMLindx$i (BML$Pointer$index)         # 5/31/89
 
	    break
	   }
	}
 
 
     #$% set status as on deck and save
     BML$STATUS$I = $ONDECK$CODE
     PUTBML$STATUS$I
 
 
     PutBML$DamageMultiplier$i (1)      # jb (init'lize) 5/4/89
 
     #$% increment pointer by appropriate entry size
     BML$POINTER$NEXT
 
     #$% set to last entry in table
     BML$LAST$TO (BML$POINTER - 1)
    }
 
# Now, go through all UNT slots, and flag each as Boat Restricted if
# the BMLIndx is Zero.  This means that a unit will not support boats
# if it has none to begin with                          (DEW 1/15/90)
 
for (UNT$POINTER$FIRST;UNT$POINTER$OK;UNT$POINTER$NEXT)
    {
    if (xUNT$BMLIndx$I == 0)
      {
       if (xUNT$Type$I != $Shorebase$Code)  # if a base, then it should
         PUTunt$BoatRestricted$i ($YES)     # be capable of handling boats
      }   # end of if the unit has no boats loaded onto it
    }
 
return
end
 
