include "macros.inc"
include "ascii.inc"
include "hseng.inc"
include "hstim.inc"
include "time.inc"
 
undefine (read)
undefine (write)
undefine (err)
undefine (close)
 
define (exitexit, { call echor
                    print 9002
                    call echor
                    call exit    })
 
define ($maxdam,2000)            # Max collected damage records
define ($maxtor,2000)            # Max collected torpedo launches
define ($maxcmc,2000)            # Max collected cruise missile launches
 
define   (engageTextcommon, {
          literal      damOutcome[$maxdam], damCause[$maxdam],
                       damTarget[$maxdam]
          real         damTime[$maxdam]
          integer      nDam
          literal      torLauncher[$maxtor], torWeapon[$maxtor],
                       torTarget[$maxtor]
          real         torTime[$maxtor]
          integer      nTor
          literal      cmcLauncher[$maxcmc], cmcWeapon[$maxcmc],
                       cmcName[$maxcmc]
          real         cmcTime[$maxcmc]
          integer      nCmc
          character    filename[40], printname[20]
 
          vaxcharacter*40 v_filename
          equivalence (filename, v_filename)
 
          vaxcharacter*20 v_printname
          equivalence (printname, v_printname)
 
common/et_common/ damOutcome, damCause, damTarget,
                  torLauncher, torWeapon, torTarget,
                  cmcLauncher, cmcWeapon, cmcName,
                  damTime, nDam, torTime, nTor, cmcTime, nCmc,
                  filename, printname
	})
 
 
program engagelog2text
 
implicit none
#
 
 
engageTextcommon
timCommon
 
integer engTime, kk, ierr, k
logical foundit
BBDeclare (ENG$Time$F, ENG$Platform$C, ENG$Weapon$C, ENG$Target$C,
        ENG$RecLat$F, ENG$RecLon$F, ENG$Track$C, ENG$Result$I,
        ENG$ShoLat$F, ENG$ShoLong$F,
        ENG$Range$F, ENG$MBURange$F)
BBDeclare(
        eng$GunEpu$i,
        eng$NumberFired$i,
        eng$NumberHit$i,
        eng$ResultPh$f,
        eng$PersistentMunition$i)
BBDeclare(
        eng$PlatformType$c,
        eng$TargetType$c,
        eng$BEPart1$c,
        eng$BEPart2$c,
        eng$TIN$c)
character outbuf[200]
character        engDTGStr[10]
integer		  irc, min_to_dtg, lenengdtgstr
literal		 cstrip8, eng_result_code_2_text
real 		 engdtg[5]
integer damIndx,
        damIndxH,
        nHit,
        nMissed,
        nKill,
        nDamaged,
        nUnknown
 
integer torIndx,
        torIndxH
 
integer cmcIndx,
        cmcIndxH
integer delete_file_version
 
character trackC[8]
character tgtC[8]
character platformC[8]
equivalence (ENG$Target$c, tgtC)
equivalence (ENG$Platform$c, platformC)
equivalence (ENG$Track$c, trackC)
 
ENG$Record$Definition
 
 
9002  format(1x, '*** Engagement file open error ***')
 
 
      ##### initialization #####
      call initr4        # save this line
#      call echoff
      call cinit                       # save this line
 
      call pass1            # Collect damage records
 
	  irc = delete_file_version (printname)		# Delete file so can open new
 
      open(unit         =16,
#           organization ='sequential',
           file         =v_printname,
           form         ='formatted',
           status       ='new',
           recl         = 200*4,
           err          =0030)
      goto 0031
0030  continue ### we should never be here
0031  continue
 
      open(unit         =88,
#           organization ='sequential',
#           blocksize    =512,
           file         =v_filename,
#           recordtype   ='fixed',
           form         ='unformatted',
           access       ='sequential',
           status       ='old',
           iostat       = ierr,
           err          =0050)
#           readonly,shared)
      goto 0051
 
0050  print 9002
      exitexit
0051    continue
 
    print 10, filename
    print 20, printname
10  format(1x,"Input file: ", 20a1)
20  format(1x,"Output file: ", 20a1)
 
    write(16,100)
100 format("Time,Shooter,Weapon,Target,S Lat,S Lon,T Lat,T Lon,",
           "Track,Outcome,Range,MBU Range,EPU,#Fired,#Engage,#Hit,#Kill,",
           "#Damage,",
           "#Miss,#Unknown,PH,Persist,",
           "S Type,T Type,BE Number,TIN")
 
damIndx = 1
torIndx = 1
cmcIndx = 1
 
0060  read(88, end=9150, err=9150) eng$Record
 
    eng$Time$f     = Xeng$Time$f
    eng$Platform$c = Xeng$Platform$c
    eng$Weapon$c   = Xeng$Weapon$c
    eng$Target$c   = Xeng$Target$c
    eng$ShoLat$f   = Xeng$ShoLat$f
    eng$ShoLong$f  = Xeng$ShoLong$f
    eng$RecLat$f   = Xeng$RecLat$f
    eng$RecLon$f   = Xeng$RecLon$f
    eng$Track$c    = Xeng$Track$c
    eng$Result$i   = Xeng$Result$i
    eng$Range$f    = Xeng$Range$f
    eng$MbuRange$f = Xeng$MbuRange$f
 
    eng$GunEpu$i       = Xeng$GunEpu$i
    eng$NumberFired$i  = Xeng$NumberFired$i
    eng$NumberHit$i    = Xeng$NumberHit$i
    eng$ResultPh$f     = Xeng$ResultPh$f
    eng$PersistentMunition$i = Xeng$PersistentMunition$i
    eng$PlatformType$c = Xeng$PlatformType$c
    eng$TargetType$c   = Xeng$TargetType$c
    eng$BEPart1$c      = Xeng$BEPart1$c
    eng$BEPart2$c      = Xeng$BEPart2$c
    eng$TIN$c          = Xeng$Tin$c
 
    # Skip damage or outcome records
    if (eng$Weapon$c == 'DAMAGE'  |
        eng$Weapon$c == 'UNK'     |
        eng$Weapon$c == 'ENGAGE'  |
        eng$Weapon$c == 'SYSFAIL' |
        eng$Weapon$c == 'CRASH'   |
        eng$Weapon$c == 'LANDING' |
        eng$Weapon$c == 'NOFUEL'  |
        eng$Weapon$c == 'FINGER'  |
        eng$Weapon$c == 'MINE')
    {
        goto 60
    }
 
    # Skip record with result fail
    if (eng$Result$i  == ENG$Unsuccessful$code)
    {
        goto 60
    }
 
    # Skip torpedo launch record
    if (eng$Result$i  == ENG$launch$code & trackC[1] == $LETT)
    {
        goto 60
    }
 
    # Skip torpedo fire record
    if (eng$Result$i  == ENG$Fired$code & platformC[1] == $LETT)
    {
        goto 60
    }
 
    # Skip cruise missile launch record
    if (eng$Result$i  == ENG$launch$code & trackC[1] == $LETP)
    {
        goto 60
    }
 
    # Skip cruise missile fire record
    if (eng$Result$i  == ENG$Fired$code & platformC[1] == $LETP)
    {
        goto 60
    }
 
    # replace expired in platform with weapon name in target field. clear target
    if (eng$Platform$c == 'EXPIRED')
    {
        eng$Platform$c = eng$Target$c
        eng$Target$c = $BLANKLIT
    }
 
    # Substitute name of firing unit for torpedo name
    if (eng$Result$i == ENG$Hit$Code |
        eng$Result$i == ENG$Miss$Code|
        eng$Result$i == ENG$Termination$Code)
    {
        for (torIndx = 1; torIndx <= ntor; torIndx = torIndx + 1)
        {
            if (torTarget[torIndx] == eng$Platform$c)
            {
                eng$Platform$c = torLauncher[torIndx]
                break
            }
        }
    }
    if (torIndx > ntor)         # torpedo name not found.  Try cruise missile
    {
        # Substitute name of firing unit for cruise missile name
        if (eng$Result$i == ENG$Hit$Code |
            eng$Result$i == ENG$Miss$Code|
            eng$Result$i == ENG$Termination$Code)
        {
            for (cmcIndx = 1; cmcIndx <= ncmc; cmcIndx = cmcIndx + 1)
            {
                if (cmcName[cmcIndx] == eng$Platform$c)
                {
                    eng$Platform$c = cmcLauncher[cmcIndx]
                    break
                }
            }
        }
    }
 
    nMissed = 0
    nKill = 0
    nDamaged = 0
    nUnknown = 0
 
    if (eng$Result$i == ENG$Hit$Code |
        eng$Result$i == ENG$Gun$Code)
    {
        # Find associated damage record
        while (damTime[damIndx] < eng$Time$f)
        {
            if (damIndx > ndam) break
            damIndx = damIndx + 1
        }
 
        damIndxH = damIndx
        if (damIndx <= ndam)
        {
            while (damTarget[damIndx] != eng$Target$c)
            {
                if (damIndx > ndam) break
                damIndx = damIndx + 1
                next
            }
        }
 
        if (damIndx <= ndam)
        {
            if (damCause[damIndx] == 'DAMAGE')
            {
                if (damOutcome[damIndx] == 'SINKING') nkill = 1
                else                                  ndamaged = 1
            }
            if (damCause[damIndx] == 'ENGAGE')
            {
                if (damOutcome[damIndx] == 'SPLASH') nkill = 1
                else                                  ndamaged = 1
            }
            if (damCause[damIndx] == 'UNK')
            {
                nUnknown = 1
            }
            # Don't same use damage report more than once
            if (damIndx == damIndxH) damIndxH = damIndxH + 1
        }
        damIndx = damIndxH
    }
    else if (eng$Result$i == ENG$Miss$Code)
    {
        nMissed = 1
    }
    else if (eng$Result$i == ENG$P$Code)
    {
        nUnknown = 1
    }
 
 
 
    dtgstr_macro (ENG$Time$F, engDTGStr)
 
    if (eng$result$i == ENG$P$Code) eng$target$c = $BLANKLIT
 
    kk = 0
    call smovh(engDTGStr, 10, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh (ENG$Platform$C, $$MaxLit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh (ENG$Weapon$C, $$MaxLit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh (ENG$Target$C, $$MaxLit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovlls(ENG$ShoLat$F, "NS", outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovlls(ENG$ShoLong$F, "EW", outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovlls(ENG$RecLat$F, "NS", outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovlls(ENG$RecLon$F, "EW", outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh (ENG$Track$C, $$Maxlit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh(Eng_Result_Code_2_Text(ENG$Result$I), $$Maxlit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(int(ENG$Range$F), 4, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(int(ENG$MBURange$F), 4, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(eng$GunEpu$i, 4, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(eng$NumberFired$i, 4, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(eng$NumberHit$i, 4, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovv ("01,", outbuf, kk)      # Engaged count always 1
    call smoviz(nHit, 2, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(nKill, 2, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(nDamaged, 2, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(nMissed, 2, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(nUnknown, 2, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(int(eng$ResultPh$f), 3, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smoviz(eng$PersistentMunition$i, 1, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh (eng$PlatformType$c, $$MaxLit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh (eng$TargetType$c, $$MaxLit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovhn(eng$BEPart1$c, $$MaxLit, outbuf, kk)
    call smovh (eng$BEPart2$c, $$MaxLit, outbuf, kk)
    call smovv (",", outbuf, kk)
    call smovh (eng$TIN$c, $$MaxLit, outbuf, kk)
#    call smov  (EOS, outbuf, kk)
 
    write(16, 200)  (outbuf[k],k=1,kk)
200 format (200a1)
    goto 0060
 
9150    continue
    close(unit = 16)
    close(unit = 88)
    call endr4
end

 
 
subroutine cinit
 
#########################################################
#$%
#$% Purpose:   CINIT gets user input from command line specifying:
#$%
#$%            2.  scenario file prefix (to
#$%                identify input files).
#$%            3.  output is to disk.
#$%
#$% Called By: COMLOG
#$%
#$% Calls:     PUTLIN      PUTC      UPPER      SMOV..
#$%
#$% Tables:    None
#$%
#$% Date:      JAN 83    * Copied & Hacked  8/85 *
#$%
#$% Author:    Timothy P. Adamos
#$%
#########################################################
implicit none
engageTextcommon
 
integer   GETARG3, CTOI
character buf[ARB]
integer   narg, istat, k, igame, jj, jjj
 
call help_pgm(1,
              "pgapceng: Engagement history records in spreadsheet format",
              "pgapceng Tags: PGA, Engagement",
              "Usage: pgapceng <scenario>",
              "",
              "",
              "",
              "",
              "Example: pgapceng port")
 
narg = 1
 
istat = getarg3(narg, buf, 20)		# get scenario name from command line
 
jj = 0					# generate system's file name for NODE
call smovhn (buf,$$MaxLit,filename,jj)
 
jjj = 0                                 # generate print file name for NODE
call smovhn (buf,$$MaxLit,printname,jjj)
 
call smov (EOS, filename, jj)
jj = jj - 1
 
call load_start_time (filename)
 
call smovv  ("h.eng",filename,jj)
call smov   (EOS,      filename,jj)
 
call smovv  ("x.engtxt",printname,jjj)   # print file name
call smov   (EOS,      printname,jjj)
 
call fold (filename)
call fold (printname)
 
 
return
end
 

 
Literal function Eng_Result_Code_2_Text(         # Engagement result code to text
                                        Code)    # See hseng.def for defintion
implicit none
integer code
integer len
character text[8]
literal Ltext
equivalence (text, Ltext)
integer i_switch_1
 
len = 0
Ltext = $BLANKLIT
 
switch (Code)
{
 
    case ENG$Hit$Code:          call smovv ("Hit",text,len)
    case ENG$Miss$Code:         call smovv ("Miss",text,len)
    case ENG$Unsuccessful$Code: call smovv ("Fail",text,len)
    case ENG$Fired$Code:        call smovv ("Fired",text,len)
    case ENG$Gun$Code:          call smovv ("Gun",text,len)
    case ENG$Launch$Code:       call smovv ("Launch",text,len)
    case ENG$P$Code:            call smovv ("Posit",text,len)
    case ENG$Termination$Code:  call smovv ("Term",text,len)
    default:                    call smovv ("?",text,len)
}
 
return( Ltext )
end
 

 
Subroutine pass1
 
engageTextcommon
 
9002  format(1x, '*** Engagement file open error ***')
 
literal CSTRIP8
 
BBDeclare (ENG$Time$F, ENG$Platform$C, ENG$Weapon$C, ENG$Target$C,
        ENG$RecLat$F, ENG$RecLon$F, ENG$Track$C, ENG$Result$I,
        ENG$ShoLat$F, ENG$ShoLong$F,
        ENG$Range$F, ENG$MBURange$F)
BBDeclare(
        eng$GunEpu$i,
        eng$NumberFired$i,
        eng$NumberHit$i,
        eng$ResultPh$f,
        eng$PersistentMunition$i)
BBDeclare(
        eng$PlatformType$c,
        eng$TargetType$c,
        eng$BEPart1$c,
        eng$BEPart2$c,
        eng$TIN$c)
 
integer i
character tgtC[8]
character trackC[8]
 
ENG$Record$Definition
equivalence (ENG$Target$c, tgtC)
equivalence (ENG$Track$c, trackC)
 
 
ndam = 0
ntor = 0
ncmc = 0
 
open(unit         =88,
#    organization ='sequential',
#    blocksize    =512,
    file         =v_filename,
#    recordtype   ='fixed',
    form         ='unformatted',
    access       ='sequential',
    status       ='old',
    iostat       = ierr,
    err          =0050)
#    readonly,shared)
goto 0051
 
0050  print 9002
    exitexit
0051    continue
 
0060  read(88, end=9150, err=9150) eng$Record
 
    eng$Time$f     = Xeng$Time$f
    eng$Platform$c = Xeng$Platform$c
    eng$Weapon$c   = Xeng$Weapon$c
    eng$Target$c   = Xeng$Target$c
    eng$ShoLat$f   = Xeng$ShoLat$f
    eng$ShoLong$f  = Xeng$ShoLong$f
    eng$RecLat$f   = Xeng$RecLat$f
    eng$RecLon$f   = Xeng$RecLon$f
    eng$Track$c    = Xeng$Track$c
    eng$Result$i   = Xeng$Result$i
    eng$Range$f    = Xeng$Range$f
    eng$MbuRange$f = Xeng$MbuRange$f
 
    eng$GunEpu$i       = Xeng$GunEpu$i
    eng$NumberFired$i  = Xeng$NumberFired$i
    eng$NumberHit$i    = Xeng$NumberHit$i
    eng$ResultPh$f     = Xeng$ResultPh$f
    eng$PersistentMunition$i = Xeng$PersistentMunition$i
    eng$PlatformType$c = Xeng$PlatformType$c
    eng$TargetType$c   = Xeng$TargetType$c
    eng$BEPart1$c      = Xeng$BEPart1$c
    eng$BEPart2$c      = Xeng$BEPart2$c
    eng$TIN$c          = Xeng$Tin$c
 
    if (eng$Weapon$c == 'DAMAGE'  |
        eng$Weapon$c == 'UNK'     |
        eng$Weapon$c == 'ENGAGE'  |
        eng$Weapon$c == 'MINE')
    {
        # Don't count kill to ships already sinking
        for (i=1; i<=nDam; i=i+1)
        {
            if (damOutcome[i] == 'SINKING' &
                damTarget[i] == eng$Target$c)
            {
                goto 0060
            }
        }
        nDam = nDam + 1
        damTime[ndam]    = eng$Time$f
        damOutcome[ndam] = eng$Platform$c
        damCause[ndam]   = eng$Weapon$c
        damTarget[ndam]  = eng$Target$c
    }
 
    # Associate torpedo name(T20004) with shooter
    if (eng$Result$i == ENG$Launch$code &
        tgtC[1] == $LETT)
    {
        nTor = nTor + 1
        torTime[ntor]     = eng$Time$f
        torLauncher[ntor] = eng$Platform$c
        torWeapon[ntor]   = eng$Weapon$c
        torTarget[ntor]   = eng$Target$c
    }
 
    # Associate cruise missile name(P2005) with shooter
    if (eng$Result$i == ENG$Launch$code &
        trackC[1] == $LETP)
    {
        nCmc = nCmc + 1
        cmcTime[nCmc]     = eng$Time$f
        cmcLauncher[nCmc] = eng$Platform$c
        cmcWeapon[nCmc]   = eng$Weapon$c
        cmcName[nCmc]   = eng$Track$c
    }
 
200 format (200a1)
    goto 0060
 
9150    continue
    close(unit = 88)
return
end
 
