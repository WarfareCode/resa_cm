include "ascii.inc"
 
program enum_num  # Sequential number each enumeration type
 
implicit none
integer getlin, getwrd, index, getarg3, open_, equal
integer len, nenum, jj, kk, k, m, mm, namlen, posc, n, ncl
integer ifd, ofdc, ofdr, ofdg
integer ncode
integer inside
 
character str[400]
character ostr[400]
character rstr[400]
character infil[100]
character nam[100]
character outfil[100]
character enum[400]
character enum_set[400]
character enum_type[400]
character enum_typewo[400]
character token[400]
character varbase[400]
character defbase[400]
character chr
 
string enum_set_rat_prefix "define("
string enum_set_rat_suffix ",1)"
string enum_set_c_prefix   "#define "
string enum_set_c_suffix   " 1"
 
string var_utype      "    pval_tt_utype_"
string var_wtype      "    pval_tt_salvo_wtype_"
string var_emittype   "    pval_tt_emitter_"
string var_sonartype  "    pval_tt_sonar_type_"
 
string def_utype      "define ($alsp_unit_"
string def_wtype      "define ($weap_"
string def_emittype   "define ($emitter_"
string def_sonartype  "define ($alsp_sonar_"
 
string str_utype      "$alsp_unit_"
string str_wtype      "$weap_"
string str_emittype   "$emitter_"
 
string arraydef               "integer unit2equip[2000]"
string arraydata              "data unit2equip/2000*0/"
string database               "data unit2equip["
string ground_maneuver_radar  "GROUND.MANEUVER.RADAR"
string ground_maneuver_allrad "GROUND.MANEUVER.ALLRAD"
 
string keystring_table  "KEYSTRING_TABLE"
string utype_keytab     "tt_utype_pval_keytab"
string wtype_keytab     "tt_salvo_wtype_pval_keytab"
string emittype_keytab  "tt_emittype_pval_keytab"
string sonartype_keytab "tt_sonartype_pval_keytab"
string end_table        "};"
string blanks "                                                             "
 
string typedef_utype     "typedef enum tt_utype_pvals_d {"
string typedef_wtype     "typedef enum tt_salvo_wtype_pvals_d {"
string typedef_emittype  "typedef enum tt_emitter_type_pvals_d {"
string typedef_sonartype "typedef enum tt_sonar_type_pvals_d {"
 
string typedef_utype_term     "} TT_UTYPE_PVALS;"
string typedef_wtype_term     "} TT_WTYPE_PVALS;"
string typedef_emittype_term  "} TT_EMITTER_TYPE_PVALS;"
string typedef_sonartype_term "} TT_SONAR_TYPE_PVALS;"
 
string typedef_utype_nvals     "#define N_UTYPE_VALS"
string typedef_wtype_nvals     "#define N_SALVO_WTYPE_VALS"
string typedef_emittype_nvals  "#define N_EMITTER_TYPE_VALS"
string typedef_sonartype_nvals "#define N_SONAR_TYPE_VALS"
 
string outfilc "pvals.h"        # C header file name
string outfilr "pvals.inc"      # RATFOR include file name
#string outfilg "alsp_gndmap_jlcctc.rin"  # RATFOR include file name for ground/equip map
 
call initr4
 
call help_pgm(2,
              "enumnum: Build enumeration tables for ratfor and C code ",
              "enumnum Tags: Enumerations",
              "Usage: JLCCTC|JTTI] <enumeration file>",
              "",
              "",
              "",
              "",
              "Example: enumnum JLCCTC enum_jlcctc.h")
 
namlen = getarg3(1,nam,49)
 
len = 0
call smovhn(nam,namlen,enum_set,len)
call smov   (EOS, enum_set, len)
call upper (enum_set)				# C is case sensitive
 
namlen = getarg3(2,nam,49)
 
len = 0
call smovhn(nam,namlen,infil,len)
 
ifd = open_(infil,READ)
 
if (ifd == ERR)
{
    call cant(infil)
    stop
}
 
ofdc = open_(outfilc,WRITE)
if(ofdc == ERR)
{
    call cant(outfilc)
    stop
}
call setchtype(RAW, ofdc)
 
ofdr = open_(outfilr,WRITE)
if(ofdr == ERR)
{
    call cant(outfilr)
    stop
}
call setchtype(RAW, ofdr)

#ofdg = open_(outfilg,WRITE)
#if(ofdg == ERR)
#{
#    call cant(outfilg)
#    stop
#}
#call setchtype(RAW, ofdg)
#write c define statment for enum set
jj = 0
call smovh (enum_set_c_prefix, ARB, rstr, jj)
call smovh (enum_set, arb, rstr, jj)
call smovh (enum_set_c_suffix, ARB, rstr, jj)
call smov  (NEWLINE, rstr, jj)
call smov  (EOS, rstr, jj)
call putlin (rstr, ofdc)
 
#write ratfor define statment for enum set
jj = 0
call smovh (enum_set_rat_prefix, ARB, rstr, jj)
call smovh (enum_set, arb, rstr, jj)
call smovh (enum_set_rat_suffix, ARB, rstr, jj)
call smov  (NEWLINE, rstr, jj)
call smov  (EOS, rstr, jj)
call putlin (rstr, ofdr)
 
#write array definition statement
#jj = 0
#call smovh (arraydef, arb, rstr, jj)
#call smov  (NEWLINE, rstr, jj)
#call smov  (EOS, rstr, jj)
#call putlin (rstr, ofdg)
 
#write array data statement
#jj = 0
#call smovh (arraydata, arb, rstr, jj)
#call smov  (NEWLINE, rstr, jj)
#call smov  (EOS, rstr, jj)
#call putlin (rstr, ofdg)
 
ncode = 0
inside = NO
ostr[1] = EOS
repeat
{
    ncl = getlin(str,ifd)
    if (ncl < 0) break        # End of file
 
    # Position to keystring_table tt_utype_pval_keytab
    if (inside == NO)
    {
        kk = 1
        n = getwrd (str, kk, token)
        if (equal(token, keystring_table) == YES)
        {
            n = getwrd (str, kk, token)
            if (equal(token, utype_keytab) == YES)
            {
                inside = YES
                ncode = 0
                ostr[1] = EOS
 
                kk = 0
                call smovh (var_utype, ARB, varbase, kk)
                call smov  (EOS, varbase, kk)
 
                # base define name for RATFOR pval
                kk = 0
                call smovh (def_utype, ARB, defbase, kk)
                call smov  (EOS, defbase, kk)
 
                # write C typedef statement
                kk = 0
                call smovh (typedef_utype, ARB, ostr, kk)
                call smov  (NEWLINE, ostr, kk)
                call smov  (EOS, ostr, kk)
                call putlin (ostr, ofdc)
 
                ostr[1] = EOS
                next
            }
        }
    }
    # Position to keystring_table tt_salvo_wtype_pval_keytab
    if (inside == NO)
    {
        kk = 1
        n = getwrd (str, kk, token)
        if (equal(token, keystring_table) == YES)
        {
            n = getwrd (str, kk, token)
            if (equal(token, wtype_keytab) == YES)
            {
                inside = YES
                ncode = 0
                ostr[1] = EOS
                kk = 0
                call smovh (var_wtype, ARB, varbase, kk)
                call smov  (EOS, varbase, kk)
 
                # base define name for RATFOR pval
                kk = 0
                call smovh (def_wtype, ARB, defbase, kk)
                call smov  (EOS, defbase, kk)
 
                # write C typedef statement
                kk = 0
                call smovh (typedef_wtype, ARB, ostr, kk)
                call smov  (NEWLINE, ostr, kk)
                call smov  (EOS, ostr, kk)
                call putlin (ostr, ofdc)
 
                ostr[1] = EOS
                next
            }
        }
    }
    # Position to keystring_table tt_emittype_pval_keytab
    if (inside == NO)
    {
        kk = 1
        n = getwrd (str, kk, token)
        if (equal(token, keystring_table) == YES)
        {
            n = getwrd (str, kk, token)
            if (equal(token, emittype_keytab) == YES)
            {
                inside = YES
                ncode = 0
                ostr[1] = EOS
                kk = 0
                call smovh (var_emittype, ARB, varbase, kk)
                call smov  (EOS, varbase, kk)
 
                # base define name for RATFOR pval
                kk = 0
                call smovh (def_emittype, ARB, defbase, kk)
                call smov  (EOS, defbase, kk)
 
                # write C typedef statement
                kk = 0
                call smovh (typedef_emittype, ARB, ostr, kk)
                call smov  (NEWLINE, ostr, kk)
                call smov  (EOS, ostr, kk)
                call putlin (ostr, ofdc)
 
                ostr[1] = EOS
                next
            }
        }
    }
    # Position to keystring_table tt_sonartype_pval_keytab
    if (inside == NO)
    {
        kk = 1
        n = getwrd (str, kk, token)
        if (equal(token, keystring_table) == YES)
        {
            n = getwrd (str, kk, token)
            if (equal(token, sonartype_keytab) == YES)
            {
                inside = YES
                ncode = 0
                ostr[1] = EOS
                kk = 0
                call smovh (var_sonartype, ARB, varbase, kk)
                call smov  (EOS, varbase, kk)
 
                # base define name for RATFOR pval
                kk = 0
                call smovh (def_sonartype, ARB, defbase, kk)
                call smov  (EOS, defbase, kk)
 
                # write C typedef statement
                kk = 0
                call smovh (typedef_sonartype, ARB, ostr, kk)
                call smov  (NEWLINE, ostr, kk)
                call smov  (EOS, ostr, kk)
                call putlin (ostr, ofdc)
 
                ostr[1] = EOS
                next
            }
        }
    }
 
    if (inside == NO) next
 
    # Look for end of table
    if (inside == YES)
    {
        kk = 1
        n = getwrd (str, kk, token)
        if (equal(token, end_table) == YES)
        {
            inside = NO
            # replace , with space to terminate typedef
            chr = $COMMA
            posc = index(ostr,chr)
            if (posc != 0)
                ostr[posc] = BLANK
            call putlin (ostr, ofdc)
 
            # Output typedef terminator lines for utype
            if (equal (var_utype, varbase) == YES)
            {
                 # write C typedef terminator
                 kk = 0
                 call smovh (typedef_utype_term, ARB, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
 
                 # write C typedef count
                 kk = 0
                 call smovh (typedef_utype_nvals, ARB, ostr, kk)
                 call smov  (BLANK, ostr, kk)
                 call smovi (ncode-1, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
            }
 
            # Output typedef terminator lines for wtype
            if (equal (var_wtype, varbase) == YES)
            {
                 # write C typedef terminator
                 kk = 0
                 call smovh (typedef_wtype_term, ARB, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
 
                 # write C typedef count
                 kk = 0
                 call smovh (typedef_wtype_nvals, ARB, ostr, kk)
                 call smov  (BLANK, ostr, kk)
                 call smovi (ncode-1, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
            }
 
            # Output typedef terminator lines for emittype
            if (equal (var_emittype, varbase) == YES)
            {
                 # write C typedef terminator
                 kk = 0
                 call smovh (typedef_emittype_term, ARB, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
 
                 # write C typedef count
                 kk = 0
                 call smovh (typedef_emittype_nvals, ARB, ostr, kk)
                 call smov  (BLANK, ostr, kk)
                 call smovi (ncode-1, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
            }
 
            # Output typedef terminator lines for sonartype
            if (equal (var_sonartype, varbase) == YES)
            {
                 # write C typedef terminator
                 kk = 0
                 call smovh (typedef_sonartype_term, ARB, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
 
                 # write C typedef count
                 kk = 0
                 call smovh (typedef_sonartype_nvals, ARB, ostr, kk)
                 call smov  (BLANK, ostr, kk)
                 call smovi (ncode-1, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (NEWLINE, ostr, kk)
                 call smov  (EOS, ostr, kk)
                 call putlin (ostr, ofdc)
            }
 
            next
        }
        if (ostr[1] != EOS)             # delayed write
            call putlin (ostr, ofdc)
 
    }
 
    # Process input record: "enum", /* enum type */
    kk = 1
 
    call skipbl (str, kk)
    chr = DQUOTE
    posc = index(str[kk+1],chr)
    m = 0
    call smovh (str[kk+1],posc-1, enum, m)
    call smov  (EOS, enum, m)
    kk = kk + posc + 1              # position after ending ",
    chr = $COMMA
    posc = index(str[kk],chr)
    kk = kk + posc
 
    # replace - with _
    chr = $MINUS
    posc = index(enum,chr)
    while (posc != 0)
    {
        enum[posc] = $UNDERSCORE
        posc = index(enum,chr)
    }
 
    # replace . with _
    chr = $PERIOD
    posc = index(enum,chr)
    while (posc != 0)
    {
        enum[posc] = $UNDERSCORE
        posc = index(enum,chr)
    }
 
    # replace ( with _
    chr = $LPAREN
    posc = index(enum,chr)
    while (posc != 0)
    {
        enum[posc] = $UNDERSCORE
        posc = index(enum,chr)
    }
 
    # replace ) with _
    chr = $RPAREN
    posc = index(enum,chr)
    while (posc != 0)
    {
        enum[posc] = $UNDERSCORE
        posc = index(enum,chr)
    }
 
    # replace BLANK with _
    chr = $SPACE
    posc = index(enum,chr)
    while (posc != 0)
    {
        enum[posc] = $UNDERSCORE
        posc = index(enum,chr)
    }
 
    # replace SLASH with _
    chr = $SLASH
    posc = index(enum,chr)
    while (posc != 0)
    {
        enum[posc] = $UNDERSCORE
        posc = index(enum,chr)
    }
 
    call skipbl (str, kk)
    mm = 0
    call smovh (str[kk], ncl - kk + 1, enum_type, mm)
    call smov  (EOS, enum_type, mm)
 
    # Generate output record pval_tt_utype_enum   =  seqnum,  /* enum type */
    kk = 0
    call smovh (varbase, ARB, ostr, kk)
    call smovh (enum, ARB, ostr, kk)
    call smovh (blanks, 50-kk, ostr, kk)
    call smov  (EQUALS, ostr, kk)
    call smovh (blanks, 1, ostr, kk)
    call smovib(ncode, 4, ostr, kk)
    call smov  (COMMA, ostr, kk)
    call smovh (blanks, 5, ostr, kk)
    call smovh (enum_type, ARB, ostr, kk)
    call smov  (EOS, ostr, kk)
 
    # Generate output record define ($unit_type_enum, seqnum)  #/* enum type */
    jj = 0
    call smovh (defbase, ARB, rstr, jj)
    call smovh (enum, ARB, rstr, jj)
    call smovh (blanks, 50-jj, rstr, jj)
    call smov  (COMMA, rstr, jj)
    call smovh (blanks, 1, rstr, jj)
    call smovib(ncode, 4, rstr, jj)
    call smov  (RPAREN, rstr, jj)
    call smovh (blanks, 5, rstr, jj)
    call smov  (SHARP, rstr, jj)
    call smovh (enum_type, ARB, rstr, jj)
    call smov  (EOS, rstr, jj)
    call putlin (rstr, ofdr)
 
    jj = 3              # skip /*
    n = getwrd (enum_type, jj, enum_typewo)
 
#    if (equal (var_utype, varbase) == YES)
#    {
#        if (equal(ground_maneuver_radar, enum_typewo) == YES)
#        {
#            # Generate output record: data unit2equip[enum]/$emitter_enum/
#            jj = 0
#            call smovh (database, ARB, rstr, jj)
#            call smovh (str_utype, ARB, rstr, jj)
#            call smovh (enum, ARB, rstr, jj)
#            call smov  (RBRACK, rstr, jj)
#            call smov  (SLASH, rstr, jj)
#            call smovh (str_emittype, ARB, rstr, jj)
#            call smovh (enum, ARB, rstr, jj)
#            call smov  (SLASH, rstr, jj)
#            call smov  (NEWLINE, rstr, jj)
#            call smov  (EOS, rstr, jj)
#            call putlin (rstr, ofdg)
#        }
#    }
#    if (equal (var_utype, varbase) == YES)
#    {
#        if (equal(ground_maneuver_allrad, enum_typewo) == YES)
#        {
#            # Generate output record: data unit2equip[enum]/$weap_enum/
#            jj = 0
#            call smovh (database, ARB, rstr, jj)
#            call smovh (str_utype, ARB, rstr, jj)
#            call smovh (enum, ARB, rstr, jj)
#            call smov  (RBRACK, rstr, jj)
#            call smov  (SLASH, rstr, jj)
#            call smovh (str_wtype, ARB, rstr, jj)
#            call smovh (enum, ARB, rstr, jj)
#            call smov  (SLASH, rstr, jj)
#            call smov  (NEWLINE, rstr, jj)
#            call smov  (EOS, rstr, jj)
#            call putlin (rstr, ofdg)
#        }
#    }
    ncode = ncode + 1
}
 
call close(ifd)
call close(ofdc)
call close(ofdr)
#call close(ofdg)
 
end
 
