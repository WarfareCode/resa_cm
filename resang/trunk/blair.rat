#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated 06-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 tpa     air     added TRKS field
###
 
 
 
 
#####   version 3.0  dated- 22dec80
 
include    "ascii.inc"
include    "macros.inc"
 
 
# 
 
subroutine air
 
########################################################################
#$%
#$% Purpose:   AIR allows the user to interact with the aircraft
#$%            characteristics data.
#$%
#$% Called By: BUILD
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 79
#$%
#$% Author:    Dana Wills
#$%
#$% Modified:  Carol L. Kropp - 3/92
#$%            AWSIM air-to-air incorporations
#$%
#$%            John Strauch   - 4/93
#$%            ASMD incorporations
#$%
#$%            Susan Miller - 8/95 (E1454)
#$%            Added SHARE characteristic for 1996 ALSP Confed
#$%
#$%            Carol Kropp - 11/95 (E1469)
#$%            Added JTIDS field to aircraft.
#$%
#$%            Carol Kropp - 10/96 (E1695)
#$%            Added CEC field to aircraft.
#$%
#$%            Carol Kropp - 3/97 (E1766)
#$%            The UAV field was changed from a strait yes/no to
#$%            a UAV type list, with no as the default.
#$%
#$%            Carol Kropp - 4/97 (E1785)
#$%            Added the ATARS yes/no and TARPS yes/no fields for
#$%            the new JTMD models.
#$%
########################################################################
 
#
#     New AIRCRAFT
#
#
#       This program is a re-design of the original BUILD maintanence
#       subprograms originally written by E. DECKER.
#
#       The new subprogram is designed to be compatible with the current
#       requirements of program and user interfaces.  The files maintained
#       can be generated in the same structure and format.  The user
#       commands that existed still perform the same functions, with
#       additional commands included to expand the users capability.
#
#       This new subprogram is written in RATFOR for the TOPS20 machine,
#       and has the following attributes:
#
#       MORE    A new command that saves the current record in the same
#               fashion as SAVE, with the subprogram not returning to
#               the main BUILD program.  The data of the current record
#               is maintained in memory, with the NAME field reset, to
#               allow another record to be entered that only requires
#               slight changes to the characteristics of the prior record.
#
#       KILL    A new command that clears all of the fields in the record
#               in memory.  This can be used to un-do any changes that have
#               been made to a record prior to it being SAVEd (or MOREd).
#               It also resets the record pointers so that the contents of
#               the record in memory are not associated with any record
#               on disk.
#
#       HELP    A new command that explains the commands and also the
#               specifics of any of the fields in the record.
#
#       LIST    A new command that itemizes the contents of the file.  It
#               provides a quick way to check the file for a series of
#               objects.
#
#       QUIT    A new command that terminates maintanence and returns
#               control to the main program BUILD.
#
#       BYE     A new command that is the same as QUIT.
#
#       FIND    Has been modified so that the found record is not deleted
#               as it had been.  Pointers and flags are maintained to
#               indicate the disc position and status of any changes.
#               If there is a record in memory that has been changed from
#               its original disc contents, or if there is a new record
#               in memory, the memory record is saved prior to finding
#               the requested record.
#
#       SAVE    Since the records are not deleted on a FIND, SAVE (and MORE)
#               only rewrite the current record if it has been modified
#               since the last FIND, MORE or KILL command.  New records are
#               added to the end of the file, and modified records are
#               rewritten in the position that they occupied.  If the
#               modified record is larger or shorter in length than the
#               associated record on disc, the subsequent disc records are
#               shifted right or left as required to allow for the new size.
#               The NAME is not verified to be unique in the file.  Therefore,
#               the user should do a FIND on the name in question prior
#               to adding it into the file.
#
#       Changes to the memory record are now controlled by the data contained
#               in four major tables.  These tables control the fields in
#               each type of record, the arguments associated with each
#               field, and the validation to be performed on each argument.
#               This allows quick and easy methods to add or modify the
#               fields in the record maintained.  The code in this program
#               is the same for each group of objects to be maintained,
#               with the DATA statements of each controlling the file.
#               Provisions have been included to allow for special hard
#               coding of input validation testing, and also special tests
#               at SAVE (or MORE) time.
#
#
#
#

##      IMPLICIT INTEGER (A-Q,S-Z)
        IMPLICIT NONE   # jb E2145  3/22/00
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom, 68)     # Number of entries in the defCOM table.
define (zdctyp, 34)     # The size of the defTYP table.
define (zdcfld,706)     # The size of the defFLD table (literals).
define (zdsarg,  8)     # The size of entries in the defARG table.
define (zdcarg, 47)     # The number of entries in the defARG table.
define (zdcfmt, 10)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      character  line[ARB]
                                        # jb E2145  3/22/00 \/
      logical*1 VALID_ANTENNA_COVERAGE  # jb function in BLSHIPS.rat
 
      integer m
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("        ","    Airc","raft"," ")
 
$set (Data_Count,0)
 
Data$com( "NAME ",  1)      # Name of aircraft
Data$com( "CAT  ",  1)      # Aircraft category
Data$com( "VMAX ",  1)      # Maximum speed
Data$com( "CLIMB",  1)      # Maximum Climb rate
Data$com( "AMAX ",  1)      # Maximum obtainable altitude
Data$com( "XSECT",  1)      # Radar cross section
Data$com( "VCRU ",  1)      # Optimal speed for maximum range
Data$com( "JP   ",  1)      # Amount of aviation fuel
Data$com( "LDELY",  1)      # Launch delay for appropriate aircraft
Data$com( "HDG  ",  1)      # Heading Navaid
Data$com( "SPD  ",  1)      # Speed Navaid
Data$com( "MNFAL",  1)      # Mean time before failure
Data$com( "MNMNT",  1)      # Mean time for unscheduled maintenance
Data$com( "SDMNT",  1)      # Standard deviation unscheduled maintenance
Data$com( "MNRPR",  1)      # Mean time to repair
Data$com( "MAINT",  1)      # Flight time between scheduled maintenance
Data$com( "RDELY",  1)      # Routine servicing and refueling delay time
Data$com( "ODELY",  1)      # Change of orders delay
Data$com( "PBLCH",  1)      # Prob of a sucessful launch
Data$com( "PBREC",  1)      # Prob of a sucessful recovery
Data$com( "PBFAL",  1)      # Prob of a system failure
Data$com( "SYSFL",  1)      # Prob of a sys failure while in flight
Data$com( "DTRNG",  1)      # Range in which the platform can be detected
Data$com( "CLRNG",  1)      # Range in which the platform can be classified
Data$com( "TRKS ",  1)      # Number of local tracksData$com( #smn002
Data$com( "NOMEN",- 1)      # Full name/Nomenclature of device
Data$com( "UDB  ",- 1)      # Universal DB Flag
Data$com( "LOTSP", -1)      # Aircraft loiter speed on station  # made optional 3/92
Data$com( "MNALT", -1)      # Minimum altitude above terrain --JFR 5/6/91
Data$com( "HFDF ",- 1)      # HFDF name
Data$com( "FLIR ",- 1)      # Foward-Looking Infra Red (FLIR)     #tpa 4/83
Data$com( "IRNAM",- 1)      # Foward-Looking Infra Red (FLIR) name#tpa 4/83
Data$com( "NAV  ",- 1)      # Other Navaid
Data$com( "RDESM",- 6)      # Name of sensor(s) carried
Data$com( "ANT-H",- 6)      # Restricted Antenna Horizontal Coverage for radars, 8/8/90
Data$com( "JAMMR",- 6)      # Name of jammer carried
Data$com( "COMMS",-12)      # Name of communication suite(s) carried
Data$com( "CJAMR",- 4)      # Type of Communication Jammer
Data$com( "SONAR",- 6)      # Name of dipping sonar(s) carried
Data$com( "NDCLS",- 1)      # Nuclear Damage Class          4/2/85
Data$com( "DNWND",- 1)      # Can Land DownWind? (YES/NO)   5/28/86
Data$com( "ISAR ",- 1)      # Ship-ID @ min(80 nmi,horizon? 5/28/87
Data$com( "ZOOM ",- 1)      # Classification Range MULTIPLIER jb 5/27/87
Data$com( "SWEEP",- 1)      # Capable of mine sweeping
Data$com( "EOIR ",- 1)      # AC Unmannd Aerial Vehicle
Data$com( "UAV  ",- 1)      # Unmannd Aerial Vehicle
Data$com( "MXSEC",- 1)      # Aspect Dependent Radar X section, dB//meter
Data$com( "UAVIX",- 1)      # UAV Target Type Index
Data$com( "MAD  ",- 1)      # Capable of Magnetic Anomaly Detection  1/7/91
Data$com( "LIDAR",- 1)      # Capable of Light Detection & Ranging   2/6/91
Data$com( "IFF  ",- 3)      # Name of IFF system(s) carried         2/21/91
Data$com( "NBN  ",- 6)      # In-Air acoustic frequencies           5/21/91
Data$com( "GNTYP", -1)      # Aircraft generic type (alphanumeric)   clk 3/92
Data$com( "REACT", -1)      # Will aircraft react to attack (yes/no) clk 3/92
Data$com( "EXPND", -1)      # Will a/c expend when REACTing (yes/no) clk 3/92
Data$com( "QMAX ", -1)      # Max speed in knots at sea level        clk 3/92
Data$com( "AEM  ", -1)      # Air effectiveness multiplier           clk 3/92
Data$com( "GEM  ", -1)      # Ground effectiveness multiplier        clk 3/92
Data$com( "SEM  ", -1)      # Standoff effectiveness multiplier      clk 3/92
Data$com( "HGT  ", -1)      # Height of aircraft               jms 11/17/92
Data$com( "WIDTH", -1)      # Width of aircraft                jms 11/17/92
Data$com( "ASMD ", -1)      # ASMD Capable                     jms  4/19/93
Data$com( "SHARE", -1)      # ALSP Shared a/c                  smm 8/95 (E1454)
Data$com( "JTIDS", -1)      # JTIDS Capable Flag               clk 11/95 (E1469)
Data$com( "CEC",   -1)      # CEC Capable Flag                 clk 10/96 (E1695)
Data$com( "SDOFF", -1)      # Platform default standoff range from targets joa 2/05 per_sor
Data$com( "ATARS", -1)      # JTMD ATARS Sensor Package        clk  4/97 (E1785
Data$com( "TARPS", -1)      # JTMD TARPS Sensor Package        clk  4/97 (E1785
 
# Generate error if def and init numbers do not match
#ifelse($use(Data_count),zdccom,,
#          Macro-E defcom array size zdccom % % data item $use(Data_count) % % mismatch)
 
 
#$% NOTE: Had to move VECSP down here because at least one of the type
#$%       specific entries had to be required, otherwise the first one
#$%       was identified as a required entry in BUILD.
 
$set (Data_Count,0)
 
Data$typ( "HELO ", 4)      # Record Type 1 Identifier
Data$typ(    "VECSP", 1)      # Speed @ which a/c process to engage target
Data$typ(    "LBSKT", 1)            #POUNDS PER KNOTS (EXPON)
Data$typ(    "LOITF", 1)            #LOITER FUEL (PREPRX)
Data$typ(   "HOVER", 1)            #HOVER FUEL (LOITER FUEL)
Data$typ(  "PROP ", 5)      # Record Type 2 Identifier
Data$typ(    "VECSP", 1)      # Speed @ which a/c process to engage target
Data$typ(    "FLXPT",-1)      # Used in fuel consumption model  # made optional 3/92
Data$typ(    "FLPRX",-1)      # Prefix factor of fuel consumptio model   # made optional 3/92
Data$typ(    "LOTFL",-1)      # Loiter fuel useage rate for max range    # made optional 3/92
Data$typ(    "RANGE",-1)      # Range at cruise speed in nmi     clk 3/92
Data$typ(  "JET  ", 5)      # Record Type 2 Identifier
Data$typ(    "VECSP", 1)      # Speed @ which a/c process to engage target
Data$typ(    "FLXPT",-1)      # Used in fuel consumption model  # made optional 3/92
Data$typ(    "FLPRX",-1)      # Prefix factor of fuel consumptio model   # made optional 3/92
Data$typ(    "LOTFL",-1)      # Loiter fuel useage rate for max range    # made optional 3/92
Data$typ(    "RANGE",-1)      # Range at cruise speed in nmi     clk 3/92
 
#ifelse($use(Data_count),zdctyp,,
#          Macro-E zdctyp deftyp array size $use(Data_count) data item mismatch)
 
#  (\/ <-- index of FORMAT statement in DEFFMT, below)
 
$set (Data_Count,0)
 
data$fld1("NAME ", 1, 1,"ALPHA", 1,"Name of ","aircraft"," type   ","     ")
data$fld1("CAT  ", 1, 1,"CAT  ", 1,"Aircraft"," type JE","T/PROP/H","ELO  ")
data$fld1("LOTSP", 1, 2,"MPH4 ", 1,"Loiter S","peed  fo","r statio","n    ")
data$fld1("VECSP", 1, 2,"MPH3 ", 1,"Vector S","peed  fo","r engagi","ng   ")
data$fld1("FLXPT", 1, 2,"EXPNT", 1,"Exponent","ial fact","or for f","uel  ")
data$fld1("FLPRX", 1, 2,"PREFX", 1,"Prefix f","actor fo","r max ra","nge  ")
data$fld1("LOTFL", 1, 2,"LOIT ", 1,"Loiter f","actor fo","r max ra","nge  ")
data$fld1("RANGE", 1, 2,"NMI  ", 1,"Range at","cruise s","peed in ","nmi  ")
data$fld1("LBSKT", 1, 2,"EXPNT", 1,"Pounds p","er knots","        ","     ")
data$fld1("LOITF", 1, 2,"PREFX", 1,"Loiter f","uel     ","        ","     ")
data$fld1("HOVER", 1, 2,"LOIT ", 1,"Hover  f","actor fo","r max ra","nge  ")
data$fld1("VMAX ", 1, 2,"MPH1 ", 1,"Maximum ","speed   ","        ","     ")
data$fld1("CLIMB", 1, 2,"FEET1", 1,"Maximum ","rate of ","climb pe","r min")
data$fld1("AMAX ", 1, 2,"FEET2", 1,"Maximum ","obtainab","le altit","ud   ")
data$fld1("XSECT", 1, 2,"dBM  ", 1,"Radar Cr","oss Sect","ion     ","     ")
data$fld1("VCRU ", 1, 2,"MPH2 ", 1,"Optimal ","speed fo","r max ra","nge  ")
data$fld1("MNALT", 1, 2,"FEET3", 1,"Min alt ","above te","rrain in"," feet")
data$fld1("JP   ", 1, 2,"POUND", 1,"Amount o","f aviati","on fuel ","     ")
data$fld1("LDELY", 1, 2,"MINUT", 1,"Launch d","elay for"," appro A","/C   ")
data$fld1("HDG  ", 1, 1,"NAME ", 1,"Name of ","heading ","sensor  ","     ")
data$fld1("SPD  ", 1, 1,"NAME ", 1,"Name of ","speed se","nsor    ","     ")
data$fld1("HFDF ", 1, 1,"NAME ", 1,"HFDF nam","e       ","        ","     ")
data$fld1("FLIR ", 1, 1,"NAME ", 1,"Foward-L","ooking I","nfra Red"," Name")
data$fld1("IRNAM", 1, 1,"NAME ", 1,"Foward-L","ooking I","nfra Red"," Name")
data$fld1("NAV  ", 1, 1,"NAME ", 1,"Name of ","Navigati","on Aid  ","     ")
data$fld1("MNFAL", 1, 2,"MNFAL", 1,"Mean HOU","RS betwe","en failu","re   ")
data$fld1("MNMNT", 1, 2,"MAINT", 1,"Mean HOU","RS unsch","eduled m","aint ")
data$fld1("SDMNT", 1, 2,"MAINT", 1,"HRS Std ","Dev unsc","heduled ","maint")
data$fld1("MNRPR", 1, 2,"MNRPR", 1,"Mean Min","utes to ","repair  ","     ")
data$fld1("MAINT", 1, 2,"HOURS", 1,"Flight H","OURS bet","ween sch","ld mnt")
data$fld1("RDELY", 1, 2,"DELAY", 1,"Minutes ","delay to"," Service","/Fuel ")
data$fld1("ODELY", 1, 2,"DELAY", 1,"Minutes ","delay to"," load Or","dnance")
data$fld1("PBLCH", 1, 2,"%    ", 1,"Prob of ","a sucess","ful laun","ch   ")
data$fld1("PBREC", 1, 2,"%    ", 1,"Prob of ","a sucess","ful reco","very ")
data$fld1("PBFAL", 1, 2,"%    ", 1,"Prob of ","a system"," failure","(N/U)")
data$fld1("SYSFL", 1, 2,"%    ", 1,"Prob fai","lure in ","2-hour f","light")
data$fld1("DTRNG", 1, 2,"RANGE", 1,"Range wh","ich can ","be detec","ted  ")
data$fld1("CLRNG", 1, 2,"RANGE", 1,"Range in"," which c","an be cl","assif")
data$fld1("TRKS ", 1, 2,"QTY1 ", 1,"Number o","f local ","tracks  ","     ")
data$fld1("RDESM", 1, 1,"NAME ", 1,"Name of ","sensor(s",") carrie","d    ")
data$fld1("JAMMR", 1, 1,"NAME ", 1,"Name of ","jammer c","arried  ","     ")
data$fld1("COMMS", 1, 1,"NAME ", 1,"Name of ","comm sui","te(s) ca","rried")
data$fld1("CJAMR", 1, 1,"NAME ", 1,"Name of ","comm jam","mer carr","ied  ")
data$fld1("SONAR", 1, 1,"NAME ", 1,"Name of ","sonar(s)"," carried","     ")
data$fld1("NDCLS", 1, 2,"DAMCL", 1,"NucDam C","lass a/c"," 1-B/2-F","/3-H ")
data$fld1("DNWND", 1, 2,"ANSWR", 1,"Can this"," a/c lan","d DownWi","nd?  ")
data$fld1("ISAR ", 1, 2,"ANSWR", 1,"Ship-Ide","nt Capab",". ~ 80 n","mi   ")
data$fld1("ZOOM ", 1, 2,"QTY2 ", 1,"Classifi","cation R","ng MULIT","PLIER")
data$fld1("SWEEP", 1, 1,"ANSWR", 1,"Capable ","of Mines","weeping ","     ")
data$fld1("EOIR ", 1, 1,"ANSWR", 1,"Optical "," & IR   ","Sensor  ","     ")
data$fld1("UAV  ", 1, 1,"UTYPE", 1,"Unmanned"," Aerial ","Vehicle ","     ")
data$fld1("UAVIX", 1, 2,"INDEX", 1,"Target T","ype Inde","x       ","     ")
data$fld1("MAD  ", 1, 2,"ANSWR", 1,"Magnetic"," Anomaly"," Detecto","r    ")
data$fld1("LIDAR", 1, 2,"ANSWR", 1,"Light De","tection ","and Rang","ing  ")
data$fld1("IFF  ", 1, 1,"NAME ", 1,"Name of ","IFF syst","em(s) ca","rried")
data$fld1("GNTYP", 1, 1,"ALPHA", 1,"Name of ","aircraft","generic ","type  ")
data$fld1("REACT", 1, 2,"ANSWR", 1,"Will air","craft re","act to a","ttack ")
data$fld1("EXPND", 1, 2,"ANSWR", 1,"Will air","craft ex","pend if ","REACT ")
data$fld1("QMAX ", 1, 2,"MPH5 ", 1,"Maximum ","speed at","sea leve","l     ")
data$fld1("AEM  ", 1, 2,"RANGE", 1,"Air effe","ctivenes","s multip","lier  ")
data$fld1("GEM  ", 1, 2,"RANGE", 1,"Ground e","ffective","ness mul","tiplier")
data$fld1("SEM  ", 1, 2,"RANGE", 1,"Standoff","effectiv","eness mu","ltiplier")
data$fld7("MXSEC", 7, 6,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"DBX  ", 1,"Aspect D","ependent"," Xsectio","n    ")
data$fld2("NBN  ", 2, 8,"Hz   ", 1,"dB   ", 1,"In-Air A","coustic ","Frequenc","ies     ")
data$fld3("ANT-H", 3, 7,"NAME ", 1,"S-ANG", 1,"E-ANG", 1,"EM Devic","e Horiz ","Antenna ","coverage")
data$fld3("NOMEN", 3,-9,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
data$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
data$fld1("HGT  ", 1, 2,"FEET3", 1,"Height o","f aircra","ft      ","     ")
data$fld1("WIDTH", 1, 2,"FEET3", 1,"Width of"," aircraf","t       ","     ")
data$fld1("ASMD ", 1, 1,"ANSWR", 1,"ASMD Cap","able    ","        ","     ")
data$fld1("SHARE", 1, 1,"ANSWR", 1,"Ghosted ","ALSP a/c"," shares ","trks ")
data$fld1("SDOFF", 1,10,"RNM  ", 1,"Standoff"," range f","or targe","ts   ")
data$fld1("CEC"  , 1, 2,"ANSWR", 1,"Platform"," is CEC ","capable ","      ")
data$fld1("JTIDS", 1, 2,"ANSWR", 1,"Platform"," is JTID","S capabl","e     ")
data$fld1("ATARS", 1, 2,"ANSWR", 1,"Platform"," has JTM","D ATARS ","Sensor")
data$fld1("TARPS", 1, 2,"ANSWR", 1,"Platform"," has JTM","D TARPS ","Sensor")
 
#ifelse($use(Data_count),zdcfld,,
#          Macro-E zdcfld deffld array size $use(Data_count) data item mismatch)
 
$set (Data_Count,0)
 
Data$arg8N( "ALPHA",6000, 0,      0)     # Alphanumeric -- Anything
Data$arg8N( "NAME ",6000, 0,      0)     # Alphanumeric -- Anything
Data$arg8C( "CAT  ",8003,"HELO ","PROP ","JET  ")
Data$arg8N( "MPH3 ",2002, 0,   4095)     # Numeric Range 0 -> 4095
Data$arg8N( "MPH4 ",2002, 0,   1023)     # Numeric Range 0 -> 1023
Data$arg8N( "MPH5 ",2002, 0,    800)     # Numeric Range 0 -> 800
Data$arg8N( "EXPNT",2002, 0,    100)     # Numeric Range 0 -> 100
Data$arg8N( "PREFX",2002, 0,   4095)     # Numeric Range 0 -> 4095
Data$arg8N( "LOIT ",2002, 0,  16000)     # Numeric Range 0 -> 16000
Data$arg8N( "MPH1 ",2002, 0,   3000)     # Numeric Range 0 -> 3000
Data$arg8N( "FEET1",2002, 0,  50000)     # Numeric Range 0 -> 50000
Data$arg8N( "FEET2",2002, 0,2000000)     # Numeric Range 0 -> 2000000 # SMM 3/99 (E2052)
Data$arg8N( "FEET3",2002, 0,   1000)     # Numeric Range 0 -> 1000 # JR 12/90
Data$arg8N( "dBM  ",2002,-200,   55)     # Numeric Range-200->55 # clf 1/8/93
Data$arg8N( "MPH2 ",2002, 0,   1000)     # Numeric Range 0 -> 1000
Data$arg8N( "NMI  ",2002, 0,  20000)     # Numeric Range 0 -> 20000
Data$arg8N( "POUND",2002, 0, 300000)     # Numeric Range 0 -> 300000
Data$arg8N( "MINUT",2002, 1,     10)     # Numeric Range 1 -> 10
Data$arg8N( "MNFAL",2002, 0,   1000)     # Numeric Range 0 -> 1000
Data$arg8N( "MNRPR",2002, 0,   1000)     # Numeric Range 0 -> 1000
Data$arg8N( "MAINT",2002, 0,   1000)     # Numeric Range 0 -> 1000
Data$arg8N( "DELAY",2002, 0,    240)     # Numeric Range 0 -> 240  # 240 vice 100 - cpa 9/92
Data$arg8N( "%    ",2002, 0,    100)     # Numeric Range 0 -> 100
Data$arg8N( "HOURS",2002, 0,   1000)     # Numeric Range 0 -> 1000 # jb vs 300
Data$arg8N( "RANGE",2002, 0,    500)     # Numeric Range 0 -> 500
Data$arg8N( "QTY1 ",2002, 0,   2000)     # Numeric Range 0 -> 250    # dew (E2124)
Data$arg8N( "QTY2 ",2002, 1,      4)     # Numeric Range 1 -> 4    5/27/87
Data$arg8N( "DEPTH",2002, 0,   3000)     # Numeric Range 0 -> 3000
Data$arg8N( "Hz   ",2002, 1,  10000)     # Numeric Range 1 -> 10000 6/3/91
Data$arg8N( "DEGRS",2002,-180,  180)     # Numeric Range -180 -> 180
Data$arg8N( "CENT ",2000, 0,    100)     # Numeric Range 0 -> 100
Data$arg8N( "CENT4",2000, 0,     45)     # Numeric Range 0 -> 45
Data$arg8N( "LAT  ",4000, 0,      0)     # Numeric Latitude
Data$arg8N( "LONG ",5000, 0,      0)     # Numeric Longitude
Data$arg8C( "ANSWR",8002,"YES  ","NO   ")# Alphanumeric list -- YES/NO
Data$arg8C( "TRANS",8002,"SEND ","RCVR ")# Alphanumeric list -- SEND/RCVR
Data$arg8N( "DAMCL",2002, 1,      3)     # Numeric Range 1 -> 3
Data$arg8N( "INDEX",2002, 1,     24)     # Numeric Range 1 -> 24
Data$arg8N( "S-ANG",2002, 0,    359)     # Numeric Range 0 -> 359
Data$arg8N( "E-ANG",2002, 0,    359)     # Numeric Range 0 -> 359
Data$arg8N( "RNM  ",-2002, 0.00,100.00)  # FP Num Range 0.0 -> 100.0       # joa 2/96 (E1467)
Data$arg8N( "Text ",9024, 0,      0)     # Alphanumeric string (24 bytes)
Data$arg8N( "...  ",9000, 0,      0)     # Alphanumeric string filler
Data$arg8C( "Ucode",8003,"NO   ","YES  ","DEFLT")
Data$arg8N( "DBX  ",2002,-200,   55)     # Numeric Range -200 -> 55
Data$arg8N( "dB   ",2002, 1,    500)     # Numeric Range  1 -> 500 SMM 5/21/91
Data$arg8C( "UTYPE",8005,"NO   ","HUNTR","OUTRD","PIONR","OTHER")
 
#ifelse($use(Data_count),zdcarg,,
#          Macro-E zdcarg defarg array size $use(Data_count) data item mismatch)
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
$set (Data_Count,0)
 
Data$fmt( 2,"A5,A7)  ","        "," "," ")
Data$fmt( 2,"A5,I9)  ","        "," "," ")
Data$fmt( 5,"A5,2A7,I","9,I5)   "," "," ")
Data$fmt( 3,"A5,A7,I9",")       "," "," ")
Data$fmt( 4,"A5,2A7,I","9)      "," "," ")
Data$fmt( 8,"A5,7I4) ","        "," "," ")
Data$fmt( 4,"A5,2I6) ","        "," "," ")
Data$fmt( 3,"A5,2I9) ","        "," "," ")
Data$fmt( 4,"A5,3A8) ","        "," "," ")
Data$fmt( 2,"A5,F9.3)","        "," "," ")
 
#ifelse($use(Data_count),zdcfmt,,
#          Macro-E zdcfmt deffmt array size $use(Data_count) data item mismatch)
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    NONE
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                    #*********************************************************
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==2)                     # Special Test 2
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
                   }
 
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# scan the work area looking at all fields....
 
for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
    {
    #$% if restricted horizontal antenna coverage and has data to check
    if (work [ptr] == 'ANT-H' & work [ptr + 2] != '*REQ*')
        {
        if ( ! valid_antenna_coverage(work,
                                      INT(Work[1]), # length of work record
                                      work [ ptr + 2],
                                      ptr)
           )
            {
            serr = serr + 1
            }
        }
    }
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
