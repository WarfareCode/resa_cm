
include "bbctl.inc"         
include "bbcode.inc"         
include "bbshc.inc"         
include "bbwet.inc"         
include "bbunt.inc"         
        
define (err, -3)   # alsp.inc undefines it - who_am_i uses it

define (number_args, 1)
define (output_unit, 10)

define (BBImplicit, Implicit None)

undefine write   # use the standard fortran write statement

program shipfuelstate
#########################################################################
#$%
#$% Purpose:    This program is intended to tap into the RESA blackboard
#$%             to report fuel state for all ships in blue 4
#$% Calls:      initr4         <rlib.olb>
#$%             read_arguments
#$%             ctoi
#$%             who_am_i
#$%             bbmap
#$%             check_version
#$%             remark
#$%             exit
#$%             Init_Collection_File
#$%             delay
#$%             Game_DTG
#$%             smov..
#$%             echo..
#$%             write
#$%             close
#$%
#$% Tables:     global variables
#$%
#$% Date:       Aug 2014
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
BBcommon

integer   ctoi        # integer function
integer   Game_DTG    # integer function

integer          arg_len[number_args], k
vaxcharacter*80  args[number_args], params

integer   game_number
character  msg[ARB]
VMSCHAR*ARB bbname
integer   error
integer   next_cycle, delay_time, next_record_interval
integer nl

integer   msg1_len
character msg1[80]
vaxcharacter*80  v_msg1
Equivalence  (msg1, v_msg1)

  call initR4

  call who_am_i (game_number, bbname)
  BBmap (bbname)
  call check_version (error, msg)

  if (msg[1] != EOS)
    call remark (msg)
  if (error == YES)
    call exit
  
  call help_pgm(0,
              "pgafuel: Current ship fuel state",
              "pgafuel Tags: pga, blackboard, fuel",
              "Usage: pgafuel",
              "",
              "",
              "",
              "",
              "Example: pgafuel")

  call Init_Collection_File

  call write_ship_fuel_state
  
  close (output_unit)

end



subroutine who_am_i (igame, bbname)
###########################################################
#$%
#$% Purpose:   WHO_AM_I allows user to start a game using
#$%            a command line input
#$%
###########################################################

character  buf[30]
integer    k,ic, igame, CTOI, GETARG_  # jb E2145  6/1/00
VMSCHAR*(*) BBname             # jb E2144  (Re: BBSmap & MAKE_..) 8/3/00

igame = 0
call make_CSF_bb_name (igame,$$BBNAME,bbname)

end


Subroutine Init_Collection_File
#########################################################################
#$%
#$% Purpose:    Init_Collection_File will open the data collection file
#$%             and write the scenario information.
#$%
#$% Called By:  collect_load_stats
#$%
#$% Calls:      smov..
#$%             open
#$%             echo..
#$%             exit
#$%             write
#$%
#$% Tables:     global variables
#$%
#$% Date:       Aug 2014
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
BBcommon

integer  interval    # interval at which data is to be collected
integer  Game_DTG    # integer function
integer  record_interval # Interval at which data is to be recorded 
integer    name_len
character  file_name[ARB]
vmschar*ARB file_name_v
equivalence (file_name, file_name_v)
integer    return_val, msg_len
character  msg[80]
vaxcharacter*80 v_msg

Equivalence  (msg, v_msg)

name_len = 0
call smovhn (Scenario$Name, $$MaxLit, file_name, name_len)
call smovv  ("_shipfuel.dat", file_name, name_len)
call smov   (EOS, file_name, name_len)
open (unit   = output_unit,  file   = file_name_v, 
      iostat = return_val, recl = 120*4,   status = 'unknown')
if (return_val != 0)
{
 call echov ("Output file not opened")
 call echor
 call exit
}

call echov ("Output file is ")
call echohn (file_name, 20)
call echor

return
end

Subroutine write_ship_fuel_state
BBcommon

literal cstrip8, reportcode2text
vmschar vstrip*ARB
BBDeclare (unt$pointer, unt$fullname$v, unt$type$i, shc$pointer, wet$pointer)
BBDeclare (shc$tnk$index, unt$tnk$index)
integer Game_dtg
integer iview
integer course
integer msg_len
integer i, kk
character msg[120]
vaxcharacter*120  v_msg
Equivalence  (msg, v_msg)

msg_len = 0
call smovv ("Blue Ship Fuel State at ", msg, msg_len)
call smoviz(Game_DTG(Game$Time), 6, msg, msg_len)
call smovv ("Z during exercise ", msg, msg_len)
call smovhn (Scenario$Name, $$MaxLit, msg, msg_len)
write (output_unit, fmt=*) v_msg[1:msg_len]

# unit name, long name, hull number,
# ship fuel capacity, on-hand,
# aviation fuel capacity, on-hand
# course, speed, wave height, wave direction

msg_len = 0
call smovv ("                                          ", msg, msg_len)
call smovv ("         Ship         ", msg, msg_len)
call smovv ("       Aviation        ", msg, msg_len)
call smovv ("Ship    Wave", msg, msg_len)
write (output_unit, fmt=*) v_msg[1:msg_len]

msg_len = 0
call smovv ("  Name         Ship Name          Hull     ", msg, msg_len)
call smovv ("Capacity   On-hand     ", msg, msg_len)
call smovv ("Capacity   On-hand  ", msg, msg_len)
call smovv ("CRS SPD HGT DIR", msg, msg_len)
write (output_unit, fmt=*) v_msg[1:msg_len]

msg_len = 0
call smovv ("-------- ------------------------ ------  ", msg, msg_len)
call smovv ("---------- ---------- ", msg, msg_len)
call smovv ("---------- ---------- ", msg, msg_len)
call smovv ("--- --- --- ---", msg, msg_len)
write (output_unit, fmt=*) v_msg[1:msg_len]

for (UNT$Pointer$First; UNT$Pointer$OK; UNT$Pointer$Next)
{
	if (Xunt$Status$i == $BeingDeleted$Code) next

	# Select Blue 3 and 4
	if (Xunt$View$i != $FirstBlue$View + 2 & Xunt$View$i != $FirstBlue$View + 3) next

	# Select Ships
	UNT$Type$i = xUNT$Type$i
	if (UNT$Type$i != $Surface$code & UNT$Type$i != $SurfaceWithAC$code & UNT$Type$i != $Sub$code) next

	shc$pointer = Xunt$SHCpntr$i

	msg_len = 0
	call smovh (Xunt$name$c, $$MaxLit, msg, msg_len)
	call smovv (" ", msg, msg_len)
	unt$FullName$v = Xunt$FullName$v
	kk = msg_len
	call smovv (unt$FullName$v, msg, msg_len)
	kk = 24 - (msg_len - kk) + 1
	for (i=1; i<=kk; i=i+1)
		call smovv (" ", msg, msg_len)

	kk = msg_len
	if (Xunt$HullNumber$i > 0)
	{
		call smovvn (Xunt$HullType$v, msg, msg_len)
		call smoviz (Xunt$HullNumber$i, 3, msg, msg_len)
	}
	kk = 7 - (msg_len - kk) + 1
	for (i=1; i<=kk; i=i+1)
		call smovv (" ", msg, msg_len)

	shc$tnk$index = ShipFuelTank$Index
	call smovib (int(Xshc$TNK$Capacity$f), 10, msg, msg_len)
	call smovv (" ", msg, msg_len)

	unt$tnk$index = ShipFuelTank$Index
	call smovib (int(Xunt$TNK$FuelRemaining$f), 10, msg, msg_len)
	call smovv (" ", msg, msg_len)

	shc$tnk$index = AviationFuelTank$Index
	call smovib (int(Xshc$TNK$Capacity$f), 10, msg, msg_len)
	call smovv (" ", msg, msg_len)

	unt$tnk$index = AviationFuelTank$Index
	call smovib (int(Xunt$TNK$FuelRemaining$f), 10, msg, msg_len)
	call smovv (" ", msg, msg_len)

	call smovib (int(Xunt$TrueCourse$f * $rad2deg), 3, msg, msg_len)
	call smovv (" ", msg, msg_len)

	call smovib (int(Xunt$TrueSpeed$f), 3, msg, msg_len)
	call smovv (" ", msg, msg_len)

	call fndwet (Xunt$TrueLatitude$f, Xunt$TrueLongitude$f, wet$pointer)

	call smovib (Xwet$WaveHeight$i, 3, msg, msg_len)
	call smovv (" ", msg, msg_len)

	call smovib (int(Xwet$WaveDirection$f * $rad2deg), 3, msg, msg_len)
	call smovv (" ", msg, msg_len)

	write (output_unit, fmt=*) v_msg[1:msg_len]
}

return
end
