##### FILE: STFLGHT.RAT
 
#$%
#$%   FLOWCHART FOR STFLGHT IS IN STFLGHT.HIR
#$%   =======================================
#$%
 
include "bbcode.inc"                                  # blackboard defines
include "bbctl.inc"
include "ascii.inc"                                   # include ascii constants
include "bbrte.inc"
include "bbrto.inc"
include "bbunt.inc"
include "bbord.inc"
include "orders.inc"
include "plplay.inc"
include "stmain.inc"
 
define (BBimplicit, IMPLICIT NONE)
define ($low$order$key,ikey2)
 
 
Subroutine ATOSTA
 
#################################################################
#$%
#$% Purpose:   FLTSTA controls display of the flight status board.
#$%
#$% Called By: STDISP
#$%
#$% Calls:     FLTTIT     FLTFLT
#$%
#$% Tables:    None
#$%
#$% Date:      26 JAN 82
#$%
#$% Author:    F. Jones
#$%
#################################################################
BBcommon
STATUScommon
 
#$% displays titles
call ATOTIT
 
#$% displays flight status data
call ATOFLT
 
return
end
 

 
 
Subroutine ATOTIT
 
######################################################################
#$%
#$% Purpose:   ATOTIT generates the titles for the ATO status board.
#$%
#$% Called By: ATOSTA
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      AUG 07
#$%
#$% Author:    James O. Allen
#$%
######################################################################
BBcommon
STATUScommon
 
integer Game_DTGs
 
#$% prepare next line as defined in stmain.inc
$prepare$next$line
 
#$% display flight status board titles
$column  1 ; $OutV("View: ") ; $OutH(nmvue,5)
 
$column 17 ; $OutV("ATO MISSIONS AWAITING LAUNCH [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
 
$column 61 ; $OutV("Game Time: ") ; $OutIZ(Game_DTGs(igmin),8)
 
return
end
 

 
 
Subroutine ATOFLT
 
####################################################################
#$%
#$% Purpose:   ATOFLT executes ATO status board display
#$%            subroutines.
#$%
#$% Called By: ATOSTA
#$%
#$% Calls:     ATOHED     ATOENT
#$%            NXTORD     ATONUN
#$%
#$% Tables:    None
#$%
#$% Date:      AUG 07
#$%
#$% Author:    James O. Allen
#$%
###################################################################
BBcommon
STATUScommon
 
Integer ifound,  ord$Pointer
 
#$% display heading
call ATOHED
 
#$% exit if status board full
$exit$on$overflow
 
#$% initialize test flag
ifound = $no
 
repeat
   {
   #$% get next flight entry
   call NXTORD(ord$pointer)
 
   #$% if none, break loop
   if (ord$pointer == 0) break
 
   #$% set flag
   ifound = $yes
 
   #$% get flight data
   call ATOENT(ord$pointer)
 
   #$% exit if status board full
   $exit$on$overflow
   }
 
#$% if no entries, display "no entries" message
if (ifound == $no)  call ATONUN
 
return
end
 

 
 
Subroutine ATOHED
 
########################################################################
#$%
#$% Purpose:   ATOHED generates the headings for the ATO status board.
#$%
#$% Called By: ATOSTA
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      AUG 07
#$%
#$% Author:    James O. Allen
#$%
#########################################################################
BBcommon
STATUScommon
 
Integer ilen
 
#                      1         2         3         4         5         6         7
#            01234567890123456789012345678901234567890123456789012345678901234567890123456789
string MSG2 " TOT     BASE  ATOID MISSION# CALLSIGN AC/CM T N  MISN  PRETGT"
string MSG3 "------ -------- ---- -------- -------- ------- -- -----   -"
 
ilen = 0;  call smovh (MSG2, ARB, IPAGE[1,2], ilen)
 LINLEN[2] = ilen
ilen = 0;  call smovh (MSG3, ARB, IPAGE[1,3], ilen)
 LINLEN[3] = ilen
 
 #$% set line counter
 LINCNT = 3
 
return
end
 

 
Subroutine NXTORD(nxtpnt)
 
#################################################
#$%
#$% Purpose:   NXTORD locates next ATO entry in ORD table.
#$%
#$% Called By: ATOSTA
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    ORD     UNT
#$%
#$% Date:      AUG 07
#$%
#$% Author:    James O. Allen
#$%
###################################################
BBcommon
StatusCommon
 
literal keys[2],lowest[2], CSTRIP8
literal itot[2]
real tot
Integer nxtpnt,irsult,UNT$Pointer, kk, game_dtg
integer ordpntr, i, icnt
BBDeclare (ord$Pointer, ord$Unit$I, ord$start$i, ord$Code$i)
 
 
#$% get highest ascii
lowest[1] = $highest$ascii
lowest[2] = $highest$ascii
 
#$% if only one, save lowest, else save key
if (ikey  == 1) keys[1] = $lowest$ascii
else            keys[1] = ikey
keys[2] = ikey2
 
#$% initialize pointer
nxtpnt = 0
 
#$% search ORD table
for_all_ok (ord)
   {
    ord$Code$i = Xord$Code$i
    if (ord$Code$i != LAUNCH$order &
        ord$Code$i != FIRECRUISE$order &
        ord$Code$i != LAUNCHC$order) next
 
    if (Xord$Sequence$i != 1) next      # Scramble always first order
 
    if (ord$Code$i == LAUNCH$order | ord$code$i == LAUNCHC$order)
        if (Xord$NbrArgs$i < 9 ) next      # ATO Scramble has 9 arguments
 
    if (ord$Code$i == FIRECRUISE$order)
        if (Xord$NbrArgs$i < 9 ) next
 
    if (ord$Code$i == FIRECRUISE$order)
        if (Xord$W09$c != $lex$mission$) next
 
    UNT$pointer$to Xord$addindx$i
 
    if (!unt$pointer$valid) next        # Launching platform
 
    #$% exclude units that are being deleted
    if (xUNT$Status$i == $BeingDeleted$Code) next
 
    #$% if not same view, get next
    if (xunt$View$i != iview) next
 
    if (ord$Code$i == LAUNCH$order | ord$code$i == LAUNCHC$order)
        if (Xord$W06$c != $lex$ATOID$) next     # Skip non ato launch orders
 
    ordpntr = ord$pointer
 
    ord$start$i = Xord$start$i
 
    icnt = min(15, Xord$count$i)         # Only look at first 15 orders
 
    # look for mission order in flight plan
    for (i = 2; i <= icnt; i = i + 1)
    {
        ord$pointer$next
        if (!ord$pointer$ok) break
 
        if (Xord$PAT$i == $YES)
        {
            ord$start$i = Xord$Start$i
            break
        }
    }
 
    ord$pointer = ordpntr
 
    tot = ord$Start$i
    itot[1] = $BLANKLIT
    kk = 0
    call smoviz(Game_DTG(tot),6,itot[1],kk)
 
    if (ord$Code$i == LAUNCH$order | ord$code$i == LAUNCHC$order)
        itot[2] = Xord$W05$c                # Mission number
    else if (ord$Code$i == FIRECRUISE$order)
        itot[2] = Xord$W10$c                # Mission number
 
    #$% compare flight to keys
    call COMPAR(2,itot,keys,irsult)
 
    if (irsult <  0) next                       # less than keys
 
    if (irsult == 0)                            # found exact match
       {
        #$% save pointer
        nxtpnt = ord$pointer
        return
       }
 
    #$% compare flight to lowest
    call COMPAR(2,itot,lowest,irsult)
 
    if (irsult > 0) next                        # larger than lowest found
 
    lowest[1] = itot[1]                         # at this point, have
    lowest[2] = itot[2]                         # best candidate so far
 
    #$% save pointer
    nxtpnt = ord$pointer
   }
 
#$% save lowest key
ikey  = lowest[1]
ikey2 = lowest[2]
 
return
end
 

 
 
Subroutine ATOENT(ordpntr)
 
#####################################################
#$%
#$% Purpose:   ATOENT generates data for each ATO mission.
#$%
#$% Called By: ATOSTA
#$%
#$% Calls:     SMOVH      ATOSTA
#$%            SMOVIB     SMOVIZ
#$%
#$% Tables:    UNT    ORD
#$%
#$% Date:      AUG 07
#$%
#$% Author:    James O. Allen
#$%
######################################################
BBcommon
STATUScommon
 
Literal igide, MISSN
Literal Astab_Mission       # external function 12/21/89
LITERAL UNT$Name$C, CSTRIP8, mission_number, actype
literal iinp[$order$array$size]
REAL*4  OWN$Latitude$F,OWN$Longitude$F, UNT$TrueCourse$F,
        UNT$TrueLatitude$F,UNT$TrueLongitude$F
integer IC, COURSE,
        istat, ispeed,irange,
        OWN$GuideBearing$I,OWN$Course$I,OWN$Altitude$I,
        OWN$Mission$I,OWN$PercentFuel$I,OWN$Status$I,
        UNT2$Pointer, UNT$Pointer,UNT$Mission$I, ordpntr
BBDeclare (ord$pointer, ord$wrd$index, ord$start$i, ord$Code$i)
BBDeclare (rto$pointer, rto$wrd$index)
BBDeclare (rte$pointer)
integer missionCode, strikeFound, icnt, i, k, kk
integer Game_DTG
real    tot
integer look_back, delta_minutes, lead_min
integer fndrte, indxrte
integer iseq, ilen
 
 
ord$pointer = ordpntr
 
ord$Code$i = Xord$Code$i
 
# Format cruise missile entry
if (ord$Code$i == FIRECRUISE$order)
{
    call atoent_cm(ordpntr)
    return
}
 
#$% test and exit on full status board, save line count
$test$next$line ; $exit$on$overflow
$save$line$count
$update$keys
 
#$% prepare next line as defined in stmain.inc
$prepare$next$line
 
#    1                 2                       3         4                   5
# SCRAMBLE (number) <number> (of type) <aircraft-type> MISSION (number) <launch-event>
#       6                     7                8              9
# [ | CALLSIGN (callsign) <launch-event> [ | ATOID (ato id) <name> ]
#       6            7           8                      9
# | ATOID (ato id) <name> [ | CALLSIGN (callsign) <launch-event> ]
 
 
#                       1         2         3         4         5         6         7
#             01234567890123456789012345678901234567890123456789012345678901234567890123456789
#string MSG2 " TOT     BASE  ATOID MISSION# CALLSIGN AC TYPE N  MISN  PRETGT"
#string MSG3 "------ -------- ---- -------- -------- ------- -- -----   -"
 
# Find mission and strike orders in flight plan
 
#$% get ac type
k = 0
actype = $BLANKLIT
call SMOVHN (Xord$W03$c,$$MAXname,actype,k)
if (actype == 'EP3E' | actype == 'P3C' | actype == 'P3CA')
    lead_min = 240
else
    lead_min = 240
 
ord$start$i = Xord$start$i + lead_min       # Convert lead time to time on tgt
 
missionCode = $NoneAssigned$Code
strikeFound = 'N'
 
#$% get ato mission number
k = 0
mission_number = $BLANKLIT
call SMOVHN (Xord$W05$c,$$MAXname,mission_number,k)
 
indxrte = fndrte(mission_number)
if (indxrte > 0)
{
    rte$pointer$to indxrte
 
    rto$pointer = Xrte$rtoPntr$i
    rto$wrd$index = 7               # Number of sub-orders
    icnt = Xrto$wrd$$c
 
    repeat
    {
        rto$wrd$index = 6           # sub-order sequence number
        iseq = Xrto$wrd$$c
        ilen = Xrto$NbrArgs$i
        for (i=1; i<= ilen; i = i + 1)
        {
            rto$wrd$index = i
            iinp[i] = Xrto$wrd$$c
        }
        if ($ord$num == MissionAir$order)
        {
            call Lex_to_Mission_Code (iinp[7+2], missionCode)
        }
        else if ($ord$num == strike$order)
            strikeFound = 'Y'
 
        rto$pointer = rto$pointer + rto$entry
    } until (iseq >= icnt)
}
 
IBYTE = 0
 
tot = ord$Start$i
call smoviz(Game_DTG(tot),6,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 7
#$% move base to the IPAGE array
call SMOVH (Xord$Addressee$C,$$MAXname,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 16
 
#$% move callsign to the IPAGE array
if (Xord$W06$c == $lex$atoid$)
    call SMOVH (Xord$W07$c,4,IPAGE[1,LINCNT],IBYTE)
else if (Xord$W08$c == $lex$atoid$)
    call SMOVH (Xord$W09$c,4,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 21
 
#$% move ato mission number to the IPAGE array
call SMOVH (Xord$W05$c,$$MAXname,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 30
 
#$% move callsign to the IPAGE array
if (Xord$W06$c == $lex$callsign$)
    call SMOVH (Xord$W07$c,$$MAXname,IPAGE[1,LINCNT],IBYTE)
else if (Xord$W08$c == $lex$callsign$)
    call SMOVH (Xord$W09$c,$$MAXname,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 39
 
#$% move ac type to the IPAGE array
call SMOVH (Xord$W03$c,$$MAXname,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 47
 
#$% move number of aircraft to the IPAGE array - check validity of ord$pointer
if (ord$Code$i == LAUNCH$order | ord$Code$i == LAUNCHC$order)
    call SMOVIB (int(Xord$W02$c),2,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 50
 
if (missionCode != $noneassigned$code) # unit assigned a mission?
{
    Missn = astab_mission(missionCode)
 
    #$% Move mission to the IPAGE array
    call SMOVH(_
            MISSN,         # yes, get ascii chars
            5,             # jb Note: 5 characters frm function ASTAB_MISSION..
            IPAGE[1,LINCNT],
            IBYTE)
}                                   # for mission   endif
 
IBYTE = 58
 
#$% move targeting in ATO flag to the IPAGE array
call SMOVH (strikeFound,1,IPAGE[1,LINCNT],IBYTE)
 
LINLEN[LINCNT] = IBYTE               # set line length
 
return
end
 

 
 
Subroutine ATOENT_CM(ordpntr)
 
#####################################################
#$%
#$% Purpose:   ATOENT_CM generates data for each ATO cruise missile mission.
#$%
#$% Called By: ATOSTA
#$%
#$% Calls:     SMOVH      ATOSTA
#$%            SMOVIB     SMOVIZ
#$%
#$% Tables:    UNT    ORD
#$%
#$% Date:      AUG 10
#$%
#$% Author:    James O. Allen
#$%
######################################################
BBcommon
STATUScommon
 
Literal igide, MISSN
Literal Astab_Mission       # external function 12/21/89
LITERAL UNT$Name$C, CSTRIP8, mission_number, actype
literal iinp[$order$array$size]
REAL*4  OWN$Latitude$F,OWN$Longitude$F, UNT$TrueCourse$F,
        UNT$TrueLatitude$F,UNT$TrueLongitude$F
integer IC, COURSE,
        istat, ispeed,irange,
        OWN$GuideBearing$I,OWN$Course$I,OWN$Altitude$I,
        OWN$Mission$I,OWN$PercentFuel$I,OWN$Status$I,
        UNT2$Pointer, UNT$Pointer,UNT$Mission$I, ordpntr
BBDeclare (ord$pointer, ord$wrd$index, ord$start$i)
BBDeclare (rto$pointer, rto$wrd$index)
BBDeclare (rte$pointer)
integer missionCode, strikeFound, icnt, i, k
integer Game_DTG
real    tot
integer look_back, delta_minutes, lead_min
integer fndrte, indxrte
integer iseq, ilen
 
#$% test and exit on full status board, save line count
$test$next$line ; $exit$on$overflow
$save$line$count
$update$keys
 
#$% prepare next line as defined in stmain.inc
$prepare$next$line
 
#    1                 2                       3         4                   5
# SCRAMBLE (number) <number> (of type) <aircraft-type> MISSION (number) <launch-event>
#       6                     7                8              9
# [ | CALLSIGN (callsign) <launch-event> [ | ATOID (ato id) <name> ]
#       6            7           8                      9
# | ATOID (ato id) <name> [ | CALLSIGN (callsign) <launch-event> ]
 
#   1      2      3       4              5    6          7          8
# FIRE <number> <name> CRUISE (missiles) AT POSITION <latitude> <longitude>
 
#    9                   10
# MISSION (number) <launch-event>
 
 
#                       1         2         3         4         5         6         7
#             01234567890123456789012345678901234567890123456789012345678901234567890123456789
#string MSG2 " TOT     BASE  ATOID MISSION# CALLSIGN AC TYPE N  MISN  PRETGT"
#string MSG3 "------ -------- ---- -------- -------- ------- -- -----   -"
 
ord$pointer = ordpntr
 
# Find mission and strike orders in flight plan
 
#$% get ac type
k = 0
lead_min = 0
 
ord$start$i = Xord$start$i + lead_min       # Convert lead time to time on tgt
 
missionCode = $NoneAssigned$Code
strikeFound = 'Y'
 
IBYTE = 0
 
tot = ord$Start$i
call smoviz(Game_DTG(tot),6,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 7
#$% move base to the IPAGE array
call SMOVH (Xord$Addressee$C,$$MAXname,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 16
 
#$% move atoid to the IPAGE array
 
IBYTE = 21
 
#$% move ato mission number to the IPAGE array
call SMOVH (Xord$W10$c,$$MAXname,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 30
 
#$% move callsign to the IPAGE array
 
IBYTE = 39
 
#$% move cm type to the IPAGE array
call SMOVH (Xord$W03$c,$$MAXname,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 47
 
#$% move number of aircraft to the IPAGE array - check validity of ord$pointer
if (Xord$Code$i == FIRECRUISE$order)
    call SMOVIB (int(Xord$W02$c),2,IPAGE[1,LINCNT],IBYTE)
 
IBYTE = 50
 
if (missionCode != $noneassigned$code) # unit assigned a mission?
{
    Missn = astab_mission(missionCode)
 
    #$% Move mission to the IPAGE array
    call SMOVH(_
            MISSN,         # yes, get ascii chars
            5,             # jb Note: 5 characters frm function ASTAB_MISSION..
            IPAGE[1,LINCNT],
            IBYTE)
}                                   # for mission   endif
 
IBYTE = 58
 
#$% move targeting in ATO flag to the IPAGE array
call SMOVH (strikeFound,1,IPAGE[1,LINCNT],IBYTE)
 
LINLEN[LINCNT] = IBYTE               # set line length
 
return
end
 

 
 
Subroutine ATONUN
 
##########################################################################
#$%
#$% Purpose:   ATONUN displays message if there are no ATO missions in this view.
#$%
#$% Called By: ATOSTA
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      AUG 07
#$%
#$% Author:    James O. Allen
#$%
##########################################################################
BBcommon
STATUScommon
 
#$% test and exit on full board
$test$next$line ; $exit$on$overflow
 
$prepare$next$line
 
#$% display "no entries"  message
$column 1 ; $OutV("No ATO missions in this view")
 
return
end
