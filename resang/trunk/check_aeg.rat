include "ascii.inc"
include "bbctl.inc"
include "bbcode.inc"
include "macros.inc"
include "bbaeg.inc"
include "bbshc.inc"
include "bbunt.inc"
 
define (aeg$common,
	integer slot_ref_count[AEG$SLOTS]

	common /aegcommon/ slot_ref_count
)
 
program check_aeg
#######################################################
#$%
#$% Purpose:   Check for loops and lost entries in AEG table
#$%            Report errors
#$%
#$% Called By: None
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      May 15
#$%
#$% Author:    James Allen
#$%
#######################################################
 
BBcommon
aeg$common
data slot_ref_count/AEG$Slots*0/
integer freelistOK, untlistOK
data freelistOK/YES/
data untlistOK/YES/
 
call initr4                 #$% initialize RATFOR environment
 
BBmap                       #$% map in the BB global section

print *, "Checking free list..." 
call check_free_list(freelistOK)

print *, "Checking unt aeg list..."  
call check_unt_aeg_list(untlistOK)

if (freelistOK == YES & untlistOK == YES)
{
	print *, "Checking missing slots..."  
	call check_missing_slots
}
 
end

 
subroutine check_free_list(freelistOK)
bbcommon
aeg$common
BBdeclare(aeg$pointer)
integer freelistOK
integer indx
for (aeg$pointer$to AEGIS$First$Free; aeg$pointer$OK; aeg$pointer$to Xaeg$NextIndex$i)
{
	indx = aeg$pointer$index
	if (!aeg$pointer$OK)
	{
		freelistOK = NO
		print *, "AEG pointer ", aeg$pointer, " is out of range. Index is ", indx
		break
	}

	slot_ref_count[indx] = slot_ref_count[indx] + 1
	if (slot_ref_count[indx] > 1)
	{
		freelistOK = NO
		print *, "AEG pointer ", aeg$pointer, " has multiple references. Index is ", indx
		break
	}
}
return
end


 
subroutine check_unt_aeg_list(untlistOK)
bbcommon
aeg$common
BBdeclare(aeg$pointer, unt$pointer, shc$pointer)
integer untlistOK
integer indx
for (unt$pointer$first; unt$pointer$ok; unt$pointer$next)
{
	if (Xunt$Type$i != $Surface$code) next
	shc$pointer = Xunt$SHCPntr$i
	if (Xshc$AegisType$i == NO) next

	if (Xunt$FirstAEGIndex$i == 0) next

	for (aeg$pointer$to Xunt$FirstAEGIndex$i; aeg$pointer$OK; aeg$pointer$to Xaeg$NextIndex$i)
	{
		indx = aeg$pointer$index
		if (!aeg$pointer$OK)
		{
			untlistOK = NO
			print *, "AEG pointer ", aeg$pointer, " is out of range. Index is ", indx
			break
		}

		slot_ref_count[indx] = slot_ref_count[indx] + 1
		if (slot_ref_count[indx] > 1)
		{
			untlistOK = NO
			print *, "AEG index ", indx, " has multiple references."
			print *, "   UNT index ", unt$pointer$index 
			break
		}
	}
}
return
end


 
subroutine check_missing_slots
bbcommon
aeg$common
BBdeclare(aeg$pointer)
integer indx, islots

islots = aeg$used/aeg$entry
for (indx = 1; indx <= islots ; indx = indx + 1)
{
	if (slot_ref_count[indx] == 0)
	{
		print *, "AEG slot ", indx, " has no references."
	}
}
print *, "AEG used slots = ",islots
return
end

 
