include "wgmdrej.inc"               # REJ specific definitions... # DEW 9/4/90
 
include "parallel.inc"
include "bbctl.inc"                 # Control Section
include "bbcode.inc"                # Variables and Constants
include "bbacc.inc"                 # Aircraft Characteristics
include "bbbar.inc"                 # Barrier Table
include "bbboy.inc"                 # Buoy Table
include "bbchf.inc"                 # jb Chaff Characteristics    7/31/90
include "bbcjc.inc"                 # Comms Jammer Characteristics GGG 4/18/88
include "bbcmc.inc"                 # Cruise Missle Characteristics
include "bbdeq.inc"                 # Dynamic Equipment Table REH 3/89
include "bbesm.inc"                 # ESM Table
include "bbsui.inc"                 # SUI Table
include "bbjam.inc"                 # Radar Jammer Characteristics
include "bbrad.inc"                 # Radar Table
include "bbrel.inc"                 # Recognized Emitter List Table
include "bbshc.inc"                 # Ship Characteristics
include "bbsta.inc"                 # Station Characteristics
include "bbunt.inc"                 # Unit Table
include "bbwet.inc"                 # Weather Table 4/21/83
include "bbjew.inc"            # jecewsi - JFR 8/31/94
include "gcgam.inc"
include "ascii.inc"
include "elevation.inc"
 
define (BBimplicit, Implicit None)
undefine (write)
define (err, -3)   # alsp.inc undefines it - who_am_i uses it
 
define (number_args, 1)
define (output_unit, 10)
 

subroutine radarCoverageEnvelope(_
                                sta$pointer,
                                sta$SEN$index,
                                rLAT,             # Output
                                rLON,
                                nV,
                                color)
BBcommon
RMcommon
 
BBDeclare (sta$pointer, sta$SEN$index)
real    rLAT[180]
real    rLON[180]
real    rCOSi[180]
 
integer nv, color, i
 
Literal         CSTRIP8
BBDeclare (unt$pointer, rad$pointer, acc$pointer, deq$pointer)
BBDeclare (unt$TrueLatitude$f, unt$TrueLongitude$f)
BBDeclare (sta$SEN$DEQIndx$i,
           sta$SEN$TgtType$i,
           sta$SEN$Color$i,
           sta$SEN$UntIndx$i,
           sta$SEN$RelativeCourse$i,
           sta$SEN$TgtAltDepth$i,
           sta$SEN$ProbDet$i,
           sta$SEN$PlotJammed$i,
           sta$SEN$AccPntr$i,
           sta$SEN$CMCpntr$i,
           sta$SEN$ShcPntr$i)
 
real radhgt
integer tgtType
integer tgtClass
real tgtbrg
real tgtcrs
real tgthgt
real tgtrng
real tgtrngjam
real rnglos
real rnghor
real rng
real brng
real rcos
real headng
 
integer noduct
integer degbrg
 
sta$SEN$DEQIndx$i       = Xsta$SEN$DEQIndx$i
sta$SEN$TgtType$i       = Xsta$SEN$TgtType$i
sta$SEN$Color$i         = Xsta$SEN$Color$i
sta$SEN$UntIndx$i       = Xsta$SEN$UntIndx$i
sta$SEN$RelativeCourse$i= Xsta$SEN$RelativeCourse$i
sta$SEN$TgtAltDepth$i   = Xsta$SEN$TgtAltDepth$i
sta$SEN$ProbDet$i       = Xsta$SEN$ProbDet$i
sta$SEN$PlotJammed$i    = Xsta$SEN$PlotJammed$i
sta$SEN$AccPntr$i       = Xsta$SEN$AccPntr$i
sta$SEN$CMCpntr$i       = Xsta$SEN$CMCpntr$i
sta$SEN$ShcPntr$i       = Xsta$SEN$ShcPntr$i
 
unt$pointer$to sta$SEN$UntIndx$i
deq$pointer$to sta$SEN$DEQIndx$i
rad$pointer = Xdeq$Pntr$i
radhgt = sqrt(float(Xdeq$AntHeight$i + Xunt$TrueAltDepth$i))
 
tgtType = sta$SEN$TgtType$i
if      (sta$SEN$TgtType$i == $air$code)           tgtClass = sta$SEN$ACCPntr$i
else if (sta$SEN$TgtType$i == $CruiseMissile$code) tgtClass = sta$SEN$CMCPntr$i
else if (sta$SEN$TgtType$i == $Surface$code)       tgtClass = sta$SEN$SHCPntr$i
 
tgtcrs = sta$SEN$RelativeCourse$i * $deg2rad + Xunt$TrueCourse$f
$ang2pi(tgtcrs)
tgthgt = sqrt(float(sta$SEN$TgtAltDepth$i))
noduct = $no
 
if (sta$SEN$PlotJammed$i == $yes)
{
    # Build list of jammers
    call jamlst(_
                UNT$pointer,          # in,owner of victim radar
                RAD$pointer,          # in
                radhgt)               # in, SQUARE-ROOT!!
}
else
{
    kjammr = 0
}
 
unt$TrueLatitude$f = Xunt$TrueLatitude$f
unt$TrueLongitude$f = Xunt$TrueLongitude$f
 
for (degbrg = 2; degbrg <= 360; degbrg = degbrg + 2)
{
    tgtbrg = degbrg * $deg2rad
    call raddetrng (unt$pointer,           # Detector
                 rad$pointer,           # Radar
                 radhgt,                # sqrt(detector height(ft))
                 tgtType,               # AIR, CRUISE, SHIP
                 tgtClass,              # Target Class
                 tgtcrs,                # Target Course(rad)
                 tgtbrg,                # target bearing(rad)
                 tgthgt,                # sqrt(target height(ft))
                 noduct,                # ducting flag; $yes = no ducting
                 tgtrng,                # Out: 50% detection range(nm)
                 tgtrngjam,             # Out: 50% detection range(nm) with jam
                 rnghor,
                 rnglos)
 
    Rng = min(tgtrng, tgtrngjam, rnghor, rnglos)
 
    HEADNG = 000.           # (Set so that input rel. brg = true brg)
    rcos  = cos(unt$TrueLatitude$f)
 
    i = degbrg / 2
 
    rcosi[i] = rcos
    rLAT[i] = unt$TrueLatitude$f
    rLON[i] = unt$TrueLongitude$f
 
    Call RRB2LL( _            #Rhumb line Range/Bearing to Lat/Lon
                   rLAT[i],     # latitude (input & output)
                   rLON[i],     # longitude (input & output)
                   rng,         # range (input)
                   degbrg*$deg2rad,      # relative bearing (input)
                   HEADNG,      # ref. bearing (input) = 0.0
                   rcosi[i])    #cosine of latitude (input & output)
 
    rlat[i] = rLAT[i] * $rad2deg
    rlon[i] = rLON[i] * $rad2deg
}
 
nv=180
color = sta$SEN$Color$i
 
return
end
 

# radar detection
 
 Subroutine raddetrng(UNT$pointer,               # detectOR
                   RAD$pointer,
                   radhgt,              # SQRT of detector height (feet)   # joa 11/95 (E1422)
                   itarg_type,
                   tgtcls,
                   tgtcrs,
                   tgtbrg,
                   tgthgt,              # SQRT of target height (feet)     # joa 11/95 (E1422)
                   noduct,
                   tgtrng,
                   tgtrngjam,
                   rnghor,
                   rnglos)
 
 #######################################################
 #$%
 #$% Purpose:   RADDET processes radar detections
 #$%            of aircraft, cruise missiles, and
 #$%            ships.
 #$%
 #$% Called By: AIRTGT     SURTGT
 #$%
 #$% Calls:     QDB        ANGPI      QPOWER
 #$%            NLTEST     REPRAD     FNDWET            4/21/83
 #$%
 #$% Tables:    UNT        RAD        DEQ
 #$%            SHC
 #$%            ACC        CMC        WET               4/21/83
 #$%
 #$% Date:      JAN 81
 #$%
 #$% Author:    Ron Williams
 #$%
 #$% Important Note: If a change in the radar detection model
 #$%            is made in this routine, a corresponding change
 #$%            to the qt_draw_EMI_areas routine may be required !!
 #$%
 #$% Modifications:
 #$%    1/18/91  trs  added variable cross sections for cruise missiles
 #$%
 #$%             Jim Allen - 11/95 (E1422)
 #$%             Added radar and target height to the parameter list
 #$%             for los computations.  Added los computations.
 #$%
 #######################################################
 
 BBcommon
 RMcommon
 
Integer*4       los_test                            # Terrain blocking los function (E1422)
 
Real*4          radhgt
integer*4       tgtcls
Real*4          tgtcrs
Real*4          tgthgt
real*4          rnglos
 
Real*4          tcs                                 # 5/4/84
Integer*4       tcsxx                               # 3/27/91
Real*4          DCBLS                               # jb; for decibels 8/22/88
REAL*4          maxpwr                              # 5/4/89 reh
 
Integer*4       ACC$CRS$INDEX
Integer*4       ACC$Pointer
Integer*4       ACC$Vrblxs$i
Real*4          BRG
Integer*4       CJC$Pointer
Integer*4       CMC$Pointer
Integer*4       CMC$Vrblxs$i           # added for variable cruise xsect
Integer*4       CMC$ASP$INDEX          #                 1/18/91 trs
Literal         CSTRIP8
Real*4          DBFIG
Real*4          DBNOIS
Integer*4       DEQ$Ident$i
Integer*4       DEQ$Pntr$i
Integer*4       DEQ$Pointer
Integer*4       DEQ2$Pointer            # added for intra-ship EMI 9/90
Integer*4       DEQ3$Emiinterest$i
Integer*4       DEQ3$Pointer
Real*4          deq3$TimeWhenUse$f
Real*4          DIFF
Real*4          DUCTFC
Real*4          HDG
Integer*4       IDUMMY
Integer*4       IFLAG
Integer*4       IFLAG1
Integer*4       IFLAG2
Integer*4       INDEXX_MAX
Integer*4       INDXCRS
Integer*4       IndxASP
Integer*4       INTERFERENCE
Integer*4       INTERFERENCE_DBM
Integer*4       INTERFERENCE_MAX
Integer*4       INTERFERENCE_MODULATION
Integer*4       ITARG_TYPE
Integer*4       iUPI
Integer*4       I_SWITCH_1
Integer*4       I_TO_N_RATIO
Integer*4       JAM$Pointer
Integer*4       Jammer_Index
Integer*4       MAXINDX
Integer*4       N
Integer*4       NLTEST
Integer*4       NLTEST2
Integer*4       NODUCT
REAL*4          prob1
REAL*4          prob2
Real*4          R
Integer*4       RAD$Burnout$i
Integer*4       RAD$CH$INDEX
Integer*4       RAD$CH$ModulationCode$i
Integer*4       RAD$Pointer
Integer*4       RAD2$CH$INDEX
Integer*4       RAD2$Pointer
Real*4          RELBRG
Real*4          SE
Real*4          confidence_level
Real*4          SE2
Integer*4       SHC$Pointer
Integer*4       SUI$CH$INDEX
Integer*4       SUI$Pointer
Real*4          TGTBRG
Real*4          TGTRNG
Real*4          TGTRNGJAM
Integer*4       UNT$Pointer
Integer*4       UNT$View$i
Integer*4       UNT2$Pointer
Integer*4       UNT2$Type$i
Integer*4       UNT3$Pointer
BBDeclare       (unt$TrueLatitude$f, unt$TrueLongitude$f, unt$CosTrueLat$f)
BBDeclare       (unt2$TrueLatitude$f, unt2$TrueLongitude$f, unt2$CosTrueLat$f)
Real*4          VMU
Real*4          WAVES
Integer*4       WET$Pointer
Real*4          Z
Real*4           Det_Confidence       ## Detection confidence level 0-1
real*4          pf
real*4          hdgdum
real*4          rngmax
real*4          rnghor
 
unt2$type$i  = itarg_type
tcs = 0.0                                   # initialize    5/4/84
tcsxx = 0                                   # initialize    3/27/91
 
if (unt2$type$i == $air$code)               #if target = aircraft
{
    acc$pointer = tgtcls                    #get ptr into char table
 
    #$% -----------------------------------------------------------------
 
    acc$VrblXS$i = Xacc$VrblXS$i
    if(acc$VrblXS$i == $YES)    # Compute index if Cross-Sect is variable:
    {
        HDG = tgtcrs                        # Heading of target aircraft
        BRG = tgtbrg + $PI                  # brg from target a/c to radar
        if(BRG > $TWOPI) BRG = BRG - $TWOPI # adjust <= 360
 
        RelBrg = BRG - HDG                  # Rel. Brg. from a/c to radar
        $ANGPI(RelBrg)                      # Adjust so from -PI to +PI; THEN,
        if(RelBrg < 0.0) RelBrg = -1.0 * RelBrg    # 0 to +PI
 
        indxCRS = 1.5 + (6.* RelBrg/$PI)    # (same as equation above)
        acc$crs$index = min(indxCRS,acc$crs$slots)    # Over-cautious!
        tcsxx = acc$crs$index
    }
    else
    {
        acc$crs$index = 1  # jb (Index for NON-variable cross-section)
    }
 
    tcs = Xacc$CRS$sect$i
}
else if (unt2$type$i == $cruisemissile$code)     #if tgt is cruise missile
{
    CMC$Pointer = tgtcls                #get ptr into cr miss char
 
    CMC$VrblXS$i = xCMC$VrblXS$i
    if(CMC$VrblXS$i == $YES) # Compute index if Cross-Sect is variable:
    {
        HDG = tgtcrs                    # Heading of target aircraft
        BRG = tgtbrg + $PI              # brg from target a/c to radar
        if(BRG > $TWOPI) BRG = BRG - $TWOPI # adjust <= 360
 
        RelBrg = BRG - HDG              # Rel. Brg. from a/c to radar
        $ANGPI(RelBrg)                  # Adjust so from -PI to +PI; THEN,
        if(RelBrg < 0.0) RelBrg = -1.0 * RelBrg    # 0 to +PI
 
        IndxASP = 1.5 + (6.* RelBrg/$PI)# (same as equation above)
        CMC$ASP$index = min(IndxASP,CMC$ASP$slots)    # Over-cautious!
        tcsxx = cmc$asp$index
    }
    else # not variable cross section, value stored in first index
    {
        CMC$ASP$index = 1  # jb (Index for NON-variable cross-section)
    }
 
    tcs = xCMC$ASP$CrossSect$i
 
}    # End of insert for cruise variable cross-section
#$% -----------------------------------------------------------------
 
else if (unt2$type$i == $surface$code |     # if target = submarine
          unt2$type$i == $sub$code)         #  or = ship with ac
{
    shc$pointer = tgtcls                    # get ptr into char table
    tcs = xshc$crosssect$i                  # get target cross section
 
    if(unt2$type$i == $sub$code)
    {
        if (tgthgt*tgthgt >= Xshc$KeelDepth$i)
            tcs = Scope$DBM
    }
}
 
if (noduct == $yes)                         #if ducting not applicable
    ductfc = 1.0                            #set ducting factor to 1
else                                        #otherwise
    ductfc = ducting$factor                 #get duct factor
 
dbnois = xRAD$noisefigure$i                 #get radar noise figure
dbfig  = dbnois                             # Save noisefigure for comparison
maxpwr  = 0.0                               # Init max. effective jammer power
maxindx = 0                                 # Init index of max jammor
 
for (Jammer_Index=1;Jammer_Index<=kjammr;Jammer_Index=Jammer_Index+1)
{                                           #  impinging on this radar
    diff = tgtbrg - brgjam[Jammer_Index]
    $angpi(diff)                            # compare bearing with tgt
 
    if (abs(diff) <= $pi/18.)               # if jamming within 10 degs
    {
        dbnois = 10 **(dbnois/10.) + pwrjam[Jammer_Index]
        if(dbnois < 1.0) dbnois = 0.0        #jb (Protect
        ELSE dbnois = 10 * log10(dbnois)     # LOG10 function)
 
        if (pwrjam[Jammer_Index] > maxpwr) # If strongest jammer yet
        {
            maxindx = Jammer_Index                # Set strong-jammer index
            maxpwr = pwrjam[Jammer_Index]         #  and reset max. power
        }
    }
}    # End For all jammers which may impact this radar
 
# no sea clutter for air radar
if ( xRAD$RadarType$i != $air$code )
{
    call fndwet (xUNT$truelatitude$f,
                 xUNT$truelongitude$f,
                 wet$pointer)
 
    waves = float(xWET$WaveHeight$I) / 4.0         # Compute CLUT
    waves = float(clutter$factor) * sqrt(waves)    #      TER term
}
else # else surface clutter is not a consideration
{
    waves = 0.0                                    # assume no surface clutter
}
 
# get index of active channel for radar
call find_active_channel (UNT$Pointer,
                          $radar$code,
                          xRAD$Type$c,
                          RAD$CH$Index)
 
Det_Confidence = 0.5
se = Confidence_level(_          #Get signal excess given confidence level
                 xRAD$CH$signalexcessmean$f,    #mean (input)
                 7.0,                           #standard deviation (input)
                 Det_Confidence)                #confidence level (input) 0-1
 
#se = XRAD$CH$PF$i + tcs - waves - (4*ductfc*10*log10(tgtrng)) - dbnois
# 4*ductfc*db(tgtrng) = Xrad$ch$PF$i + tcs - waves - dbnois - se
# tgtrng =dbexp((Xrad$ch$PF$i + tcs - waves - dbnois - se)/(4*ductfc))
 
pf = Xrad$ch$PerformanceFactor$i
tgtrngjam = 10 **(((pf + tcs - waves - dbnois - se)/(4.0 * ductfc))/10.)
tgtrng = 10 **(((pf + tcs - waves - dbfig - se)/(4.0 * ductfc))/10.)
 
unt$TrueLatitude$f = Xunt$TrueLatitude$f
unt$TrueLongitude$f = Xunt$TrueLongitude$f
unt$CosTrueLat$f = Xunt$CosTrueLat$f
 
# Decrease range until within LOS or range = 0
rnghor = (radhgt + tgthgt) * 1.23            #horizon range
rngmax = Xrad$MaxRange$i
hdgdum = 0.
for (rnglos = 1.; rnglos <= min(rnghor, rngmax); rnglos = rnglos + 1.)
{
    unt2$TrueLatitude$f = unt$TrueLatitude$f
    unt2$TrueLongitude$f = unt$TrueLongitude$f
    unt2$CosTrueLat$f = unt$CosTrueLat$f
 
    call RRB2LL (UNT2$TrueLatitude$F, UNT2$TrueLongitude$F,
                    rnglos, tgtbrg,
                    hdgdum, UNT2$CosTrueLat$F)
 
    iflag1 = los_test(              # Uses GP terrain grid to determine LOS
            unt$TrueLatitude$f,     # Detector latitude: real: in: rad
            unt$TrueLongitude$f,    # Detector longitude: real: in: rad
            unt$CosTrueLat$f,       # Cosine of detector latitude: real: in:rad
            radhgt,                 # Sqrt Detector altitude: real: in: ft
            unt2$TrueLatitude$f,    # Target latitude: real: in: rad
            unt2$TrueLongitude$f,   # Target longitude: real: in: rad
            unt2$CosTrueLat$f,      # Cosine of target latitude: real: in:rad
            tgthgt)                 # Sqrt Target altitude: real: in: ft
 
    if (iflag1 == no) break
 
}
 
rnglos = rnglos - 1.0
 
return
end                                     #end raddet  RAD$  sui$

Real Function Confidence_level(_          #Normal TEST
                 FMEAN,               #mean (input)
                 STDDEV,              #standard deviation (input)
                 CL)                  #confidence level (input) 0-1
 
 implicit none
 
 integer I, NLTEST
 real*4  Z, X, FMEAN, PROB, STDDEV
 real*4  CL
 
 real    STDNL[0:30]
 data STDNL / .5000, .5398, .5793, .6179, .6554, .6915, .7257,
                .7580, .7881, .8159, .8413, .8643, .8849, .9032,
                .9192, .9332, .9452, .9554, .9641, .9713, .9773,
                .9821, .9861, .9893, .9918, .9938, .9953, .9965,
                .9974, .9981, .9987 /
 
for (x = (fmean - stddev*3); x <= (fmean + stddev*3); x = x + stddev/10.)
{
    Z = (X - FMEAN) / STDDEV             #convert to standard normal
    I = INT(10.0 * ABS(Z) + .5)      #compute closest index into table
    PROB = STDNL[I]                  #get tabulated probability
    if (Z < 0.0)                     #if Z negative
        PROB = 1.0 - PROB            #compute complementary probability
    if (cl <= prob) break
}
 
return x
 end
 

Subroutine jamlst(_
                  UNT$pointer,          # in,owner of victim radar
                  RAD$pointer,          # in
                  hgtrad)               # in, SQUARE-ROOT!!
 
#######################################################
#$%
#$% Purpose:   JAMLST generates a list of effective
#$%            radar jamming equipment that may im-
#$%            pact on a given radar (detection).
#$%
#$% Called By: REJDET
#$%
#$% Calls:     PREPRX_M     PROXIM_M     GETREJ
#$%
#$% Tables:    UNT        RAD        DEQ
#$%            JAM
#$%
#$% Date:      JAN 81
#$%
#$% Author:    Ron Williams
#$%
#$% Modifications:
#$%    1/8/91 trs modified RAD$CH$Frequency$i (integer) to
#$%    RAD$CH$Frequency$F (floating).
#$%
#$%            Jim Allen - 11/95 (E1422)
#$%            Added terrain line-of-sight test.
#$%
#######################################################
 
BBcommon
RMcommon
 
Integer*4       los_test     # function to test for line-of-sight (E1422)
 
Real*4          BRGJ
Literal         CSTRIP8
Real*4          DBNOS
Real*4          DCBLS                              # jb; for decibels 8/22/88
Integer*4       DEQ$Pointer
Integer*4       DEQ2$EM$Band$i
Integer*4       DEQ2$EM$INDEX
Integer*4       DEQ2$Pointer
Integer*4       Device_Index
Real*4          DUCTFC
Real*4          Game_Time_Save
Real*4          HGTJAM
Real*4          HGTRAD
Real*4          AntHgt
Integer*4       Jammer_Index
Integer*4       JAM$FQ$INDEX
Integer*4       JAM$Pointer
Byte            Msg_Sent / $no /
Real*4          R
Real*4          RAD$CH$Frequency$F
Integer*4       RAD$CH$INDEX
Integer*4       RAD$Pointer
Real*4          RNGJ
Real*4          RNGMAX
Integer*4       Unit_Index
Integer*4       UNT$Pointer
Integer*4       UNT2$Pointer
Integer*4       UNT2$Type$i
 
Integer*4       FOV_ok        # jecewsi - JFR 8/31/94
Real*4          Sector        # jecewsi - JFR 8/31/94
REal*4          Scanrate      # jecewsi - JFR 8/31/94
Real*4          orientation   # jecewsi - JFR 9/8/94
Integer*4       OR_Index      # jecewsi - JFR 9/8/94
integer         i_switch_1
 
BBDeclare (shc$pointer, deq2$ident$i)
 
kjammr = 0                                     # no jammers affect this radar
 
call preprx_M (UNT$Pointer$Index,              # jb                8/29/89
            xUNT$truelatitude$f,               #prepare box check
            xUNT$truelongitude$f,
            xUNT$costruelat$f,
            500.)                              #500 mile range limit
 
# get index of active channel for radar        # reh 5/3/89
call find_active_channel (UNT$Pointer,
                          $radar$code,
                          xRAD$Type$c,
                          RAD$CH$Index)
 
RAD$CH$Frequency$F = XRAD$CH$Frequency$F        # 1/8/91 trs
 
#$% for all active units
for (unt2$pointer$first; unt2$pointer$ok; unt2$pointer$next)
{
    if (Xunt2$status$i == $beingDeleted$code) next
 
    call proxim_M (unt2$Pointer$Index,          # jb                8/29/89
                   xunt2$truelatitude$f,        #get range/bearing to jammer
                   xunt2$truelongitude$f,
                   xunt2$costruelat$f,
                   rngj,
                   brgj)
 
    if (rngj < 0.0) next                        #skip if beyond 500 miles
 
    unt2$type$i = xunt2$type$i
 
    FOR_DEQ2_CHAIN
    {
        if (Xdeq2$TimeWhenUse$f > game$time |  # damaged/disabled
            xDEQ2$On$i == $Off)                  # Equip. is Off
        {
            next                                # get next equip
        }
 
        deq2$ident$i = Xdeq2$ident$i  # get equipment type
 
        if (DEQ2$Ident$i == $jammer$code | DEQ2$Ident$i == $RadarJammer$Code |
            DEQ2$Ident$i == $RadComJammer$code)
        {
            JAM$Pointer = Xdeq2$Pntr$i
            if (UNT2$type$i != $cruisemissile$code)         #if NOT a cruise-missile
            {
                SWITCH (UNT2$type$i)                                #       4/27/83
                {
                    case $Air$Code:          # Airborne except Cruise Mis., above
                    {
                        anthgt = float(xUNT2$truealtdepth$i)            #       4/19/83
                    }
                    DEFAULT: # Shorebase and all ships/subs except sub @ SCOPE depth
                    {
                        anthgt = Xdeq2$AntHeight$i + float (xUNT2$TrueAltDepth$I)   # Add in elevation
                    }                                                         # joa 11/95 (E1422)
                } # end switch unit type
 
                if (xUNT2$SUPERtype$i == $submarine$SUPERcode )# radar on sub, 2/12/91
                {
                    SHC$Pointer = xUNT2$SHCpntr$i     #       is it at SCOPE depth?..
                    if (XUNT2$truealtdepth$i == Xshc$SCOPEDEPTH$i)
                    anthgt = 2.0                    # If so, antenna 2' out of water
                }
            }   # end of IF.. unit is NOT Cruise-Missile
            else                   # unit is a CRUISE-MISSILE
            {
                #$% compute antenna height as cm altitude   # & cm has no eq table
                anthgt = float(xUNT2$truealtdepth$i)         #               4/19/83
            }
 
            hgtjam = SQRT( anthgt )
 
 
            if (Xrad$RadarType$i == $Air$code | #if air search radar
                ducting$strength    == 0      |               # or no ducting present
                xUNT$truealtdepth$i >  300    |               #  or esm above 300 ft
                xunt2$truealtdepth$i > 300     )              #   or jammer above 300
            {
                rngmax = 1.23 * (hgtrad + hgtjam)       #line of sight range
                ductfc = 1.0                            # set ducting factor
            }
            else
            {
                rngmax = xjam$maxrange$i                # get max range
                ductfc = ducting$factor                 # get ducting factor
            }
 
            if (rngj > rngmax) next                     #skip if too far away
 
            if (los_test (                      # Uses GP terrain grid to determine LOS
                        xUNT$TrueLatitude$F,    # Detector latitude: real: in: rad
                        xUNT$TrueLongitude$F,   # Detector longitude: real: in: rad
                        xUNT$CosTrueLat$F,      # Cosine of detector latitude: real: in:rad
                        hgtrad,                 # Sqrt Detector altitude: real: in: ft
                        xUNT2$TrueLatitude$F,   # Target latitude: real: in: rad
                        xUNT2$TrueLongitude$F,  # Target longitude: real: in: rad
                        xUNT2$CosTrueLat$F,     # Cosine of target latitude: real: in:rad
                        hgtjam) == $NO)         # Sqrt Target altitude: real: in: ft
            {
                next                 # Jammer obscured by terrain
            }
 
            FOV_ok = $yes            # default flag in field of view - JFR 1/27/94
            if (jecewsi$game == $yes ) # if jecewsi scan sectors enabled - JFR 8/15/94
            {
                sector = float(xjam$JammingSector$I)
                OR_Index = xDEQ2$EmitterIndx$I
                call FindJAMOrient (UNT2$Pointer, OR_Index, orientation)
 
                # since this is a case of a jammer (unt2$pointer) we
                # swap the pointers in the call to RADFOV so we can use
                # this routine for finding targets in radar FOV (other cases)
                # and for finding radars in jammer FOV (this case)
                call RADFOV (UNT2$Pointer, # agressor
                             UNT$Pointer,  # victim
                             Jammer_index, # Jammer to check (not used for Jecewsi)
                             sector,       # width of swept sector
                             scanrate,     # scan rate scans per minute (not needed for Jecewsi
                             orientation,  # jecewsi equipment orientation
                             FOV_ok)       # Is it in this equipments FOV?
 
            }   # end of if JECEWSI
 
            if (FOV_ok == $no)                   # JFR 11/27/94
                next
 
            # for each electromagnetic band
            for(DEQ2$EM$index=1;
                DEQ2$EM$index$ok;
                DEQ2$EM$index=DEQ2$EM$index+1)
            {                            # "X" to integer        8/30/88
                DEQ2$EM$band$i = XDEQ2$EM$band$i    #        8/30/88
                if (DEQ2$EM$band$i == $no) next #skip if not operating
 
                jam$fq$index = DEQ2$EM$index
 
                # if within jammer bandwidth (previously, had to match up exactly)
                if ((NINT(RAD$CH$Frequency$F) <
                    Xjam$fq$centerfreq$i + xjam$fq$Bandwidth$i) & # JFR 8/15/94
                (NINT(RAD$CH$Frequency$F) >
                    Xjam$fq$centerfreq$i - xjam$fq$Bandwidth$i)) # JFR 8/15/94
                {
                    if (rngj < 1)                       #if very near
                    {
                        kjammr = -1                     #indicate no radar possible
                        break
                    }
 
                    if(rngj < 1.0) rngj = 1.0    # jb (protect LOG10)    9/1/88
                    DCBLS = 10 * log10(rngj)     #jb -  replace QKDB    8/22/88
                    r = 2.0 * ductfc * DCBLS     # intermediate term    8/22/88
 
                    dbnos = Xjam$fq$performfactor$i +   #compute noise pwr in db
                        XRAD$antennagain$i - r
                    #$% coded as precaution to multiple jammers per unit
                    if ( kjammr >=
                      ($MaxJammersPerUnit + $MaxCommsJammersPerUnit) * UNT$Slots )
                    {
                        return
                    }
 
                    kjammr = kjammr + 1
 
                    PWRJAM[kjammr] = 10 ** (dbnos/10.)      # get jammer power 8/22/88
 
                    brgjam[kjammr] = brgj                   # get jammer bearing
                    Unit_With_Jammer[kjammr]  = unt2$pointer$index  # save Jammer source
                    Jammer_DEQ[kjammr] = DEQ2$Pointer
                    next                                    # get next equipment
                }# end if rad and jam are fequency aligned
            } # end EMI index
            if (kjammr < 0) break                       #if jammer right on top, no
        } # end jammer equip
    } # end for all active jammers "type"  equip on unit
} # end for all active units
 
return
end                             #end jamlst  qkdb, qkpow
# radar FOV calculation - JFR 1/27/94
subroutine radfov(UNT$Pointer,  # evil scumbag agressor         (in)
                  UNT2$Pointer, # helpless victim               (in)
                  Sensor_index, # radar to check                (in)
                  sector,       # width of swept sector         (in)
                  scanrate,     # scan rate scans per minute    (in)
                  orient,       # orientation center of FOV     (in)
                  FOV_ok)       # Is it in this equipments FOV? (out)
#######################################################
#$%
#$% Purpose:   RADFOV finds out if a target is in
#$%            the radar Field Of View (FOV)
#$%
#$% Called By: SURTGT        AIRTGT
#$%
#$% Calls:     NONE
#$%
#$% Tables:    UNT        RAD       DEQ
#$%
#$% Date:      JAN 1994
#$%
#$% Author:    John Richardson (JFR)
#$%
#$% Modified:  John Richardson - 8/94
#$%            JECEWSI Interface via ALSP
#$%
#######################################################
 
BBcommon
RMcommon
 
real*4  Center
real*4  RightAng
real*4  LeftAng
real*4  RELbrg
real*4  RNG
real*4  brg
real*4  UNTCOS
real*4  UNT$TrueLatitude$F
real*4  UNT$TrueLongitude$F
real*4  sector
real*4  scanrate
real*4  orient
real*4  wraparoundANG             # jecewsi - JFR 9/7/94
Integer*4 UNT$Pointer
Integer*4 UNT2$Pointer
Integer*4 FOV_ok
Integer*4 Sensor_index
Integer*4 DEQ$Pointer
Integer*4 DEQ$LastRadarPosition$I
 
FOV_ok = $yes # flag inside radar Field Of View
 
UNT$TrueLatitude$F  = xUNT$TrueLatitude$F
UNT$TrueLongitude$F = xUNT$TrueLongitude$F
UNTCOS = COS(UNT$TrueLatitude$F)
Call RLL2RB(_              #Rhumb line Lat/Lon to Range/Bearing
            UNT$TrueLatitude$F,        #latitude of 1st pt (input)
            UNT$TrueLongitude$F,       #longitude of 1st pt (input)
            UNTCOS,                    #cos of lat of 1st pt (input)
            xUNT2$TrueLatitude$F,      #latitude of 2nd pt (input
            xUNT2$TrueLongitude$F,     #longitude of 2nd pt (input)
            COS(xUNT2$TrueLatitude$F), #cos of lat of 2nd pt (input)
            RNG, BRG )                 #range, bearing (output)
 
if (jecewsi$game == $yes) # - JFR 8/15/94
   {
    if (orient > $TWOPI) # oriented about course (radars in jecewsi)
      RELbrg = Abs(BRG - xUNT$TrueCourse$F) # relative bearing between target and detector
    else # jammer oriented about bearing or position for jecewsi
      RELbrg = Abs(BRG - orient) # relative bearing between target and detector orientation
 
     # center the FOV around the detector's course for JECEWSI - JFR 8/15/94
     # then find out if the target is in fixed directional radar FOV - JFR 8/15/94
     # Note: not allowing radar to be oriented for Jecewsi - JFR 8/15/94
    if (sector < $TWOPI) # only check if scanning sector less than 360 - JFR 9/7/94
       {
        wraparoundANG = $TWOPI - 0.5 * sector # check for wraparound - JFR 9/7/94
        if ((RELbrg > 0.5*sector) & (RELbrg < wraparoundANG))  # JFR 8/15/94
           {
            FOV_ok = $no # flag outside radar Field Of View - JFR 8/15/94
           }
       }
   }
else   # use previous algorithms
   {
    RELbrg = BRG - xUNT$TrueCourse$F
    $angPI(RELbrg)
 
    # now find out the center position where the radar stoped at end of last cycle
    deq$pointer = Device_Deq_pointer[Sensor_index]
    # right edge of FOV is center position + 1/2 * sweep sector (center is in tenths of degrees)
    DEQ$LastRadarPosition$I = xDEQ$LastRadarPosition$I
    RightAng = (float(DEQ$LastRadarPosition$I)/10.0) * $deg2rad + .5 * sector
    $angPI(RightAng)
    # left edge of FOV is center position - 1/2 * sweep sector (= right edge - sector)
    LeftAng  = RightAng - sector
    $angPI(LeftAng)
    # update the right edge of sector after the radar has completed motion this cycle
    RightAng = RightAng + scanrate
    if (RELbrg > RightAng | RELbrg < LeftAng)
       {
        FOV_ok = $no # flag outside radar Field Of View
       }
 
    # lastly, update the center position of the radar
    Center = (RightAng - .5 * sector)
    $angPI(Center)
    Center = Center * $rad2deg
    Center = Center * 10.0 # remember, it's in tenths of degrees
    deq$LastRadarPosition$I = int(Center)
   }
 
end

 
subroutine FindJAMOrient(UNT2$POINTER,  # Unit with Jammer aboard       (in)
                         OR_Index,     # helpless victim               (in)
                         orient)       # orientation center of FOV     (out)
#######################################################
#$%
#$% Purpose:   FindJAMOrient finds out the orientation
#$%            of a jammer on a unit
#$%
#$% Called By: JAMLST        ESMTGT
#$%
#$% Calls:     NONE
#$%
#$% Tables:    UNT        RAD       DEQ
#$%
#$% Date:      SEP 1994
#$%
#$% Author:    John Richardson (JFR)
#$%
#######################################################
 
BBcommon
RMcommon
 
Integer*4   UNT2$POINTER
Integer*4   JEW$POINTER
Integer*4   JEW$BLL$Flags$I
Integer*4   JEW$OR$INDEX
Integer*4   JEW$BLL$INDEX
Integer*4   OR_Index
Real*4      orient
Real*4      RNG
Real*4      BRG
 
orient = $TWOPI + 0.5 # flag default orientation about course
 
JEW$POINTER$TO (unt2$POINTER$INDEX) # JEW table and unit table are 1-1
 
JEW$OR$INDEX = OR_Index   # emmiter index from deq table (via device array)
JEW$BLL$INDEX = OR_Index  # flag wether oriented about bearing or Latlong
 
JEW$BLL$Flags$I = xJEW$BLL$Flags$I
if (JEW$BLL$Flags$I == $yes )
   { # oriented about position so find  bearing from unit to position
    Call RLL2RB(_                           #Rhumb line Lat/Lon to Range/Bearing
                xUNT2$TrueLatitude$F,       #latitude of 1st pt (input)
                xUNT2$TrueLongitude$F,      #longitude of 1st pt (input)
                COS(xUNT2$TrueLatitude$F),   #cos of lat of 1st pt (input)
                xJEW$OR$Lat$F,              #latitude of 2nd pt (input
                xJEW$OR$Long$F,             #longitude of 2nd pt (input)
                COS(xJEW$OR$Lat$F),         #cos of lat of 2nd pt (input)
                RNG, BRG )                  #range, bearing (output)
    orient = BRG
   }
else
   { # oriented about bearing
    orient = xJEW$OR$Bearing$f
   }
 
 
return
end
