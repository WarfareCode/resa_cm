####################################################################
#$% PTMMI.RAT
#$%
#$%
#$%     1.2) If Button 1 is depressed then either:
#$%         1.2.1) If there was previous point was in the same place on
#$%                the screen then the LAT/LONG will be deleted from the
#$%                display.
#$%         1.2.2) If there was no previous point displayed then the
#$%                LAT/LONG of the current point the will be displayed on
#$%                the terminal screen.
#$%         1.2.3) If there was a previous LAT/LONG actively displayed
#$%                at a different point on the screen then a range and
#$%                bearing between the two points will be calculated and
#$%                displayed ; also the old LAT/LONG will be deleted and
#$%                the new LAT/LONG will be displayed.
#$%     1.4) If button 2 is depressed then :
#$%         1.3.1) If the point on the screen does not represent the position
#$%                of one of the ships/aircraft/etc then any previously
#$%                hooked data is deleted.
#$%         1.3.2) If the point on the screen does represent the position
#$%                of one of the hookable units then the units ID,
#$%                COURSE,SPEED,ALTITUDE will be displayed in the upper
#$%                right hand side of the screen.
#$%
######################################################################

 
undefine read
undefine write
undefine err
 
define ($on,1)
define ($abs,1)
define ($rel,8)
 
define ($Pi    ,3.14159265)
define ($2Pi   ,2 * $pi)
define ($DegRad,180.0/$pi)
 
include "ascii.inc"
include "bbcode.inc"                            # include codes for refs to Blackboard
include "bbctl.inc"                             # used in MENUIN and VERIFY subroutines
include "bbsta.inc"                             # used in HOOK_UNIT subroutine
include "macros.inc"
include "ptmain.inc"
 
#______________________________________________________________________
#
# Lat/Lon arguments are in REAL*4 Degrees (Deg <==> Radians * (180/$pi))
#
#______________________________________________________________________
 
 
define (BBImplicit,
    Implicit None
    )
 

 
subroutine Puck_position_2_LL (X_in, Y_in, lat, long,
	   		       wvxa, wvxm, wvya, wvym)
 
###############################################################################
#
# Purpose:      Puck_position_2_LL is a routine which processes data read
#               from the display into lat/long in floating point degrees.
#
# Calls:
#
# Author:     D WILLS
#
# Date:       13 September 1990
#
###############################################################################
 
Implicit None
 
Integer*4       X_in, Y_in
real*4          lat, long
real*4 		wvxa, wvxm, wvya, wvym
real*4          invmx, invmy
external        invmx, invmy
 
lat  = invmy (Y_In, wvya, wvym)
long = invmx (X_In, wvxa, wvxm)
 
if (long > 180.0)                  # check for wrap around at 180
    long = long - 360.0
 
end

 
REAL FUNCTION INVMX (IX, wvxa, wvxm)
 
#******************************************************************************
#       INVMX       -   Inverse mercator function to calculate Longitude      *
#                                                                             *
#       Called by LATLONG                                                     *
#******************************************************************************
 
#       Input  - Screen units (-2048 to 2047)
#       Output - Longitude as a real number (+ or - a.b)
 
#EXT_ #(wvxa,wvxm)
 
integer*2 ix
real*4  wvxa, wvxm
 
invmx = (ix - wvxa)/wvxm
 
return
 
end
 

 
REAL FUNCTION INVMY (IY, wvya, wvym)
 
#******************************************************************************
#       INVMY       -   Inverse mercator function to calculate Latitude       *
#                                                                             *
#       Called by LATLONG                                                     *
#******************************************************************************
 
#       Input  - Screen units (-2048 to 2047)
#       Output - Latitude as a real number (+ or - a.b)
 
#EXTCommon #(wvya,wvym)
 
real*4 xt, wvya, wvym
 
integer*2 iy
 
xt = (iy-wvya)/wvym
 
invmy = (ATAN(EXP(ABS(xt))) - $PI/4.0) * (360.0/$PI)
 
if (xt < 0) invmy = - invmy             # make south lat
 
return
 
end
 

 
subroutine set_plot_input(plot_input_buf, buf_len)
 
# Store current clicked mouse position on geo in BB for order processing
 
BBcommon
PLOTcommon
 
BBDeclare (sta$pointer, sta$PlotInput$V)
character  plot_input_buf[ARB]
integer    buf_len
integer	   kk
 
if (kstation > 0)
{
	sta$pointer$to kstation             		# get STA from PLTOCOMMON
 
    if (xSTA$PlotInputCapable$I == $No)         # is a GEO input Ok?
        putSTA$PlotInputCapable$I ($YES)        # it should be
 
    if (xSTA$PlotInputRequest$i == $PIR$position)
    {
   		sta$PlotInput$V  = " "
    	kk = 0
    	call vmovh (plot_input_buf[2],  buf_len-2, sta$PlotInput$V, kk)
        PUTsta$PlotInput$V
        PUTsta$PlotInputReady$I ($YES)
    }
}
 
return
end
