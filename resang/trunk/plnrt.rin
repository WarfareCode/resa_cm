
Integer Function Valid_NRT(NRT$Pointer,    # input - NRT$Pointer
                           Name1,          # input - first name
                           Name2,          # input - second name
                           iview,          # input - view of station
                           single)         # input - indicates one name entered
########################################################
#$%
#$% Purpose:   Valid_NRT returns a 1 if there is a name match for the
#$%            given NRT_pointer or a 0 if there is no match
#$%
#$% Called By: Search_NRT_table (PTMAIN.RAT)
#$%
#$% Tables:    NRT
#$%
#$% Date:      December 1992
#$%
#$% Author:    Susan Miller
#$%
########################################################
BBCommon

# parameter
integer    NRT$Pointer, iview, single
literal    Name1, Name2

# functions
integer   lcomp
literal   CSTRIP8

# local variables
literal   NRT$Name1$C, NRT$Name2$C
integer   name1_result, name2_result

 iview = iview  # so that the compiler won't complain

 if (xNRT$InUse$I == $no)   # is this slot in use?
    return (0)
 
 # if view is not control and view the same as the requesting player? 
# if ((iview != 1) & (iview != xNRT$View$I))  
#    return (0)

 # if we are plotting all NRTs defined for that view regardless of
 # the name or names, then return now with a valid response
 if (single != $yes)
    {
     if ((Name1 == $BLANKLIT) & (Name2 == $BLANKLIT))
        return (1)
    }
    
 name1_result = 0
 name2_result = 0
 NRT$Name1$C = xNRT$Name1$C
 # lcomp returns a 0 if names are the same, -1 if first name is < second name
 # and 1 if first name is > second name
 name1_result = (lcomp(NRT$Name1$C,Name1))
 
 if (name1_result != 0) return (0) # if the first name doesn't match, return
 else # the first name is a match
    {
     if (single == $yes) return (1) # if this is a single name to match, return
     else # want a two name match
        {
         NRT$Name2$C = xNRT$Name2$C
         name2_result = (lcomp(NRT$Name2$C,Name2))
         if (name2_result != 0) return (0) # not a match
         else return(1) # it is a match
        }
    }

# if we've made it this far, this must be the right NRT slot
return 
end # end of function Valid_NRT


Subroutine Switch_NRT_index(STA$Pointer, del_NRT_index)
########################################################
#$%
#$% Purpose:    Switch_NRT_index resets index numbers when
#$%             one is deleted.
#$% 
#$% Called By:  NRT_named 
#$%
#$% Tables:     STA
#$%
#$% Date:       January 1993
#$%
#$% Author:     Susan Miller
#$%
########################################################
BBCommon

# parameters
# NRT_index is the index of the NRT to be deleted
integer STA$Pointer, del_NRT_index
integer STA$NRTTwoNameIndx1$I, STA$NRTTwoNameIndx2$I, STA$NRTTwoNameIndx3$I
integer STA$NRTTwoNameIndx4$I, STA$NRTTwoNameIndx5$I, STA$NRTTwoNameIndx6$I
integer STA$NRTTwoNameIndx7$I, STA$NRTTwoNameIndx8$I


# locals
integer H_indx(8) / 8*0 /, orig_NRTs_plotted, NRTs_plotted
integer i_switch_1

 orig_NRTs_plotted = xSTA$PlotNRT$I

 for (NRTs_plotted = orig_NRTs_plotted; NRTs_plotted > 0;
      NRTs_plotted = NRTs_plotted - 1)
    {
     switch (NRTs_plotted)
        {
         case 1:
                {
                 STA$NRTTwoNameIndx1$I = xSTA$NRTTwoNameIndx1$I
                 if (del_NRT_index == 1)
                    {
                     if (orig_NRTs_plotted > 1 )
                         STA$NRTTwoNameIndx1$I = h_indx(1)
                     else 
                         STA$NRTTwoNameIndx1$I = 0
                    }
                 putSTA$NRTTwoNameIndx1$I 
                } # end of case 1 
         case 2: 
                {
                 STA$NRTTwoNameIndx2$I = xSTA$NRTTwoNameIndx2$I
                 if (del_NRT_index < 2)
                    { 
                     h_indx(1) = STA$NRTTwoNameIndx2$I
                     STA$NRTTwoNameIndx2$I = 0
                    }
                 else if (del_NRT_index == 2)
                    {
                     if (orig_NRTs_plotted > 2)
                        STA$NRTTwoNameIndx2$I = h_indx(2)
                     else 
                        STA$NRTTwoNameIndx2$I = 0
                    }
                 putSTA$NRTTwoNameIndx2$I
                } # end of case 2
         case 3: 
                {
                 STA$NRTTwoNameIndx3$I = xSTA$NRTTwoNameIndx3$I
                 if (del_NRT_index < 3)
                    { 
                     h_indx(2) = STA$NRTTwoNameIndx3$I
                     STA$NRTTwoNameIndx3$I = 0
                    }
                 else if (del_NRT_index == 3)
                    {
                     if (orig_NRTs_plotted > 3)
                        STA$NRTTwoNameIndx3$I = h_indx(3)
                     else 
                        STA$NRTTwoNameIndx3$I = 0
                    }
                 putSTA$NRTTwoNameIndx3$I 
                } # end of case 3
         case 4: 
                {
                 STA$NRTTwoNameIndx4$I = xSTA$NRTTwoNameIndx4$I
                 if (del_NRT_index < 4)
                    { 
                     h_indx(3) = STA$NRTTwoNameIndx4$I
                     STA$NRTTwoNameIndx4$I = 0
                    }
                 else if (del_NRT_index == 4)
                    {
                     if (orig_NRTs_plotted > 4)
                        STA$NRTTwoNameIndx4$I = h_indx(4)
                     else 
                        STA$NRTTwoNameIndx4$I = 0
                    }
                 putSTA$NRTTwoNameIndx4$I
                } # end of case 4
         case 5: 
                {
                 STA$NRTTwoNameIndx5$I = xSTA$NRTTwoNameIndx5$I
                 if (del_NRT_index < 5)
                    { 
                     h_indx(4) = STA$NRTTwoNameIndx5$I
                     STA$NRTTwoNameIndx5$I = 0
                    }
                 else if (del_NRT_index == 5)
                    {
                     if (orig_NRTs_plotted > 5)
                        STA$NRTTwoNameIndx5$I = h_indx(5)
                     else 
                        STA$NRTTwoNameIndx5$I = 0
                    }
                 putSTA$NRTTwoNameIndx5$I 
                } # end of case 5
         case 6: 
                {
                 STA$NRTTwoNameIndx6$I = xSTA$NRTTwoNameIndx6$I
                 if (del_NRT_index < 6)
                    { 
                     h_indx(5) = STA$NRTTwoNameIndx6$I
                     STA$NRTTwoNameIndx6$I = 0
                    }
                 else if (del_NRT_index == 6)
                    {
                     if (orig_NRTs_plotted > 6)
                        STA$NRTTwoNameIndx6$I = h_indx(6)
                     else 
                        STA$NRTTwoNameIndx6$I = 0
                    }
                 putSTA$NRTTwoNameIndx6$I
                } # end of case 6
         case 7: 
                {
                 STA$NRTTwoNameIndx7$I = xSTA$NRTTwoNameIndx7$I
                 if (del_NRT_index < 7)
                    { 
                     h_indx(6) = STA$NRTTwoNameIndx7$I
                     STA$NRTTwoNameIndx7$I = 0
                    }
                 else if (del_NRT_index == 7)
                    {
                     if (orig_NRTs_plotted > 7)
                        STA$NRTTwoNameIndx7$I = h_indx(7)
                     else 
                        STA$NRTTwoNameIndx7$I = 0
                    }
                 putSTA$NRTTwoNameIndx7$I
                } # end of case 7
         case 8: 
                {
                 STA$NRTTwoNameIndx8$I = xSTA$NRTTwoNameIndx8$I
                 if (del_NRT_index < 8)
                    { 
                     h_indx(7) = STA$NRTTwoNameIndx8$I
                     STA$NRTTwoNameIndx8$I = 0
                    }
                 else if (del_NRT_index == 8)
                    {
                     if (orig_NRTs_plotted > 8)
                        STA$NRTTwoNameIndx8$I = h_indx(8)
                     else 
                        STA$NRTTwoNameIndx8$I = 0
                    }
                 putSTA$NRTTwoNameIndx8$I 
                } # end of case 8
        } # end of case statement
    } # end of loop

return 
end # of Switch_NRT_index


Subroutine Search_NRT(STA$Pointer,    # input - station requesting order
                      ilex,           # input - order
                      iwords,         # input - number of words in order
                      valid_check,    # return - yes or no 
                      h_indx,         # return - index of NRT
                      NRTs_plotted)   # input/return
########################################################
#$%
#$% Purpose:   Search_NRT searches the NRT table for the asking view,
#$%            i.e. blue, orange or control.  Returns valid_check = 1 
#$%            if a match is found and the index in the NRT table.
#$%
#$% Called By: NRT_Named
#$%
#$% Tables:    STA
#$%
#$% Date:      December 1992
#$%
#$% Author:    Susan Miller
#$%
########################################################
BBCommon
define ($NRT$Orange$Offset,100) # also defined in WGOPNRT.RAT

# parameters
literal    ilex [20]
integer    STA$Pointer, iwords, valid_check, h_indx, NRTs_plotted

# functions
integer    Valid_NRT

# local variables
literal    Name1, Name2
integer    NRT$Pointer, iview, len, single, found_one
character  msg[ARB]
integer    entry_point_called, temp_view, temp_single
literal    temp_name1, temp_name2

 single = $no
 entry_point_called = $no
 repeat         # entry point called                        # E2143 dew 10/99
    {
     break                                                  # E2143 dew 10/99
     entry duplicate_NRT (temp_view, temp_name1, temp_name2, temp_single, valid_check)
     iview = temp_view
     Name1 = temp_name1
     Name2 = temp_name2
     single = temp_single
     entry_point_called = $yes
    }

 if (entry_point_called != $yes)
    {
     found_one = $no
     Name1 = ilex[4]
     if (iwords == 4) 
        {
         Name2 = $BLANKLIT
         single = $yes
        }
     if (iwords == 5) 
        {
         Name2 = ilex[5]
        }

     iview = xSTA$View$I # get the view
    }

 valid_check = 0    # initialize as not valid

 # is it a blue view?
 if (iview >= $FirstBlue$View & iview <= $LastBlue$View)
    {
      # then loop through the blue NRTs only
     for (NRT$Pointer$First; NRT$Pointer$Index < $NRT$Orange$Offset; 
          NRT$Pointer$Next)
        {
         valid_check = Valid_NRT(NRT$Pointer, Name1, Name2, iview, single)
         # if we found a match in the NRT table, save index and
         # increment NRTs_plotted
         if (valid_check == $YES)
            {
             if (entry_point_called == $yes) return
             if (found_one != $yes) found_one = $yes
             h_indx = NRT$Pointer$Index
             # if it's a single name to plot and we've found it, return
             if (single == $yes) return
             # if none are plotted and the max is not plotted, add one
             if ((NRTs_plotted >= 0) & (NRTs_plotted < 8))
                 NRTs_plotted = NRTs_plotted + 1
             # if a single named or all NRTs are plotted, reset count
             else if ((NRTs_plotted == 9) | (NRTs_plotted == 10))
                NRTs_plotted = 1
            }
         else # not a valid match, so check next slot
            next
        } # end of for loop through blue slots
    } # end of blue view
 # is it an orange view?
 else if (iview >= $FirstOrange$View & iview <= $LastOrange$View)
    {
     for (NRT$Pointer$To $NRT$Orange$Offset; NRT$Pointer$Valid; 
          NRT$Pointer$Next)
        {
         valid_check = Valid_NRT(NRT$Pointer, Name1, Name2, iview, single)
         # if we found a match in the NRT table, save index and
         # increment NRTs_plotted
         if (valid_check == $YES)
            {
             if (entry_point_called == $yes) return
             if (found_one != $yes) found_one = $yes
             h_indx = NRT$Pointer$Index
             # if it's a single name to plot and we've found it, return
             if (single == $yes) return
             if ((NRTs_plotted >= 0) & (NRTs_plotted < 8))
                 NRTs_plotted = NRTs_plotted + 1
             else if ((NRTs_plotted == 9) | (NRTs_plotted == 10))
                NRTs_plotted = 1
            }
         else # not a valid match, so check next slot
            next
        } # end of for loop through orange slots 
    } # end of orange view
 else # it must be control
    {
     for (NRT$Pointer$First; NRT$Pointer$Valid; NRT$Pointer$Next)
        {
         valid_check = Valid_NRT(NRT$Pointer, Name1, Name2, iview, single)
         # if we found a match in the NRT table, save index and
         # increment NRTs_plotted
         if (valid_check == $YES)
            {
             if (entry_point_called == $yes) return
             if (found_one != $yes) found_one = $yes
             h_indx = NRT$Pointer$Index
             # if it's a single name to plot and we've found it, return
             if (single == $yes) return
             if ((NRTs_plotted >= 0) & (NRTs_plotted < 8))
                 NRTs_plotted = NRTs_plotted + 1
             else if ((NRTs_plotted == 9) | (NRTs_plotted == 10))
                NRTs_plotted = 1
            }
         else # not a valid match, so check next slot
            next
        } # end of for loop through entire table
    } # end of control view
     
 if ((valid_check == $NO) & (entry_point_called == $yes)) return
 if (found_one != $yes)
    {
     # no match, so send a message
     len = 0
     call smovhn(Name1,$$MaxLit,msg,len) 
     if (single == $no)
        {
         call smovv(" ",msg,len)
         call smovhn(Name2,$$MaxLit,msg,len) 
        }
     call smovv(" was not found for your view.  Order ignored.  ",msg,len)
     call echoh(msg,len)
     call echor
    }

return
end     # end of subroutine Search_NRT
