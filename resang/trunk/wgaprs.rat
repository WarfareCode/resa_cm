 
#############################################################################
##                                                                         ##
##  FILE:  ALSP_RECEIVE_SAVE.RAT and other short messages                  ##
##                                                                         ##
##  DATE CREATED:  17 May 1992                                             ##
##                                                                         ##
##  DATE MODIFIED:                                                         ##
##                                                                         ##
##  AUTHORS:  LOS ALAMOS NATIONAL LABORATORY (LANL), David F. Perme        ##
##                                                                         ##
##  MODIFIERS:  Carol Kropp (NRaD)                                         ##
##                                                                         ##
##  LINKS WITH: wgmain                                                     ##
##                                                                         ##
##  PURPOSE: handles the confederation save request                        ##
##           and other control data, as of 4/2015                          ##
##                                                                         ##
## Modified: Carol Kropp - 1/94                                            ##
##           Added processesing of incoming PING and PING_ACK messages     ##
##           from the ACM.                                                 ##
##           Jay Braun - 4/2015                                            ##
##           This file already handles pings, so it looks like a good      ##
##           place to add the set_rate() message                           ##
##                                                                         ##
#############################################################################
 
include "alsp.inc"
include "alsp_resa.inc"
 
define (BBImplicit, Implicit None) # SMM 3/00
 
subroutine alsp_receive_start_save (time, label_len, label)
##########################################################################
#$%
#$% Purpose:    Handles the incoming save request from the acm.
#$%
#$% Called By:  The generic translator
#$%
#$% Calls:      Osave    <wgmdsave.rat>
#$%
#$% Tables:     None
#$%
#$% Date:       17-MAY-1992
#$%
#$% Created by: Los Alamos National Labs (LANL), David F. Perme
#$%
#$% Modified:   Carol Kropp - 9/95 (E1458)
#$%             Dropped erroneous swar echo calls and added sending
#$%             of the system clock time to the acm when sending
#$%             the SAVE_ACK message.  Also added sending of new message
#$%             SAVE_COMPLETE.
#$%
##########################################################################
BBCommon
 
real                      time
integer                   label_len
vaxcharacter*(*)          label
VMSchar*(64)              new_name
 
character  clock_time[9]
 
  call echor
  call echov ("ALSP Confederation Requested Save...")
 
  if (label_len > 0)
    {
    call echov (" Label = ")
    call echov (label[1 : label_len])
#     write (6, 100) label(1 : label_len)
#     100 format (' Label =  ', a)
    call echor
    } #$% end of label_len
  else
    {
    call echov (" (null)")
    }
 
  call gtime (clock_time)
  call alsp_save_ack (time, %%REF(clock_time))
 
  call osave ($Neutral$View)
 
  call gtime (clock_time)
  call alsp_save_complete (time, %%REF(clock_time))
 
  call ALSP_Rename_Save (label[1:label_len], new_name)
 
  call echov  ("    ALSP Save renamed: ")
  call echovn (new_name)
  call echor
 
return
end

subroutine ALSP_Receive_Set_Rate(rate)

BBcommon

real rate
call set_game_rate($lex$RATIO$, dble(rate)) 
   #both arguments are literal or real*8

return
end
 
subroutine ALSP_Receive_Ping (msg_len,    # in:  Number of characters in msg
                              msg)        # in:  Character array msg
#########################################################################
#$%
#$% Purpose:    ALSP_Receive_Ping processes the receipt of an ALSP
#$%             ACM to Actor PING(...) message.  The text will be
#$%             displayed on the wargame terminal and a Actor to ACM
#$%             PING_ACK(...) message will be sent.
#$%
#$% Called By:  Handle_at_Ping        <at_mess_handler.c>
#$%
#$% Calls:      Echo..
#$%             Write
#$%             ALSP_Ping_Ack         <transifsend.c>
#$%
#$% Tables:     None
#$%
#$% Date:       Jan. 23, 1994
#$%
#$% Author:     Carol L. Kropp
#$%
#########################################################################
implicit none
include "alsp_io_rat.inc"
 
integer                   msg_len
vaxcharacter*max_str_len  msg
 
integer                   reply_len
vaxcharacter*max_str_len  reply
 
  call echov (" ACM PING")   #JHM 1/03 AAI03 (E2329)
  if (msg_len > 0)
    {
    call echov ("        ")
    call echov (msg[1 : msg_len])
#     write (6, 100)  msg (1:msg_len)
#     100 format (t23, 1x, a)
     call echor
    }
  else
    {
    call echov (" ()")
    }
 
  #$% notify the confederation that game has received PING
  reply_len = name_len + 9 + node_len + 20
  reply = alsp_actor_name[1:name_len]//"on node"//_
          alsp_node_name[1:node_len]//" responding to PING."
  call alsp_ping_ack (reply_len, %%REF(reply))
 
return
end
 
subroutine ALSP_Receive_Ping_Ack (msg_len,    # in:  Number of characters in msg
                                  msg)        # in:  Character array msg
#########################################################################
#$%
#$% Purpose:    ALSP_Receive_Ping_Ack processes the receipt of an ALSP
#$%             ACM to Actor PING_ACK(...) message.  The text will be
#$%             displayed on the wargame terminal.
#$%
#$% Called By:  Handle_at_Ping_Ack    <at_mess_handler.c>
#$%
#$% Calls:      Echo..
#$%             Write
#$%
#$% Tables:     None
#$%
#$% Date:       Jan. 23, 1994
#$%
#$% Author:     Carol L. Kropp
#$%
#########################################################################
implicit none
include "alsp_io_rat.inc"
 
integer                   msg_len
vaxcharacter*max_str_len  msg
 
  call echor
  call echov ("ALSP ACM responded to PING...")
  if (msg_len > 0)
    {
    call echov ("        ")
    call echov (msg[1 : msg_len])
#     write (6, 100)  msg (1:msg_len)
#     100 format (t30, 1x, a)
    call echor
    }
  else
    {
    call echov (" (null)")
    }
 
return
end
 
subroutine ALSP_Rename_Save (Label_v,       # in:  Save label provided by ALSP
                             new_name)      # out: New File name used
 
#########################################################################
#$%
#$% Purpose:    ALSP_Rename_Save will recall the name of the most recent save
#$%             and rename it to a varient of the ALSP provided label
#$%             This should "protect" them from being PURGED.
#$%             The new name is returned to allow display of the new name.
#$%
#$%             Old name example:   ct00h_2339.sve
#$%                                 ^^^^  ^^^^
#$%                                 |        |
#$%                                 Scenario Game Minute
#$%
#$%             Label example:      prod_1_1200
#$%
#$%             New name example:   prod_1_1200_CT00_2339H.SVE;1
#$%                                 ^^^^^^^^^^^ ^^^^ ^^^^
#$%                                 |            |     |
#$%                                 Label    Scenario  Game Minute
#$%
#$% Called By:  ALSP_Receive_Start_Save
#$%
#$% Tables:     None
#$%
#$% Date:       Jan. 20, 2000
#$%
#$% Author:     Dane E. Wills
#$%
#$% Modified:   James O. Allen Feb. 20, 1010
#$%             Do not allow save name to exceed max file name length
#########################################################################
Implicit None
 
VMSchar*(*)     Label_v, new_name
VMSchar         old_name*64, Minute*8, Scenario*8,
                errmsg*400
VMSchar         hold_name*64
character	label[64]
integer         rc, kk, sindex, hpos, dotpos
integer         label_len,position,hold_len
 
call get_saveBB_name (old_name)     # name of last save
 
Scenario = ""
call str_element (Scenario, 0, "_", old_name)
#hpos = sindex(%%ref(scenario), "h")
hpos = len_trim(Scenario) - 1
 
Minute = ""
call str_element (Minute, 1, "_", old_name)
dotpos = sindex(%%ref(minute), ".") + 1
 
call fs2rs(label_v, label)
call fold(label)
 
kk = 0
new_name = ""
call smovhn (Label, ARB, new_name, kk)
call vmovV  ("_",       new_name, kk)
call vmovVn (Scenario[1:hpos],  new_name, kk)
call vmovV  ("_",       new_name, kk)
call vmovVn (Minute[1:dotpos-1],    new_name, kk)
call vmovV  ("h.sve", new_name, kk)
 
# Eliminate Date (or first field) from label
# Linux has limit of 255 so check not needed
#if (kk > 42)
#{
#    hold_name = new_name
#    hold_len = kk
#    position = lib$matchc ("_", hold_name)
#    position = max(position,kk - 42)
#    kk = 0
#    new_name = ""
#    call vmovVn (hold_name[position+1:hold_len],     new_name, kk)
#}
 
call rename_saveBB_name (old_name, new_name[1:kk], RC)
 
if (RC != 0)
    {
    # "ALSP, we have a problem"
    call echov ("    Could not rename ALSP Save file.")
    call echor
 
    #$% move error status (rc) into errmsg array
    call geterr (rc,%%ref(errmsg))  # returns null terminated string
    call echov ("        ")
    call echov (errmsg)
    call echor
 
    new_name = "***" // errmsg
    }
 
return
end
