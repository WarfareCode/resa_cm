 
#####   WES version 3.1 converted to run on the VAX11/780   dated-29jan82
 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      FILEOP                        ECHOH                       VUE
#$%      ORSOPN                        ECHOR                       COM
#$%      MSGOPN                        OPEN
#$%      MSGEOF                        CLOSE
#$%      NODOPN
#$%      NODEOF
#$%      ORDOPN
#$%      ORDEOF
#$%      WGCAT  <WCOMMN>
#$%      WGHALT <WARCOM>
#$%      COMMNH <OCOMM >
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGFILE
#$%    =========================
#$%
#$%    WARCOM <WARCOM> - FILEOP - ORSOPN - WGCAT*
#$%    WARORD <WARORD>          - ORCOPN - WGCAT*
#$%    WGINIT <WARCYC>          - MSGOPN - WGCAT*
#$%                             - NODOPN - WGCAT*
#$%                             - ORDOPN - WGCAT*
#$%    WGHALT <WARCOM> - MSGEOF*
#$%                    - NODEOF - COMMNH*
#$%                    - ORDEOF*
 

 
undefine read
undefine write
undefine err
include "bbctl.inc"
include "bbcode.inc"
include "ascii.inc"
include "bbvue.inc"
include "bbcom.inc"
include "hscmd.inc"
include "hscmt.inc"
include "hsnod.inc"
include "plplay.inc"
 
define (BBImplicit, Implicit None)  # SMM 7/99 (E2056)
 
subroutine fileop                    # open all files
 
########################################################
#$%
#$% Purpose:   FILEOP provides executive control
#$%            over the opening of all files.
#$%
#$% Called By: WARCOM     WARORD     WGINIT
#$%
#$% Calls:     ORSOPN     ORCOPN     MSGOPN
#$%            NODOPN     ORDOPN
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
BBcommon
 
call RECopn                          # Open Engagement log
call ORSopn                          # Open Search orders file
call ORCopn                          # Open Contingency orders file
call ORAopn                          # Open Action Plan orders file
 
call MSGopn                          # Open Msg History file
 
call NODopn                          # Open Comm Node History file
 
call ORDopn                          # Open Player Order History file
 
return
end
 

 
 
subroutine ORAopn                       # Open Action Plan file
 
########################################################
#$%
#$% Purpose:   ORAOPN opens the Action Plans orders file.
#$%
#$% Called By: FILEOP
#$%
#$% Calls:     WGCAT      OPEN
#$%
#$% Tables:    None
#$%
#$% Date:      JUN 83
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
BBcommon
integer   ilen #SMM 7/99 (E2056)
 
character cfile[32]                                                    #VAX00
vaxcharacter*32 v_cfile
equivalence (cfile, v_cfile)
 
ilen=0
call smovhn (scenario$name,6,cfile,ilen)        # move the parts of the
call smovv  ("s.xap",cfile,ilen)              # file name into cfile
call smov   (EOS,cfile,ilen)                    # VAX needs null at end  VAX00
 
#$% open file
open(unit            = $lfc$action,
     access          = 'direct',                                     #VAX00
     file            = v_cfile,
     recl            = 2*$stk$lastarg,
     form            = 'unformatted',
#     carriagecontrol = 'none',
     status          = 'OLD')
 
return
end
 

 
 
subroutine ORSopn                       # Open Search orders file
 
########################################################
#$%
#$% Purpose:   ORSOPN opens the search orders file.
#$%
#$% Called By: FILEOP
#$%
#$% Calls:     WGCAT      OPEN
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
BBcommon
character cfile[32]                                                    #VAX00
vaxcharacter*32 v_cfile
equivalence (cfile, v_cfile)
 
integer   ilen #SMM 7/99 (E2056)
 
ilen=0
call smovhn (scenario$name,6,cfile,ilen)     # move the parts of the
call smovv  ("s.xsp",cfile,ilen)           # file name into cfile
call smov   (EOS,cfile,ilen)               # VAX needs null at end  VAX00
 
#$% open file
open(unit            = $lfc$search,
     access          = 'direct',                                     #VAX00
     file            = v_cfile,
     recl            = 2*$stk$lastarg,
     form            = 'unformatted',
#     carriagecontrol = 'none',
     status          = 'OLD')
 
return
end
 

 
 
subroutine ORCopn               # Open Contingency orders file
 
#############################################################
#$%
#$% Purpose:   ORCOPN opens the contingency orders file.
#$%
#$% Called By: FILEOP
#$%
#$% Calls:     WGCAT      OPEN
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
#############################################################
 
BBcommon
 
character cfile[32]                                                    #VAX00
vaxcharacter*32 v_cfile
equivalence (cfile, v_cfile)
integer   ilen # SMM 7/99 (E2056)
 
ilen=0
call smovhn (scenario$name,6,cfile,ilen)        # move the parts of the
call smovv  ("s.xcp",cfile,ilen)              # file name into cfile
call smov   (EOS,cfile,ilen)                    # VAX needs null at end  VAX00
 
#$% open file
open(unit            = $lfc$plans,
     access          = 'direct',                                     #VAX00
     file            = v_cfile,
     recl            = 2*$stk$lastarg,
     form            = 'unformatted',
#     carriagecontrol = 'none',
     status          = 'old')
 
return
end
 

 
 
subroutine MSGopn                    # Open Msg History file
 
########################################################
#$%
#$% Purpose:   MSGOPN opens the message history file.
#$%
#$% Called By: FILEOP
#$%
#$% Calls:     WGCAT      OPEN       CLOSE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
BBcommon
 
cmt$Record$Definition
 
character cfile[32]                                                #VAX00
vaxcharacter*32 v_cfile
equivalence (cfile, v_cfile)
 
integer   ilen  # SMM 7/99 (E2056)
 
ilen=0          # move the parts of the game identification to the file name...
 
call smovhn (scenario$name,6,cfile,ilen)        #  > Scenario name
 
if (Game$Designation != 0)                      # is there a game number ?
    {                                           # YES
    call smovv ('g',cfile,ilen)                  #  > a seperator character
    call smovi(Game$Designation,cfile,ilen)     #  > Game Number
    }
 
call smovv  ("h.msg",cfile,ilen)              #  > code & type
call smov   (EOS,cfile,ilen)                    #  > Terminator
 
#$% if game minute is one, clear the file
if (game$time == 1.0) # vts game$time startes out at 1.0 - JFR 2/10/94
   {
     #$% open file
     open(unit            = $lfc$comm,
         access          = 'direct',                                     #VAX00
         file            = v_cfile,
         recl            = cmt$MaxLength*4,
         form            = 'unformatted',
         status          = 'unknown')
 
    cmt$zero
 
    #$% write the new file
    write ($lfc$comm,REC=1) cmt$record
 
    #$% close the file
    close(unit = $lfc$comm)
   }
 
#$% open file
open(unit            = $lfc$comm,
     access          = 'direct',                                     #VAX00
     file            = v_cfile,
     recl            = cmt$MaxLength*4,
     form            = 'unformatted',
#     carriagecontrol = 'none',
     status          = 'unknown')
 
return
end
 
 
subroutine MSGeof                    # Close Msg History file
 
########################################################
#$%
#$% Purpose:   MSGEOF closes the message history file.
#$%
#$% Called By: WGHALT
#$%
#$% Calls:     CLOSE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
BBcommon
integer id # SMM 7/99  (E2056)
 
cmt$Record$Definition
 
cmt$zero
 
#$% set ID to next comm disk
id = Next$Comm$Disk
 
#$% write the new comm file to record
write ($lfc$comm,REC=id) cmt$record
 
#$% close the file
close(unit = $lfc$comm)
 
return
end
 

 
 
subroutine NODopn                    # Open Comm Node History file
 
########################################################
#$%
#$% Purpose:   NODOPN opens the communication node
#$%            history file.
#$%
#$% Called By: FILEOP
#$%
#$% Calls:     WGCAT      OPEN       CLOSE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
BBcommon
 
nod$record$definition
 
character cfile[32]                                                 #VAX00
vaxcharacter*32 v_cfile
equivalence (cfile, v_cfile)
 
integer   ilen # SMM 7/99  (E2056)
 
ilen=0          # move the parts of the game identification to the file name...
call smovhn (scenario$name,6,cfile,ilen)        #  > Scenario name
 
if (Game$Designation != 0)                      # is there a game number ?
    {                                           # YES
    call smovv ('g',cfile,ilen)                  #  > a seperator character
    call smovi(Game$Designation,cfile,ilen)     #  > Game Number
    }
 
call smovv  ("h.nod",cfile,ilen)              #  > code & type
call smov   (EOS,cfile,ilen)                    #  > Terminator
 
#$% if game minute is one, clear the file
if (game$time == 1.0) # clear the file # vts game$time startes out at 1.0 - JFR 2/10/94
   {
     #$% open file
     open(unit            = $lfc$node,
         access          = 'direct',                                     #VAX00
         file            = v_cfile,
         recl            = nod$MaxLength*4,
         form            = 'unformatted',
#         carriagecontrol = 'none',
         status          = 'unknown')
 
    nod$zero
    #$% write the new node file to record
    write ($lfc$node,REC=1) nod$record
 
    #$% close the file
    close(unit = $lfc$node)
   }
 
#$% open file
open(unit            = $lfc$node,
     access          = 'direct',                                     #VAX00
     file            = v_cfile,
     recl            = nod$MaxLength*4,
     form            = 'unformatted',
#     carriagecontrol = 'none',
     status          = 'unknown')
#     shared)
 
return
end
 

 
 
subroutine NODeof                       # close Comm Node History file
 
########################################################
#$%
#$% Purpose:   NODEOF closes the communication node
#$%            history file.
#$%
#$% Called By: FILEOP
#$%
#$% Calls:     COMMNH     CLOSE
#$%
#$% Tables:    COM
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
BBcommon
 
nod$record$definition
 
integer   node, msgid, id # SMM 7/99 (E2056)
integer   COM$Pointer     # SMM 7/99 (E2056)
 
#$% set ID to next node disk
id = next$node$disk
 
#$% for each COMM entry
for (com$pointer$first; still_ok(com) ; com$pointer$next) # 9/26/88
   {
    #$% if sender is not found, get next
    if (xcom$senderindx$i == 0) next
 
    #$% get message ID and node
    msgid = Xcom$MessageId$i
    node = Xcom$Node$i
 
    call commnh (msgid,node,6,com$pointer)  # put com node history record
   }
 
nod$zero
putnod$FlagEOF$i (-1)
 
write ($lfc$node,REC=next$node$disk) nod$record # write minus one for EOF
 
next$node$disk = id                     # restore next disk addr for restart
                                        # situations
 
#$% close the file
close(unit = $lfc$node)
 
return
end
 

 
 
subroutine ORDopn                    # Open Player Order History file
 
#############################################################
#$%
#$% Purpose:   ORDOPN opens the player order history file.
#$%
#$% Called By: FILEOP
#$%
#$% Calls:     WGCAT      OPEN       CLOSE
#$%            ECHOH      ECHOR
#$%
#$% Tables:    VUE
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
#$% Modified:  Susan Miller 3/99 (E2056)
#$%            Added conditional for opening new orders history
#$%            file if global History$File$New is $yes (default)
#$%
#############################################################
 
BBcommon
 
character cfile[32]                                                 #VAX00
vaxcharacter*32 v_cfile
equivalence (cfile, v_cfile)
 
integer   jstat, k, ilen  # SMM 7/99 (E2056)
integer   VUE$Pointer     # SMM 7/99 (E2056)
integer	  id
 
cmd$record$definition
 
 
ilen=0          # move the parts of the game identification to the file name...
call smovhn (scenario$name,6,cfile,ilen)        #  > Scenario name
 
if (Game$Designation != 0)                      # is there a game number ?
    {                                           # YES
    call smovv ('g',cfile,ilen)                  #  > a seperator character
    call smovi(Game$Designation,cfile,ilen)     #  > Game Number
    }
 
call smovv  ("h.ord",cfile,ilen)              #  > code & type
call smov   (EOS,cfile,ilen)                    #  > Terminator
 
#$% if game minute is one and not in review mode, clear the file
if ((game$minute     ==  1        &                        # 4/19/89 RJS
    execution$mode  != review$mode)) # E2230 joa 9/01      # clear out file
   {
    Next$order$id = 1
 
    #$% open file
    open(unit            = $lfc$orders,
         access          = 'direct',                                     #VAX00
         file            = v_cfile,
         recl            = cmd$MaxLength*4,
         form            = 'unformatted',
#         carriagecontrol = 'none',
         status          = 'unknown')
 
    cmd$zero
    #$% write the new orders file to record
    write ($lfc$orders,REC=1) cmd$Record
 
    #$% close the file
    close(unit = $lfc$orders)
   }
 
#$% We should open an existing file whenever possible
 
#$% open file
open(unit            = $lfc$orders,
     access          = 'direct',                                     #VAX00
     file            = v_cfile,
     recl            = cmd$MaxLength*4,
     form            = 'unformatted',
#     carriagecontrol = 'none',
     status          = 'unknown')
#     shared)
 
 
#$% If the Header record is invalid, make a good one
 
cmd$zero
read ($lfc$orders,REC=1,err=7010) cmd$record
 
REPEAT      # jb  E2143 (BRNCHINTOBLK)  7/12/00
    {
    BREAK   # jb  E2143 (BRNCHINTOBLK)  7/12/00
    7010
    if (cmd$record[1] == 0) # jb replaced by the REPEAT line: moved here 7/12/00
            next$order$id = 1       # this forces a new header....
    }
 
#$% if next order ID is one
if (next$order$id == 1 & execution$mode != review$mode)
   {
    #$% enter last view
    cmd$record[1] = $last$view
    k = 2
    #$% for each view entry
    for (vue$pointer$first; still_ok(vue) ; vue$pointer$next) # 9/26/88
       {
        #$% get force code
        cmd$record[k] = xvue$forcecode$i
        k=k+1
       }
 
    #$% write the new orders file to record
    write ($lfc$orders,REC=1) cmd$record
 
    #$% set next order ID to two
    next$order$id = 2
   }
else if (next$order$id != 1 & execution$mode != review$mode)
{
	# zero record indicatges EOF
    cmd$zero
    #$% write the new orders file to record
    id = next$order$id
    write ($lfc$orders,REC=id) cmd$Record
}
 
#$% else if execution mode is review
else if (execution$mode == review$mode)
   {
    #$% set status to NO
    jstat = $no
 
    #$% read file record
    read ($lfc$orders,REC=1,err=8010) cmd$record
 
    #$% if last view is not same
    if (cmd$record[1] != $last$view) go to 8010
 
    k = 2
    #$% for each VUE entry
    for (vue$pointer$first; still_ok(vue) ; vue$pointer$next)  # 9/26/88
       {
        #$% if force code is not same
        if (cmd$record[k] != xvue$forcecode$i) go to 8010
        k=k+1
       }
    #$% set status to YES
    jstat = $yes
 
    8010
 
    #$% if status is NO (vue not the same)
    if (jstat == $no)
       {
        #$% display message to user
        call echor
        call echov ("The Recorded Orders are not compatiable with the")
        call echor
        call echov ("scenario as it is currently initialized.")
        call echor
        stop
       }
   }
 
return
end
 
 
subroutine ORDeof                       # Close Player Order History file
 
#############################################################
#$%
#$% Purpose:   ORDOEF closes the player order history file.
#$%
#$% Called By: WGHALT
#$%
#$% Calls:     CLOSE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
#############################################################
 
BBcommon
 
integer   id  # SMM 7/99 (E2056)
 
cmd$record$definition
 
cmd$Zero
 
#$% set ID to next order disk
id = next$order$id
 
#$% if not in review mode
if (execution$mode != review$mode)
    #$% write orders to record
    write ($lfc$orders,REC=id) cmd$Record
 
#$% close the file
close(unit = $lfc$orders)
 
return
end
 

 
subroutine open_Start_Time_file
 
BBcommon                                       # Utilize Blackboard common
 
character   CFILE[64]                       # file containing game descriptors
vaxcharacter*64 v_cfile
equivalence (cfile, v_cfile)
 
integer     k # SMM 7/99 (E2056)
integer		irc, delete_file_version
k = 0
call smovhn (scenario$name,8,cfile,k)
 
if (Game$Designation != 0)                      # is there a game number ?
    {                                           # YES
    call smovv ('g',cfile,k)                    #  > a seperator character
    call smovi(Game$Designation,cfile,k)        #  > Game Number
    }
 
call smovv  ("h.tim",cfile,k)
call smov   ($null,cfile,k)
 
if ((game$minute     ==  1        &                        # 4/19/89 RJS
    execution$mode  != review$mode)) # E2230 joa 9/01      # clear out file
{
	irc = delete_file_version(cfile)
}
open (UNIT    = $LFC$Time,        # Initial OPEN of setup file for output
      FILE    =  V_CFILE,
      ACCESS  = "SEQUENTIAL",
      FORM    = "UNFORMATTED",
      STATUS  = 'unknown',
      ERR     =  200)
 
return                                         # return to record
 
200
 
HISTORY$FILE$ERROR = $NEWFILE$OPENERR     # History file open error
 
end
 

 
subroutine close_Start_Time_file
 
close (unit=$LFC$Time)
 
return
end
