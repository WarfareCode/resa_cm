 
#####   version   dated-  4/18/90
 
 
###
###
### smn prog    module  comments
### === ====    ======  =================================================
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLTRP                        ECHOH                      TRP
#$%      GETSR  <WGLOAD>               ECHOR
#$%      GSLOTM <WGLOAD>
#$%
#$%
#$%
#$%   NOTES
#$%   =====
#$%
#$%   1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%   2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%   3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%   FLOWCHART FOR FILE WGLTRP
#$%   =========================
#$%
#$%   START0 <WARGAM> - WGLOAD - WGLTRP - GETSR *
#$%                                     - GSLOTM*
 

 
define(DEBUG,#)
 
 
include "bbctl.inc"
include "bbcode.inc"
include "bbtrp.inc"
include "ascii.inc"
 
define($TorpedoTargetType$Code,4)   # SMM 4/99 (E2079)
 
define(BBImplicit, Implicit NONE)   # MJC 5/1/2000 (E-2145)
 
Subroutine wgltrp (reccnt,recsz,rec) #load in the weapons scenario file
      # jb E2208 Removed 4th argument, $$TBL    12/12/00
#############################################################
#$%
#$% Purpose:   WGLTRP loads scenario torpedo characteristics in
#$%     the improved model.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOH      ECHOR      GETSR
#$%            GSLOTM
#$%
#$% Tables:    TRP
#$%
#$% Date:      APR 90
#$%
#$% Author:
#$%
#$% Modified:  Susan Miller 4/99 (E2079)
#$%            Added new target type of torpedo.
#############################################################
 
BBcommon
 
integer reccnt,recsz,pnt
literal rec[1500]
 
integer kk,                 # jb E2209  11/30/00
        KEPUWT,LOOP,LEN,
        ISTAT,$$TBL,
        TRP$Pointer,
        TRP$Targetcode$I,
        TRP$Speed$I,
        TRP$Runtime$I,
        TRP$Epu$I,
        TRP$Maxalt$I,
        TRP$Sowrange$I,
        TRP$Burstcode$I,
        TRP$Acqrange$I,
        TRP$Acq1range$I,
        TRP$Acq2range$I,
        TRP$Acq3range$I,
        TRP$Yield$I             # MJC 5/1/2000 (E-2145)
real    TRP$Pblaunch$F,
        TRP$Pbdetection$F,
        TRP$Pbhit$F             # MJC 5/1/2000 (E-2145)
literal TRP$Name$C              # MJC 5/1/2000 (E-2145)
 
BBdeclare (TRP$FullName$V)                  # jb  E2209    11/30/00
 
DEBUG call echov ('<wgltrp:>')
 
#$% if file is empty (no record count)
if (reccnt <= 1)
   {
    #$% send warning message to user
    call echov  ('New Torpedo File Empty')
    call echor
    return
   }
 
kepuwt = 0
 
for (loop = 2; loop <= reccnt; )        #for each record in the file
    {
    call getsr (loop,recsz,rec)        #get scenario record
    len = rec[1]                       #save length
 
    #$% get empty slot from missile table
    call gslotm (TRP$pointer,$$TRP,TRP$entry,istat)
 
    #$% if table is full
    if(istat == $no)
        {
        #$% send warning message to user and get next entry
        call echov  ('Torpedos from ')
        call echohn (rec[3],$$MaxLit)
        call echov  (' and on are not loaded.')
        call echor
        next
        }
 
    TRP$NAME$C = rec[3]                      # get torpedo name and save
    putTRP$NAME$C
 
    #$% default for optional field
    TRP$TargetCode$i = $ShipAndSub$Code
 
    #$% for all remaining fields in record
    for (pnt = 4; pnt <= len;)
        {
        if (rec[pnt] == 'SPEED')
            {
            #$% get max range and save
            TRP$Speed$I = rec[pnt+1] +1
            putTRP$Speed$I
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'RUNTM')
            {
            #$% runtime
            TRP$RunTime$I = rec[pnt+1] +1       # in minutes
            putTRP$RunTime$I
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'EPU')
            {
            #$% get EPU weight and save
            TRP$EPU$I = rec[pnt+1]              # leave in EPU's
            putTRP$EPU$I
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'PL')
            {
            #$% get probability of launch and save
            TRP$PbLaunch$F = rec[pnt+1]/100.
            putTRP$PbLaunch$F
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'PD')
            {
            #$% get probability of detection and save
            TRP$PbDetection$F = rec[pnt+1]/100.
            putTRP$PbDetection$F
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'PH')
            {
            #$% get probability of hit and save
            TRP$PbHit$F = rec[pnt+1]/100.
            putTRP$PbHit$F
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'BBN')
            {
            #$% get BroadBand Noise
            #$% handle later when loading ship noise table
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'MXALT')
            {
            #$% get max altitude drop capable
            TRP$MaxAlt$i = rec[pnt+1]           # in feet
            putTRP$MaxAlt$i
            pnt = pnt + 2
            next
            }
        else if (rec[pnt] == 'SOWRG')
            {
            #$% get stand-off weapon max range
            TRP$SOWRange$i = rec[pnt+1]     # used if SOW type, in yards
            putTRP$SOWRange$i
            pnt = pnt + 2
            next
            }
        else if(rec[pnt] == 'TARGT')
            {
            if (rec[pnt+1]== 'SHIP')
                {
                TRP$TargetCode$i = $Surface$Code
                }
            else if (rec[pnt+1]== 'SUB')
                {
                TRP$TargetCode$i = $Sub$Code
                }
            else if (rec[pnt+1]== 'BOTH')
                {
                TRP$TargetCode$i = $ShipAndSub$Code
                }
            else if (rec[pnt+1]== 'TORP')    # SMM 4/99 (E2079)
                {
                TRP$TargetCode$i = $TorpedoTargetType$Code
                }
            putTRP$TargetCode$i
            pnt = pnt + 2
            next
            }
        else if(rec[pnt] == 'BURST')
            {
            if (rec[pnt+1]== 'AIR')
                {
                TRP$BurstCode$i = $Air$Code
                }
            else if (rec[pnt+1]== 'SUBSU')
                {
                TRP$BurstCode$i = $SubSurface$Code
                }
            else if (rec[pnt+1]== 'SURF')
                {
                TRP$BurstCode$i = $Surface$Code
                }
 
            putTRP$BurstCode$i
            pnt = pnt + 2
            next
            }
        #$% acquisition range, default sonar envirinment
        else if(rec[pnt] == 'ACQ')
            {
            TRP$ACQRange$i = rec[pnt+1]             # in Yards
            putTRP$ACQRange$i
            pnt = pnt + 2
            next
            }
        #$% acquisition range, sonar envirinment 1
        else if(rec[pnt] == 'ACQ1')
            {
            TRP$ACQ1Range$i = rec[pnt+1]             # in Yards
            putTRP$ACQ1Range$i
            pnt = pnt + 2
            next
            }
        #$% acquisition range, sonar envirinment 2
        else if(rec[pnt] == 'ACQ2')
            {
            TRP$ACQ2Range$i = rec[pnt+1]             # in Yards
            putTRP$ACQ2Range$i
            pnt = pnt + 2
            next
            }
 
        else if(rec[pnt] == 'NOMEN')  # jb E2209  11/29/00
           {
           TRP$Fullname$V = ""
           kk = 0
           call vmovh (rec[pnt+1], 24, TRP$Fullname$V, kk)
           putTRP$Fullname$V
           pnt = pnt + 4
           }
        else if(rec[pnt] == 'UDB')  # jb E2209  11/29/00
           {
           if      (rec[pnt+1] == 'YES') putTRP$UDB$i ($YES)
           else if (rec[pnt+1] != 'NO')  putTRP$UDB$i (!$NO)
           pnt = pnt + 2
           }
 
        #$% acquisition range, sonar envirinment 3
        else if(rec[pnt] == 'ACQ3')
            {
            TRP$ACQ3Range$i = rec[pnt+1]             # in Yards
            putTRP$ACQ3Range$i
            pnt = pnt + 2
            next
            }
        #$% loaded if nuclear
        else if(rec[pnt] == 'YIELD')
            {
            TRP$Yield$i = rec[pnt+1]             # in KiloTons
            putTRP$Yield$i
            pnt = pnt + 2
            next
            }
        else
            {
            #$% display to user that field is invalid
            call badfld('Torpedo ',rec[3],rec[pnt])
            #$% increment pointer
            pnt = pnt + 1
            }
        } # end for all remaining fields in record
 
    putTRP$TargetCode$i
 
    } # end for each record in the file
 
return
end
