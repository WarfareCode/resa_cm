##### FILE: STACTSUB.RAT
 
###
### mod to version 3.1          dated 7-dec-82
###
### smn prog    module  comments
### === ====    ======  =================================================
### 000 TPA             added astab active sonar tracks for version 3.1
###
###
 
#####   version 3.1  dated-  7apr81
 
# 
 
#$%      MODULE                        UTILITY                  DATA
#$%    SUBROUTINES                   SUBROUTINES               TABLES
#$%    ===========                   ===========               ======
#$%
#$%      ACTSUB                         OUTH                     RMT
#$%      ACTSUBTIT                      OUTI                     RVU
#$%      ACTSUBTRK                      OUT                      UNT
#$%      ACTSUBHED                      OUITZ
#$%      NXTACTSUB                      OUTIB
#$%      ACTSUBENT                      SMOVIB
#$%      ACTSUBNON                      SMOVIZ
#$%      ACTSUBDSH                      SMOVLL
#$%      ACTSUBCLS                      SMOVH
#$%      COMPAR<STATUS>                 TRUBRG
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1. <filename> indicates where subroutine is located.
#$%
#$%    2. Utility subroutines not shown on flowchart.
#$%
#$%    3. * indicates no other subroutines called.
#$%
#$%
#$%    FLOWCHART FOR FILE ACTSUB
#$%    =========================
#$%
#$%    STDISP<STATUS> - ACTSUB - ACTSUBTIT*
#$%                            - ACTSUBTRK - ACTSUBHED*
#$%                                     - NXTACTSUB - COMPAR*
#$%                                     - ACTSUBENT - ACTSUBCLS*
#$%                                     - ACTSUBNON - ACTSUBDSH*
 
 
# 
 
 
include "ascii.inc"                                     # include ascii constants
include "bbacc.inc"                                    # blackboard defines
include "bbcode.inc"                                    # blackboard defines
include "bbctl.inc"
include "bbunt.inc"                 # jb Replaces DUP    4/4/89
include "bbrmt.inc"
include "bbshc.inc"
include "bbrvu.inc"
include "stmain.inc"
 
define (BBimplicit, IMPLICIT NONE)  # jb E2145          1/20/00
define ($low$order$key,ikey2)
 
Subroutine ACTSUB			## Active Sub Track Status Board
 
##############################################################################
#$%
#$% Purpose:   ACTSUB initialization
#$%
#$% Called By:
#$%
#$% Calls:     ACTSUBTIT	ACTSUBTRK
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##############################################################################
 
BBcommon
STATUScommon
 
#$% call for display active Sub track status board titles
call ACTSUBTIT
 
#$% call for active Sub track status board data
call ACTSUBTRK
 
return
end
 

 
 
Subroutine ACTSUBTIT				## Active Sub Track Title
 
##############################################################################
#$%
#$% Purpose:   ACTSUBTIT generate title for the active Sub track status board.
#$%
#$% Called By: ACTSUB
#$%
#$% Calls:     $OUTH  $OutV    OUTIB
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##############################################################################
 
BBcommon
STATUScommon
 
integer Game_DTGs
 
#$% go to next line
$prepare$next$line
 
#$% display active track status board titles
$column  1 ; $outV("View: ") ; $outH(nmvue,5)
$column 17 ; $outV("ACTIVE SONAR TRACK STATUS [") ; $outI(iboard)
             $outV("] - Page ") ; $outIB(kpage,2)
$column 61 ; $outV("Game Time: ") ; $outIZ(Game_DTGs(igmin),8)
 
return
end
 

 
 
Subroutine ACTSUBTRK
 
############################################################################
#$%
#$% Purpose:   ACTSUBTRK executes the subroutines that generate the active
#$%            Sub track status board.
#$%
#$% Called By: ACTSUB
#$%
#$% Calls:     ACTSUBHED     ACTSUBENT
#$%            NXTACTSUB     ACTSUBNON
#$%
#$% Tables:    RMT
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
############################################################################
BBcommon
STATUScommon
 
Integer ifound, lstsec, RMT$Pointer     # jb  E2145     1/20/00
 
#$% call for active Sub track status board headings
call ACTSUBHED
 
#$% exit if status board full
$exit$on$overflow
 
#$% initialize test flag
ifound = $no
lstsec = 0
 
repeat
   {
    #$% get next active Sub track entry
    call NXTACTSUB(rmt$pointer)
 
    #$% if no active Sub track, break loop
    if (rmt$pointer == 0) break
 
    #$% set flag
    ifound = $yes
 
    #$% get active Sub track data
    call ACTSUBENT(rmt$pointer,lstsec)
 
    #$% exit if status board full
    $exit$on$overflow
   }
 
#$% if no active Sub tracks found, display message
if (ifound == $no)  call ACTSUBNON
 
return
end
 

 
 
Subroutine ACTSUBHED
 
##############################################################################
#$%
#$% Purpose:   ACTSUBHED generates headings for the active Sub track
#$%            status board.
#$%
#$% Called By: ACTSUBTRK
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer ilen            # jb  E2145         1/20/00
 
 
#$% move headings to IPAGE for display  # jb E2141  MSG1 modified:   2/22/00
#string MSG1 "PLATFORM   TRK #   BEARING  RANGE   TIME    LAT      LONG       SENSOR"
##            01234567890123456789012345678901234567890123456789012345678901234567890123456789
string MSG1  "PLATFORM   TRK #   BEARING  RANGE   TIME    LAT      LONG    SENSOR"
#stringIDASH "--------  -------    ---     ---    ----   ------   -------  ------"
 
ilen = 0; call smovh (MSG1,ARB,Ipage[1,2],ilen)
 
#$% set line length
LINLEN[2] = ilen    # jb E2141  2/20/00
 
#$% set line count
LINCNT = 2
 
return
end
 

 
 
Subroutine NXTACTSUB(nxtpnt)
 
###########################################################################
#$%
#$% Purpose:   NXTACTSUB locates the next active Sub track entry for display.
#$%
#$% Called By: ACTSUBTRK
#$%
#$% Calls:     COMPAR
#$%
#$% Tables:    RVU     RMT
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##########################################################################
 
BBcommon
STATUScommon
 
literal itrk[3]
LitCharEquiv(iorder,0:3)
LitCharEquiv(iclsch,0:3)
literal keys[3],lowest[3]
integer CTOI,
        kk,nxtpnt,lstrmt,irsult,        # jb E2145                 1/20/00
        RVU$Pointer,                    # jb E2145                 1/20/00
        RMT$Pointer,RMT$DetectionType$I,RMT$TrackNumber$I # E2145  1/20/00
BBDeclare (rmt$LastDetType$i, rmt$Class$i)
 
data iorderC[$unknown$code ]/ "1       " /
data iorderC[$enemy$code   ]/ "2       " /
data iorderC[$neutral$code ]/ "3       " /
data iorderC[$friendly$code]/ "4       " /
 
data iclschC[$sub$code     ]/ "U       " /
data iclschC[$surface$code ]/ "S       " /
data iclschC[$null$code    ]/ "        " /
 
 
#$% initialize search array
lowest[1] = '9'
lowest[2] = $highest$ascii
lowest[3] = '99999999'
 
#$% save key
keys[1] = $BLANKLIT
kk = 0; call smovi (isect,keys[1],kk)
 
#$% if first entry, save lowest; else save key
if (ikey == 1) keys[2] = $lowest$ascii
else           keys[2] = ikey
 
#$% save key
keys[3] = ikey2
 
#$% pointer to zero
nxtpnt = 0
 
#$% if CONTROL view, return
if (iview == $neutral$view) return
 
#$% set RVU pointer
RVU$pointer$to iview
 
#$% set RMT pointer
rmt$pointer$to xRVU$LastRmtIndx$i
lstrmt = rmt$pointer
 
#$% search RMT table
for (rmt$pointer$to xRVU$FirstRmtIndx$i;rmt$pointer<=lstrmt;rmt$pointer$next)
   {
    #$% if slot not in use, get next
    if (xrmt$InUse$i == $no) next
    if (xRMT$Detector$I == $no) next
 
    RMT$Class$I = xRMT$Class$I
    if (RMT$Class$I != $Sub$code & RMT$Class$I != $Surface$code) next
 
    #$% get detection type
    rmt$DetectionType$i = xrmt$DetectionType$i
 
    #$% if detection is not active sonar, get next entry
    if (rmt$DetectionType$i != $ActiveNonVisual$code) next
 
    RMT$LastDetType$I = XRMT$LastDetType$I
    if (RMT$LastDetType$I == $Radar$Type  |
        RMT$LastDetType$I == $Mad$Type    |
        RMT$LastDetType$I == $Lidar$Type  |
        RMT$LastDetType$I == $Bistatic$Type) next
 
    #$% get track number
    rmt$TrackNumber$i = xrmt$TrackNumber$i
 
    #$% if track number is not valid, get next entry
    if (rmt$TrackNumber$i == 0) next            # means data is garbage
 
    #$% set Sub & target identification
    itrk[1] = iorder[xrmt$TargetId$i]
    #$% set air,Sub,etc & target class
    itrk[2] = ICLSCH[rmt$Class$i]
    #$% save entries
    itrk[3] = $BLANKLIT
    kk = 0; call smoviz (rmt$TrackNumber$i,5,itrk[3],kk)    # DEW 11/99 (E2172)
 
 
    #$% compare track number to keys
    call COMPAR(3,itrk,keys,irsult)
 
    if (irsult <  0) next                       # less than keys
 
    if (irsult == 0)                            # found exact match
       {
	#$% save pointer and return
	nxtpnt = rmt$pointer
	return
       }
 
    #$% compare track numbers to lowest
    call COMPAR(3,itrk,lowest,irsult)
 
    if (irsult > 0) next                        # larger than lowest found
 
    lowest[1] = itrk[1]                         # at this point, have
    lowest[2] = itrk[2]                         # best candidate so far
    lowest[3] = itrk[3]
 
    #$% save pointer
    nxtpnt = rmt$pointer
   }
 
#$% save lowest keys
#kk = 0; call smovh (lowest[1],4,isect,kk)	# isect = lowest[1]
kk    = 1
 
#$% convert characters to integers
isect = ctoi(lowest[1],kk)
 
#$% set lowest tracks as keys
ikey  = lowest[2]
ikey2 = lowest[3]
 
return
end
 

 
 
Subroutine ACTSUBENT(rmt$pointer,lstsec)
 
#####################################################################
#$%
#$% Purpose:   ACTSUBENT gets the active Sub track data for display.
#$%
#$% Called By: ACTSUBTRK
#$%
#$% Calls:     ACTSUBCLS     $OUTH  $OutV      OUT
#$%            OUTIZ      OUTIB      SMOVIB
#$%            SMOVIZ     SMOVLL     SMOVH
#$%            TRUBRG
#$%
#$% Tables:    RVU     RMT
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
#####################################################################
 
BBcommon
STATUScommon
 
Literal CSTRIP,CSTRIP8, icode,name, UNT$Name$C, a_track # jb  C2145 1/20/00
REAL*4  RMT$ApparentLat$F,RMT$ApparentLon$F, UNT$HeadingError$F,
        UNT$TrueLatitude$F,UNT$TrueLongitude$F          # jb  C2145 1/20/00
REAL*4  RMT$LastDetTime$F              # jb C2145 (REAL, in RESA)   1/20/00
Integer TRUBRG,Game_Time, ctoi,                         # jb  C2145 1/20/00
        kk,lstsec,irange,itrue,iclch,itseq,ibrgr,       # jb  C2145 1/20/00
        RMT$Pointer,RMT$Detector$I,RMT$LastDetType$I,   # jb  C2145 1/20/00
        RMT$Bearing$I,RMT$DetectionType$I,RMT$Detectee$I, # jb  C2145 1/20/00
        RVU$Pointer, UNT$Pointer                        # jb  C2145 1/20/00
 
#$% test and exit on overflow, save line count
$test$next$line ; $exit$on$overflow
$save$line$count
 
#$% save keys
kk=0; call smovh (ikey,4,iclch,kk)	# iclch = ikey
kk = 1; itseq = ctoi(ikey2,kk)                              # DEW 11/99 (E2172)
 
#$% increment keys
$update$keys
 
#$% go to next line
$prepare$next$line
 
#$% if section not valid
if (isect != lstsec)
   {
    #$% get "ENEMY","FRIENDLY",etc headings for display
    call ACTSUBCLS
 
    #$% test and exit if status board full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% save last section
    lstsec = isect
   }
 
#$% set RVU pointer; set track code
RVU$pointer$to iview
icode = xRVU$trackcode$c
 
#$% get detector making the contact
rmt$detector$i = xrmt$detector$i
 
$column 1           # jb E2141  1 vice 3        1/20/00
 
#$% if detector is a valid one
if (rmt$detector$i != $no)
   {
    #$% set UNT pointer to the detector and  get name of platform
    UNT$POINTER$TO rmt$detector$i
    UNT$NAME$C = XUNT$NAME$C
 
    #$% if name is valid, display name of platform
    if (UNT$NAME$C != $NO) $outH(UNT$Name$c,$$MAXname) # jb E2141   1/20/00
   }
 
#$% display track codes and number  # jb E2141 (col 11 vice 12) 2/23/00
$column 11 ; $OutHN(a_track(icode,iclch,itseq),$$MaxLit)    # DEW 11/99 (E2172)
 
#$% get bearing to target
rmt$bearing$i = xrmt$bearing$i
 
IBYTE = 21
 
#$% move bearing to IPAGE for display
call SMOVIZ(_
     rmt$bearing$i,
     3,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get range to target
irange = Xrmt$range$f + 0.5
 
IBYTE = 29
 
#$% move range to IPAGE for display
call SMOVIB(_
     irange,
     3,
     IPAGE[1,LINCNT],
     IBYTE)
 
 
#$% get last detection time
rmt$LastDetTime$f = xrmt$LastDetTime$f
 
IBYTE = 36
 
#$% move last detection time to IPAGE for display
call SMOVIZ(_						## tpa
     Game_Time(rmt$LastDetTime$f),
     4,
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get apparent latitude
rmt$apparentlat$f = xrmt$apparentlat$f
 
IBYTE = 43
 
#$% move apparent latitude to IPAGE for display
call SMOVLL(_
     rmt$apparentlat$f,
     "NS",
     IPAGE[1,LINCNT],
     IBYTE)
 
#$% get apparent longitude
rmt$apparentlon$f = xrmt$apparentlon$f
 
IBYTE = 52
 
#$% move apparent longitude to IPAGE for display
call SMOVLL(_
     rmt$apparentlon$f,
     "EW",
     IPAGE[1,LINCNT],
     IBYTE)
 
ibyte = 61          # jb E2141  (61 vice 64)        2/22/00
 
    				
#    #$% move sensor classification to IPAGE for display  tpa 3/12/84
 
name = $BLANKLIT
 
RMT$DetectionType$I = xRMT$DetectionType$I
rmt$LastDetType$i   = Xrmt$LastDetType$i
 
if      (RMT$DetectionType$I == $ActiveVisual$Code)  name = 'VISUAL'
else if (RMT$LastDetType$I   == $Radar$Type)         name = 'RADAR'
else if (RMT$LastDetType$I   == $Mad$Type)           name = 'MAD'
else if (RMT$LastDetType$I   == $Lidar$Type)         name = 'LIDAR'
else if (RMT$LastDetType$I   == $Bistatic$Type)
{
    name = $BLANKLIT
}
else                                                 name = 'SONAR'
 
call SMOVH(name, 6, IPAGE[1,LINCNT], IBYTE) # jb E2141 (6 vs $$MAXlit) 2/22/00
 
#$% set line length
linlen[lincnt] = IBYTE
 
#$% if view is CONTROL view
if (mside == $control$code)
   {
    #$% test and exit if status board is full; go to next line
    $test$next$line ; $exit$on$overflow
    $prepare$next$line
 
    #$% get detectee unit number
    rmt$detectee$i = xrmt$detectee$i
 
    #$% set pointer to detectee
    UNT$POINTER$TO rmt$detectee$i
 
    #$% get name of detectee
    UNT$NAME$C = XUNT$NAME$C
 
    #$% display left paren
    $column 10 ; $outV("(") # jb E2141 (10 vs 11) 2/22/00; E2144 (OutV) 7/20/00
 
    #$% if there is a detectee name, display it
    if (UNT$NAME$C != 0) $outHN(UNT$NAME$C,$$MAXname) # jb E2141     2/22/00
    #$% else display "M" & detectee unit number
    else               { $outV("M") ; $outIZ(rmt$detectee$i,4) } # jb E2144 7/00
    #$% display right paren
    $outV(")")                               # jb E2144  $OutV  7/20/00
 
    $column 21
 
    #$% if no detector indicated, display "(Removed)"
    if (rmt$detector$i == 0) $outV("(Removed)") # jb E2144  $OutV  7/00
    #$% else if detector indicated
    else
       {
	#$% set Unit pointer to detector
	UNT$POINTER$TO rmt$detector$i
 
	#$% get heading error
	UNT$HEADINGERROR$F = XUNT$HEADINGERROR$F
 
	#$% convert to true bearing
    if (Xrmt$LastDetType$i != $Bistatic$type)
      ITRUE = TRUBRG(UNT$HEADINGERROR$F, rmt$bearing$i)
    else   # bistatic detection (which includes std dev brg error)
      {
       iBrgR = INT (UNT$HeadingError$F) + xRMT$BrgError$i
       itrue = rmt$bearing$i - iBrgR
       if (itrue > 360) itrue = itrue - 360
       else if (itrue < 0) itrue = itrue + 360
       else if (itrue == 360) itrue = 0
      }
 
	#$% display true bearing in parens
	$outV("(") ; $outIZ(ITRUE,3) ; $outV(")") # jb E2144 (OutV) 7/20/00
       }
 
    #$% get UNT pointer to detectee (target)
    UNT$POINTER$TO rmt$detectee$i
 
    #$% get true latitude and longitude of target
    UNT$TRUELATITUDE$F = XUNT$TRUELATITUDE$F
    UNT$TRUELONGITUDE$F = XUNT$TRUELONGITUDE$F
 
    #$% display true latitude and longitude in parens
    $column 43 ; $outV("(") ; $outLL(UNT$TRUELATITUDE$F,"NS")  # jb E2144 7/00
    $column 53 ; $outLL(UNT$TRUELONGITUDE$F,"EW") ; $outV(")") # jb E2144 7/00
   }
 
return
end
 

Subroutine ACTSUBNON
 
#############################################################################
#$%
#$% Purpose:   ACTSUBNON generates a message when there is no active track
#$%            Sub data for display.
#$%
#$% Called By: ACTSUBTRK
#$%
#$% Calls:     ACTSUBDSH     $OUTV
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
#############################################################################
 
BBcommon
STATUScommon
 
 
#$% test if status board full; go to next line
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% get dashes for display
call ACTSUBDSH
 
#$% test if status board full; go to next line
$test$next$line ; $exit$on$overflow
$prepare$next$line
 
#$% display "No active track" message
$column 1 ; $outV("No active sonar tracks for this view") # jb E2144 $OutV 7/20/00
 
return
end
 

 
 
Subroutine ACTSUBDSH
 
############################################################################
#$%
#$% Purpose:   ACTSUBDSH outputs appropriately spaced dashes in the track
#$%            status board.
#$%
#$% Called By: ACTSUBNON
#$%
#$% Calls:     OUTH
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
############################################################################
BBcommon
STATUScommon
 
#$%         jb  E2141   string IDASH modified:      2/22/00
##string IDASH "  -----    -----     ---     ---    ----   ------   -------     ----- "
##            01234567890123456789012345678901234567890123456789012345678901234567890123456789
string IDASH "--------  -------    ---     ---    ----   ------   -------  ------"
 
 
#$% display dashes
$column 1 ; $outH(idash,67) # jb    E2141   (67 vice 70)    2/22/00
 
return
end
 

 
 
Subroutine ACTSUBCLS
 
##############################################################################
#$%
#$% Purpose:   ACTSUBCLS generates type of track headings (re: friendly, enemy,
#$%            etc.) for the status board.
#$%
#$% Called By: ACTSUBENT
#$%
#$% Calls:     None
#$%
#$% Tables:    None
#$%
#$% Date:      7 DEC 82
#$%
#$% Author:    Timothy P. Adamos
#$%
##############################################################################
BBcommon
STATUScommon
 
Integer kk      # jb  E2145     1/20/00
 
kk = 0              #\/ jb E2141; smovv call modified:    2/22/00
#call smovv ("  -----    -----     ---    ",ipage[1,LINCNT],kk)
call smovv ("--------  -------    ---    ",ipage[1,LINCNT],kk) # jb 2/22/00
##           01234567890123456789012345678901234567890123456789012345678901234567890123456789
 
 
#$% position headings and display
if      (isect == 1 ) call smovv("---UNKNOWN--",ipage[1,LINCNT],kk)
else if (isect == 2 ) call smovv("----ENEMY---",ipage[1,LINCNT],kk)
else if (isect == 3 ) call smovv("---NEUTRAL--",ipage[1,LINCNT],kk)
else if (isect == 4 ) call smovv("---FRIENDLY-",ipage[1,LINCNT],kk)
 
#$% position and display dashes;  jb E2141; smovv call modified:  2/22/00
#call smovv ("   ------   -------     ----- ",ipage[1,LINCNT],kk)
call smovv ("   -------  -------  ------",ipage[1,LINCNT],kk) # jb 2/22/00
##           01234567890123456789012345678901234567890123456789012345678901234567890123456789
 
LINLEN[LINCNT] = kk
 
return
end
