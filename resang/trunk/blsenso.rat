 
#####   version 3.1  dated-  7apr81
#####   version 3.0  dated- 22dec80
#####   add more radar parameters for TFCC 25 Apr 85 - JPK
 
# 
 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine senso
 
      ##################################################
      #$%
      #$% Purpose:   SENSO allows the user to in-
      #$%            teract with radar and ESM
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Dana Wills
      #$%
      #$% Special Note: As of 10/23/89 Radars may have multiple modes,
      #$% similar to the old "ACHAN" (alternate channel). A mode, however,
      #$% may consist of many radar characteristics. To accomodate this,
      #$% a mode is broken down into two constituents, MODEA and MODEB.
      #$% This is because 15 to 20 fields may be updated for a MODE.
      #$% A check is made, requiring the same value in the field "CHAN" for
      #$% a unique mode.
      #$%
      #$%
      #$%
      #$%
      #$%
      ##################################################
 
#
#     New SENSOR
#
##      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT NONE     # jb E2145  3/30/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom,  6)     # The number of entries in defCOM table. clf 8/10/92
define (zdctyp,116)     # The size of the defTYP table.          jms 11/17/92
define (zdcfld,569)     # The size of the defFLD table.          jms 11/17/92
define (zdsarg,  8)     # The size of entries in the defARG table.  1/06/86
define (zdcarg, 56)     # The number of entries in defARG table. jms 11/17/92
define (zdcfmt, 17)     # The number of entries in defFMT table. clf 8/12/92
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
define ($number$modes,10)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
 
 
 
      character  line[80]
 
      logical    chans[ $number$modes]                    # AM. 4/24/89
      logical    ModeA_Exists[ $number$modes]             # reh 10/24/89
      logical    ModeB_Exists[ $number$modes]             # reh 10/24/89
      logical    pulse_Exists[ $number$modes]             # reh 6/91
      Real*4     pulse_width [ $number$modes ]
      Real*4     pulse_RR [ $number$modes ]
 
      real*4     low_frequency
      real*4     hi_frequency
 
      Integer   iw,istat,comcnt,imode
      Integer   m
 
## Note: Declarations in BLSUB!.rin may apply..     3/30/00
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("    Rada","rs, ESM ","& IR"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of sensors
 DATA$com("CAT  ",  1)      # Type of sensors
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("MNFAL",- 1)      # Mean time between failures # REH 05/88
 DATA$com("MNRPR",- 1)      # Mean time to repair # REH 05/88
 
 $set (Data_Count,0)
 DATA$typ("RADAR",    24)   # RADAR
 DATA$typ(    "SRATE",  1)   # Scan rate
 DATA$typ(    "FREQ ",  1)   # Sensor operating frequency
 DATA$typ(    "PRR  ",  1)   # Pulse repetition rate
 DATA$typ(    "BEAM ",  1)   # Horizontal Beamwidth
 DATA$typ(    "SSECT",  1)   # Scan sector
 DATA$typ(    "PFA  ",  1)   # Probability of false alarm
 DATA$typ(    "FUNCT",  1)   # Air, Surface, Missile, Fire Control
 DATA$typ(    "RANGE",  1)   # Maximum sensor range
 DATA$typ(    "POWER",  1)   # Peak power
 DATA$typ(    "BDWTH",  1)   # Receiver bandwidth (R-F)
 DATA$typ(    "NSFIG",  1)   # Radar noise figure
 DATA$typ(    "GAIN ",  1)   # Antenna gain
 DATA$typ(    "MINRN", -1)   # Minimum detection range           JFR 5/7/91
 DATA$typ(    "OPVAL", -1)   # OPerational VALue of EQ.  JFR  5/7/91
 DATA$typ(    "SATUR",- 1)   # Saturation threshold     10/26/89
 DATA$typ(    "BURNO",- 1)   # Burnout threshold         6/26/89
 DATA$typ(    "LFREQ", -1)   # Low end of frequency range     # reh 10/22/89
 DATA$typ(    "HFREQ", -1)   # High end of frequency range    # reh 10/22/89
 DATA$typ(    "MFUNC",- 4)   # Multi-function radar parameters
 DATA$typ(    "BEAMH", -1)   # Vertical beam width JFR  5/7/91
 DATA$typ(    "OBEAM",- 1)   # antenna off-beam correction, dB below On-beam
 DATA$typ(    "MODEA",-10)   # Alternate mode(s), Part A    # reh 10/23/89
 DATA$typ(    "MODEB",-10)   # Alternate mode(s), Part B    # reh 10/24/89
 DATA$typ(    "PULSE",- $number$modes)  # pulse width
 
 DATA$typ("ESM  ", 12)   # ESM           # 4 vice 3      9/30/85
 DATA$typ(    "HFREQ",  1)   # High frequency
 DATA$typ(    "LFREQ",  1)   # Low frequency
 DATA$typ(    "LOSS ",  1)   # System loss           # ,     9/30/85
 DATA$typ(    "BRERR",  1)   # Std.Dev. of Brg. Error added  11/1/85
 DATA$typ(    "BDWTH",  1)   # Receiver bandwidth (R-F)
 DATA$typ(    "NSFIG",  1)   # Radar noise figure
 DATA$typ(    "GAIN ",  1)   # Antenna gain
 DATA$typ(    "MINRN", -1)   # Minimum detection range           JFR 5/7/91
 DATA$typ(    "OPVAL", -1)   # OPerational VALue of EQ.  JFR  5/7/91
 DATA$typ(    "SATUR",- 1)   # Saturation threshold     10/26/89
 DATA$typ(    "BURNO",- 1)   # Burnout threshold         6/26/89
 DATA$typ(    "RANGE", -1)   # Maximum esm sensor range  # clk 12/92 (E1110)
 
 DATA$typ("IR   ",  19)  # IR -- jms 11/17/92
 DATA$typ(    "HAZIM",  1)  # Home Azimuth
 DATA$typ(    "HELEV",  1)  # Home Elevation
 DATA$typ(    "NFOV ",  1)  # Number of fields of view
 DATA$typ(    "ALIMS",  1)  # Angle limits for IR Positioning
 DATA$typ(    "F1ANG",  1)  # FOV 1 (Wide) half angles
 DATA$typ(    "F1PRB",  1)  # Probabilities for FOV 1
 DATA$typ(    "F1PRM",  1)  # Miscellaneous parameters for FOV 1
 DATA$typ(    "TEMPF",  1)  # Time of day temperature prob factors
 DATA$typ(    "RSMIN",  1)  # Relative Speed minimum probability
 DATA$typ(    "SRMIN",  1)  # Scan Rate minimum probability
 DATA$typ(    "SRBP ",  1)  # Scan rate break point
 DATA$typ(    "HPIXL",  1)  # Number of Horizontal pixels in FOV
 DATA$typ(    "VPIXL",  1)  # Number of Vertical pixels in FOV
 DATA$typ(    "F2ANG", -1)  # FOV 2 (Medium) half angles
 DATA$typ(    "F2PRB", -1)  # Probabilities for FOV 2
 DATA$typ(    "F2PRM", -1)  # Miscellaneous parameters for FOV 2
 DATA$typ(    "F3ANG", -1)  # FOV 3 (Narrow) half angles
 DATA$typ(    "F3PRB", -1)  # Probabilities for FOV 3
 DATA$typ(    "F3PRM", -1)  # Miscellaneous parameters for FOV 3
 
# arguments for deffld
#     1) field name
#     2) number sub field names for this input
#     3) format element number
#     4) sub field
#     5) iterations of previous sub field
 
 
 
##                  2? for BRERR..<<<>>>                        9/30/85
 
 $set (Data_Count,0)
 DATA$fld1("NAME ", 1, 1,"ALPHA", 1,"Name of ","sensor  ","        ","      ")
 DATA$fld1("CAT  ", 1, 1,"CAT  ", 1,"Cat of s","ensor RA","DAR, ESM",", IR  ")
 DATA$fld1("FUNCT", 1, 1,"TYPE ", 1,"Function","- SUR/AI","R/MIS/FI","R/APP ")
 DATA$fld1("BRERR", 1, 2,"DEG3 ", 1,"Bearing-","Err Stan","dard Dev","iation")
 DATA$fld1("RANGE", 1, 2,"MILES", 1,"Maximum ","sensor r","ange    ","      ")
 DATA$fld1("POWER", 1, 2,"dBW  ", 1,"Peak pow","er  dBW ","        ","      ")
 DATA$fld1("BDWTH", 1, 9,"MHz2 ", 1,"Receiver"," bandwid","th      ","      ")
 DATA$fld1("PFA  ", 1, 2,"-n%  ", 1,"Prob fal","se alarm"," (as 10 ","to -n)")
 DATA$fld1("SRATE", 1, 2,"MINUT", 1,"Scan rat","e       ","        ","      ")
 DATA$fld1("MNFAL", 1, 2,"MINUT", 1,"Mean tim","e betwee","n failur","es    ")
 DATA$fld1("MNRPR", 1, 2,"MINUT", 1,"Mean tim","e to rep","air     ","      ")
 DATA$fld1("NSFIG", 1, 2,"dB   ", 1,"Rcvr noi","se figur","e       ","      ")
 DATA$fld1("OBEAM", 1, 2,"OffdB", 1,"Tx anten","na OffBe","am corre","ction ")
 DATA$fld1("GAIN ", 1, 2,"ANTdB", 1,"Antenna ","Gain  dB","        ","      ")
 DATA$fld1("HFREQ", 1, 2,"MHz  ", 1,"HIGH -  ","Frequenc","y       ","      ")
 DATA$fld1("LFREQ", 1, 2,"MHz3 ", 1,"LOW -  F","requency","        ","      ")
 DATA$fld1("LOFRQ", 1, 2,"MHz  ", 1,"Rx Local"," Oscilla","tor Freq","uency ")
 DATA$fld1("IFREQ", 1, 2,"MHz  ", 1,"Rx Inter","mediate ","Frequenc","y     ")
 DATA$fld1("FREQ ", 1, 9,"MHz3 ", 1,"Wave len","gth     ","        ","      ")
 DATA$fld1("PRR  ", 1, 2,"RATE ", 1,"Pulse re","petition"," rate   ","      ")
 DATA$fld1("BEAM ", 1, 2,"DEG2 ", 1,"Beamwidt","h (in te","nths of ","deg)  ")
 DATA$fld1("SSECT", 1, 2,"DEG  ", 1,"Scan sec","tor     ","        ","      ")
 DATA$fld1("LOSS ", 1, 2,"dB   ", 1,"System l","oss     ","        ","      ")
 DATA$fld1("IFBW ", 1, 2,"MHz1 ", 1,"Intermed","iate Fre","q. Bandw","idth  ")
 DATA$fld4("PULSE", 4,10,"RMODE", 1,"MODE ", 1,"WIDTH", 1,"RATE ", 1,"Width an","d Prr (m","cSec & p","ps)    ")
 DATA$fld3("NOMEN", 3,-17,"Text ",1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("SENSI", 1, 2,"dBm  ", 1,"Receiver"," Sensiti","vity,dB/","/mWatt")
 DATA$fld1("BURNO", 1, 2,"dBm2 ", 1,"Burnout ","Threshol","d, dB//m","W     ")
 DATA$fld1("SATUR", 1, 2,"dBm2 ", 1,"Saturati","on Thres","hold, dB","//mW  ")
 DATA$fld1("OPVAL", 1, 2,"VAL  ", 1,"Operatio","nal Valu","e of Rad","ar/ESM")
 DATA$fld1("MINRN", 1, 2,"MILES", 1,"Minimum ","Detectio","n Range ","      ")
 DATA$fld1("BEAMH", 1, 2,"DEG18", 1,"Beam hei","ght (in ","tenths o","f deg)")
 DATA$fld10("MFUNC",10, 3,"MODE ", 1,"ENOTE",1,"FCODE",1,"XCNTD",1,"MFREQ",1,"MPW",1,"MPRR",1,"MSRTE",1,"STYPE",1,"POLAR",1,"Multfunc","tion rad","ar param","aters   ")
 DATA$fld10("MODEA",10, 6,"CHAN ", 1,"dBW  ",1,"MHz3 ", 1,"MHz2 ", 1,"MHz",1,"MHz1",1,"MHz",1,"dBm",1,"MODUL",1,"SELCT",1,"Channel ",",Power,"," Freq, B","andwidth")
 DATA$fld4("MODEB",4, 4,"CHAN ", 1,"SCANRATE", 1,"RATE ", 1,"DEG  ",1,"Channel,"," SRate, ","PRR,  SS","ECTOR ..")
 DATA$fld1("HAZIM",1, 2,"DEG4 ",1,"Home azi","muth ang","le      ","        ")
 DATA$fld1("HELEV",1, 2,"DEG5 ",1,"Home ele","vation a","ngle    ","        ")
 DATA$fld1("NFOV ",1, 2,"FOVS ",1,"Number o","f Fields"," of view","        ")
 DATA$fld4("ALIMS",4,12,"DEG4 ",1,"DEG4 ",1,"DEG5 ",1,"DEG5 ",1,"Gimbal l","imits L,","R,Up,Dow","n       ")
 DATA$fld2("F1ANG",2,16,"DEG6 ",1,"DEG6 ",1,"FOV1 Azi","muth and","Elevatio","n angles")
 DATA$fld1("F1PRB",1,13,"PROB ",1,"Probabil","ity adju","stment f","actor   ")
 DATA$fld2("F1PRM",2,14,"NMI  ",1,"RELSP",1,"FOV1 Max"," Range a","nd Max R","el Speed")
 DATA$fld2("F2ANG",2,16,"DEG6 ",1,"DEG6 ",1,"FOV2 Azi","muth and","Elevatio","n       ")
 DATA$fld1("F2PRB",1,13,"PROB ",1,"Probabil","ity adju","stment f","actor   ")
 DATA$fld2("F2PRM",2,14,"NMI  ",1,"RELSP",1,"FOV2 Max"," Range a","nd Max R","el Speed")
 DATA$fld2("F3ANG",2,16,"DEG6 ",1,"DEG6 ",1,"FOV3 Azi","muth and","Elevatio","n       ")
 DATA$fld1("F3PRB",1,13,"PROB ",1,"Probabil","ity adju","stment f","actor   ")
 DATA$fld2("F3PRM",2,14,"NMI  ",1,"RELSP",1,"FOV3 Max"," Range a","nd Max R","el Speed")
 DATA$fld3("TEMPF",3,15,"PROB ",1,"PROB ",1,"PROB ",1,"Temperat","ure ftrs"," - Nght,","Day,Dusk")
 DATA$fld1("RSMIN",1,13,"PROB ",1,"Relative"," speed m","in proba","bility  ")
 DATA$fld1("SRMIN",1,13,"PROB ",1,"Scan rat","e minimu","m probab","ility   ")
 DATA$fld1("SRBP ",1,13,"DEG7 ",1,"Scan rat","e break ","point (d","eg/sec) ")
 DATA$fld1("HPIXL",1, 2,"PIXEL", 1,"Number o","f pixels"," in Hori","z FOV ")
 DATA$fld1("VPIXL",1, 2,"PIXEL", 1,"Number o","f pixels"," in Vert"," FOV  ")
 
 $set (Data_Count,0)
 DATA$arg8N("ALPHA",6000, 0,    0,0,0,0,0)      # Alphanumeric -- Anything
 DATA$arg8N("NAME ",6000, 0,    0,0,0,0,0)          # Alphanumeric -- Anything
 DATA$arg8N("MODUL",6000, 0,    0,0,0,0,0)          # Alphanumeric -- Anything
 DATA$arg8N("ENOTE",6000, 0,    0,0,0,0,0)          # Alphanumeric -- Anything
 DATA$arg8N("FCODE",6000, 0,    0,0,0,0,0)          # Alphanumeric -- Anything
 DATA$arg8N("STYPE",6000, 0,    0,0,0,0,0)          # Alphanumeric -- Anything
 DATA$arg8N("POLAR",6000, 0,    0,0,0,0.0)          # Alphanumeric -- Anything   # 5/29/86
 DATA$arg8C("CAT  ",8003, "RADAR","ESM  ","IR   ")
 DATA$arg8N("SPEC ",6000)                 # Alphanumeric -- Anything
 DATA$arg8C("TYPE ",8005, "SURF ","AIR  ","MISS ","FIRE ","APPRO") # Alphanumeric list
 DATA$arg8C("SELCT",8004, "POOR ","AVG  ","GOOD ","EXCEL") # Alphanumeric list
                # !!!! be sure that BBRAD ranges are the same !!!
                # (it uses an OFFSET of the low end of "dBm"). It is very
                # important that BUILD low range "dBm" is same as BBRAD
                # low end range of sensitivity
 DATA$arg8N("dBm  ",2000, -160, -10,0,0,0)        # Numeric Range -120 -> -10
 DATA$arg8N("dBm2 ",2000, -120,120,0,0,0)         # Numeric Range -120 -> 120
 DATA$arg8N("dBW  ",2000, 0,   100,0,0,0)         # Numeric Range 0 -> 100 # joa 12/11
 DATA$arg8N("Text ",9024)                         # Alphanumeric string (24 bytes)
 DATA$arg8N("...  ",9000)                         # Alphanumeric string filler
 DATA$arg8C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg8N("ANTdB",2000, -200, 200,0,0,0)        # Numeric Range -200 -> 200# reh 6/91
 DATA$arg8N("OffdB",2000, -60,    0,0,0,0)        # Numeric Range 0 -> -60, 0 is omnidirectional antenna
 DATA$arg8N("MILES",2000, 0,    500,0,0,0)        # Numeric Range 0 -> 500
 DATA$arg8N("MODE ",2000, 0,     10,0,0,0)        # Numeric Range 0 -> 10
 DATA$arg8N("XCNTD",2000, 0,    500,0,0,0)        # Numeric Range 0 -> 500
 DATA$arg8N("Hz   ",2002, 1,   2000,0,0,0)        # Numeric Range 1 -> 2000
 DATA$arg8N("KHz  ",2000, 1,1000000,0,0,0)        # Numeric Range 1 -> 1000000
 DATA$arg8N("MHz  ",2000, 1,  20000,0,0,0)        # Numeric Range 1 -> 20000
 DATA$arg8N("MHz1 ",2000, 1,   2000,0,0,0)        # Numeric Range 1 -> 2000   # 5/04/89
                                          # MHz1 > 2147 will cause Integer
                                          # overflow in System Init
 DATA$arg8N("MHz2 ",-2000,0.001,2000.0,0,0,0)     # FP Num Rng .001 -> 2000 11/19/90 trs
 DATA$arg8N("MHz3 ",-2000,0.001,20000.0,0,0,0)    # FP Num Rng .001->20000.0 1/8/90 trs
 DATA$arg8N("WIDTH",-2000,0.001,1000.0,0,0,0)     # FP Num Rng .001->1000.0
 DATA$arg8N("PERIO",-2000,0.0001,100.0,0,0,0)     # FP Num Rng .0001->100.0
 DATA$arg8C("GENRL",8005, "ANLOG","FILTR","MLTPX","PHASE","PULSE")
 DATA$arg8C("RMODE",8001, "MODE")
 DATA$arg8N("MFREQ",-1000, 1.0,20000.0,0,0,0)     # FP Numeric Range 1.0 -> 20000.0
 DATA$arg8N("dB   ",2000, 1, 2000,0,0,0)          # Numeric Range 1 -> 2000
 DATA$arg8N("MINUT",2002, 0, 4320,0,0,0)          # Numeric Range 0 -> 4320 (3 days)
 DATA$arg8N("SCANRATE",2002, 1, 60,0,0,0)         # Numeric Range 1 -> 60 (for BEES)
 DATA$arg8N("MSRTE",-1002, 0.0, 4320.0,0,0,0)     # FP Numeric Range 0.0 -> 4320.0
 DATA$arg8N("MPW  ",-1002, 0.0, 9999.0,0,0,0)     # FP Numeric Range 0.0 -> 9999.0
 DATA$arg8N("RATE ",2002, 0, 320000,0,0,0)        # Numeric Range 0 -> 320000 4/91 # was9999
 DATA$arg8N("MPRR ",-1002, 0.0, 9999.0,0,0,0)     # FP Numeric Range 0.0 -> 9999.0
 DATA$arg8N("DEG  ",2002, 0,  360,0,0,0)          # Numeric Range 0 -> 360
 DATA$arg8N("DEG2 ",2002, 0, 3600,0,0,0)          # Numeric Range 0 -> 3600
 DATA$arg8N("DEG3 ",2002, 0,   12,0,0,0)          # Num. Range 0 -> 12  11/1/85
 DATA$arg8N("VAL  ",2002, 1,  100,0,0,0)          # Numeric range 1 -> 100  JFR 5/7/91
 DATA$arg8N("DEG18",2002, 0, 1800,0,0,0)          # numeric range 0 -> 1800 JFR 5/7/91
 DATA$arg8N("-n%  ",3004, 4, 6, 8, 10, 0)         # Numeric List 4, 6, 8, 10.
 DATA$arg8N("CHAN ",2002, 1,     10,0,0,0)        # Numeric Range 1 -> 10 #AM. 4/24/89
 DATA$arg8N("DEG4 ",2002,-180,180,0,0,0)          # Numeric Range -180 -> 180
 DATA$arg8N("DEG5 ",2002, -90, 45,0,0,0)          # Numeric Range -90 -> 45
 DATA$arg8N("DEG6 ",-2002, 0.0,30.0,0,0,0)        # FP Numeric Range -0.0 -> 30.0
 DATA$arg8N("DEG7 ",-2002, 0.0,5.0,0,0,0)         # FP Numeric Range -0.0 -> 5.0
 DATA$arg8N("FOVS ",2002, 1,    3,0,0,0)          # Numeric Range 1 -> 3
 DATA$arg8N("PROB ",-2002, 0.0, 1.0,0,0,0)        # FP Numeric Range 0.0 -> 1.0
 DATA$arg8N("NMI  ",-2002, 0.1, 200.0,0,0,0)      # FP Numeric Range 0.1 -> 200.0
 DATA$arg8N("RELSP",2002, 0, 1000,0,0,0)          # Numeric Range 0 -> 1000
 DATA$arg8N("PIXEL",2002, 0, 1000,0,0,0)          # Numeric Range 0 -> 1000
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  ","        ","        ","        ")
 DATA$fmt( 2,"A5,I9)  ","        ","        ","        ")
 DATA$fmt(11,"A5,I3,2A","7,I5,4F8",".2,2A5) ","        ")
 DATA$fmt( 5,"A5,I4,2I","9,I4)   ","        ","        ")
 DATA$fmt( 3,"A5,A7,  ","A7)     ","        ","        ")
 DATA$fmt(11,"A5,I2,I4",",5I6,I3,","A5,A5)  ","        ")
 DATA$fmt( 7,"A5,I2,I3",",I2,I6,A","5,I4)   ","        ")
 DATA$fmt(11,"A5,I2,I4",",2F9.3,3","I6,I3,2A","5)      ")
 DATA$fmt( 2,"A5,R9.3)","        ","        ","        ")
 DATA$fmt( 5,"A5,A7,I3",",F9.3,I6",")       ","        ")
 DATA$fmt( 4,"A5,A7,I3",",F9.4)  ","        ","        ")
 DATA$fmt( 5,"A5,4I6) ","        ","        ","        ")
 DATA$fmt( 2,"A5,F9.3)","        ","        ","        ")
 DATA$fmt( 3,"A5,F9.3,","I5)     ","        ","        ")
 DATA$fmt( 4,"A5,3F9.3",")       ","        ","        ")
 DATA$fmt( 3,"A5,2F9.3",")       ","        ","        ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    NONE
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
##############################################################################
 
9031 format (1x,'Word #',i2,', "',f8.1,'" of the ',a5,' field is NOT in the ',
             'range',f10.3,' to ',f10.3)
#9031 format (1x,'Word #',i2,', "',f%<iw>%.3,'" of the ',a5,' field is NOT in the ',
#             'range',f10.3,' to ',f10.3)
 
include "blsub1.rin"                         # calls in main logic
 
#***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   # ptrcnt = ptrcnt + 1
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                    #*********************************************************
                    if (argn == -1)        # Floating point number test
                     {
                      continue           # testing done.... Next.
                     }
 
                    else if (argh == -2)    # Floating point range 11/20/90 trs
                     {
                      if (arg1 < defarg[3,arg] |
                          arg1 > defarg[4,arg])
                       {
                        # this gives us the max length for the format line
                        iw = 5 + log10 (max(abs(arg1),
                                            abs(defarg[3,arg]),
                                            abs(defarg[4,arg])))
 
                        print 9031,scan2,arg1,qfld,(defarg[3,arg]),
                                                  (defarg[4,arg])
                        verr = verr + 1
                        next
                       }
                     }
 
#                   #*********************************************************
#                   else if (argn==2)                     # Special Test 2
#                    {
#                     continue   # insert code as needed
#                    }
#                   #*********************************************************
#                   else if (argn==3)                     # Special Test 3
#                    {
#                     continue   # insert code as needed
#                    }
#                   #*********************************************************
#                   #*********************************************************
 
                    next
 
                   }
 
 
#*****************************************************************************
 
 
      include "blsub2.rin"                          # calls in othet tests
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
Low_Frequency = 0
Hi_Frequency = 0
 
 
comcnt = 0
 
for (ptr=1; ptr < $number$modes; ptr=ptr+1)
    {
    chans[ptr] = .false.
    ModeA_exists[ ptr ] = .false.
    ModeB_exists[ ptr ] = .false.
    pulse_exists[ ptr ] = .false.
    }
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
   {
    if (lcomp_v(work[ptr],"COMMS") == 0)                # Any COMMS?
      {if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
         {comcnt = comcnt + 1
         }
      }
 
    if (work[ptr] == 'LFREQ')              # Low frequency   6/27/89
        {
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            low_frequency = work [ptr+2]
            }
        }
    else if (work[ptr] == 'HFREQ')              # High frequency   6/27/89
        {
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            hi_frequency = work [ptr+2]
            }
        }
    #$% if this field is Radar MODE (part A)
    else if (work[ptr] == 'MODEA')
        {
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            if (chans[int(work[ptr+2])] == .true.)
                {
                serr = serr + 1
                call echor
                call echov  ('Cannot have the same MODEA number ')
                call echoi ( int(work[ptr+2]) )
                call echor
                break
                }
            chans[int(work[ptr+2])] = .true.
            ModeA_exists [ int(work[ptr+2])] = .true.
            }
 
        #$% if modulation field is used
        if (lcomp_v(work[ptr+10], "*REQ*   ") != 0)
            {
            call validate_modulation(work[ptr+10], istat)
 
            #$% if modulation not to international standard
            IF (istat != 1)
                {
                serr = serr + 1
                call echor
                call echov  ('Invalid Modulation Type ')
                call echoh ( work[ptr+10], 5 )
                call echov  ('. Reference International Standard')
                call echor
                }
            }
 
        #$% if frequency field is used
        if (lcomp_v(work[ptr+4], "*REQ*   ") != 0)
            {
            IF (work[ptr+4] < Low_Frequency |
                work[ptr+4] > Hi_Frequency )
                {
                serr = serr + 1
                call echor
                call echov  ('Assigned frequency ')
                call echof (REAL(work[ptr+4]), 1 )  # jb E2145 REAL 3/30/00
                call echov (' out of specified Range')
                call echor
                }
 
            }
        }
   }
 
#$% if LFREQ and HFREQ were entered
IF (Low_Frequency != 0 & Hi_Frequency != 0)     #reh 1/5/89
    {
    IF ( Low_Frequency >= Hi_frequency )
        {
        serr = serr + 1
        call echor
        call echov  ('Invalid frequency range or Low'//' frequency greater than High frequency')
        call echor
        }
    }
 
for (ptr=1; ptr <= $number$modes; ptr=ptr+1)                            #AM.  4/24/89
    {
    chans[ptr] = .false.
    }
# scan the work area looking at all fields....
 
for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
    {
    #$% if this field is Radar MODE (part B)
    if (work[ptr] == 'MODEB')
        {
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            if (chans[int(work[ptr+2])] == .true.)
                {
                serr = serr + 1
                call echor
                call echov  ('Cannot have the same MODEB number ')
                call echoi ( int(work[ptr+2]) )
                call echor
                break
                }
            chans[int(work[ptr+2])] = .true.
            ModeB_exists [ int(work[ptr+2])] = .true.
            }
        }
    else if (work[ptr] == 'PULSE')
        {
        if (lcomp_v(work[ptr+4], "*REQ*   ") != 0)
            {
            pulse_exists[int(work[ptr+3])] = .true.
            pulse_width[int(work[ptr+3])] = work[ptr+4]
            pulse_RR[int(work[ptr+3])] = work[ptr+5]
            }
        }
    } # end loop thru record
 
 
for (ptr=1; ptr <= $number$modes; ptr=ptr+1)
    {
    #$% if either MODEA and MODEB are not specified for a given channel
    IF ( (ModeA_exists[ ptr ] == .true. & ModeB_exists[ ptr ] == .false.) |
         (ModeA_exists[ ptr ] == .false. & ModeB_exists[ ptr ] == .true.)
       )
        {
        serr = serr + 1
        call echor
        call echov  ('Must enter BOTH MODEA and MODEB for channel #')
        call echoi ( ptr )
        call echor
        }
    }
 
for (imode=1; imode <= $number$modes; imode=imode+1)
    {
    #$% if MODEA and MODEB are specified for a given channel and
    IF (ModeA_exists[ imode ] == .true. &
        ModeB_exists[ imode ] == .true. )
        {
        if ( pulse_exists[ imode ] == .false.)
            {
            call echor
            serr = serr + 1
            call echor
            call echov  ('Must enter PULSE for mode # ')
            call echoi ( imode )
            call echor
            }
        }
    else
        {
        if ( pulse_exists[ imode ] == .true.)
            {
            call echor
            serr = serr + 1
            call echor
            call echov  ('PULSE entered for non-existant mode')
            call echor
            }
 
        }
    if ( pulse_exists[ imode ] == .true.)
        {
        #$% if pulse width greater than pulse period
        if ( pulse_width [ imode ] > (1.0/pulse_RR [ imode ])*1.0E+6 )
            {
            call echor
            serr = serr + 1
            call echor
            call echov  ('PULSE width greater than period as a function of PRR, mode #')
            call echoi ( imode )
            call echor
            }
        }
    }
 
 
# test results ......
 
 
 if (comcnt != comcnt)
   {#type 9901
    serr = serr + 1
   }
 
 
 
 
#******************************** exit special code section *********
     go to zsave
 
 
#********************************************************************
 
      end
 
