 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLNOD                        ECHOH                      PAT
#$%      WGLMEM                        ECHOR                      PAI
#$%      WGLEMT                                                   MEM
#$%      GETSR  <WGLOAD>                                          REL
#$%      GSLOTM <WGLOAD>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLNOD
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLNOD - GSLOTM*
#$%                             - WGLMEM - GETSR *
#$%                                      - GSLOTM*
#$%                             - WGLEMT - GETSR *
#$%                                      - GSLOTM*
 

 
 include "bbctl.inc"
 include "bbcode.inc"
 include "bbpat.inc"
 include "bbpai.inc"
 include "bbmem.inc"
 include "bbrel.inc"
 include "ascii.inc"
 
 define(BBImplicit, Implicit NONE)          # MJC 4/28/2000
 
 undefine write
 undefine read
 undefine err
 
 Subroutine wglnod(reccnt,recsz,rec)
 
 #######################################################
 #$%
 #$% Purpose:   WGLNOD initializes the COMM Path
 #$%            (PAT) table.
 #$%
 #$% Called By: WGLOAD
 #$%
 #$% Calls:     ECHOH      ECHOR      GSLOTM
 #$%
 #$% Tables:    PAT        PAI
 #$%
 #$% Date:      OCT 80
 #$%
 #$% Author:    Ron Williams, Dana Wills
 #$%
 #######################################################
 
 BBcommon
 
 integer reccnt,recsz
 literal rec[1500], namepr
 
 integer NPATHS, NREC,
         NPATH, NNODE, M,
         INEED, ISTAT,
         lcomp_v,
         PAT$Numberofnodes$I,
         PAT$Numofnodentries$I,
         PAT$Utilization$I,
         PAT$Servicerate$I,
         PAT$Circuit$I,
         PAI$Pointer,
         PAT$Pairindx$I,
         PAT$Pointer,
         PAT$NOD$Index,
         PAT$NOD$nodecategory$I,
         PAT$NOD$utilization$I,
         PAT$NOD$servicerate$I,
         PAT$NOD$rogerflag$I,
         PAT$NOD$pairindx$I             # MJC 4/28/2000
 literal PAT$Type$C,
         PAT$NOD$platformtype$C,
         CSTRIP8                        # MJC 4/28/2000
 
 #$% if file is empty
 if (reccnt < 1)
    {
     #$% display warning message to user
     call echov("Commpath File Empty")
     call echor
     return
    }
 
#$% set number of commpaths the same as number of records
npaths = reccnt
 
#$% initialize nrec
nrec = 2
#$% initialize compath type to NOPAT in case no path is found
pat$Type$c = 'NoPAT'
 
#$% for each commpath entry
for (npath=1; npath<=npaths; npath=npath+1)
   {
    pat$NumberOfNodes$i = 2             # default number of nodes
 
    #$% for each node entry
    for (nnode=1; nnode<=pat$NumberOfNodes$i; nnode=nnode+1)
       {
 
        #$% read record file and increment number of records
        read (31,rec=nrec,err=8010) (rec[m],m=1,6)
        nrec = nrec + 1
 
        REPEAT   # jb E2143  (BRNCHINTOBLK)  (Add REPEAT block) 7/13/00
            {
            BREAK
                #$% display warning message to user
8010            call echov("Items from ")
                call echohn(pat$type$c,$$MaxLit)
                call echov(" and on are not loaded.")
                call echor
                return
               }
 
        #$% at first node entry, get node data from record file
        if (nnode == 1)
           {
            pat$Type$c            = rec[1]
            pat$NumberOfNodes$i   = rec[2]
            pat$NumOfNodEntries$i = rec[2] - 1
            pat$Utilization$i     = rec[3]
            pat$ServiceRate$i     = rec[4]
            pat$Circuit$i         = rec[6]
            namepr = rec[5]                     #pair name
 
            #$% for each commpair entry in the record file
            for (pai$pointer$first;pai$pointer$ok;pai$pointer$next)
               {
                #$% find commpair type, then break from the loop
                if (xpai$type$c == namepr)  break
               }
 
            #$% set commpath index to commpair index
            pat$PairIndx$i = pai$pointer$index
 
            #$% determine number of slots required
            ineed = pat$entB + pat$entS * (pat$NumberOfNodes$i - 1)
 
            #$% get commpath slots
            call gslotm(pat$pointer,$$pat,ineed,istat)
 
            #$% if file is full
            if (istat == $no)
               {
                #$% display warning message to user
                call echov("Items from ")   # jb E2143 (Removed label) 7/13/00
                call echohn(pat$type$c,$$MaxLit)
                call echov(" and on are not loaded.")
                call echor
                return
               }
 
            #$% save commpath data
            PUTpat$Type$c
            PUTpat$NumberOfNodes$i
            PUTpat$NumOfNodEntries$i
            PUTpat$Utilization$i
            PUTpat$ServiceRate$i
            PUTpat$Circuit$i
            PUTpat$PairIndx$i
           }
        #$% else if other than first node, get second record inputs
        else
           {
            #$% decrement path node index
            pat$nod$index = nnode - 1
 
            #$% set commpath node category according to user input and save
            if      (lcomp_v(rec[1],"AIR  ")==0) pat$NOD$NodeCategory$i= $Air$code
            else if (lcomp_v(rec[1],"SHIP ")==0) pat$NOD$NodeCategory$i= $Surface$code
            else if (lcomp_v(rec[1],"SHORE")==0) pat$NOD$NodeCategory$i= $ShoreBase$code
            else if (lcomp_v(rec[1],"BUOY ")==0) pat$NOD$NodeCategory$i= $CommBuoy$code
            else if (lcomp_v(rec[1],"UNIT ")==0) pat$NOD$NodeCategory$i= $Ground$code
            else                      pat$NOD$NodeCategory$i= $Null$code
            PUTpat$NOD$NodeCategory$i
 
            #$% get commpath platform type and save
            pat$NOD$PlatformType$c  = rec[2]
            PUTpat$NOD$PlatformType$c
 
            #$% get commpath utilization rate (RHO) and save
            pat$NOD$Utilization$i   = rec[3]
            PUTpat$NOD$Utilization$i
 
            #$% get commpath service rate (MU) and save
            pat$NOD$ServiceRate$i   = rec[4]
            PUTpat$NOD$ServiceRate$i
 
            #$% if category of node is commbuoy, set roger flag to NO
            #$% since roger cannot be received from a commbuoy
            if (pat$NOD$NodeCategory$i == $CommBuoy$code)
                pat$NOD$RogerFlag$i     = NO
 
            #$% else if node is any other category, set roger to YES or NO
            #$% depending on user input during Force process and save
            else
                pat$NOD$RogerFlag$i     = rec[6]
                PUTpat$NOD$RogerFlag$i
 
            #$% get compair name
            namepr = rec[5]
 
            #$% if commpair name is end (last node), set commpair index to zero
            if (namepr == 'END')  pat$NOD$PairIndx$i = 0
            #$% else if not the last node
            else
               {
                #$% search through path pairs for commpair name
                for (pai$pointer$first;pai$pointer$ok;pai$pointer$next)
                   {
                    #$% if commpair name found, break loop
                    if (xpai$type$c == namepr)  break
                   }
                #$% set path node index to pair pointer index
                pat$NOD$PairIndx$i = pai$pointer$index
               }
 
            #$% save path node index
            PUTpat$NOD$PairIndx$i
           }
       }                                        # end-for-each-node
 
   }                                            #end for each path
 
 return
 end

 
 Subroutine wglmem(reccnt,recsz,rec)
 
 #######################################################
 #$%
 #$% Purpose:   WGLMEM initializes the MEM COMM
 #$%            Membership Matrix table.
 #$%
 #$% Called By: WGLOAD
 #$%
 #$% Calls:     ECHOH      ECHOR      GSLOTM
 #$%            GETSR
 #$%
 #$% Tables:    MEM
 #$%
 #$% Date:      OCT 80
 #$%
 #$% Author:    Ron Williams, Dana Wills
 #$%
 #######################################################
 
 BBcommon
 
 integer reccnt,recsz
 literal rec[1500]
 
 integer LOOP, ILEN,
         IPNT, ISTAT,
         MEM$Length$I,
         MEM$Pointer,
         MEM$NO$Index           # MJC 4/28/2000
 literal MEM$Pathname$C,
         MEM$NO$forcename$C     # MJC 4/28/2000
 
 #$% if file is empty
 if (reccnt < 1)
    {
     #$% send warning message to user and return
     call echov("Path Membership File empty")
     call echor
     return
    }
 
 #$% initialize loop
 loop = 2
 
 #$% get scenerio file
 call getsr(loop,recsz,rec)
 
 #$% get file length
 ilen = rec[1]
 
 #$% for each record in the file
 for (ipnt = 2; ipnt < ilen; ipnt = ipnt + mem$length$i + 2)
   {
    #$% get membership length
    mem$length$i   = rec[ipnt] - 2
    #$% get membership matrix path name
    mem$PathName$c = rec[ipnt+1]
 
    #$% get membership slots
    call gslotm(mem$pointer,$$mem,mem$MaxEntry,istat)
 
    #$% if table is full
    if (istat == $no)
       {
        #$% send warning message to user
        call echov("Items from ")
        call echohn(mem$PathName$c,$$MaxLit)
        call echov(" and on are not loaded.")
        call echor
        return
       }
 
    #$% save membership length and path name
    PUTmem$length$i
    PUTmem$PathName$c
 
    #$% for membership matrix
    for (mem$no$index=1; mem$no$index$ok; mem$no$index= mem$no$index + 1)
       {
        #$% get membership matrix force name and save
        mem$no$ForceName$c = rec[ipnt+1+mem$no$index]
        PUTmem$no$ForceName$c
       }
 
    #$% determine number of commpath members entered by user
    mem$used = mem$used + mem$Entry - mem$MaxEntry
   }
 
 return
 end
 

 
 Subroutine wglemt(reccnt,recsz,rec)
 
 ###########################################################
 #$%
 #$% Purpose:   WGLEMT initializes the (REL) Recognized
 #$%            Emitter List table.
 #$%
 #$% Called By: WGLOAD
 #$%
 #$% Calls:     ECHOH      ECHOR      GSLOTM
 #$%            GETSR
 #$%
 #$% Tables:    REL
 #$%
 #$% Date:      OCT 80
 #$%
 #$% Author:    Ron Williams, Dana Wills
 #$%
 ###########################################################
 
 BBcommon
 
 integer reccnt,recsz
 literal rec[1500]
 
 integer LOOP, ILEN,
         IPNT, ISTAT,
         REL$Pointer            # MJC 4/28/2000
 literal REL$Emittername$C,
         REL$Class$C            # MJC 4/28/2000
 
 #$% if file is empty
 if (reccnt < 1)
    {
     #$% display warning message to user and return
     call echov("Fingerprinted Emitter File empty")
     call echor
     return
    }
 
 #$% initialize loop
 loop = 2
 
 #$% get scenerio file
 call getsr(loop,recsz,rec)
 
 #$% get recognized emitter file length
 ilen = rec[1]
 
 #$% for each emitter entered
 for (ipnt = 2; ipnt < ilen; ipnt = ipnt + 2)
   {
    #$% get slots from table
    call gslotm(rel$pointer,$$rel,rel$entry,istat)
 
    #$% if table is full
    if (istat == $no)
       {
        #$% display warning message to user and return
        call echov("Items from ")
        call echohn(rec[ipnt],$$MaxLit)
        call echov(" and on are not loaded.")
        call echor
        return
       }
 
    #$% get emitter name and save
    rel$EmitterName$c = rec[ipnt]
    PUTrel$EmitterName$c
 
    #$% get class of emitter and save
    rel$Class$c       = rec[ipnt+1]
    PUTrel$Class$c
   }
 
return
end
 
