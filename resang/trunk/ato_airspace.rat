 
include "ascii.inc"
include "bbcode.inc"
include "bbctl.inc"
include "bbsta.inc"
include "macros.inc"
include "asctl.def"
include "asshp.inc"
 
define (err, -3)   # alsp.inc undefines it - who_am_i uses it
 
define (number_args, 4)
 
 
define (ASImplicit, Implicit None)
 
undefine write   # use the standard fortran write statement
undefine read
 
 
program ato_airspace
#########################################################################
#$%
#$% Purpose:    This program reads ACO and generates RESA airspace definitions
#$%             Airspace shapes are mapped to route, orbit or cap
#$%
#$% Calls:      initr4         <rlib.olb>
#$%             read_arguments
#$%             ctoi
#$%             who_am_i
#$%             bbmap
#$%             check_version
#$%             remark
#$%             exit
#$%             Init_Collection_File
#$%             delay
#$%             Game_DTG
#$%             smov..
#$%             echo..
#$%             write
#$%             close
#$%
#$% Tables:     global variables
#$%
#$% Date:       Jul 2009
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
 
implicit none
 
integer   atoid_pos
integer   ctoi        # integer function
integer   Game_DTG    # integer function
 
integer          arg_len[number_args], k
vaxcharacter*80  args[number_args], params
 
integer   game_number
character  msg[ARB]
character ato_root[80]
integer   error
integer   next_cycle, delay_time, next_record_interval
integer   init_output_streams
integer   return_val
integer   staindx
 
literal   atoid
vaxcharacter*8  atoidv
Equivalence  (atoid, atoidv)
 
  call initR4

  BBMap

 
  call Read_Arguments (number_args, args, arg_len, params)
 
  # get working atoid directory
  call fs2rs(args[1], ato_root)
 
  # ATOID 4 characters
    atoid = $BLANKLIT
  atoidV = args[2][1:arg_len[2]]
 
  # atoid update number.  0 is initial ato
  k = 1
  atoid_pos = ctoi (%%ref(args[3]),k)

  # Get Workstation Number command line argument 
  k = 1
  staindx = ctoi (%%ref(args[4]),k)
 
return_val =  init_output_streams (ato_root, atoid, atoid_pos)
 
if (return_val == 0)
{
    call get_airspace(ato_root, atoid, atoid_pos)
    call write_airspace( staindx )
	call wait_empty_sta_input_buf( staindx )
 
}
 
close (11)
End
 

Subroutine write_airspace( staindx )
#
BBcommon
AScommon
vmschar vstrip*ARB
integer staindx
integer SHP$ShapeCode$i
integer SHP$Radius$i
integer shp$pos$index
integer shp$TopAltitude$i
integer shp$AltitudeRef$i
integer shp$PeriodStartTime$i
real*4  SHP$POS$Latitude$f
real*4  SHP$POS$Longitude$f
vaxcharacter*24 shp$Name$V
 
character asdef_str[ARB]
character aline[STA$PRE$Slots]
character keyword[ARB]
character lname[ARB]
character sname[ARB]
character lat[ARB]
character lon[ARB]
character alt[ARB]
character alt_modifier[ARB]
character junk[ARB]
character width[ARB]
integer getwrd, length
integer kk, mm, kkp, kka, kkh, n, i, isize
integer asdef_len
integer equal_hv
integer shp$pointer
integer i_switch_1
integer npoint, ncircle, norbit, npolyarc, nradarc, nline, ncorridor,
        npolygon, ntrack
 
data npoint, ncircle, norbit, npolyarc, nradarc, nline, ncorridor,
        npolygon, ntrack/9*0/
 
# DELETE ROUTE <name> ALL
# DEFINE ROUTE <name> BLUE 4
#   PROCEED POSITION
# STOP
 
#$!         inshape      outshape
#$!         apoint    -> cap
#$!         circle    -> cap
#$!         polyarc   -> orbit
#$!         polygon   -> orbit
#$!         radarc    -> orbit
#$!         orbit     -> orbit
#$!         corridor  -> route
#$!         geoline   -> route
#$!         track     -> route
 
 
9007    format(120a1)
 
for (shp$pointer$first; shp$pointer$ok; shp$pointer$next)
{
    shp$ShapeCode$i = Xshp$ShapeCode$i
    shp$Name$V = Xshp$Name$V
 
    call shorten_name (%%ref(shp$Name$V), sname)
 
    mm = 0
    call smovv ("DELETE ROUTE ", aline, mm)
    call smovhn (sname, $$maxlit, aline, mm)
    call smov   (BLANK, aline, mm)
    call smovv ("ALL", aline, mm)
	call smov  (EOS, aline, mm)
    write (11, 9007) (aline[i], i= 1,mm-1)
	call copy_to_sta_prescript_buf (staindx, aline)

    mm = 0
    call smovv ("#Shape name ", aline, mm)
    call smovvn (Xshp$name$v, aline, mm)
    call smovv (" to RESA name ", aline, mm)
    call smovhn(sname, $$maxlit, aline, mm)
    write (11, 9007) (aline[i], i= 1,mm)
 
    mm = 0
    call smovv ("DEFINE ROUTE ", aline, mm)
    call smovhn(sname, $$maxlit, aline, mm)
    call smov  (BLANK, aline, mm)
    call smovv ("BLUE 4", aline, mm)
	call smov  (EOS, aline, mm)
    write (11, 9007) (aline[i], i= 1,mm-1)
	call copy_to_sta_prescript_buf (staindx, aline)

 
    #$!         inshape      outshape
    #$!         apoint    -> cap
    #$!         circle    -> cap
    #$!         polyarc   -> orbit
    #$!         polygon   -> orbit
    #$!         radarc    -> orbit
    #$!         orbit     -> orbit
    #$!         line      -> route
    #$!         track     -> route
    #$!         corridor  -> route
 
    if (shp$ShapeCode$i == shape$Point$code |
        shp$ShapeCode$i == shape$Circle$code)
    {
        shp$pos$index = 1
        shp$pos$Latitude$f = Xshp$pos$Latitude$f
        shp$pos$Longitude$f = Xshp$pos$Longitude$f
 
        shp$TopAltitude$i = Xshp$TopAltitude$i
        shp$AltitudeRef$i = Xshp$AltitudeRef$i
 
        if (shp$TopAltitude$i == 0) shp$TopAltitude$i = 20100
        if (shp$AltitudeRef$i == 0) shp$AltitudeRef$i = AltitudeRef$AMSL
 
        shp$Radius$i = Xshp$Radius$i
        if (shp$Radius$i == 0) shp$Radius$i = 15
 
        shp$PeriodStartTime$i = Xshp$PeriodStartTime$i
 
        if (shp$PeriodStartTime$i != 0)
        {
          # "PROCEED POSITION as_lat as_lon ALTITUDE as_altitude as_time_kw as_time_arg
            mm = 0
            call smovv ("PROCEED POSITION ", aline, mm)
            call smovlls (shp$pos$Latitude$f,"N", aline,mm)
            call smov  (BLANK, aline, mm)
            call smovlls (shp$pos$Longitude$f,"E", aline,mm)
            call smovv (" ALTITUDE ", aline, mm)
            call smovi (shp$TopAltitude$i, aline, mm)
            call smovv  (" TIME ", aline, mm)
            call smoviz (shp$PeriodStartTime$i, 6, aline, mm)
			call smov  (EOS, aline, mm)
   			write (11, 9007) (aline[i], i= 1,mm-1)
			call copy_to_sta_prescript_buf (staindx, aline)
        }
 
        #   "CAP POSITION ''as_lat' ''as_lon' ''as_altitude' ''as_range' "
        mm = 0
        call smovv ("CAP POSITION ", aline, mm)
        call smovlls (shp$pos$Latitude$f,"N", aline,mm)
        call smov  (BLANK, aline, mm)
        call smovlls (shp$pos$Longitude$f,"E", aline,mm)
        call smov  (BLANK, aline, mm)
        call smovi (shp$TopAltitude$i, aline, mm)
        call smov  (BLANK, aline, mm)
        call smovi (shp$Radius$i, aline, mm)
		call smov  (EOS, aline, mm)
   		write (11, 9007) (aline[i], i= 1,mm-1)
		call copy_to_sta_prescript_buf (staindx, aline)
    }
    else if (shp$ShapeCode$i == shape$Orbit$code   |
             shp$ShapeCode$i == shape$Polyarc$code |
             shp$ShapeCode$i == shape$Radarc$code)
    {
        #$       !          1           2      3    4      5       6
        #$       !Resa: ORBIT (radius) <nm> <lat1> <lon1> <lat2> <lon2>
 
        shp$Radius$i = Xshp$Radius$i
        if (shp$Radius$i == 0) shp$Radius$i = 15
 
        mm = 0
        call smovv ("ORBIT ", aline, mm)
        call smovi (shp$Radius$i, aline, mm)
 
        # Generate proceed position orders for each position
        for (shp$pos$index = 1; shp$pos$index <= Xshp$npos$i; _
             shp$pos$index = shp$pos$index + 1)
        {
            if (shp$pos$index > 2) break
            call smov  (BLANK, aline, mm)
            call smovlls (Xshp$pos$Latitude$f,"N", aline,mm)
            call smov  (BLANK, aline, mm)
            call smovlls (Xshp$pos$Longitude$f,"E", aline,mm)
        }
		call smov  (EOS, aline, mm)
    	write (11, 9007) (aline[i], i= 1,mm-1)
		call copy_to_sta_prescript_buf (staindx, aline)
    }
    else if (shp$ShapeCode$i == shape$Line$code)
    {
        # Generate proceed position orders for each position
        for (shp$pos$index = 1; shp$pos$index <= Xshp$npos$i; _
             shp$pos$index = shp$pos$index + 1)
        {
            mm = 0
            call smovv ("PROCEED POSITION ", aline, mm)
            call smovlls (Xshp$pos$Latitude$f,"N", aline,mm)
            call smov  (BLANK, aline, mm)
            call smovlls (Xshp$pos$Longitude$f,"E", aline,mm)
			call smov  (EOS, aline, mm)
    		write (11, 9007) (aline[i], i= 1,mm-1)
			call copy_to_sta_prescript_buf (staindx, aline)
        }
    }
    else if (shp$ShapeCode$i == shape$Corridor$code |
             shp$ShapeCode$i == shape$Polygon$code  |
             shp$ShapeCode$i == shape$Track$code)
    {
        shp$TopAltitude$i = Xshp$TopAltitude$i
        shp$AltitudeRef$i = Xshp$AltitudeRef$i
 
        if (shp$TopAltitude$i == 0) shp$TopAltitude$i = 20100
        if (shp$AltitudeRef$i == 0) shp$AltitudeRef$i = AltitudeRef$AMSL
 
        # Generate altitude order
        mm = 0
        call smovv ("ALTITUDE ", aline, mm)
        call smovi(shp$TopAltitude$i, aline, mm)
        if ( shp$AltitudeRef$i == AltitudeRef$GL )
        {
            call smovv (" RELATIVE", aline, mm)
        }
		call smov  (EOS, aline, mm)
   		write (11, 9007) (aline[i], i= 1,mm-1)
		call copy_to_sta_prescript_buf (staindx, aline)
 
        # Generate proceed position orders for each position
        for (shp$pos$index = 1; shp$pos$index <= Xshp$npos$i; _
             shp$pos$index = shp$pos$index + 1)
        {
            mm = 0
            call smovv ("PROCEED POSITION ", aline, mm)
            call smovlls (Xshp$pos$Latitude$f,"N", aline,mm)
            call smov  (BLANK, aline, mm)
            call smovlls (Xshp$pos$Longitude$f,"E", aline,mm)
			call smov  (EOS, aline, mm)
   			write (11, 9007) (aline[i], i= 1,mm-1)
			call copy_to_sta_prescript_buf (staindx, aline)
        }
    }
    else
    {
        write (11, 9008) shp$ShapeCode$i
        9008    format(" bad shape code = ", i2 )
    }
 
    mm = 0
    call smovv ("STOP", aline, mm)
	call smov  (EOS, aline, mm)
    write (11, 9007) (aline[i], i= 1,mm-1)
	call copy_to_sta_prescript_buf (staindx, aline)
 
    switch (shp$ShapeCode$i)
    {
        case shape$Point$code:    npoint    = npoint + 1
        case shape$Circle$code:   ncircle   = ncircle + 1
        case shape$Orbit$code:    norbit    = norbit + 1
        case shape$Polyarc$code:  npolyarc  = npolyarc + 1
        case shape$Radarc$code:   nradarc   = nradarc + 1
        case shape$Line$code:     nline     = nline + 1
        case shape$Corridor$code: ncorridor = ncorridor + 1
        case shape$Polygon$code:  npolygon  = npolygon + 1
        case shape$Track$code:    ntrack    = ntrack + 1
    }
}
 
print *, " "
print *, "Orbits     = ", norbit
print *, "Polygons   = ", npolygon
print *, "Circles    = ", ncircle
print *, "Points     = ", npoint
print *, "Corridors  = ", ncorridor
print *, "Tracks     = ", ntrack
print *, "Lines      = ", nline
print *, "Polyarcs   = ", npolyarc
print *, "Radarcs    = ", nradarc
print *, "Total      = ", norbit+npolygon+ncircle+npoint+ncorridor+_
                          ntrack+nline+npolyarc+nradarc
return
end

integer function init_output_streams (ato_root, atoid, atoid_update)
implicit none
 
character ato_root[ARB]
character atoid[ARB]
integer atoid_update
character file_name[ARB]
vmschar*ARB file_name_v
equivalence(file_name, file_name_v)
integer name_len
integer return_val
 
name_len = 0
call smovhn (ato_root, ARB, file_name, name_len)
call smovv  ("/", file_name, name_len)
call smovhn (atoid, $$MaxLit, file_name, name_len)
call smovv  ("/", file_name, name_len)
call smovi  (atoid_update, file_name, name_len)
call smovv  ("/", file_name, name_len)
call smovv  ("ato_airspace.pre", file_name, name_len)
call smov   (EOS, file_name, name_len)
 
open(unit    =   11,                  #open output file
     file    =   file_name_v,
     status  =  'unknown',
     access  =  'sequential',
     recl    =   200,
     iostat  =   return_val)
 
if (return_val != 0)
{
    print *, "Unable to open ato_airspace.pre"
    return(return_val)
}
 
return(return_val)
end
 

Subroutine format_pos (aco_pos, fmt_pos)
 
character aco_pos[ARB]
character fmt_pos[ARB]
integer kk
integer index
integer lon_pos, hemi_pos
 
# Get postition of hemisphere char relative to start of lat
hemi_pos = index(aco_pos[6], $LETN)
if (hemi_pos == 0)
    hemi_pos = index(aco_pos[6], $LETS)
 
kk = 0
 
if (hemi_pos == 5)
{
    call smovh (aco_pos[6], 2, fmt_pos, kk)  # lat deg
    call smovv  ("-", fmt_pos, kk)
    call smovh (aco_pos[8], 2, fmt_pos, kk)  # lat min
    call smov  (aco_pos[10], fmt_pos, kk)     # lat hemi
    call smov  (BLANK, fmt_pos, kk)
 
    lon_pos = 11
}
else
{
    call smovh (aco_pos[6], 2, fmt_pos, kk)  # lat deg
    call smovv  ("-", fmt_pos, kk)
    call smovh (aco_pos[8], 2, fmt_pos, kk)  # lat min
    call smovv  ("-", fmt_pos, kk)
    call smovh (aco_pos[10], 2, fmt_pos, kk)  # lat sec
    call smov  (aco_pos[12], fmt_pos, kk)     # lat hemi
    call smov  (BLANK, fmt_pos, kk)
 
    lon_pos = 13
}
 
# Get postition of hemisphere char relative to start of lat
hemi_pos = index(aco_pos[lon_pos], $LETE)
if (hemi_pos == 0)
    hemi_pos = index(aco_pos[lon_pos], $LETW)
 
if (hemi_pos == 6)
{
    call smovh (aco_pos[lon_pos], 3, fmt_pos, kk)  # lon deg
    call smovv  ("-", fmt_pos, kk)
    call smovh (aco_pos[lon_pos+3], 2, fmt_pos, kk)  # lon min
    call smov  (aco_pos[lon_pos+5], fmt_pos, kk)     # lon hemi
    call smov  (EOS, fmt_pos, kk)
}
else
{
    call smovh (aco_pos[lon_pos], 3, fmt_pos, kk)  # lon deg
    call smovv  ("-", fmt_pos, kk)
    call smovh (aco_pos[lon_pos+3], 2, fmt_pos, kk)  # lon min
    call smovv  ("-", fmt_pos, kk)
    call smovh (aco_pos[lon_pos+5], 2, fmt_pos, kk)  # lon min
    call smov  (aco_pos[lon_pos+7], fmt_pos, kk)     # lon hemi
    call smov  (EOS, fmt_pos, kk)
}
return
end


 
subroutine wait_empty_sta_input_buf (station_nbr)
BBcommon
integer station_nbr
BBDeclare (sta$pointer)
integer kk
 
sta$pointer$to station_nbr
if (Xsta$PlayerOn$i == $NO)			# Don't wait on non-active station
{
	return
}
 

if (ALSP$Review == $NO)
{
	kk = 0
	# Wait for swar to clear station order input buffer
	while(Xsta$InpRead$i != Xsta$InpWrite$i)
	{
 	   call delay(10000)
	   kk = kk + 1
	   if (kk > 6) break

	}
}

return
end
 

Subroutine get_airspace (ato_root, atoid, atoid_pos)
# load all airspace definitions from ACO into tables in memory
implicit none
AScommon
 
character ato_root[ARB]
vmschar vstrip*ARB
BBDeclare (shp$Name$V)
vaxcharacter legal_name*24
character    legal_name_c[24]
equivalence(legal_name, legal_name_c)
 
literal cstrip8, cstrip
literal atoid
literal my_misn
integer airspace_find
integer SHP$Pointer
integer SHP$ShapeCode$i
integer SHP$POS$index
integer SHP$Radius$i
integer SHP$InnerRadius$i
integer SHP$OuterRadius$i
integer SHP$BeginBearing$i
integer SHP$EndBearing$i
integer SHP$BottomAltitude$i
integer SHP$TopAltitude$i
real*4  SHP$POS$Latitude$f
real*4  SHP$POS$Longitude$f
integer atoid_pos
integer k, kk, i, kr, kl, kh, ci
integer msg_len
integer nl
integer getatowrd, equal, equal_hv, ctoi, index, length, type
integer shapetext2code
integer name_len
integer return_val
integer ipos
integer isize
integer nf
integer lenline
integer ierr
integer hialt, icolon, ihyphen
logical InAirspace
logical InPolygon
logical InPolyarc
logical InRadarc
logical InCorridor
 
character atoid_char
character file_name[50]
vmschar*50 file_name_v
equivalence(file_name, file_name_v)
 
character a_line[80]
vaxcharacter*80  a_line_v
Equivalence  (a_line, a_line_v)
 
character ato_rcd[80]
vaxcharacter*80  ato_rcd_v
Equivalence  (ato_rcd, ato_rcd_v)
 
character keyword[80000]
character msg[80]
vaxcharacter*80  v_msg
Equivalence  (msg, v_msg)
 
character atoidc[8]
literal   atoidL
equivalence (atoidL, atoidc)
 
character misn[80]
 
character token[80000]
 
character aco_name[80]
character aco_namet[80]
character aco_shape[80]
character aco_radius[80]
character aco_inradius[80]
character aco_outradius[80]
character aco_begbrg[80]
character aco_endbrg[80]
character aco_width[80]
character aco_pos1[80]
character aco_pos2[80]
character aco_pos3[80]
character aco_efflevel[80]
character efflevel_ref[80]
character efflevel_loalt[80]
character efflevel_hialt[80]
 
character fmt_radius[80]
character fmt_bearing[80]
character format_width[80]
character format_pos1_lat[80]
character format_pos1_lon[80]
character format_pos2_lat[80]
character format_pos2_lon[80]
character format_pos3_lat[80]
character format_pos3_lon[80]
character format_pos2[80]
character format_pos3[80]
 
#$!         inshape
#$!         ----------
#$!         point
#$!         circle
#$!         polyarc
#$!         polygon
#$!         radarc
#$!         orbit
#$!         corridor
#$!         line
#$!         track
 
integer norbit, npolygon, ncorridor, npoint, npolyarc, nradarc
integer nline, ntrack, ncircle
integer nUnknownShape
integer last_aco_update
integer find_file, find_result
 
data norbit, npolygon, ncorridor, npoint, npolyarc, nradarc/6*0/
data nline, ntrack, ncircle, nUnknownShape/4*0/
 
 
data InCorridor/.false./
data InPolygon/.false./
 
real avg_radius
 
call asaloc ($$shp, "SHP", $YES, shp$slots, shp$entry)      # allocate SHP
 
nl = 0
 
atoidL = atoid                          # Local copy

last_aco_update = atoid_pos
while (last_aco_update >= 0)
{ 
	name_len = 0
	call smovhn (ato_root, ARB, file_name, name_len)
	call smovv  ("/", file_name, name_len)
	call smovhn (atoid, $$MaxLit, file_name, name_len)
	call smovv  ("/", file_name, name_len)
	call smovi  (last_aco_update, file_name, name_len)
	call smovv  ("/ACO.", file_name, name_len)
	call smovhn (atoid, $$MaxLit, file_name, name_len)
	call smovv  (".", file_name, name_len)
	call smovi  (last_aco_update, file_name, name_len)
	call smov   (EOS, file_name, name_len)

	find_result = find_file(file_name_v)
	if (find_result == 0) break
	last_aco_update = last_aco_update - 1
}


open(unit    =   10,                            #open input file
    file    =   file_name_v,
    status  =  'old',
    access  =  'sequential',
    recl    =   120,
    iostat  =   return_val)
 
if (return_val != 0)
{
    print 9005, file_name
9005    format(1x,"Unable to open airspace file = ",50a1)
    return
}
 
repeat
{
    #$% get line of input from ACO file
    read (10,9001,END=8000) ato_rcd_v
    lenline = len_trim(ato_rcd_v)
9001    format(a)
    k = lenline + 1
    call smov (EOS, ato_rcd, k)
    call upper (ato_rcd)
 
    ipos = 0
 
    isize = getatowrd (ato_rcd, ipos, keyword)
    #!------------------------------------------
    #! Position to start of airspace definition
 
    if (InAirspace == .false.)
    {
        if (equal_hv (keyword,"ACMID") == YES)
            InAirspace = .true.
        else
            next
    }
 
    if (equal_hv (keyword,"ACMID") == YES)
    {
        #!------------------------------------------
        #! Get ACMID fields
        isize = getatowrd (ato_rcd, ipos, token)     # 2
        isize = getatowrd (ato_rcd, ipos, aco_namet) # 3
        isize = getatowrd (ato_rcd, ipos, aco_shape) # 4
        isize = getatowrd (ato_rcd, ipos, token)     # 5 Use
        isize = getatowrd (ato_rcd, ipos, token)     # 6 ?
        isize = getatowrd (ato_rcd, ipos, token)     # 7 Altitude
        while (getatowrd (ato_rcd, ipos, token) > 0) {continue}
        kk = 0
        call smovh (aco_namet[6], ARB, aco_name, kk) # eliminate name:
        call smov  (EOS, aco_name, kk)
        call legit_name (aco_name, legal_name)
 
        #!------------------------------------------
        #! Find ACO Shape
        shp$pointer = Airspace_find(legal_name_c)  #Replace or add
        if (shp$pointer == 0)
        {
            # Add to missionbase table
            shp$pointer = shp$base + shp$Used
            if (shp$pointer$index > shp$slots)
            {
                print *, "Airspace Shape table capacity exceeded"
                shp$pointer = shp$pointer - shp$entry
            }
            shp$Zero
            shp$used = shp$used +  shp$entry
        }
        PUTshp$Name$V (legal_name)
        #!------------------------------------------
        #! Get ACO Shape
 
        shp$ShapeCode$i = ShapeText2Code(aco_shape)
        PUTshp$ShapeCode$i
        if (shp$ShapeCode$i == shape$unknown$code)
        {
            nUnknownShape = nUnknownShape + 1
            kk = 0
            call smovv("Unknown shape ", msg, kk)
            call smovh(aco_shape, ARB, msg, kk)
            call smovv(" in airspace ", msg, kk)
            call smovh(aco_name, ARB, msg, kk)
            print 9006, (msg[kk],kk=1, length(msg))
9006        format(1x,100a1)
        }
        next
    }
 
    if (equal_hv (keyword,"POLYARC") == YES)
    {
        npolyarc = npolyarc + 1
        isize = getatowrd (ato_rcd, ipos, aco_pos1)    # 1
        isize = getatowrd (ato_rcd, ipos, aco_begbrg)  # 2 clockwise true deg
        isize = getatowrd (ato_rcd, ipos, aco_radius)  # 3
        isize = getatowrd (ato_rcd, ipos, aco_endbrg)  # 4 clockwise true deg
        isize = getatowrd (ato_rcd, ipos, aco_pos2)    # 5
 
        call format_pos_lat (aco_pos1, format_pos1_lat)
        call format_pos_lon (aco_pos1, format_pos1_lon)
 
        call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
        call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
        shp$pos$index = 1
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        call format_bearing (aco_begbrg, fmt_bearing)
        kk = 1
        shp$BeginBearing$i = ctoi (fmt_bearing, kk)
        PUTshp$BeginBearing$i
 
        call format_radius (aco_radius, fmt_radius)
        kk = 1
        shp$Radius$i = ctoi (fmt_radius, kk)
        PUTshp$Radius$i
 
        call format_bearing (aco_endbrg, fmt_bearing)
        kk = 1
        shp$EndBearing$i = ctoi (fmt_bearing, kk)
        PUTshp$EndBearing$i
 
        Call RRB2LL( _            #Rhumb line Range/Bearing to Lat/Lon
                   shp$POS$Latitude$f,              #latitude (input & output)
                   shp$POS$Longitude$f,             # longitude (input & output)
                   float(shp$Radius$i),             # range (input)
                   0.0,                             #relative bearing (input)
                   shp$BeginBearing$i * $deg2rad,   #course (input)
                   cos(shp$POS$Latitude$f))         #cosine of latitude (input & output)
 
        shp$pos$index = 2
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        call format_pos_lat (aco_pos2, format_pos2_lat)
        call format_pos_lon (aco_pos2, format_pos2_lon)
 
        call cvt_DMS_RAD( format_pos2_lat, shp$pos$Latitude$f, ierr)
        call cvt_DMS_RAD( format_pos2_lon, shp$pos$Longitude$f, ierr)
        shp$pos$index = 3
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        PUTshp$Npos$i (3)
 
        while (getatowrd (ato_rcd, ipos, aco_pos1) > 0)
        {
            call format_pos_lat (aco_pos1, format_pos1_lat)
            call format_pos_lon (aco_pos1, format_pos1_lon)
 
            call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
            call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
            shp$pos$index = shp$pos$index + 1
            if (shp$pos$index$ok)
            {
                PUTshp$POS$Latitude$f
                PUTshp$POS$Longitude$f
 
                PUTshp$Npos$i (shp$pos$index)
            }
        }
 
        # Compute and store point for end arc
        shp$pos$index = 1
        shp$POS$Latitude$f = Xshp$POS$Latitude$f
        shp$POS$Longitude$f = Xshp$POS$Longitude$f
 
        Call RRB2LL( _            #Rhumb line Range/Bearing to Lat/Lon
                   shp$POS$Latitude$f,              #latitude (input & output)
                   shp$POS$Longitude$f,             # longitude (input & output)
                   float(Xshp$Radius$i),            # range (input)
                   0.0,                             #relative bearing (input)
                   Xshp$EndBearing$i * $deg2rad,    #course (input)
                   cos(shp$POS$Latitude$f))         #cosine of latitude (input & output)
 
        shp$pos$index = Xshp$Npos$i + 1
        if (shp$pos$index$ok)
        {
            PUTshp$POS$Latitude$f
            PUTshp$POS$Longitude$f
            PUTshp$Npos$i( shp$pos$index )
        }
    } # Polyarc
    else if (equal_hv (keyword,"RADARC") == YES)
    {
        nradarc = nradarc + 1
        isize = getatowrd (ato_rcd, ipos, aco_pos1)       # 1
        isize = getatowrd (ato_rcd, ipos, aco_begbrg)     # 2 clockwise true deg
        isize = getatowrd (ato_rcd, ipos, aco_endbrg)     # 3 clockwise true deg
        isize = getatowrd (ato_rcd, ipos, aco_inradius)   # 4
        isize = getatowrd (ato_rcd, ipos, aco_outradius)  # 5
 
        call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
        call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
        shp$pos$index = 1
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        call format_bearing (aco_begbrg, fmt_bearing)
        kk = 1
        shp$BeginBearing$i = ctoi (fmt_bearing, kk)
        PUTshp$BeginBearing$i
 
        call format_bearing (aco_endbrg, fmt_bearing)
        kk = 1
        shp$EndBearing$i = ctoi (fmt_bearing, kk)
        PUTshp$EndBearing$i
 
        call format_radius (aco_inradius, fmt_radius)
        kk = 1
        shp$InnerRadius$i = ctoi (fmt_radius, kk)
        PUTshp$InnerRadius$i
 
        call format_radius (aco_outradius, fmt_radius)
        kk = 1
        shp$OuterRadius$i = ctoi (fmt_radius, kk)
        PUTshp$OuterRadius$i
 
        avg_radius = (shp$InnerRadius$i + shp$OuterRadius$i) / 2
        Call RRB2LL( _            #Rhumb line Range/Bearing to Lat/Lon
                   shp$POS$Latitude$f,              #latitude (input & output)
                   shp$POS$Longitude$f,             # longitude (input & output)
                   avg_radius,                      # range (input)
                   0.0,                             #relative bearing (input)
                   shp$BeginBearing$i * $deg2rad,   #course (input)
                   cos(shp$POS$Latitude$f))         #cosine of latitude (input & output)
 
        shp$pos$index = 2
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        shp$pos$index = 1
        shp$POS$Latitude$f = Xshp$POS$Latitude$f
        shp$POS$Longitude$f = Xshp$POS$Longitude$f
        Call RRB2LL( _            #Rhumb line Range/Bearing to Lat/Lon
                   shp$POS$Latitude$f,              #latitude (input & output)
                   shp$POS$Longitude$f,             # longitude (input & output)
                   avg_radius,                      # range (input)
                   0.0,                             #relative bearing (input)
                   Xshp$EndBearing$i * $deg2rad,    #course (input)
                   cos(shp$POS$Latitude$f))         #cosine of latitude (input & output)
 
        shp$pos$index = Xshp$Npos$i + 1
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
        PUTshp$Npos$i( shp$pos$index )
 
    }
 
    else if (equal_hv (keyword,"AORBIT") == YES)
    {
        norbit = norbit + 1
 
        isize = getatowrd (ato_rcd, ipos, aco_pos1)    # 2
        isize = getatowrd (ato_rcd, ipos, aco_pos2)    # 3
        isize = getatowrd (ato_rcd, ipos, aco_radius)  # 4
        call format_pos_lat (aco_pos1, format_pos1_lat)
        call format_pos_lon (aco_pos1, format_pos1_lon)
        call format_pos_lat (aco_pos2, format_pos2_lat)
        call format_pos_lon (aco_pos2, format_pos2_lon)
        call format_radius (aco_radius, fmt_radius)
 
        kk = 1
        shp$Radius$i = ctoi (fmt_radius, kk)
        PUTshp$Radius$i
 
        call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
        call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
        shp$pos$index = 1
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        call cvt_DMS_RAD( format_pos2_lat, shp$pos$Latitude$f, ierr)
        call cvt_DMS_RAD( format_pos2_lon, shp$pos$Longitude$f, ierr)
        shp$pos$index = 2
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        PUTshp$Npos$i (2)
    }
 
    else if (equal_hv (keyword,"CIRCLE") == YES)
    {
        ncircle = ncircle + 1
 
        isize = getatowrd (ato_rcd, ipos, aco_pos1)    # 2
        isize = getatowrd (ato_rcd, ipos, aco_radius)  # 4
 
        call format_pos_lat (aco_pos1, format_pos1_lat)
        call format_pos_lon (aco_pos1, format_pos1_lon)
        call format_radius (aco_radius, fmt_radius)
 
        kk = 1
        shp$Radius$i = ctoi (fmt_radius, kk)
        PUTshp$Radius$i
 
        call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
        call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
        shp$pos$index = 1
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        PUTshp$Npos$i (1)
    }
 
    else if (equal_hv (keyword,"APOINT") == YES)
    {
        npoint = npoint + 1
 
        isize = getatowrd (ato_rcd, ipos, aco_pos1)    # 2
        call format_pos_lat (aco_pos1, format_pos1_lat)
        call format_pos_lon (aco_pos1, format_pos1_lon)
 
        call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
        call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
        shp$pos$index = 1
        PUTshp$POS$Latitude$f
        PUTshp$POS$Longitude$f
 
        PUTshp$Npos$i (1)
    }
 
    else if (equal_hv (keyword, "POLYGON") == YES |
             equal_hv (keyword, "GEOLINE") == YES)
    {
        if (equal_hv (keyword, "GEOLINE") == YES)
            nline = nline + 1
        else
            npolygon = npolygon + 1
 
        shp$pos$index = 0
 
        while (getatowrd (ato_rcd, ipos, aco_pos1) > 0)
        {
            call format_pos_lat (aco_pos1, format_pos1_lat)
            call format_pos_lon (aco_pos1, format_pos1_lon)
 
            call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
            call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
            shp$pos$index = shp$pos$index + 1
            if (shp$pos$index$ok)
            {
                PUTshp$POS$Latitude$f
                PUTshp$POS$Longitude$f
                PUTshp$Npos$i (shp$pos$index)
            }
        }
 
    } # Polygon
 
    else if (equal_hv (keyword, "CORRIDOR") == YES)
    {
        ncorridor = ncorridor + 1
 
        shp$pos$index = 0
 
        isize = getatowrd (ato_rcd, ipos, aco_width)   # 2
 
        call format_radius (aco_width, format_width)
 
        kk = 1
        shp$Radius$i = ctoi (format_width, kk)
        PUTshp$Radius$i
 
        while (getatowrd (ato_rcd, ipos, aco_pos1) > 0)
        {
            call format_pos_lat (aco_pos1, format_pos1_lat)
            call format_pos_lon (aco_pos1, format_pos1_lon)
 
            call cvt_DMS_RAD( format_pos1_lat, shp$pos$Latitude$f, ierr)
            call cvt_DMS_RAD( format_pos1_lon, shp$pos$Longitude$f, ierr)
            shp$pos$index = shp$pos$index + 1
            if (shp$pos$index$ok)
            {
                PUTshp$POS$Latitude$f
                PUTshp$POS$Longitude$f
 
                PUTshp$Npos$i (shp$pos$index)
            }
        }
    }
 
    else if (equal_hv (keyword, "EFFLEVEL") == YES)
    {
        isize = getatowrd (ato_rcd, ipos, aco_efflevel)    # 2
        if (isize > 0)
        {
            icolon = index(aco_efflevel, $COLON)
            ihyphen = index(aco_efflevel, $MINUS)
            kr = 0
            call smovhn (aco_efflevel, icolon-1, efflevel_ref, kr)
            call smov   (EOS, efflevel_ref, kr)
            kl = 0
            call smovhn (aco_efflevel[icolon+1], ihyphen-icolon-1,
                         efflevel_loalt, kl)
            call smov   (EOS, efflevel_loalt, kl)
            ci = 1
            # Skip leading non-numeric characters
            while (type (efflevel_loalt[ci]) != 2 & ci < kl) ci = ci + 1
            shp$BottomAltitude$i = ctoi(efflevel_loalt, ci) * 100
            PUTshp$BottomAltitude$i
 
            kh = 0
            call smovhn (aco_efflevel[ihyphen+1], isize-icolon,
                         efflevel_hialt, kh)
            call smov   (EOS, efflevel_hialt, kh)
            ci = 1
            # Skip leading non-numeric characters
            while (type (efflevel_hialt[ci]) != 2 & ci < kl) ci = ci + 1
            if (efflevel_hialt[kh-1] == $LETL)
            {
                shp$TopAltitude$i = ctoi(efflevel_hialt, ci) * 100
                PUTshp$TopAltitude$i
 
                PUTshp$AltitudeRef$i (AltitudeRef$AGL)
            }
            else
            {
                shp$TopAltitude$i = ctoi(efflevel_hialt, ci) * 100
                PUTshp$TopAltitude$i
 
                PUTshp$AltitudeRef$i (AltitudeRef$AMSL)
            }
        }
    }
    else if (equal_hv (keyword, "APERIOD") == YES |
             equal_hv (keyword, "") == YES        |
             equal_hv (keyword, "AMPN") == YES)
    {
        inAirSpace = .false.
        next
    }
    else if (equal_hv (keyword, "GEODATUM") == YES)
    {
        next
    }
    #
    #1TRACK
    #/LEG/LEG-BEGIN      /LEG-END        /LEG-WIDTH      /MINALT-MAXALT /
    #01/332005N1254611E/3505N12425E    /60NML-15NMR    /C:080AMSL-FL280 /
    #02/3505N12425E    /3630N12340E    /45NML-15NMR    /C:080AMSL-FL230 /
    #03/3630N12340E    /3800N12340E    /15NML-10NMR    /080AMSL-120AMSL //
    else if (equal_hv (keyword,"1TRACK") == YES) # SMM 8/17/13
    {
        while (getatowrd (ato_rcd, ipos, keyword) > 0) # while not end of line
        {   # check the next word in line
#            isize = getatowrd (ato_rcd, ipos, token) # 2 LEG
        } # end of while not end of line
    } # end if keyword is "1TRACK"
    else
    {
        print 9009, ato_rcd
9009    format (" Unrecognized ACO line = ",80a1)
        inAirSpace = .false.
        next
    }
 
} #end repeat for reading file
8000
close(10)
 
if (nUnknownShape > 0)
    print *, "Unknown Shapes = ", nUnknownShape
 
return
end
 

integer function airspace_find(shp$Name)
# Find airspace by name in table
implicit none
AScommon
character shp$Name[ARB]
vmschar*ARB vstrip
vmschar*24  shapeNameC
character   shapeName[24]
equivalence (shapenameC, shapename)
 
integer equal_vv, length
integer shp$pointer
 
call rs2fs(shp$Name, shapeNameC)
 
for (shp$Pointer$First; shp$Pointer$OK; shp$Pointer$Next)
{
    if (shapeNameC[1:length(shapeName)] ==  Xshp$Name$v) break
}
 
if (!shp$Pointer$OK) shp$pointer = 0
 
airspace_find = shp$pointer
 
return
end 
 
 
