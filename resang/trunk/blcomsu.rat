 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine comms
 
      ##################################################
      #$%
      #$% Purpose:   COMMS allows the user to in-
      #$%            teract with the commsuite
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Dana Wills
      #$%
      #$% Modifications : R. Hundt, 4/91, BEES frequency hoppping
      #$%   model implemented. The most significant change was a
      #$%   new category field. The "CAT" field has categories that
      #$%   include:
      #$%    1) Non-BEES/BEES fixed frequency mode
      #$%    2) Non-BEES frequency hopping
      #$%    3) BEES frequency hopping
      #$%
      #$%   The use of the CATegory field allows for expansion of additional
      #$%   commsuite device types.
      #$%
      #$%   The old field "HOPPR" (yes/no) is now eliminated. The CATegory
      #$%   "HOP" now logically replaces the "HOPPR" (yes) condition.
      #$%   The CATegory "FMODE" now logically is used to describe in detail
      #$%   device characteristics used in BEES (Fixed frequency MODE 1-10)
      ##################################################
 
#
#
#     NEW COMMSUITE
#
#
#      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT NONE     # jb    E2145   3/29/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom, 13)     # The number of entries in the defCOM table. JFR 5/7/91
define (zdctyp, 40)     # The size of the defTYP table.
define (zdcfld,285)     # The size of the defFLD table.
define (zdsarg, 10)     # The size of entries in the defARG table.
define (zdcarg, 27)     # The number of entries in the defARG table. JFR 5/7/91
define (zdcfmt,  9)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
define($MaxBWPercent,10)
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
      Integer iw, actcnt, istat, m
 
      character  line[ARB]
 
      logical    chans[10]                    # AM. 4/20/89

####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("        ","  Commsu","ites    "," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of commsuite
 DATA$com("CAT  ",  1)      # Category, 4/91
 DATA$com("BAND ",  1)      # Frequency band
 DATA$com("TYPE ",  1)      # Type of commsuite capability send/recv
 DATA$com("XPOWR",  1)      # Transmitter Power in dBm       # REH 03/88
 DATA$com("XGAIN",  1)      # Transmitter Antenna Gain in dB # REH 03/88
 DATA$com("RGAIN",  1)      # Receiver Antenna Gain in dB    # REH 03/88
 DATA$com("NOMEN", -1)      # Full name/Nomenclature of device
 DATA$com("UDB  ", -1)      # Universal DB Flag
 DATA$com("OPVAL", -1)      # Operational value of EQ. JFR 5/7/91
 DATA$com("XMSSN", -1)      # Type of transmission           # reh 6/90
 DATA$com("MNFAL", -1)      # Mean time between failures # REH 05/88
 DATA$com("MNRPR", -1)      # Mean time to repair # REH 05/88
 
 $set (Data_Count,0)
 DATA$typ("FMODE",  4)      # Fixed Frequency Mode
 DATA$typ(   "FREQ ",  1)      # Frequency Band of Commsuite    # REH 03/88,optinal 4/91
 DATA$typ(   "LFREQ", -1)      # Low end of frequency range     # reh 10/22/89
 DATA$typ(   "HFREQ", -1)      # High end of frequency range    # reh 10/22/89
 DATA$typ(   "MODE ",-10)      # Alternate channel(s)           # reh 10/18/89
 DATA$typ("HOP  ",  1)      # Non-BEES frequency hopper
 DATA$typ(   "PULSE",  1)      # Signal Pulse Length # REH 03/88, optional 4/91
 DATA$typ("HOPPR", 12)      # BEES frequency hopper
 DATA$typ(   "LFREQ",  1)      # Low end of frequency spectrum
 DATA$typ(   "HFREQ",  1)      # High end of frequency spectrum
 DATA$typ(   "DWELL",  1)      # Signal Pulse Length # REH 03/88, optional 4/91
 DATA$typ(   "PERIO",  1)      # Freq. Hopper (or ?) pulse period, 4/91
 DATA$typ(   "SENSI",  1)      # Spread spectrum sensitivity, 4/91
 DATA$typ(   "IF   ",  1)      # Spread spectrum intermediate freq. 4/91
 DATA$typ(   "IFBW ",  1)      # Spread spectrum intermediate freq. bandwidth 4/91
 DATA$typ(   "LOFRQ",  1)      # local Oscillator Frequency
 DATA$typ(   "PSYNC",  1)      # Threshold at which network synch startup is prevented, 4/91
 DATA$typ(   "LSYNC",  1)      # Threshold at which network synch is lost, 4/91
 DATA$typ(   "BERCF", -1)      # Bit Error Rate Coding Correction Factor
 DATA$typ(   "PIM  ", -1)      # Intermodulation threshold, 7/91
 
 $set (Data_Count,0)
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","commsuit","e       ","       ")
 DATA$fld1("CAT  ", 1, 1,"CAT  ", 1,"Category"," of Comm","Suite   ","       ")
 DATA$fld1("BAND ", 1, 1,"BAND ", 1,"Frequenc","y band  ","        ","       ")
 DATA$fld1("TYPE ", 1, 1,"CATG ", 1,"Category"," commsui","te capab","ility  ")
 DATA$fld3("NOMEN", 3,-9,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld2("FREQ ", 2, 3,"MHz  ", 1,"Hz   ", 1,"Center f","req and ","bdwth of"," suite ")
 DATA$fld1("LFREQ", 1, 1,"MHz4 ", 1,"Low end ","of Frequ","ency Ran","ge     ")
 DATA$fld1("HFREQ", 1, 1,"MHz4 ", 1,"High end"," of Freq","uency Ra","nge    ")
 DATA$fld1("IF   ", 1, 1,"MHz4 ", 1,"Spread S","pect. In","termed. ","freq   ")
 DATA$fld1("IFBW ", 1, 1,"MHz2 ", 1,"Spread S","pect. I","F Bandwi","dth     ")
 DATA$fld1("XPOWR", 1, 1,"WATTS", 1,"Transmit","ter Powe","r in Wat","ts     ")
 DATA$fld1("XGAIN", 1, 1,"dB   ", 1,"Transmit","ter Ante","nna Gain"," in dB ")
 DATA$fld1("RGAIN", 1, 1,"dB   ", 1,"Receiver"," Antenna"," Gain in"," dB    ")
 DATA$fld1("SENSI", 1, 1,"dBm  ", 1,"Spread S","pectrum ","Sensitiv","ity    ")
 DATA$fld1("OPVAL", 1, 1,"VAL  ", 1,"Operatio","nal Valu","e of Com","ms EQ. ")
 DATA$fld1("PSYNC", 1, 1,"SdBm ", 1,"Threshol","d Synch ","startup ","prevnted")
 DATA$fld1("LSYNC", 1, 1,"SdBm ", 1,"Threshol","d Synch ","Lost    ","       ")
 DATA$fld1("HOPPR", 1, 1,"ANSWR", 1,"Is Trans","mitter a"," Freq   ","Hopper ")
 DATA$fld1("PULSE", 1, 1,"PULSE", 1,"Signal P","ulse Wid","th (Micr","oSecond)")
 DATA$fld1("DWELL", 1, 1,"PULSE", 1,"Signal D","well Tim","e  (Micr","oSecond)")
 DATA$fld1("PERIO", 1, 1,"MILSC", 1,"Pulse  P","eriod (M","illiSeco","nd)    ")
 DATA$fld1("XMSSN", 1, 1,"XMSSN", 1,"Type of ","Transmis","sion    ","       ")
 DATA$fld1("MNFAL", 1, 2,"MINUT", 1,"Mean tim","e betwee","n failur","es     ")
 DATA$fld1("MNRPR", 1, 2,"MINUT", 1,"Mean tim","e to rep","air     ","       ")
 DATA$fld1("LOFRQ", 1, 2,"MHz4 ", 1,"Local Os","cillator","frequenc","y      ")
 DATA$fld1("BERCF", 1, 2,"CF   ", 1,"Bit Erro","r Rate C","orr. (dB",")      ")
 DATA$fld1("PIM  ", 1, 2,"PIM  ", 1,"Intermod","ulation ","threshol","d(dB)  ")
 DATA$fld10("MODE ",10, 8,"CHAN ", 1,"WATTS",1,"MHz4 ", 1,"Hz   ", 1,"MHz",1,"MHz1",1,"MHz",1,"dBm",1,"MODUL",1,"SELCT",1,"Channel ",",Power,"," Freq, B","andwidth")
 
 $set (Data_Count,0)
 DATA$arg10N("NAME ",6000)                      # Alphanumeric -- Anything
 DATA$arg10C("CAT  ",8003,"HOP  ","HOPPR","FMODE")
 DATA$arg10C("CATG ",8003,"SEND ","RECV ","BOTH ")
 DATA$arg10C("XMSSN",8004,"DVOIC","DDATA","AVOIC","ADATA")
 DATA$arg10N("PULSE",-2000,   .1,      10000)   # numeric .1 -> 100,was 1000000
 DATA$arg10N("MILSC",-2000,  .01,        100)   # numeric .01-> 100
 DATA$arg10N("WATTS",2002,     1,       1000)   # numeric 1 -> 1000
 DATA$arg10N("MHz  ",2002,     1,      10000)   # numeric 1 -> 10000
 DATA$arg10N("Hz   ",2002,     1, 2000000000)   # numeric 1 -> 2000000000
 DATA$arg10N("CF   ",2002,     0,         60)   # numeric 0 -> 60
 DATA$arg10N("PIM  ",2000,  -100,        100)   # numeric -100 -> 100
 DATA$arg10N("MHz1 ",2000,     1,       2000)   # Numeric Range 1 -> 2000  # 6/19/89
 DATA$arg10N("MHz2 ",-2000,0.001,     2000.0)   # FP Num Rng .001 -> 2000 2/14/91 trs
 DATA$arg10N("MHz4 ",-2000,0.001,    10000.0)   # FP Num Rng .001->10000.0 2/14/91 trs
 DATA$arg10N("Text ",9024)                      # Alphanumeric string (24 bytes)
 DATA$arg10N("...  ",9000)                      # Alphanumeric string filler
 DATA$arg10C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg10C("BAND ",8008,"LAND ","LF   ","HF   ","HFLRI","UHF  ","VHF  ","VLF  ","ACOUS")
 DATA$arg10N("dB   ",2002,  -200,        200)   # numeric -200 -> 200 6/91 reh
 DATA$arg10N("VAL  ",2002,     1,        100)   # numeric range 1 -> 100 JFR
 DATA$arg10C("SELCT",8004, "POOR ","AVG  ","GOOD ","EXCEL") # Alphanumeric list
 DATA$arg10N("dBm  ",2000,  -120,        -50)   # Numeric Range -120 -> -50
 DATA$arg10N("SdBm ",2000,   -10,         40)   # Numeric Range -10 -> 40
 DATA$arg10N("MINUT",2002,     0,      10000)   # Numeric Range 0 -> 10000
 DATA$arg10C("ANSWR",8002,"YES  ","NO   ")
 DATA$arg10N("CHAN ",2002, 1,             10)   # Numeric Range 1 - 10
 DATA$arg10N("MODUL",6000)                      # AlphaNumeric -- anything
 
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 3,"A5,2I9) "," "," "," ")
 DATA$fmt( 5,"A5,I4,2I","9,I4)   "," "," ")
 DATA$fmt( 3,"A5,A7,A7",")"," "," ")
 DATA$fmt( 2,"A5,R9.3",")      ","       ","       ")
 DATA$fmt( 3,"A5,R9.3",",I9)   ","       ","       ")
 DATA$fmt(11,"A5,I2,I4",",F9.3,4I","6,i3,2a5",")  ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:
#         floating point range validation when ARGH = -2  2/15/91 trs
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#                NONE
#
#
##############################################################################
 
real*4  low_frequency
real*4  hi_frequency
real*4  tst_frequency
 
      include "blsub1.rin"
 
 
9031 format (1x,'Word #',i2,', "',f8.1,'" of the ',a5,' field is NOT in the ',
             'range',f10.3,' to ',f10.3)
#9031 format (1x,'Word #',i2,', "',f%<iw>%.3,'" of the ',a5,' field is NOT in the ',
#             'range',f10.3,' to ',f10.3)
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #                    #*********************************************************
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
#                    else if (argn==2)                     # Special Test 2
                    else if (argh == -2)    # Floating point range 2/15/91 trs
                     {
                      if (arg1 < defarg[3,arg] |
                          arg1 > defarg[4,arg])
                       {
                        # this gives us the max length for the format line
                        iw = 5 + log10 (max(abs(arg1),
                                            abs(defarg[3,arg]),
                                            abs(defarg[4,arg])))
 
                        print 9031,scan2,arg1,qfld,(defarg[3,arg]),
                                                  (defarg[4,arg])
                        verr = verr + 1
                        next
                       }
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
                   }
 
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
    Low_Frequency = 0.000
    Hi_Frequency = 0.000
 
    actcnt = 0
 
    for (ptr=1;ptr < 11;ptr=ptr+1)                        #AM.  4/20/89
        chans[ptr] = .false.
 
    # scan the work area looking at all fields....
 
    for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))              #AM.  4/20/89
        {
        IF ( work [ptr] == 'HFREQ' )
            {
            IF (lcomp_v(work [ptr + 2], "*REQ*   ") != 0)
                {
                Hi_Frequency = work [ptr + 2]
                }
            }
        ELSE IF ( work [ptr] == 'LFREQ' )
            {
            IF (lcomp_v(work [ptr + 2], "*REQ*   ") != 0)
                {
                Low_Frequency = work [ptr + 2]
                }
            }
 
        #$% if this field is Commsuite MODE
        if (work[ptr] == 'MODE')
            {
            #$% if bandwidth exceeds a given percent of center frequency (MHz)
            if (work[ptr+5] * 1.0E-6 > work[ptr+4] / $MaxBWPercent ) #6/91,reh
                {
                serr = serr + 1
                call echor
                call echov  ('Bandwidth exceeds ')
                call echoi($MaxBWPercent)
                call echov  ('% of center frequency, MODE number ')
                call echoi ( int(work[ptr+2]) )
                call echor
                break
                }
 
            if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
                {
                if (chans[int(work[ptr+2])] == .true.)
                    {
                    serr = serr + 1
                    call echor
                    call echov  ('Cannot have the same MODE number ')
                    call echoi ( int(work[ptr+2]) )
                    call echor
                    break
                    }
                chans[int(work[ptr+2])] = .true.
                }
 
            #$% if modulation field is used
            if (lcomp_v(work[ptr+10], "*REQ*   ") != 0)
                {
                call validate_modulation(work[ptr+10], istat)
 
                #$% if modulation not to international standard
                IF (istat != 1)
                    {
                    serr = serr + 1
                    call echor
                    call echov  ('Invalid Modulation Type ')
                    call echoh ( work[ptr+10], 5 )
                    call echov  ('. Reference International Standard')
                    call echor
                    }
                }
 
            #$% if frequency field is used
            if (lcomp_v(work[ptr+4], "*REQ*   ") != 0)
                {
                tst_frequency = work[ptr+4]
                IF ((tst_frequency < Low_Frequency & Low_Frequency != 0.0) |
                    (tst_frequency > Hi_Frequency  & Hi_Frequency  != 0.0))
                    {
                    serr = serr + 1
                    call echor
                    call echov  ('Assigned frequency ')
                    call echof ( REAL(work[ptr+4]), 3 ) # jb REAL   3/29/00
                    call echov (' out of specified Low/High Range')
                    call echor
                    }
                }
            }
        }
 
#$% test for error in modulation type characteristics
 
# test results ......
 
 
 
 
 
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
 
include "blmodul.rin"
 
#$% validate spread spectrum data fields
subroutine bl_validate_SSpect ( work_Len,
                                Work,
                                ierr)
implicit none
integer*4   work_len
literal     work [ work_len ]
integer*4   ierr
 
real*4      High_Freq
real*4      Low_Freq
integer*4   ptr
real*4      pulse_period
real*4      pulse_width
integer*4   Threshold_Sync_Lost
integer*4   Threshold_Sync_Prevented
integer     lcomp_v
 
Low_Freq = 0.0
High_Freq = 0.0
 
Threshold_Sync_Lost = 0
Threshold_Sync_Prevented = 0
 
pulse_period = 0.0
pulse_width = 0.0
 
for (ptr=2;ptr < work[1];ptr=ptr + 2 + work(ptr+1))   # 4/91
    {
    #$% if field was loaded
    IF ( lcomp_v(work [ptr+2], "*REQ*") != 0 )
        {
        #$% if valid synchronization threshold
        IF ( work [ptr] == 'LSYNC' )
            {
            Threshold_Sync_Lost = work[ptr+2]
            }
        #$% else if valid synchronization threshold
        ELSE IF ( work [ptr] == 'PSYNC' )
            {
            Threshold_Sync_Prevented = work[ptr+2]
            }
        #$% else if valid high end of hopper band
        ELSE IF ( work [ptr] == 'HFREQ' )
            {
            High_Freq = work[ptr+2]
            }
        #$% else if valid low end of hopper band
        ELSE IF ( work [ptr] == 'LFREQ' )
            {
            Low_Freq = work[ptr+2]
            }
        #$% else if pulse width
        ELSE IF ( work [ptr] == 'PULSE' )
            {
            Pulse_Width = work[ptr+2]           # microseconds
            }
        #$% else if period of pulse
        ELSE IF ( work [ptr] == 'PERIO' )
            {
            Pulse_Period = work[ptr+2] * 1000   # microseconds
            }
        } # end if field was loaded
    } # end for all fields in work area
 
if ( Threshold_Sync_Prevented > Threshold_Sync_Lost  )
    {
    ierr = ierr + 1
    call echor
    call echov  ('Synch Prevented Threshold exceeds Synch Lost Threshold."')
    call echor
    return
    }
 
if ( Low_Freq >= High_Freq )
    {
    ierr = ierr + 1
    call echor
    call echov  ('Low Frequency greater than High Frequency."')
    call echor
    return
    }
 
if ( Pulse_width >= Pulse_Period )  # compare in microseconds
    {
    ierr = ierr + 1
    call echor
    call echov  ('Pulse width greater than pulse period."')
    call echor
    return
    }
 
return
end
