 
 
#####   version 3.1  dated-  7apr81
 
 
###
### mod to version 3.0          dated  9-mar-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 dew     TestCommon   added args array.
###             getarg  Chg- added sleep command
###             execu1  Chg- added call to sleep
###             sleep   New- Added sleep command
###
 
 
###
### mod to version 3.0          dated 27-feb-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 dew     TestCommon   added files array.
###             getarg  Chg- added FILE command
###             execu1  Chg- added calls to Lfile
###             Lfile   New- Added file command
###
 
 
###
### mod to version 3.0          dated  7-jan-1981
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 dew     tblinc  Chg- added own table processing
###             getsub  Chg- added own table processing
###
 
 
###
### mod to version 3.0          dated 31-dec-1980
###
### smn prog    module  comments
### === ====    ======  =================================================
### 002 dew     init    Chg- added additional variable names
###             TestCommon   added forks array.
###             getarg  Chg- added FORK & RESUME commands
###             execu1  Chg- added calls to Lfork & Cfork
###             Lfork   New- Added FORK command
###             Cfork   New- Added RESUME command
###
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
 
define(DEBUG,#)
define(DEBUGT,#)
#####  BBTEST  #####   program to be used to debug the new WES DataBase
#      7 March 80  D.Wills
#
#
# Data Retrieval commands:
#
#       <address>       set pointer to absolute address.
#       <tbl>           set pointer to base of table.
#       <name>          set pointer to address of variable/ptrsetname.
#       <RETURN> or +   increment pointer 1 word.
#       ^ or !          decrement pointer 1 word.
#       ; or :          display contents at current address.
#       NEXT            increment pointer n words(tbl entry size)
#       LAST            decrement pointer n words(tbl entry size)
#       ENTRY <value>   or
#       # <value>       Set pointer to the first word of the Nth entry
#       , <value>       Set pointer to the Nth word of the current entry
#       INC <value>     increment (+/-) pointer <value> words (int/dec)
#       FIND <value>    search DB for matching value (from 1 to max).
#       FINDF <value>   search DB for matching value (from curr+1 to max).
#       FINDR <value>   search DB for matching value (from curr-1 to 1).
#       VIEW <value>    display contents at current address thru <value> words
#       SHOW <bits> <Lbit>  display integer contents of the selected bits
#
#
#
# Data Alteration/validation commands:
#
#       PUT <value>     store the <value> in the current address
#       SET <bits> <Lbit> <value> store the <value> in the bit field at the
#                                 current address
#       ZERO <value>    zero value words from the current address
#       COMP <value>    compare value words from the current address
#                       (prompted for the file name to compare with)
#
#       NOTE:
#
#       <value> may be: 077777          Octal (first digit 0)
#                       999.99          Decimal (optional decimal point)
#                       "text "         Ascii
#
#
#
# Program Control commands:
#
#       EXIT            quit the program
#       HELP or ?       Display program accepted controls
#
#       OCTAL           include octal representation of data
#       NOCTAl          do not force octal representation of data
#       ASCII           include ascii representation of data
#       NASCIi          do not include ascii representation of data
#       REAL            include real representation of data
#       NREAL           do not include real representation of data
#       INTEGer         include integer representation of data
#       NINTEger        do not include integer representation of data
#       DEFINE <bits> <Lbit>  or
#       DEFINE <name> <bits> <Lbit>  define bit field of curr tbl/wrd
#       CLEAR           clears the bit field of the current tbl/word
#
#
########################################################################
 
include "ascii.inc"
include "clidef.inc"
include "bbctl.inc"
include "bbcode.inc"
 
include "gcgam.inc"
include "btmain.inc"
 
define (BBimplicit, Implicit NONE)
 
 
 
program bbtest
 
########################################################
#$%
#$% Purpose:   BBTEST is used to debug the new NWISS
#$%            database.
#$%
#$% Called By: None
#$%
#$% Calls:     DISP       GETIN      INIT
#$%            SMOV       SMOVHN
#$%
#$% Tables:    None
#$%
#$% Date:      DEC 80
#$%
#$% Author:    Dana Wills
#$%
########################################################
 
TESTcommon
character       vmsg[ARB]
integer         in_one, out_the_other
integer         ierr
EXTERNAL        ERROR_HANDLER
 
#CALL LIB$ESTABLISH (ERROR_HANDLER)      # AXP Compatible Error Handler
#call init_errset                        # turn off Arithimetic Errors
 
#$% initialize all standard files and common variables
call initr4
 
call who_am_i (igame,bbname)
 
BBmap (bbname,$$BBpages+1)
 
call check_version (ierr,vmsg)          # Correct Database Version?
 
if (vmsg[1] != EOS)
    {
    call remark (vmsg)
    }
 
#if (ierr == YES) call exit
 
 call help_pgm(0,
              "bbtest: Interactively view and change bb symbolically ",
              "bbtest Tags: blackboard",
              "Usage: bbtest",
              "",
              "",
              "",
              "",
              "Example: bbtest")
 
call echor
call echov ("BBTEST (version ")
call echof ($$BBVersion,3)              # X bytes wide .000
call echov (")")
 
handle = 0
 
CALL Recall_Init (Handle, in_one, 30, 4*$$maxline)
 
 
#$% initialize common variables
call init
 
repeat
   {
    #$% display current memory address
    call disp
 
    #$% get input from user
    call getin
   }
 
end
 
 
 
subroutine who_am_i (igame, bbname)
 
###########################################################
#$%
#$% Purpose:   WHO_AM_I allows user to start a game using
#$%            a command line input
#$%
#$% Called By: BBTEST   CC_INIT   GLMAIN   WARCYC
#$%
#$%
#$% Calls:     READ_PNAME_INDEX   GETARG   SET_EXIT_MSG
#$%            MAKE_CSF_BB_NAME
#$%
#$% Tables:    NONE
#$%
#$% Date:      JAN 82
#$%
#$% Author:    WILLS
#$%
###########################################################
IMPLICIT NONE
 
vaxcharacter    BBname*(*)
character       buf[20]
integer         igame, ctoi, getarg3
integer         narg, istat, kk
 
#$% get game index number and process name
call read_pNAME_INDEX(igame)            # igame is game INDEX
 
#$% if process name is not already entered or is not valid
if (igame < 1 | igame > gam$slots)
    {
    narg = 1
 
    repeat
        {
        istat = getarg3(narg, buf, 20)           # get game name
 
        if (istat  == EOF) break
        if (buf[1] != $SLASH) break
 
        narg = narg + 1
        }
 
    #$% set game index to indiate possible error
    igame = 0
 
    #$% get command line input, if not EOF or EOS
    if (istat != EOF & buf[1] != EOS)
        {
        #$% create game index number from command line input
        kk=1
        igame = ctoi (buf,kk)
 
        #$% if table is full, set game to indicate error
        if (igame > gam$slots) igame = 0
        }
    }
 
#$% if game index number ok, create new blackboard name
call make_CSF_bb_name (igame,$$BBNAME,bbname)
 
#$% if error indicated earlier in subroutine
 
#if (igame == 0)
#    {
#    #$% display error messge
#   call remark ('Error determining Game Index, Using Default.')
#    }
#else
    {
    #$% display file name
    call putlin_V ('Using BlackBoard file: ',ERROUT)
    call remark_V (bbname)
    }
 
return
end
 

 
subroutine getin                # get input from user
 
##########################################################
#$%
#$% Purpose:   GETIN is called to get input from user.
#$%
#$% Called By: BBTEST
#$%
#$% Calls:     EXPARG     BRKIN      EXECUT
#$%            ECHOH      ECHOHN     ECHOFF
#$%            ECHOR      GETLNH
#$%
#$% Tables:    None
#$%
#$% Date:      DEC 80
#$%
#$% Author     Dana Wills
#$%
##########################################################
 
TESTcommon
 
integer zstat
 
character cline[ARB]
literal   line[$$maxline],exline[$$maxline]
LitCharEquiv(old,$$maxline)
 
equivalence (line,cline)
integer   line_len, ii, kk
 
data oldC/$$maxline * "        "/
 
#$% display prompt awaiting input from user
call echov ("   ... ")
 
call get_getfch_source (zstat)
 
#$% if not using disk
if (zstat != 'DSK')
   {
    #$% set command file status
    Cmnd = $no
    CmndLb = 0
 
    hushed = .false.                                              # DEW 3-92
    call echop ("RELS")            # turn off Hushed output when interactive
   }
 
#$% if command input
if (CmndLb != 0)
   {
    #$% display message to user
    call echov ("[Scanning ")
    call echohn (CmndLb,5)
    call echov ("] ")
   }
 
call echoff
call getlnh_R (Handle,cline,4*$$maxline)  # get input (4*Max characters)
                                          # it returns space-filled to right
for (line_len = 4 * $$maxline;
     line_len >= 0 & cline[line_len] == $SPACE;     # how many non-blank chars ?
     line_len = line_len - 1);
 
if (cline[1] == -1)             # check for cntl-K (repeat the last command)
   {
    ii = 0
    for (Kk=1; kk<=$$maxline/2; kk=kk+1)
       {
        line[kk] = old[kk]
        if (old[kk] != $SPACE) ii = kk
       }
 
    call echoh (line,ii*8)       # echo the command
    call echor
   }
else
   {
    for (kk=1; kk<=$$maxline/2; kk=kk+1)
        old[kk] = line[kk]        # save the line
   }
 
Call Recall_Add  (Handle, cLine, line_len)
 
call exparg(line  ,4*$$maxline, # expand Super Arguments
            exline,7*$$maxline)
 
call exparg(exline,7*$$maxline, # expand 2nd level Super Arguments
            line  ,8*$$maxline)
 
call brkin (line)               # break line into arguments and decode type
 
call execut                     # process arguments
 
return
end
 
