include "bbctl.inc"
include "bbcode.inc"
include "bbano.inc"
include "bbdeq.inc"
include "bbprl.inc"
include "bbser.inc"
include "bbshc.inc"
include "bbson.inc"
include "bbshn.inc"
include "bbsta.inc"
include "bbunt.inc"
include "gcgam.inc"
include "orders.inc"
include "wimain_eq.inc"
 
 #***************************************************************************
 #                                                                          *
 #These definitions give the size of various arrays used by the sonar model.*
 #                                                                          *
 #***************************************************************************
 
 define ($MAXDDL,UNT$Three_Half_Per)#max length of detector/detectee list
 define ($MAXPSL,UNT$Half_Per)      #max length of passive sonar noise source list
 
 #***************************************************************************
 #                                                                          *
 #These definitions represent the various detector codes.                   *
 #                                                                          *
 #***************************************************************************
 
 define ($$$DP,1)       #direct path active sonar
 define ($$$BB,2)       #bottom bounce active sonar
 define ($$$CZ,3)       #convergence zone active sonar
 define ($$$PAS,4)      #hull-mounted passive sonar
 define ($$$ASB,5)      #active sonobuoy
 define ($$$PSB,6)      #passive sonobuouy
 define ($$$TA,7)       #towed array
 define ($$$VDS,8)      #variable-depth sonar
 
 #***************************************************************************
 #                                                                          *
 # These definitions represent the various detectee word masks.             *
 # i.e. these are the ways he could be detected....                         *
 #                                                                          *
 #***************************************************************************
 
 define ($$$PDac,1)     #passive-detection-of-acoustic-communication bit
 define ($$$PDas,2)     #passive-detection-of-active-sonar bit
 define ($$$PDgn,4)     #passive-detection-of-general-noise bit
 define ($$$PASS,7)     #all passive-detection bits
 
 define ($$$ACTdp,8)    #active-detection/deep bit
 define ($$$ACTin,16)   #active-detection/in-layer bit
 define ($$$ACT,24)     #all active-detection bits
 
 
define (TC$common,
    LITERAL       cbonr                           # TEMP for TRACE 3/14/83
    Integer*2     nnboy                           # TEMP for TRACE 3/14/82
 
    common/TC_common/ cbonr,  nnboy
    )
 

#*********************************************************************
#
# definition to give a convenient name to the common area used
# by the sonar model.
#
#*********************************************************************
 
define (SM$common,
    ##--------------------------------------------------------------------
    ##                      POINTERS & POSITION DATA
    ##--------------------------------------------------------------------
    Integer*4  UNT$POINTER      ##detector unit table pointer
    Integer*4  BOY$POINTER      ##detector buoy table pointer
    Integer*4  Dor_Index        ##detector DD list pointer
    Real*4     Dor_Lat          ##detector latitude
    Real*4     Dor_Lon          ##detector longitude
    Real*4     Dor_CSLat        ##cosine of detector latitude
    Real*4     Dor_Depth        ##detector depth
    Real*4     Dor_Head         ##detector heading
    Real*4     Dor_Speed        ##detector speed
    Integer*4  Dor_Unt_x        ## unt index
 
    Integer*4  UNT2$POINTER     ##target unit table pointer
    Integer*4  BOY2$POINTER     ##target buoy table pointer
    Integer*4  Tgt_Index        ##target DD list pointer
    Real*4     Tgt_Lat          ##target latitude
    Real*4     Tgt_Lon          ##target longitude
    Real*4     Tgt_CSLat        ##cosine of target latitude
    Real*4     Tgt_Depth        ##target depth
    Real*4     Tgt_Head         ##target heading
    Real*4     Tgt_Speed        ##target speed
    Integer*4  Tgt_Unt_x        ## unt index
 
    Integer*4  Intra_Target     ## data field for intra emi
    Integer*4  Intra_Deq        ## data field for intra emi
    Integer*4  Intra_Flag       ## data field for intra emi
 
    Integer*4  SON$POINTER      ##pointer to sonar characteristics table
    Integer*4  SOB$POINTER      ##pointer to sonobuoy characteristics table
    Integer*4  SON$SPD$INDEX    ##speed index into detector self-noise subtable
    Integer*4  SON$NV$index     ## $INV index for SON table             8/25/83
    Integer*4  SOB$NV$index     ## $INV index for SOB table             8/25/83
 
    Integer*4  Env_Num           ## Environment # for Computation; one of: 11/28/90
    Integer*4  Env_Tgt           ## Environment # for Detectee (ship or SUB) 10/17/90
    Integer*4  Env_Det           ## Environment # for DetectOR (ship or boy) 11/28/90
    Integer*4  Env_Ping          ## Environment # for 'pinger' (ship or boy) 11/28/90
 
    Integer*4  sonarmodel_state # state of model since acive and passive - JFR 11/15/93
                                # processing can be separate for VTS
    ##--------------------------------------------------------------------
    ##               PASSIVE SONAR DEVICE CHARACTERISTICS
    ##--------------------------------------------------------------------
    Real*4     Pas_Sdev     ##Standard-Deviation of Bearing-Error     7/7/83
    Real*4     Pas_RD       ##recognition differential
    Integer*4  Pas_Hifreq   ##upper frequency limit of band
    Integer*4  Pas_Lofreq   ##lower frequency limit of band
    Real*4     Pas_Vbeam    ##half of vertical beam width
    Real*4     Pas_Hbeam    ##half of horizontal beam width
    Real*4     Pas_Slope    ##maximum depth/range to be within vertical beam width
 
    ##---------------------------------------------------------------------
    ##                     DETECTOR/DETECTEE LIST  ($MAXDDL defined above)
    ##---------------------------------------------------------------------
    Integer*4  DD_Pntr [$MAXDDL]   ##pointer into UNT or BOY table
    Integer*4  DD_View [$MAXDDL]   ##view belonging to
    Integer*4  DD_Seq  [$MAXDDL]   ##buoy sequence number
    Integer*4  DD_Char [$MAXDDL]   ##pointer into sonar or sonobuoy characteristics table
    Integer*4  DD_Deq  [$MAXDDL]   ##deq pointer for sonar equipment (for intra - emi)
    Integer*4  DD_Mode [$MAXDDL]   ##mode= DP CZ BB,PAS,ASB,PSB,TA,VDS (0 =can't detect)
    Integer*4  DD_Flags[$MAXDDL]   ##detectee word: $$$PDac, $$$PDas, $$$PDgn; ($$$PASS,7)
                                   ##                     $$$ACTdp, $$$ACTin;($$$ACT,24)
 
    Integer*4  DD_Count         ##counter for number of entries in DD list
    Integer*4  DD_Ship          ##INDEX OF last ship entry in DD list 7/18/83
    Integer*4  DD_Air           ##Index of last aircraft entry in DD list 6/91
 
    ##---------------------------------------------------------------------
    ##                     PASSIVE SONAR LIST     ($MAXPSL defined above)
    ##---------------------------------------------------------------------
    Integer*4  PS_DD_x [$MAXPSL]   ## INDEX into detector/detectee list
    Real*4     PS_Range[$MAXPSL]   ##range
    Real*4     PS_Bear [$MAXPSL]   ##bearing
    Integer*4  PS_Speed[$MAXPSL]   ##speed index
    Real*4     PS_Depth[$MAXPSL]   ##depth
    Real*4     PS_BBN  [$MAXPSL]   ##broadband noise power
    Real*4     PS_Ploss[$MAXPSL]   ##propagation loss
    Integer*4  PS_SHN  [$MAXPSL]   ##pointer to ship noise table
    Integer*4  PS_Env_T[$MAXPSL]   ## Environment Index of TARGET posit. 5/7/86
    Integer*4  PS_Count            ##counter for entries in PasSonarList
    Integer*4  PS_Targets          ##INDEX OF last non-own-view entry in PasSonarList   7/18/83
 
    ##---------------------------------------------------------------------
    ##                        DETECTION DATA
    ##---------------------------------------------------------------------
    Integer*4  Det_Freq             ##detected active sonar frequency
    Integer*4  Det_Acous            ##integer flag for acoustic comm detection
    Integer*4  Det_BB_flag          ##integer flag for broadband detection
    Real*4     Det_Mean_Rng         ## Active sonobuoy mean detection range  2/2/83
    Real*4     Det_SE              ## Signal excess for passing toward TMA  7/13/83
    Integer*4  Det_Tn_Freq[6]       ## Detected tonal FREQUENCIES            6/21/83
    Real*4     Det_Tn_SE[6]        ## Detected signature line Sig.-Excess values 7/20/83
    Integer*4  Det_Tn_Count         ## running count of DETECTED line sig freq. 7/10/83
    Real*4     BBSEK                ## Required SE for given prob det
 
    common/scratch$pad/ _
 
        # Pointers & Position Data
        UNT$POINTER, BOY$POINTER, Dor_Index, Dor_Lat, Dor_Lon,
        Dor_CSLat, Dor_Depth, Dor_Head, Dor_Speed, Dor_Unt_x,
        UNT2$POINTER, BOY2$POINTER, Tgt_Index, Tgt_Lat, Tgt_Lon,
        Tgt_CSLat, Tgt_Depth, Tgt_Head, Tgt_Speed, Tgt_Unt_x,
        Intra_Target, Intra_Deq, Intra_Flag,
        SON$POINTER, SOB$POINTER, SON$SPD$INDEX, SON$NV$index, SOB$NV$index,
        Env_Num, Env_Tgt, Env_Det, Env_Ping, sonarmodel_state, # JFR 11/15/93 for VTS
 
        # Passive Sonar Device Characteristics
        Pas_Sdev, Pas_RD, Pas_Hifreq,  Pas_Lofreq, Pas_Vbeam, Pas_Hbeam,
        Pas_Slope,
 
        # Detector/Detectee List
        DD_Pntr, DD_View, DD_Seq, DD_Char, DD_Deq, DD_Mode, DD_Flags,
        DD_Count, DD_Ship, DD_Air,
 
        # Passive Sonar List
        PS_DD_x, PS_Range,  PS_Bear, PS_Speed, PS_Depth, PS_BBN, PS_Ploss,
        PS_SHN, PS_Env_T, PS_Count, PS_Targets,
 
        # Detection Data
        Det_Freq, Det_Acous, Det_BB_flag, Det_Mean_Rng, Det_SE,
        Det_Tn_Freq, Det_Tn_SE, Det_Tn_Count, BBSEK
    )
 
define (BBImplicit, Implicit None)

Subroutine PL_PASSIVE(nord,                       #receive order number
                      ista,                       #receive station
                      nargs,                      #receive number words
                      args)                       #receive parameters
 
###########################################################################
#$%
#$% Purpose:    PL_PASSIVE generates passive sonar detection envelope around
#$%             given unit, and also displays results on IO
#$%
#$% Called by:  PL_EXEORD
#$%
#$% Calls:      NONE
#$%
#$% Author:     James Allen
#$%
#$% Date:       November 2008
#$%
############################################################################
 
BBcommon
EqErr$Common
 
BBDeclare  (STA$Pointer, UNT$Pointer, SHC$Pointer, SHC2$Pointer, DEQ$Pointer)
integer     NARGS, ISTA, Nord, iarg
literal     args[nargs]
literal     CSTRIP8
 
literal     ilex[19]
integer     indx, indxShip
integer     iview, i
integer     predict_passive_range
 
real        speed, rngarray[8], frqarray[8], relbrg, fcos
real        flat[8], flon[8], radtodms
integer     depth, propmode
integer     iwords, ionum, irc, indxson
integer     isfound
 
BBDeclare (unt$TrueLatitude$f, unt$TrueLongitude$f, unt$TrueCourse$f)
BBDeclare (unt$TrueAltDepth$i, unt$PropulsionMode$i, unt$TrueSpeed$f)
BBDeclare (son$pointer)
 
STA$Pointer$To ista                             #get sta pointer
iview = Xsta$View$i
 
#  1      2                                          3
# PLOT PASSIVE (sonar detection envelope around) <force-name>
 
#                    4               5                6
# (for ship class) <class> (speed) <knots> (depth) <feet>
 
#                       7
# (mode) [ | DIESEL | ELECTRIC | NUCLEAR]
 
#   7-8                                      8-9
#[|COLOR [ ORANGE | BROWN | YELLOW | GREY | GREEN | MUDGREEN | NAVY  | PURPLE | MAGENTA |
 
#      8-9         9-10           8-9    9-10
# [ | DARK ] [ RED | BLUE ] | [ | OFF ] WHITE ] ]
 
#  1      2               3
# ERASE PASSIVE (for) <force-name>;
 
if (args[1] == $LEX$PLOT$)
{
    #$% find the unit
    call untfnd(iview,
                args[3],
                unt$POINTER)
    if (! unt$pointer$Valid)
    {
        call echov ("plot passive force not found")
        call echor
        return
    }
 
    indxShip = 4
 
    # verify ship class
    cflg = NO
    call eqfind($$SHC,0,args[indxShip],SHC$Pointer) # search SHC table for class
    if (SHC$Pointer == 0)              # ship class is found in SHC table
    {
        call echov ("plot passive ship class not found")
        call echor
        return
    }
 
    speed = args[indxShip+1]
    depth = args[indxShip+2]
    propmode = $electric$code
    if (indxShip+3 <= nargs)
    {
        if (args[indxShip+3] == $LEX$DIESEL$)        propmode = $diesel$code
        indxShip = indxShip + 4
    }
    else
    {
        indxShip = nargs + 1
    }
    # Find passive sonar sonars.  Use first active or first found
    isfound = 0
    FOR_DEQ_CHAIN
    {
        if(xDEQ$IDENT$I == $PASSONAR$CODE)  #if passive sonar
        {
            SON$POINTER = XDEQ$PNTR$I               #set sonar char pntr
            if(XSON$TOWEDARRAY$I == $YES) next      #skip if towed array
            if (Xson$VariableDepth$i == $YES) next
            isfound = 1
            if(xDEQ$ON$I == $YES) break
        }        #end if passive sonar
    }   #end for
 
    if (isfound == 0)           # No passive sonar found
    {
        call echov ("plot passive detector has no passive sonar")
        call echor
        return
    }
 
    indxson = son$pointer$index
 
    irc = predict_passive_range(
                                 unt$pointer,   # detector
                                 shc$pointer,   # target class
                                 speed,         # target speed
                                 depth,         # target depth
                                 propmode,      # target propulsion mode
                                 indxson,       # in - passive sonar used
                                 rngarray,      # out - 8 rb detection ranges
                                 frqarray)      # out - 8 rb detection freqs
    if (irc != 1)
    {
        return
    }
 
    unt$TrueLatitude$f = Xunt$TrueLatitude$f
    unt$TrueLongitude$f = Xunt$TrueLongitude$f
    unt$TrueCourse$f = Xunt$TrueCourse$f
    unt$TrueSpeed$f = Xunt$TrueSpeed$f
    unt$TrueAltDepth$i = Xunt$TrueAltDepth$i
    fcos = Xunt$CosTrueLat$f
    son$pointer$to indxson
 
# Display results to IO
# unit/cls sonar    crs sp dpth m RBG:    0   45   90  135  180  225  270   315
# xxxxxxxx xxxxxxxx xxx xx xxxx x RNG: xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx
# xxxxxxxx          xxx xx xxxx x FRQ: 9999 9999 9999 9999 9999 9999 9999 9999
    call echov ("unit/cls sonar    crs sp dpth m RBG:    0   45   90  135  180  225  270  315")
    call echor
    call echoh (Xunt$Name$c, $$Maxlit)
    call echov (" ")
    call echoh (Xson$Type$c, $$Maxlit)
    call echov (" ")
    call echoib (int(unt$TrueCourse$f*$rad2deg), 3)
    call echov (" ")
    call echoib (int(unt$TrueSpeed$f), 2)
    call echov (" ")
    call echoib (unt$TrueAltDepth$i, 4)
    shc2$pointer = Xunt$ShcPntr$i
    if (Xshc2$Category$i == $sub$code)
    {
        if (Xshc2$NuclearPowered$i == $yes)               call echov (" N ")
        else
        {
            if (Xunt$PropulsionMode$i == $diesel$code)    call echov (" D ")
            else                                          call echov (" E ")
        }
    }
    else
        call echov ("   ")
 
    call echov ("RNG: ")
    for (i=1; i<=8; i=i+1)
    {
        call echoib (int(rngarray[i]), 4)
        call echov (" ")
    }
    call echor
 
    call echoh (Xshc$Type$c, $$Maxlit)
    call echov (" ")
    call echov ("        ")
    call echov ("     ")
    call echoib (int(Speed), 2)
    call echov (" ")
    call echoib (depth, 4)
 
    if (Xshc$category$i == $sub$code)
    {
        if (propmode == $diesel$code)        call echov (" D ")
        else if (propmode == $electric$code) call echov (" E ")
        else                                 call echov (" N ")
    }
    else
        call echov ("   ")
 
    call echov ("FRQ: ")
    for (i=1; i<=8; i=i+1)
    {
        call echoib (int(frqarray[i]),4)
        call echov (" ")
    }
    call echor
	call echov ("Passive sonar envelope does not move with force. Use ERASE PASSIVE <force-name>")
	call echor
 
    # Convert bearings and ranges from unit to lats and lons
    for (i = 1; i <= 8; i = i + 1)
    {
        flat[i] = unt$TrueLatitude$f
        flon[i] = unt$TrueLongitude$f
        relbrg = (i - 1) * 45 * $deg2rad
        call RRB2LL(flat[i],
                    flon[i],
                    rngarray[i],
                    relbrg,
                    unt$TrueCourse$f,
                    fcos)
    }
 
    # DEFINE POLYGON <name> <lat1> <lon1> ... <lat8> <lon8>
    ilex[1] = $LEX$DEFINE$
    ilex[2] = $LEX$POLYGON$
    ilex[3] = args[3]
    for (i=1; i<=8; i=i+1)
    {
        ilex[4 + (i-1)*2] =     radtoDMS(flat[i])
        ilex[4 + (i-1)*2 + 1] = radtoDMS(flon[i])
    }
    ionum = plot$order
    iwords = 19
 
    CALL PL_XLIN(ionum,                               #receive order number
                 ista,                               #receive station
                 iwords,                             #receive number words
                 ilex,                               #receive parameters
                 indx)
 
    # COLOR POYGON <name> <color>
    ilex[1] = $LEX$COLOR$
    ilex[2] = $LEX$POLYGON$
    ilex[3] = args[3]
    ilex[4] = $LEX$RED$
    iwords = 4
    if (indxShip <= nargs)
    {
        ilex[4] = args[indxShip+1]
        if (args[indxShip+1] == $LEX$DARK$ | args[indxShip+1] == $LEX$OFF$)
        {
            ilex[5] = args[indxShip+2]
            iwords = 5
        }
    }
    ionum = plot$order
    CALL PL_XLIN(ionum,                               #receive order number
                 ista,                               #receive station
                 iwords,                             #receive number words
                 ilex,                               #receive parameters
                 indx)
 
    # PLOT POLYGON NAMED <name>
    ilex[1] = $LEX$PLOT$
    ilex[2] = $LEX$POLYGON$
    ilex[3] = $LEX$NAMED$
    ilex[4] = args[3]
    ionum = plot$order
    iwords = 4
 
    CALL PL_XLIN(ionum,                               #receive order number
                 ista,                               #receive station
                 iwords,                             #receive number words
                 ilex,                               #receive parameters
                 indx)
}
else if (args[1] == $LEX$ERASE$)
{
    # DELETE POLYGON NAMED <name>
    ilex[1] = $LEX$DELETE$
    ilex[2] = $LEX$POLYGON$
    ilex[3] = $LEX$NAMED$
    ilex[4] = args[3]
    ionum = plot$order
    iwords = 4
 
    CALL PL_XLIN(ionum,                               #receive order number
                 ista,                               #receive station
                 iwords,                             #receive number words
                 ilex,                               #receive parameters
                 indx)
}
 
 
return
end
 

integer function predict_passive_range(
                                 unt3$pointer,   # detector
                                 shc$pointer,   # target class
                                 speed,         # target speed
                                 depth,         # target depth
                                 propmode,      # target propulsion mode
                                 indxson,       # in - passive sonar selected
                                 rngarray,      # out - 8 rb detection ranges
                                 frqarray)      # out - 8 rb detection freqs
BBCommon
SM$Common
 
BBDeclare (unt3$pointer)
real speed
real rngarray[8], frqarray[8]
integer depth, propmode
literal cstrip8
vmschar vstrip*ARB
BBDeclare (son$sec$index, son$mxr$index, son$mxr$range$i)
BBDeclare (shc$pointer)
BBDeclare (shn$pointer, shn$spd$index, shn$spd$tn$index, shn$spd$tn$freq$i,
           shn$spd$tn$level$i)
BBDeclare (ano$pointer, ano$nv$index)
integer iview
integer course
integer msg_len
integer nl
integer mbf, inddi, indser, di
integer ispd1
integer relbrg
real rdi, bbsn, fnoise, prpls
real an2K
real BBNL
real Flobe
integer ITT
integer iflag
integer k, ide
integer NLTEST         # Function NLTEST
integer kano
integer indxson
real    det_confidence
Real    Confidence_level
 
unt$pointer = unt3$pointer
 
if (!unt$pointer$valid) return(0)
if (!shc$pointer$valid) return(2)
if (Xshc$Category$i == $Shorebase$code) return(4)
 
Det_Confidence = .50                # At least 50% prob of detection
 
BBSEk = Confidence_level(_          #Get signal excess given confidence level
                 0.0,               #mean (input)
                 sonar$sigma,       #standard deviation (input)
                 Det_Confidence)    #confidence level (input) 0-1
 
dor_lat = Xunt$TrueLatitude$f
dor_lon = Xunt$TrueLongitude$f
Dor_depth = Xunt$TrueAltDepth$i
 
tgt_lat = dor_lat
tgt_lon = dor_lon
ps_depth[1] = depth
 
call NVREGN (Dor_Lat,                # DetectOR ship po-    11/26/90
             Dor_Lon,                #       sition          8/18/83
             indser,               # SER index             6/26/84
             Env_Det ) # return xSER$EnvNum$i to SM$Common  11/29/90
 
call NVREGN (Tgt_Lat,                # Target po-            12/11/90
             Tgt_Lon,                #       sition
             indser,               # SER index
             Env_Tgt ) # return xSER$EnvNum$i to SM$Common
 
call Inv_Worse(Env_Det,  # Environment (1,2,3,4) where Detector is
               Env_Tgt,  # Environment (1,2,3,4) where Target is
               Env_Num ) #  OUTPUT worse of the 2 Environments
 
son$pointer$to indxson
 
Pas_Sdev = XSON$StDevBrgErr$F                  # std.dev. of Brg.Err 7/7/83
 
Pas_RD = XSON$RECOGNITIONDIFF$I                #get recognition differential
 
Pas_Hifreq = XSON$HIENDFREQ$I                    #get upper limit of band
 
Pas_Lofreq = XSON$LOENDFREQ$I                    #get lower limit of band
 
Pas_Hbeam = xson$horizbeam$i * ($pi/360.)     #half of horiz bm width (rad)
 
son$mxr$index = 1
son$mxr$Range$i = xSON$MXR$Range$I
 
 
k = 1                                      # Target Index
 
if (propmode == $diesel$code)
    SHN$POINTER$TO XSHC$NOISEINDX$I
else
    SHN$POINTER$TO XSHC$NOISEINDXELEC$I
 
if (!shn$pointer$valid) return(8)
 
ps_shn[k] = shn$pointer
 
Det_Tn_Freq[k] = 0           # Init. Tgt. Tonal FREQ's
Det_Tn_SE[k] = 0.0           # Init. Tgt. Tonal SE's
#----------------------------------------------------------------------------
dor_speed = Xunt$TrueSpeed$f
tgt_speed = speed
PS_Speed[k] = Tgt_Speed * .2 + .5        #store tgt speed index
 
for (relbrg = 0; relbrg <= 180; relbrg = relbrg + 45)
{
    rngarray[relbrg/45+1] = 0
    INDDI = relbrg / 10 + 1      #compute index into
    if(INDDI > 18) INDDI = 18
    SON$SEC$INDEX = INDDI
    DI = XSON$SEC$DI$I
    Pas_RD = XSON$RECOGNITIONDIFF$I                #get recognition differential
    RDI = DI - Pas_RD        # Combine Pas_RD (from PSCHAR) with DI      7/18/83
    SON$NV$index = Env_Num      # $NV index for SON table
    ISPD1 = .2 * Dor_Speed + .5                     # determine
    if(ISPD1 < 1) ISPD1 = 1                    #   detector
   	else if(ISPD1 > 6) ISPD1 = 6               #     speed
    SON$SPD$INDEX = ISPD1                      #       index
 	
#-----------------------------------------------------------------------------
	if (propmode == $diesel$code)
	{
    	# BBN
    	# Note:  PPS pg 3-18/19 SL =BL -10*log(bw) = BL - 27.0
    	BBSN = (Xson$SPD$bbNOISE$i - 27.0)/10.     # bb selfnoise  7/15/83
    	#Note: divisor of 10 prepares for BBNL computation below)
    	kano = 16
    	ANO$POINTER$TO kano   # index for 2000cps broadband freq      7/15/83
    	ANO$NV$index = Env_Num                # (from NVREGN) Envrnmt 8/18/83
    	# Note:  PPS pg 3-18:  use amb.noise from table direct; and,
    	# dividing an2K by 10. prepares for BBNL computation, following
    	an2K = Xano$NV$Noise$F/10.                           #       7/15/83
 
    	BBNL = 10.*log10((1.0D+1)**BBSN + (1.0D+1)**AN2k) #PPS pg 3-20       8/11/83
    	call GETBBN(k, BBNL, RDI, kano, prpls)
    	iflag = 1
    	rngarray[relbrg/45+1] = ps_range[k]
    	frqarray[relbrg/45+1] = 2000.
	}
#------------------------------------------------------------------------------
 
    # Compute NBN
    SHN$SPD$index = ps_speed[k]
    Det_Tn_Count = 0      # Counter for # of tonals detected          7/20/83
    do SHN$SPD$TN$index = 1, SHN$SPD$TN$slots # @ sig.line
    {
        SHN$SPD$tn$Freq$i = xSHN$SPD$tn$Freq$i            #
        if( SHN$SPD$tn$Freq$i == 0 ) next   # if zero freq.
 
        SHN$SPD$tn$Level$i = xSHN$SPD$tn$Level$i
 
        Flobe = 1.0  # Kow-Tow to Vers. 4.1 FORT. compiler
        ITT = 2              # Flag a TARGET-TONAL case
        call FRQDET(_        # SPCLVL & factor args replaced
                            # for TGT. PS_Range/PS_Depth index     8/5/83
                    k,
                    SHN$SPD$tn$Freq$i,            #
                    SHN$SPD$tn$Level$i,           #
                    iTT,         #2(targ),1(tug),0(other),3(NA
                    SHN$SPD$TN$INDEX,#Det_Tn_SE indx (NDXDT) for ITT=2   7/20/83
                    RDI,         # vice TERM (RDI - PS_Ploss[k])
                    ISPD1,       # detectOR speed index
                    Flobe,       # for TGT, lobe-factor is 1.0
                    fnoise,
                    prpls,
                    iflag)
 
        if ( ps_range[k] > rngarray[relbrg/45+1])
        {
            rngarray[relbrg/45+1] = ps_range[k]
            frqarray[relbrg/45+1] = shn$spd$tn$freq$i
        }
    } # End "do SHN$SPD$TN$index = 1, SHN$SPD$TN$slots "
} # End relbrg
 
# detection envelope is symmetrical along ship length axis
for (relbrg = 225; relbrg <= 315; relbrg = relbrg + 45)
{
    rngarray[relbrg/45+1] = rngarray[(360-relbrg)/45+1]
    frqarray[relbrg/45+1] = frqarray[(360-relbrg)/45+1]
}
 
return(1)       # OK
end
 

 Subroutine FRQDET( _                   #FReQuency DETection
                   k,                   #                       8/5/83
                   ifreq,               #frequency (in)
                   level,               #signal level (in)
                   iTT,  #2(targ),1(tug),0("other"),3(NA)       7/20/83
                   ndxDT, #indx to Det_Tn_SE/Det_Tn_Freq; INput if ITT=2   7/20/83
                   RDI,         # vice TERM (DI-RD-PS_Ploss[k])   8/4/83
                   ISPD1,               # detectOR speed index  8/9/83
                   fLOBE,               # Interfer. lobe-factor 8/10/83
                   fnoise,
                   prpls,
                   jflag)               #detect flag (out)
 
 #######################################################
 #$%
 #$% Purpose:   FRQDET determines if a certain
 #$%            frequency is detected, or whether a tonal
 #$%            interferes with detection of a tgt. tonal
 #$%
 #$% Called By: PASDET
 #$%
 #$% Calls:     INDFRQ    (LOG10)
 #$%            NLTEST
 #$%
 #$% Tables:    ANO     SON
 #$%
 #$% Date:      FEB 81
 #$%
 #$% Author:    Ron Williams
 #$%
 #$% Revised:   8/83 - J. Bryant (Revised PasSon PPS dtd 6/83)
 ##############################################################
 BBcommon
 SM$Common                                       #               7/21/83
 
 LITERAL CSTRIP8                                # jb E2145 6/21/00
 REAL PRPLS,SN,FNOISE,RDI,FLOBE,PROB1,PROB2 # jb E2145  6/21/00
 real AN
 real*4 Ac_alt, Sub_depth, temp
 Real*4 Intra_Degradation                       # For EMI        11/6/90
 Integer*4 iflag1,iflag2,iflag3                 # For EMI        11/6/90
 Integer*4 Hold_Deq                             # jb             2/11/91
 Integer K,IFREQ,JFLAG,ITT,KLIN,IDB,NDXDT,LEVEL,
    NLTEST2,NLTEST,IBELOW,IABOVE,IFBELO,IFABOV,
    ISPD1, KANO,ANO$Pointer,ANO$NV$Index,
    SON$SPD$TN$Index
 Integer find_range_from_prpls
 
ps_range[k] = 0                                 # no detection
 
 if (ifreq < Pas_Lofreq |                     #if outside of detector band
     ifreq > Pas_Hifreq)
    {
     jflag = $no                        #no detection
     return
    }
 
 if ( ITT == 1 | ITT == 0 )     #TUG or other interfering case 7/21/83
  {
   klin = 0
   for (iDB =1; iDB <=6; iDB =iDB +1)   # for Det_Tn_Freq elements    7/21/83
    {
     if (Det_Tn_Freq[iDB] == ifreq )  # If frequency has a match      7/21/83
      {
       klin =klin +1            # Count number of matches       7/21/83
       NDXDT = iDB              # set Det_Tn_SE indx for ITT = 0     10/3/83
       if (ITT == 1)            # Tug case only                 7/21/83
        {
 
         Det_Tn_Count = Det_Tn_Count -1               # 1 LESS tonal detected 7/21/83
         Det_Tn_Freq[iDB] = 0                 # Flag no frequency     7/21/83
         Det_Tn_SE[iDB] = -987.6             # Flag SE as bad..      7/21/83
         RETURN                 # for TUG, no need for SE       7/21/83
        }               # End of "TUG case only"
      }         # End "If frequency has a match"
    }   # End "for Det_Tn_Freq (frequency) elements
 
   if ( klin == 0 )     RETURN          # no frequencies match  7/21/83
  }     # End "if TUG or other-interfering case"
 
 if(ifreq == 0)        RETURN            # jb                    6/22/90
 call INDFRQ( _
             IFREQ,
             IBELOW,
             IABOVE,
             IFBELO,
             IFABOV)
 
 
   ##Note: PPS pg 3-22 specifies NEAREST tabulated frequency    7/19/83
 if (iFabov -iFREQ < iFREQ -iFbelo )            # NEAREST       8/5/83
      kano = iabove
 else kano = ibelow                             #  tabulated    8/5/83
 ANO$POINTER$TO kano                            #   frequency.. 8/5/83
 ANO$NV$index = Env_Num                          # Envrnmt       8/18/83
 
    ##Note:  PPS pg 3-18 specifies AN taken directly from file  7/19/83
    AN = XANO$NV$NOISE$F/10.       # AMBIENT noise right from tbl  7/19/83
    #NOTE: dividing AN by 10. prepares for FNOISE computation, below
 
if(son$spd$index == 0) SN = 0.         #if no self-noise, set to zero
else
{
    SON$SPD$INDEX = ISPD1              #               index   7/19/83
    SON$SPD$TN$INDEX = kano            #set index for freq     8/8/83
 
    SN = XSON$SPD$TN$LEVEL$I/10.       #Self-Noise @ IFREQ.    7/19/83
    # NOTE: dividing SN by 10. prepares for FNOISE computation, below
}   #endelse
 
 FNOISE = 10.*log10((1.0D+1)**SN + (1.0D+1)**AN) #PPS pg 3-20   8/11/83
 prpls = level - fnoise + rdi - BBSEk
 ps_range[k] = find_range_from_prpls (k, kano, prpls)
 if (ITT == 0 )                 # if "other-interfering" case   7/21/83
  {
 if (BBSEk*fLOBE > Det_Tn_SE[ndxDT] )
    {
     Det_Tn_Count = Det_Tn_Count -1           # 1 LESS tonal detected 7/21/83
     Det_Tn_Freq[ndxDT] = 0           # Flag no frequency     7/21/83
     Det_Tn_SE[ndxDT] = -987.6       # INTERFERENCE flag..   7/21/83
     RETURN                     # no need for nltest    7/21/83
    }
   else RETURN                  # no need for nltest    7/21/83
  }     #       End of "if other-interfering case"
 
 
 jflag = 1
 if( ITT > 1 & jflag != $NO )           #  TARGET detection!    8/8/83
  {
   Det_SE = MAX ( Det_SE, BBSEk )                 # Overall SE for TMA    8/8/83
   If (ITT == 2) Det_Tn_SE[ndxDT] = BBSEk      # Store tgt tonal's SE  9/27/83
  }     ## nb:  PASDET stores tgt tonal's iFREQ in Det_Tn_Freq array  7/21/83
 
 return
 end            #  End  Subroutine FRQDET
 

 Subroutine INDFRQ( _           #INDex for FReQuency
                   IFREQ,       #frequency (input)
                   IBELOW,      #indx to freq just below (output)
                   IABOVE,      #indx to freq just above (output)
                   IFBELO,      #frequency just below (output)
                   IFABOV)      #frequency just above (output)
 
 #######################################################
 #$%
 #$% Purpose:   INDFRQ determines appropriate indices
 #$%            into self-noise tables as well as in-
 #$%            to the proploss and ambient noise
 #$%            tables
 #$%
 #$% Called By: FRQDET  PSCHAR
 #$%
 #$% Calls:     None
 #$%
 #$% Tables:    None
 #$%
 #$% Date:      FEB 81
 #$%
 #$% Author:    Ron Williams
 #$%
 #######################################################
BBIMPLICIT      # jb E2145  6/21/00
 
 #Calls: QLOG2
 
 real*4    MTH$ALOG2, FLG2    # jb;  For MTH$ALOG2        8/22/88
Integer I,IBELOW,IABOVE,IFREQ,IFBELO,IFABOV # jb E2145  6/21/00
 integer IFARG[20]
 data (IFARG[I],I=1,20) / 10,15,20,30,40,60,80,100,125,250,315,630,900,
                          1250,1600,2000,2500,3500,5000,10000 /
 IBELOW = 1                                     #initialize
 IABOVE = 20                                    #initialize
 
## I = INT(1.9 * QKLG2(FLOAT(IFREQ)) - 5.3)  # jb (Old way) 9/1/88
 FLG2 = FLOAT(IFREQ)                               # jb       8/22/88
 FLG2 = MTH$ALOG2(FLG2)               # jb replace WKLG2      8/22/88
 I = INT(1.9 * FLG2 - 5.3)        #compute a close starting-  8/22/88
 
 if(I < 1)  I = 1                               #   point but make sure
 else if(I > 20)  I = 20                        #     within correct limits
 
 repeat                                         #continue until done
 
    {
     if(IFREQ < IFARG[I])                       #if index reprsnts higher freq
 
       {
        IABOVE = I                              #adjust ceiling
 
        I = I - 1                               #decrease index for next try
       }
 
     else if(IFREQ > IFARG[I])                  #if index reprsnts lower freq
 
       {
        IBELOW = I                              #adjust floor
 
        I = I + 1                               #increase index for next try
       }                                        #endif
 
     else                                       #if frequency matches
       {
        IBELOW = I
 
        IABOVE = I
       }
 
    }   # endrepeat
 
 until(IABOVE <= IBELOW + 1)                    #done when frequency pinched
 
 IFBELO = IFARG[IBELOW]                         #get frequency below
 
 IFABOV = IFARG[IABOVE]                         #get frequency above
 
 return
 end
 

 Subroutine GETBBN(_
                   k, BBNL, RDI, kano, prpls)
 
 #######################################################
 #$%
 #$% Purpose:   GETBBN computes noise level due to
 #$%            propagation loss and ship noise.
 #$%
 #$% Called By: PASDET
 #$%
 #$% Calls:
 #$%
 #$% Tables:    PRL     SHN     UNT
 #$%            SHC
 #$%
 #$% Date:      FEB 81
 #$%
 #$% Author:    Ron Williams
 #$%
 #######################################################
 BBcommon
 SM$Common
 
Integer J,K,IRNG,                               # jb E2145  6/21/00
    PRL$Pointer,PRL$NV$Index,PRL$NV$FQ$Index,   # jb E2145  6/21/00
    SHN$Pointer,SHN$SPD$Index,                  # jb E2145  6/21/00
    CTM$Pointer, SHC$Pointer                    # jb E2145  6/21/00
 logical DRDEEP, TGDEEP
real BBNL, RDI
real prpls
real confidence_level
integer find_range_from_prpls
integer kano
 
 if (PS_Speed[k] <= 0)                      #
     PS_BBN[k] = 0.
 else
    {
     shn$pointer = ps_shn[k]
 
     SHN$SPD$INDEX = PS_Speed[k]    # set index for SPEED # STET
 
     # Note:  PPS pg 3-18/19 SL =BL -10*log(bw) = BL - 27.0
     PS_BBN[k] = xSHN$SPD$BbNoise$f -27. # Bb Splvl @ 2000 Hz
 
    }
 
#BBSEk = PS_BBN[k] -BBNL +RDI -PS_Ploss[k] # TGT Bband SE
 prpls = PS_BBN[k] -BBNL +RDI -BBSEk # TGT Bband SE
 
 ps_range[k] = find_range_from_prpls (k, kano, prpls)
 
 return
 end
 

 
integer function find_range_from_prpls (k, prl$nv$fq$index, fprpls)
 
 BBcommon
 SM$Common
 
 REAL    TPRPLS
 REAL    FPRPLS
 REAL    PRPLS
 Integer K,IRNG,
    PRL$Pointer,PRL$NV$Index,PRL$NV$FQ$Index
 logical DRDEEP, TGDEEP
 
tprpls = -1000.0
 
for (irng = 1; irng <= 120; irng = irng + 1)
{
    PRL$Pointer$to irng                    # set PRL pntr  6/20/83
 
    PRL$NV$index = Env_Num                  # Envrnmt #     8/18/83
 
    DRDEEP = (Dor_Depth >= LAYER$DEPTH)        # Is detector at/below layer?
 
    TGDEEP = (PS_Depth[K] >= LAYER$DEPTH)     # Is target at/below layer?
 
    if(DRDEEP & TGDEEP)                    #if both deep
        PRPLS = XPRL$NV$FQ$PROPLOSSDEEP$F   #approp. proploss       8/5/83
 
    else if(!DRDEEP & !TGDEEP)             # if both in-layer,
        PRPLS = XPRL$NV$FQ$PROPLOSSIN$F     #       approp.proploss 8/5/83
 
    else                                   #if cross-layer
        PRPLS = XPRL$NV$FQ$PROPLOSSCROSS$F #approp. proploss        8/5/83
 
    if (fprpls >= tprpls & fprpls <= prpls) break
 
    tprpls = prpls
}
 
return (irng-1)
end

 
 Subroutine NVREGN(detLAT,              # DetectOR posi-
                   detLON,              #       tion (input)
                   indser,              # SER index     6/26/84
                   Num_Env )             # return xSER$EnvNum$i
#######################################################
 #$%
 #$% Purpose:   NVREGN determines SER$EnvNum$i for each
 #$%            ship and buoy that might detect by sonar
 #$%
 #$% Called By: SONDET (1 call for ships; 1 for buoys)
 #$%
 #$% Calls:     INOUT
 #$%
 #$% Tables:    SER
 #$%
 #$% Date:      AUG. 1983
 #$%
 #$% Author:    J. Bryant
 #$%
 #######################################################
 BBcommon
 
 real x[6],y[6]
 REAL DETLON,DETLAT             # jb E2145  6/21/00
 integer*4 Num_Env
 Integer INDSER,INFLAG,NVERT,   # jb E2145  6/21/00
    SER$Pointer, SER$VER$Index  # jb E2145  6/21/00
 
indser = 0       # jb Default (which SONDET ignores)        10/1/91
Num_Env = 4
for (SER$Pointer$First; SER$Pointer$OK; SER$Pointer$Next) # 7/16/86
 {
  nvert = Xser$NbrVertices$i    # Number of Vertices
  if( nvert < 1 | nvert > 6 ) NEXT                      #       8/19/83
 
  for ( SER$ver$index=1; SER$ver$index<=nvert; SER$ver$index=SER$ver$index+1 )
    {
     x[SER$ver$index] = xSER$ver$longitude$f  # get vertices' longitudes
     y[SER$ver$index] = xSER$ver$latitude$f   # get vertices' latitudes
    }
 
  call inout(detLON,detLAT,nvert,x,y,inflag)    # note LON before LAT!..
  if( inflag == $YES )
   {
    Num_Env = Xser$EnvNum$i
    indser = ser$Pointer$Index
    BREAK
   }
 }              #       End  For Ser$Pointer..
return
end     #       End of subr. NVREGN
 

Real Function Confidence_level(_          #Normal TEST
                 FMEAN,               #mean (input)
                 STDDEV,              #standard deviation (input)
                 CL)                  #confidence level (input) 0-1
 
 implicit none
 
 integer I, NLTEST
 real*4  Z, X, FMEAN, PROB, STDDEV, xlo, xhi, xinc, xr
 real*4  CL
 
 real    STDNL[0:30]
 data STDNL / .5000, .5398, .5793, .6179, .6554, .6915, .7257,
                .7580, .7881, .8159, .8413, .8643, .8849, .9032,
                .9192, .9332, .9452, .9554, .9641, .9713, .9773,
                .9821, .9861, .9893, .9918, .9938, .9953, .9965,
                .9974, .9981, .9987 /
xlo = fmean - stddev*3
xinc = stddev/10.
xhi = fmean + stddev*3
for (x = xlo; x <= xhi; x = x + xinc)
{
    Z = (X - FMEAN) / STDDEV             #convert to standard normal
    I = INT(10.0 * ABS(Z) + .5)      #compute closest index into table
    PROB = STDNL[I]                  #get tabulated probability
    if (Z < 0.0)                     #if Z negative
        PROB = 1.0 - PROB            #compute complementary probability
    if (cl <= prob)
	{
		xr = x
 		break
	}
}
 
return xr
 end
 
