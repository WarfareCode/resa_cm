 
define($pi,3.14159265)
define($DEBUG,#)
include "ascii.inc"
include "macros.inc"
 
Subroutine vmovll (radian,hems,dest,len2)
 
###########################################################
#$%
#$% Purpose:   VMOVLL builds ASCII representation of
#$%            a latitude or longitude into a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV       VMOVIB     VMOVIZ
#$%            IGBYTE
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
#$% Modified:  Dec 1993, DEW, changed datatype of 2nd argument
#$%
###########################################################
 IMPLICIT NONE                  # jb  7/8/98
 
 REAL*4 radian, xbdeg,xbmin     # jb  7/8/98
Integer i,k,len2,ideg, imin     # jb  7/8/98
 character          char, ICHAR # jb  7/8/98
 vaxcharacter*(*)   dest
 vaxcharacter       hems*2
 
 xbdeg = abs(radian*(180./$pi))                 #convert to absolute degrees
 
 ideg = int(xbdeg)                              #take integer part
 
 xbmin = 60. * (xbdeg - float(ideg))            #convert excess to minutes
 
 imin = int(xbmin + .5)                         #round to nearest whole minute
 
 if(imin >= 60)                                 #if 60 minutes
   {
    ideg = ideg + 1                             #make one more degree
    imin = 0                                    #and zero minutes
   }                                            #end if 60 minutes
 
 if (radian >= 0.0) i = 1                       # N or E
 else               i = 2                       # S or W
 
 #$% set char to N/E or S/W
 char = ichar(hems[i:i])
 
 #$% set k to norther N/S or E/W
 if (char == $letN | char == $letS) k = 2
 else                               k = 3
 
 #$% move degrees/minutes into array for display
 call vmovib (ideg,k,dest,len2)
 call vmov ($minus,dest,len2)
 call vmoviz (imin,2,dest,len2)
 call vmov(char,dest,len2)
 
 return
 end
 

Subroutine vmovlls (radian,hems,dest,len2)
 
###########################################################
#$%
#$% Purpose:   VMOVLL builds ASCII representation of
#$%            a latitude or longitude (with seconds) into a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV       VMOVIB     VMOVIZ
#$%            IGBYTE
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
#$% Modified:  Dec 1993, DEW, changed datatype of 2nd argument
#$%
###########################################################
 IMPLICIT NONE      # jb  7/8/98
 
 REAL*4 radian, xbdeg,xbmin,xbsec,rsec
 Integer i,k,len2,ideg, imin,isec,tees
 character          char, ICHAR       # jb  7/8/98
 vaxcharacter*(*)   dest
 vaxcharacter       hems*2
 
 tees = NO
 repeat
    {
    break
    entry vmovllst (radian,hems,dest,len2)
    tees = YES
    }
 
 xbdeg = abs(radian*(180./$pi))                 #convert to absolute degrees
 
 ideg = int(xbdeg)                              #take integer part
 
 xbmin = 60. * (xbdeg - float(ideg))            #convert excess to minutes
 
 imin = int(xbmin)                              # take integer part
 
 xbsec = 60. * (xbmin - float(imin))            #convert excess to seconds
 
 if (tees == YES) rsec = xbsec + 0.05           #round to nearest second/tenth
 else             rsec = int(xbsec + 0.5)
 isec = rsec
 
 if(rsec >= 60.0)                               #if 60 seconds
   {
    imin = imin + 1                             #make one more minute
    rsec = rsec - 60.0                          #and zero seconds
    isec = 0
   }                                            #end if 60 seconds
 
 if(imin >= 60)                                 #if 60 minutes
   {
    ideg = ideg + 1                             #make one more degree
    imin = 0                                    #and zero minutes
   }                                            #end if 60 minutes
 
 if (radian >= 0.0) i = 1                       # N or E
 else               i = 2                       # S or W
 
 #$% set char to N/E or S/W
 char = ichar(hems[i:i])
 
 #$% set k to norther N/S or E/W
 if (char == $letN | char == $letS) k = 2
 else                               k = 3
 
 #$% move degrees/minutes into array for display
 call vmovib (ideg,k,dest,len2)
 call vmov ($minus,dest,len2)
 call vmoviz (imin,2,dest,len2)
 call vmov ($minus,dest,len2)
 if (tees == YES) call vmovfz (rsec,401,dest,len2)
 else             call vmoviz (isec,2,dest,len2)
 call vmov(char,dest,len2)
 
 return
 end
 

Subroutine vmovV (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   VMOVV builds a vax character string into
#$%            a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                      # jb  7/8/98
 
 integer            Len_In, Len_out,
                    i,LEN,len2      # jb  7/8/98
 vaxcharacter*(*)   vaxchar, dest
 character          a_char
 
 len_in  = len(vaxchar)
 len_out = len(dest)
 
 #$% for each character in the string
 for (i=1; i <= len_in; i=i+1)
   {
    a_char = ichar ( vaxchar[i:i] )
    if (a_char == 0) break
 
    if (len2 >= len_out) break                  # protect from over-run
 
    len2 = len2 + 1
    dest[len2:len2] = vaxchar[i:i]
#   call vmov ( a_char, dest, len2 )
   }
 
 end
 
 

Subroutine vmovVN (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   VMOVVN builds a vax character string into
#$%            a buffer, stopping at the first space.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                          # jb  7/8/98
 
 integer            i,ilen, len2,LEN    # jb  7/8/98
 vaxcharacter*(*)   vaxchar, dest
 character          a_char
 
 ilen = len(vaxchar)
 
 #$% for each character in the string
 for (i=1; i <= ilen; i=i+1)
   {
    a_char = ichar ( vaxchar[i:i] )
 
    if (a_char == $space | a_char == $null) break
 
    call vmov ( a_char, dest, len2 )
   }
 
 end
 
 

Subroutine vmovH (hstrng,len,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   VMOVH builds a hollerith string into
#$%            a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV       IPBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                  # jb  7/8/98
 
 Integer            i,len,len2  # jb  7/8/98
 vaxcharacter*(*)   dest
 character          hstrng[ARB]
 
 #$% for each character in the string
 for (i=1; i <= len; i=i+1)
   {
    #$% break out of loop when a null is reached
    if (hstrng[i] == $null) break
 
    #$% move string into array for display
    call vmov(hstrng[i],dest,len2)
   }
 return
 end
 
 

Subroutine vmovHn (hstrng,len,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   VMOVHN builds a hollerith string into
#$%            a buffer, stopping at the first "SPACE.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV       IGBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                  # jb  7/8/98
 
 Integer            i,len,len2  # jb  7/8/98
 vaxcharacter*(*)   dest
 character          hstrng[ARB]
 
#$% for each character in the string
for (i=1; i <= len; i=i+1)
   {
    #$% break out of loop when character is a space or a null
    if (hstrng[i] == $space | hstrng[i] == $null) break
 
    #$% move string into array for display
    call vmov(hstrng[i],dest,len2)
   }
 return
 end
 
 

Subroutine vmovi(i,dest,len2)
 
##########################################################
#$%
#$% Purpose:   VMOVI builds the ASCII representation
#$%            of an integer into a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV       VMOVST
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
##########################################################
 IMPLICIT NONE      # jb  7/8/98
 
 Integer            i,j,k,len2  # jb  7/8/98
 character          strng[21]
 vaxcharacter*(*)   dest
 
 #$% establish null position
 strng[21] = $NULL
 
 #$% get absolute value of the input number
 k = iabs(i)
 
 #$% for each chaaracter in the string working backwards
 for (j = 20; j>0; j = j - 1)
    {
     strng[j] = mod(k,10) + $DIG0
     k = k/10
    }
 
 #$% for each character in the string
 for (j=1; j < 20; j=j+1)
    {
     #$% break loop if character is a zero
     if (strng[j]!=$DIG0) break
    }
 
 #$% if the inputted character is negative, add the minus sign
 if (i < 0) call vmov ($minus,dest,len2)
 
 #$% build the RATFOR string into a buffer
 call vmovst(strng[j],dest,len2)
 
 return
 end
 

Subroutine vmoviz(i,n,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
##########################################################
#$%
#$% Purpose:   VMOVIZ builds an integer string of a
#$%            given width (with preceeding zeroes) into
#$%            a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     VMOV
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
##########################################################
 IMPLICIT NONE                          # jb  7/8/98
 
Integer             i,j,k,n,len2    # jb  7/8/98
 
vaxcharacter*(*)    dest
character           strng[11],
                    ifill,isign         # jb  7/8/98
 
#$% set ifill at zero
ifill = $dig0
 
#$% continue processing in next subroutine
go to 100
 
entry vmovib(i,n,dest,len2)
 
#############################################################
#$%                                                         #
#$% Purpose:   VMOVIB builds an integer string of a given   #
#$%            width (with preceeding blanks) into a buf-   #
#$%            fer.                                         #
#$%                                                         #
#############################################################
 
#$% set ifill as a space
ifill = $space
 
#$% ifill is either a zero (vmoviz) or a space
#$% set character to  a null
100  strng[11] = $NULL
 
#$% get rid of negative signs (make absolute value)
k = iabs(i)
 
#$% for each character
for (j = 1; j<= 10; j = j+1)
   {
    strng[j] = mod(k,10) + $DIG0
    k = k/10
   }
 
#$% for each character working backwards
for (j=10; j > 1; j = j-1)
    if (strng[j]!=$DIG0) break
 
#$% if the inputted character was negative, set sign to minus
if (i < 0)  isign = $minus
#$% else make sign a zero or a space
else        isign = ifill
 
#$% for each character in the string
for (k=n; k>= 1; k=k-1)
   {
    #$% return minus sign and fill spaces with zeros
    if (ifill == $dig0 & isign == $minus)
       {
        call vmov(isign,dest,len2)
        isign = ifill
        next
       }
 
    #$% return minus sign and fill spaces with spaces
    if      (k-1== j) call vmov(isign,dest,len2)
    else if (k  >  j) call vmov(ifill,dest,len2)
    else              call vmov(strng[k],dest,len2)
   }
 
return
end
 
 

Subroutine vmovLN(strng,dest,len2)
 
##########################################################
#$%
#$% Purpose:   VMOVLN builds a string and a carriage
#$%            return into a buffer.
#$%
#$% Called By: None
#$%
#$% Calls:     VMOVST     VMOVR
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
##########################################################
 IMPLICIT NONE      # jb  7/8/98
 
 Integer len2       # jb  7/8/98
 character          strng[ARB]
 vaxcharacter*(*)   dest
 
 #$% enter charater string into a buffer
 call vmovst(strng,dest,len2)
 
 #$% add a carraige return to end of string
 call vmovR (dest,len2)
 
 return
 end
 
 

Subroutine vmovR (dest,len2)
 
##########################################################
#$%
#$% Purpose:   VMOVR builds a carriage return into
#$%            a buffer.
#$%
#$% Called By: VMOVLN
#$%
#$% Calls:     VMOV
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
##########################################################
 IMPLICIT NONE      # jb  7/8/98
 
 Integer len2       # jb  7/8/98
 vaxcharacter*(*)   dest
 
 #$% call each function to create a carriage return
 call vmov($Return,dest,len2)
 call vmov($LINEFEED,dest,len2)
 
 return
 end

 
Subroutine vmovST(strng,dest,len2)
 
##########################################################
#$%
#$% Purpose:   VMOVST builds a string (RATFOR) into
#$%            a buffer.
#$%
#$% Called By: VMOVI      VMOVLN
#$%
#$% Calls:     VMOV
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
##########################################################
 IMPLICIT NONE              # jb  7/8/98
 
 Integer            i,len2  # jb  7/8/98
 vaxcharacter*(*)   dest
 character          strng[ARB]
 
 #$% for each character in a string until a null is reached
 for (i=1;strng[i]!=$null;i=i+1)
   {
    #$% enter string into a buffer
    call vmov(strng[i],dest,len2)
   }
 return
 end
 

Subroutine vmov(i,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
##########################################################
#$%
#$% Purpose:   VMOV builds a single character into
#$%            a buffer.
#$%
#$% Called By:
#$%
#$% Calls:     IPBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
##########################################################
 IMPLICIT NONE              # jb  7/8/98
 
integer*4          len_out,
                   len2     # jb  7/8/98
vaxcharacter*(*)   dest
character          i
integer            il
len_out = len(dest)
if (len2 < len_out)
    {
    len2 = len2 + 1
    il = i
    dest[len2:len2] = char(il)
    }
 
 return
 end
 

 
subroutine vmovo (ival,ilen,dest,len2)    # Format value in Octal
 
#####################################################
#$%
#$% Purpose:   VMOVO displays a value in octal.
#$%
#$% Calls:     VMOV
#$%
#$% Tables:    None
#$%
#$% Date:      SEP 99
#$%
#$% Author:    Dane Wills
#$%
#####################################################
IMPLICIT NONE           # jb    7/7/98
 
vaxcharacter*(*)    dest
integer*4           ival, ilen, len2, i,j,k
 
i = ival
 
for (k=(ilen-1)*3; k>=0; k=k-3)
    {
    j = istrip (i,k,M3Bits)
 
    call vmov (j+$dig0, dest,len2)
    }
 
return
end
 
 
 
 
subroutine vmovx (ival,ilen,dest,len2)    # Format value in Hex
 
#####################################################
#$%
#$% Purpose:   VMOVX displays a value in hex.
#$%
#$% Calls:     ECHO
#$%
#$% Tables:    None
#$%
#$% Date:      OCT 80
#$%
#$% Author:    Dana Wills
#$%
#####################################################
 IMPLICIT NONE                  # jb  7/8/98
 
vaxcharacter*(*)    dest
integer*4           ival, ilen, len2,
                    i,j,k       # jb  7/8/98
 
i = ival
 
for (k=(ilen-1)*4; k>=0; k=k-4)
   {
    j = istrip (i,k,M4Bits)
 
    if (j <= 9) call vmov (j+$dig0  ,dest,len2)
    else        call vmov (BIGA-10+j,dest,len2)
   }
 
return
end
 

 
subroutine vmovf (tval,idec,dest,len2)     # format in floating point
 
# move a floating point value with a specified number of decimal places
#   fval = Real* 4 value to format
#   idec = number of decimal places (0..99)
#          and an overall field width if > 99
#          FVAL     IDEC    Output
#           5.246     1     '5.2'
#           5.246     2     '5.25'
#           5.246     3     '5.246'
#           5.246   501     '  5.2'
#           5.246   502     ' 5.25'
#           5.246   503     '5.246'
#
IMPLICIT NONE                       # jb  7/8/98
 
real*4      fval, tval,
            r,rval                  # jb  7/8/98
integer*4   idec,len2, ex,
        i,len,ndec,ival,len_w,len_f # jb  7/8/98
 
vaxcharacter*(*)   dest, fill*1
 
fill = ""
repeat
    {
    break
    entry vmovfz (tval,idec,dest,len2)  # format in floating point, zero fill
    fill = "0"
    }
 
fval = tval
ex = 0      # default exponent
# protect us from integer overflow...
while (fval > 4.0e9)   # 4 billion, max integer...
    {
    fval = fval / 1000.0
    ex = ex + 3
    }
 
len = idec/100                              # width of field
ndec = mod(idec,100)                        # number of decimal places
 
r = (.5 / 10 ** ndec)                       # Amount to round
rval = sign(abs(fval) + r,fval)             # Round Up (away from zero)
 
ival = rval                                 # Whole Number
 
len_w = len - ndec - 1                      # Length (width) of Whole number
len_f = ndec                                # Length (width) of decimal portion
 
if (ex != 0 & len_w > 3 ) len_w = len_w - 3
 
len = len_w
 
if (len <= 0)
   {
    if (ival == 0 & rval < 0) call vmovv ("-0",dest,len2)
    else                      call vmovi (ival,dest,len2)
   }
else
   {
    if (ival == 0 & rval < 0)
       {
        while (len > 2) {call vmovv (fill,dest,len2); len=len-1}
        call vmovv ("-0",dest,len2)
       }
    else if (fill == "")
       {
        call vmovib (ival,len,dest,len2)
       }
    else
       {
        call vmoviz (ival,len,dest,len2)
       }
   }
 
call vmov ($period,dest,len2)
r = rval - ival                             # Fraction
i = abs(r) * 10 ** ndec
call vmoviz (i,ndec,dest,len2)
 
if (ex != 0)        # exponent
    {
    call vmovv  ("e",dest,len2)
    call vmoviz (ex,2,dest,len2)
    }
 
return
end
 

Subroutine vmovVT (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   VMOVVT builds a vax character string into
#$%            a buffer, but trims off trailing blanks.
#$%
#$% Date:      Aug 94
#$%
#$% Author:    Dane Wills
#$%
###########################################################
IMPLICIT NONE               # jb  7/8/98
 
integer             last_NB     # Last non-blank character
integer             i,Len_In, Len_out, len2,
                    LEN     # jb  7/8/98
vaxcharacter*(*)    vaxchar, dest
 
len_in  = len(vaxchar)
len_out = len(dest)
last_nb = len2                                  # Save current position
 
#$% for each character in the string
for (i=1; i <= len_in; i=i+1)
    {
    if (vaxchar[i:i] == char(0) ) break         # terminate on a Null
 
    if (len2 >= len_out) break                  # protect from over-run
 
    len2 = len2 + 1
    dest[len2:len2] = vaxchar[i:i]              # move it in
 
    if (vaxchar[i:i] != "") last_nb = len2     # save position if Non-Blank
    }
 
len2 = last_nb                  # return to the last Non-Blank character
 
 
return
end
 

Subroutine vmov_freq (freq,dp,dest,len2)
# WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   VMOV_Freq builds a floating point frequency (MHz) into
#$%            a buffer, for the given precision, with a Units suffix.
#$%            The suffix will be ' kHz', ' MHz', or ' GHz' as appropriate.
#$%            The DP argument is the same as used by VMOVF, but it does not
#$%            affect the Suffix.  Values of 3 or 803 are recommended.
#$%
#$% Date:      Dec 97
#$%
#$% Author:    Dane Wills
#$%
###########################################################
IMPLICIT NONE      # jb  7/8/98
 
real                freq, Freq_2
integer*4           dp
integer             len2
vaxcharacter*(*)    dest
vaxcharacter*4      Freq_U
 
Freq_2  = Freq
Freq_U  = "MHz"
if (Freq_2 < 3.0)
    {
    Freq_2  = Freq_2 * 1000.0
    Freq_U  = "kHz"
    }
else if (Freq_2 >= 3000.0)
    {
    Freq_2  = Freq_2 / 1000.0
    Freq_U  = "GHz"
    }
 
call vmovf (Freq_2,dp, dest, len2)
call vmovv (Freq_U,    dest, len2)
 
end
