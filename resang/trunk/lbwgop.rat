include "bbctl.inc"
include "bbcode.inc"
include "ascii.inc"
include "orders.inc"
include "plplay.inc"
 
include "bbacc.inc"
include "bbcmc.inc"
include "bbdeq.inc"
include "bbhwf.inc"
include "bbord.inc"
include "bbpim.inc"
include "bbshc.inc"
include "bbunt.inc"
include "bbwvf.inc"
include "cm_fire.inc"                   # joa - 2/98 (E1864)
 
define (BBImplicit, Implicit None)
define ($FuelSpeedInterval,5)
 
define ($DEBUGA,#)
 

 
Subroutine odefine_fuel (nargs,    # in:  Number of arguments - int
                         args,     # in:  Command arguments - int array
                         ierror)   # out: error code - int
#############################################################
#$%
#$% Purpose:   Processes DEFINE FUEL [ | SHIP | AIR | BOAT ]
#$%                                  [  OFF | ON ]
#$%            Sets the fuel consumption states by unit type.
#$%
#$% Called By: xdefin    <wixdefin.rin>
#$%
#$% Calls:     none
#$%
#$% Tables:    None
#$%
#$% Date:      February 1996  (E1467)
#$%
#$% Author:    James Allen
#$%
#############################################################
BBcommon
 
integer     nargs
literal     args[20]
integer     ierror
 
integer     state_arg
integer     state
 
#   1       2      3                     4
# DEFINE  FUEL
#           [ | SHIP | AIRCRAFT | BOAT ]
#                       (consumption) [OFF | ON] ];
 
  if (nargs == 3)             # Locate on/off state arg
    state_arg = 3
  else
    state_arg = 4
 
  if (args[state_arg] == $lex$ON$)
    state = $ON
  else
    state = $OFF
 
  if (nargs == 3)   # if not unit type specified
    {
     ShipFuelConsumption$Flag = state
     AirFuelConsumption$Flag  = state
     BoatFuelConsumption$Flag = state
    }
  else
    {
     if (args[3] == $lex$SHIP$)
       ShipFuelConsumption$Flag = state
     else if (args[3] == $lex$AIRCRAFT$)
       AirFuelConsumption$Flag = state
     else if (args[3] == $lex$BOAT$)
       BoatFuelConsumption$Flag = state
    }
 
  ierror = 0
 
return
end
 

 
Subroutine odefine_wave_factor (_
                nargs,    # in:  Number of arguments - int
                args,     # in:  Command arguments - int array
                ierror)   # out: error code - int
#############################################################
#$%
#$% Purpose:   Processes DEFINE FUEL FACTOR WAVE ...
#$%            Sets the fuel wave height factors.
#$%
#$% Called By: xdefin    <wixdefin.rin>
#$%
#$% Calls:     none
#$%
#$% Tables:    WVF
#$%
#$% Date:      February 1996  (E1467)
#$%
#$% Author:    James Allen
#$%
#############################################################
BBcommon
 
integer     nargs
literal     args[20]
integer     ierror
 
integer     i
integer     WVF$Pointer
real        WVF$WaveFuelFactor$F
 
#   1     2     3    4              5-nargs
#DEFINE FUEL FACTOR WAVE (height on fuel consumption)
#                               <wave-height-0>
#                               <wave-height-1>
#                               <wave-height-2>
#                               <wave-height-3>
#                               <wave_height-4>
#                               <wave-height-5>
#                               <wave-height-6>
#                               <wave-height-7>
#                               <wave-height-8>
#                               <wave-height-9>;
 
  for (i = 1; i <= nargs-4; i = i + 1)
    {
     WVF$Pointer$To  (i)
     WVF$WaveFuelFactor$F = args[i+4]
     putWVF$WaveFuelFactor$F
    }
 
  ierror = 0
 
return
end

 
Subroutine odefine_heading_factor (_
                nargs,    # in:  Number of arguments - int
                args,     # in:  Command arguments - int array
                ierror)   # out: error code - int
#############################################################
#$%
#$% Purpose:   Processes DEFINE FUEL FACTOR HEADING ...
#$%            Sets the fuel heading factors.
#$%
#$% Called By: xdefin    <wixdefin.rin>
#$%
#$% Calls:     none
#$%
#$% Tables:    HWF
#$%
#$% Date:      February 1996  (E1467)
#$%
#$% Author:    James Allen
#$%
#############################################################
BBcommon
 
integer     nargs
literal     args[20]
integer     ierror
 
integer     i
integer     HWF$Pointer
real        HWF$HDG$FuelFactor$F
integer     HWF$Hdg$Index
 
#   1     2     3      4           5-nargs
#DEFINE FUEL FACTOR HEADING
#                  (into waves less than 4 ft) <heading-factor>
#                  (into waves 4 ft or more) <heading-factor>
#                  (across waves less than 4 ft) <heading-factor>
#                  (across waves 4 ft or more) <heading-factor>
#                  (with waves less than 4 ft) <heading-factor>
#                  (with waves 4 ft or more) <heading-factor>;
 
  i = 5
  for (HWF$Pointer$First; HWF$Pointer$Ok; HWF$Pointer$Next)
    {
     HWF$HDG$Index = HeadingInto$Waves
     HWF$HDG$FuelFactor$F = args[i]
     putHWF$HDG$FuelFactor$F
     i = i + 1
 
     HWF$HDG$Index = HeadingAcross$Waves
     HWF$HDG$FuelFactor$F = args[i]
     putHWF$HDG$FuelFactor$F
     i = i + 1
 
     HWF$HDG$Index = HeadingWith$Waves
     HWF$HDG$FuelFactor$F = args[i]
     putHWF$HDG$FuelFactor$F
     i = i + 1
    }
 
  i = nargs                       # Avoid information compilation msg
 
  ierror = 0
 
return
end
 

 
Subroutine InitUntFuel (UNT$Pointer)    # Initialize ship fuel parameters
#############################################################
#$%
#$% Purpose:   Initialize ship fuel consumption parameters
#$%            for the specified unit.
#$%
#$% Called By: wglfrc        <wildfrc.rat>
#$%            create_ship   <wgopcreate.rat>
#$%
#$% Calls:     none
#$%
#$% Tables:    None
#$%
#$% Date:      February 1996  (E1467)
#$%
#$% Author:    James Allen
#$%
#############################################################
BBcommon
 
integer     UNT$Pointer
 
integer     SHC$Pointer
integer     SHC$TNK$Index
integer     UNT$TNK$Index
 
  SHC$Pointer = xUNT$SHCPntr$I
 
  putUNT$HosesAvailable$I       ( xSHC$FuelHoses$I )
  putUNT$ShipFuelDamage$F       ( 0.0 )
  putUNT$AviationFuelDamage$F   ( 0.0 )
  putUNT$ShipRefuelAmount$F     ( 0.0 )
  putUNT$AviationRefuelAmount$F ( 0.0 )
  putUNT$ShipHoseRequest$I      ( 0 )
  putUNT$AviationHoseRequest$I  ( 0 )
  putUNT$PortRefuelCount$I      ( 0 )
  putUNT$StarboardRefuelCount$I ( 0 )
  putUNT$HosesAllocatedFlag$I   ( $NO )
  putUNT$FuelConsumptionFlag$I ($ON)  # joa 3/96 (E167) - Init to consuming fuel
 
  SHC$TNK$Index = AviationFuelTank$Index
  UNT$TNK$Index = AviationFuelTank$Index
  putUNT$TNK$FuelRemaining$F ( xSHC$TNK$Capacity$F )
 
  SHC$TNK$Index = ShipFuelTank$Index
  UNT$TNK$Index = ShipFuelTank$Index
  putUNT$TNK$FuelRemaining$F ( xSHC$TNK$Capacity$F )
 
return
end
 

subroutine Check_AC_DEQ (UNT$pointer, ACC$pointer)
 
#######################################################
#$%
#$% Purpose:   Check_AC_DEQ verifys that the DEQ chain has an entry
#$%            for the given type of A/C.  Or adds one if not found.
#$%            This means that Ships/Shore need not call out any
#$%            aircraft in BUILD.
#$%
#$% Called By: WGLAML
#$%
#$% Tables:    ACC        UNT
#$%
#$% Date:      AUG 91
#$%
#$% Author:    Dane Wills
#$%
##############################################################################################################
 
BBcommon
 
Integer*4   UNT$pointer
Integer*4   ACC$pointer
Integer*4   DEQ$pointer
 
integer     DEQ$Ident$I,       # MJC 4/25/2000
            DEQ$Pntr$I,        # MJC 4/25/2000
            DEQ$Remaining$I    # MJC 4/25/2000
literal     CSTRIP8            # MJC 4/25/2000
 
# Search DEQ table for A/C of same type
 
for_DEQ_CHAIN
    {
    if (xDEQ$Ident$i != $Aircraft$Code) next
 
    if (xDEQ$Pntr$i != ACC$pointer) next
 
    Return                                          # Found a match
    }
 
#get DEQ pointer to DEQ table
call get_DEQ_entry ( UNT$Pointer, DEQ$Pointer)
 
# if available DEQ slot
IF ( DEQ$pointer != 0 )
    {
    call echov ("Adding ")
    call echohn (xACC$type$c,$$maxlit)
    call echov (" type aircraft to ")
    call echohn (xUNT$name$c,$$maxlit)
    call echov (" equipment list.")
 
    if (xUNT$AirCapable$i == $NO)       # if it hadn't been before,
        {
        putUNT$AirCapable$i ($YES)      # make it so now            # DEW 2/92
        call echov (" *")
        }
 
    call echor
 
    DEQ$Ident$i = $Aircraft$Code
    PUTDEQ$Ident$i
 
    DEQ$Pntr$i = ACC$Pointer
    PUTDEQ$Pntr$i
 
    DEQ$Remaining$i = 100       # updated later...
    PUTDEQ$Remaining$i
    }
 
return
end
 

 
subroutine addord (iview,                      # I  put order into ORD table
                   ista,                       # I  originating station index
                   iaddr,                      # L  given addressee name
                   unt$pointer,                # I  given addressee pointer
                   ord$Circuit$i,              # I  given circuit
                   ord$OriginatorIndx$i,       # I  given embarked unit indx
                   id,                         # I  order id
                   ilen,                       # I  length of order entry
                   iinp)                       # L  order array (player format)
 
########################################################
#$%
#$% Purpose:   ADDORD inserts order into the ORD table.
#$%
#$% Called By: BLDORD
#$%
#$% Calls:     SEND
#$%
#$% Tables:    None
#$%
#$% Date:      APRIL 80
#$%
#$% Author:    Dana Wills
#$%
#$% Modified:  James Allen - 12/97 (E1852)
#$%            Added the station table index to the
#$%            argument list so that the originating
#$%            station can be stored in the ORD table.
#$%
########################################################
 BBcommon
 
Literal iinp[$order$array$size],iaddr, ialfa,
        ORD$Addressee$C,ORD$WRD$$C, CSTRIP8
 
integer ista, UNT$Pointer, ORD$STAIndx$I,           # jb E2145  5/24/00
        look_back, delta_minutes
integer drop /-1/
 
integer iview,ilen,klen,id,ineed,iavail,nargs, # jb E2145  5/24/00
        ORD$Pointer,ORD$Circuit$I,ORD$OriginatorIndx$I,ORD$NbrArgs$I,
        ORD$Start$I,ORD$AddIndx$I,ORD$ComIndx$I,ORD$ID$I,ORD$Unit$I,
        ORD$Code$I,ORD$View$I,ORD$Phase$I,ORD$Sequence$I,ORD$UP$I,
        ORD$Status$I,ORD$Count$I,ORD$WRD$Index     # jb E2145  5/24/00
 
BBdeclare   (ord$pat$i, ord$DTGStart$i)
 
String noroom "ORD table Overflow, Losing Id #     "
 
$DEBUGA call echor
$DEBUGA call echov ("<ADDORD=")
$DEBUGA call echoi (id)
 
#$% compute need and availability
ineed = ord$Maxentry
iavail = ord$size - (ord$last - ord$base + 1)
 
#$% if need is greater than availability
if (ineed > iavail | id <= drop)
   {
    #$% no room and save ID
    klen = 31
    Call SMOVHN(ialfa(id),5,noroom,klen)        # SMM 9/99 E2141 dew (swap)
    call send_ (iview,0,36,noroom)
    drop = id + iinp[7] - iinp[6]               # set up to drop rest of seq.
    if (drop == id) drop = -1
    $DEBUGA call echov ("=err>")
    return
   }
#$% increment last order counter and set last order
ORD$pointer = ord$last + 1
 
ORD$NbrArgs$I    = ilen - 6
#$% set length and save
PUTORD$NbrArgs$I
ord$used = ord$used + ord$entry
 
ord$pat$i = $no                     # Assume Not a Planned Arrival Time
ord$DtgStart$i = $no                # Assume Delta minutes
 
ORD$Start$I     = $ord$start
 
#------------------------------------------------------------
# Time values can now arrive in many forms.
# Old-style delta minutes are now restricted to a value of from 1
# to 6000 minutes (4 digits max).  New values can be specified with
# the AT/TOT/and PAT time qualifiers.  Each of these require a 6-digit
# date-time-group.  The AT time is a positive value.  Planned-Arrival-Time
# and Time-Over-Target values are passed by a Negative DTG value.
# The format DDHHMM is interpreted as Day-of-Month, Hour & Minutes.
# If today is the 23rd of August, a DTG of 151200 refers the 15th of
# September.  In other words, a DTG cannot refer to the past.
# To prevent 'missing' by a few minutes and getting next month,
# Values must be Future (or at least 8 hours prior to Now, on the
# same day next month)
#
# The following code attempts to integrate the new values into
# the previous and new fields.
#                                               DEW 8/23/00
#------------------------------------------------------------
 
if (ord$start$i < 0)                # Test for PAT or TOT dtg
    {
    ord$pat$i = $yes                # Set flag for PUT below
    ord$DtgStart$i = $yes       # Remember that we started w/DTG
    ord$start$i = abs(ord$start$i)  # Flag replaces (-) sign
    }
 
if (ord$start$i > 9999) # DTG specified
    {
    # Convert DTG to delta minutes from current cycle
 
    ord$DtgStart$i = $yes       # Remember that we started w/DTG
 
    # Determine Delta minutes from current DTG to specified DTG
    # Replace Start time with Delta value
 
    look_back = 24 * 60         # 24 hours
 
    call dtg_to_delta_min (ORD$Start$I,    # input - the DTG
                           look_back,      # input - window in minutes
                           delta_minutes)  # output - the corresponding game minute
 
    ORD$Start$I = Delta_minutes + game$minute
    }
 
if ($ord$seq == 1 & ord$DtgStart$i == $no)
    {
    ORD$Start$i = ord$Start$i + game$minute     # RELATIVE TIME
    }
 
if (ord$start$i < order$minute &
    $ord$seq    == 1            )
    {
    ord$start$i = order$minute
    }
 
#$% save start and addressee
PUTORD$Start$I
PUTord$pat$i
PUTord$DtgStart$i
PUTord$TimeToDepart$i ($no)
 
ORD$Addressee$C = $ord$addr
if ($ord$addr == -1.0)
{
    if (unt$pointer != 0)
        ORD$Addressee$C = Xunt$name$c
}
PUTORD$Addressee$C
 
#$% if unit pointer is zero, clear add index, else set add pointer and save
if (unt$pointer == 0) ORD$AddIndx$i = 0
else                  ORD$AddIndx$i = unt$pointer$index
PUTORD$AddIndx$i
 
#$% zero COM pointer and save
ORD$COMIndx$i = 0
PUTORD$COMIndx$i
 
#$% save circuit and originator
PUTORD$Circuit$i
PUTORD$OriginatorIndx$i
 
#$% if circuit, originator, or add index is zero, or originator is add index,
#$% set status to executable
if (ord$Circuit$i        == 0            |
    ord$OriginatorIndx$i == 0            |
    ord$AddIndx$i        == 0            |
    ord$OriginatorIndx$i == ord$AddIndx$i ) ord$status$i = $Executable$code
#$% else set status to need COMM and save status
else                                        ord$status$i = $NeedComm$code
PUTord$status$i
 
#$% set ID, unit, number, view, phase, sequence, count, uptime and save
ORD$Id$I        = id
PUTORD$Id$I
ORD$Unit$I      = 0
PUTORD$Unit$I
ORD$Code$I      = $ord$num
PUTORD$Code$I
ORD$View$I      = iview
PUTORD$View$I
ORD$STAIndx$I   = ista
PUTORD$STAIndx$I
ORD$Phase$I     = 0
PUTORD$Phase$I
ORD$Sequence$I  = $ord$seq
PUTORD$Sequence$I
ORD$Count$I     = $ord$cnt
PUTORD$Count$I
ORD$Up$i        = $no
PUTORD$Up$i
 
#$% set number of arguements
nargs = ilen - 6
 
#$% for each word entry
for (ord$wrd$index=1; ord$wrd$index<=nargs; ord$wrd$index=ord$wrd$index+1)
   {
    #$% set word and save
    ORD$WRD$$C      = iinp[ord$wrd$index+7]
    PUTORD$WRD$$C
   }
 
$DEBUGA call echo ($GREAT)
 
return
end
 

 
Subroutine locate_fire_keywords (iword,ILEX)
#######################################################
#$%
#$% Purpose:   locate_fire_keywords stores the index of
#$%            of each keyword in the fire order into
#$%            <keyword>.index variables located in RTcommon
#$%
#$% Called By: ofire
#$%
#$% Calls:
#$%
#$% Tables:    ORD
#$%
#$% Date:      February 1998 (E1864)
#$%
#$% Author:    James Allen
#$%
#$% Modified:  Susan Miller 5/21/98 (E1992)
#$%            Track_index not getting set when firing a
#$%            non-explicit torpedo.
#$%
#######################################################
BBcommon
RTcommon
 
integer  iword
literal  ILEX[iword]
integer  i
 
  Nargs   = iWORD                         # into RTcommon 12/3/85
 
  # Find starting location of each clause and save in RTcommon
  plan_index = 0
  Fire_index = 0
  nuclear_index = 0
  cruise_index = 0
  bol_index = 0
  delay_index = 0
  range_index = 0
  seeker_index = 0
  rbl_index = 0
  rbl_size = 0
  track_index = 0
  position_index = 0
  mission_index = 0
  waypoints_index = 0
  at_index = 0
  target_index = 0
  bridge_index = 0
  be_index = 0
  tin_index = 0
  base_index = 0
  torpedoes_index = 0
  bearing_index = 0
  altitude_index = 0
  enableRange_index = 0
  depth_index = 0
  ballistic_index = 0
  execute_index = 0
  torpedo_index = 0
 
  for (i=1; i<=nargs; i=i+1)                  # Find keywords in lex array
    {
     if (ilex[i] == $lex$PLAN$)
        plan_index = i
     else if (ilex[i] == $lex$FIRE$)
       {
        fire_index = i
        i = i + 2                           # Skip number to fire, and type
       }
     else if (ilex[i] == $lex$NUCLEAR$)
        nuclear_index = i
     else if (ilex[i] == $lex$CRUISE$)
        cruise_index = i
     else if (ilex[i] == $lex$BOL$)
       {
        bol_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$DELAY$)
       {
        delay_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$RANGE$)
       {
        range_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$SEEKER$)
       {
        seeker_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$RBL$)
       {
        rbl_index = i
        rbl_size = $lex$LARGE$              # Default
        if (ilex[i+1] == $lex$SMALL$  |
            ilex[i+1] == $lex$MEDIUM$ |
            ilex[i+1] == $lex$LARGE$  )
          {
           rbl_size = ilex[i+1]
           i = i + 1
          }
       }
     else if (ilex[i] == $lex$TRACK$)
       {
        track_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$POSITION$)
       {
        position_index = i
        i = i + 2
       }
     else if (ilex[i] == $lex$MISSION$)
       {
        mission_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$WAYPOINTS$)
       {
        waypoints_index = i
        i = i + 2
       }
     else if (ilex[i] == $lex$AT$)
       {
        if (torpedo_index != 0)
           i = i + 1                   # Skip track-no
        at_index = i
       }
     else if (ilex[i] == $lex$TARGET$)
       {
        target_index = i
        if (ilex[i+1] == $lex$BRIDGE$)
          {
           bridge_index = i + 1
           i = i + 1
          }
        i = i + 1
       }
     else if (ilex[i] == $lex$BE$)
       {
        be_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$TIN$)
       {
        tin_index = i
        i = i + 1
       }
    else if (ilex[i] == $lex$BASE$)
       {
        at_index = 0      # at assumed AT POSITION; however, command
        base_index = i    # reformatted back to AT [POSITION | BASE]
        i = i + 1
       }
     else if (ilex[i] == $lex$TORPEDOES$)
       {
        torpedoes_index = i
        i = i + 1
        if (ilex[i] == $lex$BEARING$)
          {
           bearing_index = i
           i = i + 1
          }
        else if (ilex[i] == $lex$AT$)
          {
           at_index = i
           i = i + 1
           track_index = i  # SMM 5/21/98 (E1992)
          }
        if (i < nargs)
          {
           i = i + 1
           enableRange_index = i
           i = i + 1
           depth_index = i
          }
       }
     else if (ilex[i] == $lex$BALLISTIC$)
       {
        ballistic_index = i
       }
     else if (ilex[i] == $lex$ALTITUDE$)
       {
        altitude_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$BEARING$)
       {
        bearing_index = i
        i = i + 1
       }
     else if (ilex[i] == $lex$EXECUTE$)
       {
        execute_index = i
       }
    }
 
return
end

 
 
Subroutine GTUNT(itype,iname,unt$pointer)
 
#######################################################
#$%
#$% Purpose:   GTUNT gets the shorebase name and type.
#$%
#$% Called By: OFCRU0     OFCRU1
#$%
#$% Calls:     None
#$%
#$% Tables:    UNT
#$%
#$% Date:      APRIL 80
#$%
#$% Author:    Dana Wills
#$%
#######################################################
 
BBcommon
literal iname
 
integer UNT$Pointer,ITYPE                   # MJC 5/1/2000 (E2145)
literal CSTRIP8                             # MJC 5/3/2000 (E2145)
 
#$% for each unit entry
for(unt$pointer$first;unt$pointer$ok;unt$pointer$next)
   {
    #$% if not same name and not same type, get next, break loop
    if (xunt$name$c != iname) next
    if (xunt$type$i != itype) next
    return
   }
 
unt$pointer = 0        # matching name/type not found
 
return
end

 
Subroutine BLDCMPIM (_            # Create New Pim for cruise missile
                    unt2$pointer, # Cruise Missile
                    ispeed,       # Cruise missile speed (knots)
                    pimlat,       # Latitude way points
                    pimlon,       # Longitude way points
                    npoints,      # Number of way points
                    PIMIndx)      # Allocated PIM Slot; out
################################################################################
#$%
#$% Purpose:    Creates a PIM for the cruise missile.  All cruise missiles now
#$%             follow a PIM - Improved Cruise Missile Model.
#$%
#$% Called By:  cmtsel
#$%
#$% Calls:      swath_over_land
#$%             land_in_circle
#$%
#$% Tables:     UNT   CMC
#$%
#$% Date:       February 1998 (E1864)
#$%
#$% Author:     Jim Allen
#$%
################################################################################
BBcommon
 
integer unt2$pointer
real pimlat[pim$pts$slots]
real pimlon[pim$pts$slots]
integer npoints
integer PIMIndx
integer pim$pointer, pim$pts$index
integer ispeed
 
# Allocate slot in PIM table. Should be subroutine.
#---------------------------------------------------------------------
PIMIndx  = 0                     # Find empty PIM-table slot:
for(PIM$Pointer$FIRST; PIM$Pointer$VALID; PIM$Pointer$Next)
{
   If (xPIM$UNTindx$i == 0)
    {
     PIMIndx = PIM$Pointer$Index
     BREAK              # PIM slot is available ...)
    }
 
}             # End FOR (PIM$Pointer$First..
 
If (PIMIndx < 1)         # (No empty PIM slot available)
{
    RETURN
}
 
#-----------------------------------------------------------------------
 
## Insert Speed/Latitude/Longitude into slots of the
##   pim$PTS subtable:
 
PUTpim$UNTindx$i           (unt2$pointer$index)
PUTunt2$PIMindx$i          (PIMIndx)
 
PUTpim$Nlegs$i             (npoints-1)
PUTpim$TimeStart$F         (Game$Time + Time$Step) # Allow missile to acquire close targets
 
PUTpim$ContinuousFlag$i    ($NO)
PUTpim$LegNumber$i         (1)         # First leg is launch point
 
for(pim$PTS$index=1; pim$PTS$index <=npoints; pim$PTS$index=pim$PTS$index +1)
{
     PUTpim$PTS$Speed$i (iSPEED)
     PUTpim$PTS$Delay$i ( 0 )
     PUTpim$PTS$Latitude$F ( pimLAT[pim$PTS$index] )
     PUTpim$PTS$Longitude$F( pimLON[pim$PTS$index] )
}
 
 
if (pim$last < pim$pointer)
{
    pim$used = pim$pointer$index * pim$entry
}
 
return
end
 

 
integer function land_target ( _
                        UNT$Pointer,   # in: Pointer to cruise missile
                        CMC$Pointer)   # in: Pointer to cm char
################################################################################
#$%
#$% Purpose:    Determine if the missile acquires land as a target (E1864)
#$%             Use BOL swath or acquisition circle.
#$%
#$% Called By:  cmtsel
#$%
#$% Calls:      swath_over_land
#$%             land_in_circle
#$%
#$% Tables:     UNT   CMC
#$%
#$% Date:       February 1998 (E1864)
#$%
#$% Author:     Jim Allen
#$%
################################################################################
BBcommon
 
integer unt$pointer, cmc$pointer
 
integer swath_over_land, land_in_circle
 
integer pim$pointer, pim$pts$index
 
integer cmc$rbl$index, cmc$rbl$targetRadius$i
real    pim$pts$Latitude$f, pim$pts$longitude$f
 
# Land can not be acquired as a target
if (Xcmc$AcquireLandAsTarget$i == $NO)
    return($NO)
 
if (Xunt$CMFireMode$i == $CMRBL$Code)
{
    pim$pointer$to Xunt$PimIndx$i
    pim$PTS$index = Xpim$Nlegs$i + 1              # Last pim point is circle center
    pim$PTS$Latitude$f =  Xpim$PTS$Latitude$f
    pim$PTS$Longitude$f = Xpim$PTS$Longitude$f
    cmc$RBL$Index = Xunt$CMRBLIndx$i
    cmc$RBL$TargetRadius$i = Xcmc$RBL$TargetRadius$i
 
    land_target = land_in_circle(pim$PTS$Latitude$f,
                                 pim$PTS$Longitude$f,
                                 float(cmc$RBL$TargetRadius$i))
}
else
{
    land_target = swath_over_land( unt$pointer, cmc$pointer)
}
 
return
end

subroutine pimtim (_  # Compute time from unit's current pos to complete pim
                   pimindx,             # Pim Index: In: Int
                   time_to_complete_pim)# Minutes to complete plan: Out: Real
##########################################################################
#$%
#$% Purpose:    Compute time from unit's current position to complete pim
#$%
#$% Called By:  BLDCM
#$%
#$% Calls:      RLL2RB
#$%
#$% Tables:     UNT     PIM
#$%
#$% Date:       February 1998 (E1864)
#$%
#$% Author:     James O. Allen
#$%
##########################################################################
BBcommon
 
integer pimindx
real    time_to_complete_pim, cum_pim_time
integer pim$pointer
integer unt$pointer
real    flats, flons, cslats
real    flatf, flonf, cslatf
integer pim$LegNumber$i
integer pim$Nlegs$i, npoints
integer pim$pts$index
real    rngsf, brngsf
 
pim$pointer$to pimindx
 
unt$pointer$to Xpim$UntIndx$i
 
# Get current position
if (Xunt$type$i == $PIM$code)
{
    flats = XUNT$TrueLatitude$F                   #get true latitude
    flons = XUNT$TrueLongitude$F                  #get true longitude
    csLATs = Xunt$CosTrueLat$f
}
else
{
    flats = XUNT$AssumedLatitude$F                #get Assumed latitude
    flons = XUNT$AssumedLongitude$F               #get Assumed longitude
    csLATs = cos(fLATs)
}
 
# Get current leg (Unit has already reached current leg)
pim$LegNumber$i = Xpim$LegNumber$i
pim$Nlegs$i     = Xpim$Nlegs$i
npoints         = pim$NLegs$i + 1
 
# Current leg could still have some delay
cum_pim_time    = MAX(0.0, (xPIM$TimeStart$F - Game$Time - Time$Step))
 
# Loop thru remainder of legs
for (pim$pts$index = pim$LegNumber$i+1; pim$pts$index <= npoints;
     pim$pts$index = pim$pts$index + 1)
{
    #  Calculate r&b to next leg
    fLATf = Xpim$pts$Latitude$f       # latitude  of next waypoint
    fLONf = Xpim$pts$Longitude$f      # longitude of next waypoint
    csLATf = cos(fLATf)
 
    call RLL2RB( _                #Rhumb line Lat/Lon to Rng/Bearing
                   Flats,            #latitude  of waypnt  (input)
                   FLONs,            #longitude of waypnt  (input)
                   CsLATs,           #cos of lat of waypnt (input)
                   FLATf,            #lat  of next waypnt  (input)
                   FLONf,            #long of next waypnt  (input)
                   CSLAtf,           #cos lat next waypnt  (input)
                   RNGsf,            #rng  between waypnts (output)
                   BRNGsf)           #brg  between waypnts (output)
 
    #  Add delay time, if any
    cum_pim_time = cum_pim_time + Xpim$pts$delay$i
 
    #  Time for leg = r/pim_leg_speed
    cum_pim_time = cum_pim_time + RNGsf/ Xpim$pts$Speed$i * $Minutes$Per$Hour
 
    # Move current pim poistion to last position
    flats = flatf
    flons = flonf
    cslats = cslatf
}
 
time_to_complete_pim = cum_pim_time
 
return
end

integer function swath_over_land ( _
                        UNT$Pointer,   # in: Pointer to cruise missile
                        CMC$Pointer)   # in: Pointer to cm char
################################################################################
#$%
#$% Purpose:    Determine if the detection swath of the specified missile
#$%             is over land.  (E1422)
#$%
#$% Called By:  cmfind
#$%             cmtsel
#$%
#$% Calls:      the_elevation
#$%             RLL2RB
#$%
#$% Tables:     UNT   CMC
#$%
#$% Date:       November 1995
#$%
#$% Author:     Jim Allen
#$%
################################################################################
BBcommon
 
integer  UNT$Pointer, CMC$Pointer
 
integer  the_elevation      # function to obtain elevation
 
integer  unt_elevation, end_swath_elevation
real     ntime, rngmax, range
real     xlat, xlon, travel_per_min
 
unt_elevation = the_elevation (xUNT$TrueLatitude$F*$rad2deg, 
                               xUNT$TrueLongitude$F*$rad2deg)
if (unt_elevation > 0)
    return ($YES)
 
xlat = xUNT$TrueLatitude$F
xlon = xUNT$TrueLongitude$F
 
ntime = xUNT$TimeTerm$F - Game$Time       # get flight time remaining
travel_per_min = xCMC$AvgSpeed$I * $Hours$Per$Minute   # get travel in minute
 
rngmax = ntime * travel_per_min   # compute max range
range = xCMC$SeekerRange$I        # get seeker range
if (range > rngmax)               # if seeker range greatest
    range = rngmax                  # missile range is limit
 
call RRB2LL (xlat, xlon, range, 0.0, xUNT$TrueCourse$F, xUNT$CosTrueLat$F)
end_swath_elevation = the_elevation (xlat*$rad2deg, xlon*$rad2deg)
if (end_swath_elevation > 0)
    return ($YES)
 
return ($NO)
 
end
 
