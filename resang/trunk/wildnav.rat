 
#####   WES version 3.1 converted to VAX11/780     dated-22jan82"
 
 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
#$%      MODULE                       UTILITY                     DATA
#$%    SUBROUTINES                  SUBROUTINES                  TABLES
#$%    ===========                  ===========                  ======
#$%
#$%      WGLNAV                        ECHOH                      NAV
#$%      GETSR  <WGLOAD>               ECHOR
#$%      GSLOTM <WGLOAD>
#$%      BADFLD <WGLOAD>
#$%
#$%
#$%
#$%    NOTES
#$%    =====
#$%
#$%    1.  <FILENAME> INDICATES WHERE SUBROUTINE IS LOCATED.
#$%
#$%    2.  UTILITY SUBROUTINES NOT SHOWN ON FLOWCHART.
#$%
#$%    3.  * INDICATES NO OTHER SUBROUTINES CALLED.
#$%
#$%
#$%
#$%    FLOWCHART FOR FILE WGLNAV
#$%    =========================
#$%
#$%    START0 <WARGAM> - WGLOAD - WGLNAV - GETSR *
#$%                                      - GSLOTM*
#$%                                      - BADFLD*
 

 
 include "bbctl.inc"
 include "bbcode.inc"
 include "bbnav.inc"
 include "ascii.inc"
 
 define(BBImplicit, Implicit NONE)          # MJC 4/28/2000
 
 Subroutine wglnav(reccnt,recsz,rec)
 
 #######################################################
 #$%
 #$% Purpose:   WGLNAV loads in the navigation sensors
 #$%            scenario file data.
 #$%
 #$% Called By: WGLOAD
 #$%
 #$% Calls:     BADFLD     ECHOH      ECHOR
 #$%            GETSR      GSLOTM
 #$%
 #$% Tables:    NAV
 #$%
 #$% Date:      OCT 80
 #$%
 #$% Author:    Ron Williams, Dana Wills
 #$%
 #######################################################
 
 BBcommon
 
 Integer kk                         # jb E2209  11/29/00
 integer reccnt,recsz,pnt
 literal rec[1500]                                 #VAX00
 
 integer LOOP,
         LEN, ISTAT,
         NAV$Pointer,
         NAV$Device$I,
         NAV$Mtbf$I,
         NAV$Timetorepair$I             # MJC 4/28/2000
 real    NAV$Headingerror$F,
         NAV$Speederror$F,
         NAV$Latituderate$F,
         NAV$Longituderate$F,
         NAV$Lathumanfixed$F,
         NAV$Lonhumanfixed$F,
         NAV$Lathumanrandom$F,
         NAV$Lonhumanrandom$F,
         NAV$Latitudeerror$F,
         NAV$Longitudeerror$F           # MJC 4/28/2000
 literal NAV$Type$C                     # MJC 4/28/2000
 
 BBdeclare (NAV$FullName$V)                  # jb  E2209    11/30/00
 
 #$% if file is empty
 if (reccnt <= 1)
    {
     #$% display warning message to user
     call echov("Navaid File Empty")
     call echor
     return
    }
 
 #$% for each record in the file
 for (loop = 2; loop <= reccnt; )
    {
     #$% get the scenario record and len
     call getsr(loop,recsz,rec)
     len = rec[1]
 
     #$% call for jam slot entries
     call gslotm(nav$pointer,$$nav,nav$entry,istat)
 
     #$% if nav table is full
     if (istat == $no)
	{
         #$% send warning message to user
	 call echov("Items from ")
	 call echohn(rec[3],$$MaxLit)
	 call echov(" and on are not loaded.")
	 call echor
	 return
	}
 
     #$% get name of navigation sensor and save
     nav$type$c = rec[3]
     putnav$type$c
 
     #$% if nav category is HDG
     if      (rec[5] == 'HDG')
 
         #$% set nav device to HEADING
	 nav$device$i = $headingsensor$code
 
     #$% else if category is SPD
     else if (rec[5] == 'SPD')
 
         #$% set nav device to SPEED
	 nav$device$i = $speedsensor$code
 
     #$% else if category is DR
     else if (rec[5] == 'DR')
 
         #$% set nav device to DR
	 nav$device$i = $dr$code
 
     #$% else if category is OMEGA
     else if (rec[5] == 'OMEGA')
 
         #$% set nav device to OMEGA
	 nav$device$i = $omega$code
 
     #$% else if category is TRANS
     else if (rec[5] == 'TRANS')
 
         #$% set nav device to TRANS
	 nav$device$i = $trans$code
 
     #$% else if category is OTRAN
     else if (rec[5] == 'OTRAN')
 
         #$% set nav device to OTRAN
	 nav$device$i = $omegatran$code
 
     #$% save whatever is entered as nav device
     putnav$device$i
 
     #$% get pointer position for each word in the record
     for (pnt = 6; pnt <= len; )
	{
         #$% if pointer is at HERR
	 if      (rec[pnt] == 'HERR')
	    {
             #$% compute heading seneor error and save
	     nav$headingerror$f = rec[pnt+1] * (.01*$pi/180.)
	     putnav$headingerror$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at SERR
	 else if (rec[pnt] == 'SERR')
	    {
             #$% compute sensor speed error and save
	     nav$speederror$f = rec[pnt+1] * .01
	     putnav$speederror$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at LTRSD
	 else if (rec[pnt] == 'LTRSD')
	    {
             #$% compute latitude bias error rate and save
	     nav$latituderate$f = rec[pnt+1] * .0005
	     putnav$latituderate$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at LGRSD
	 else if (rec[pnt] == 'LGRSD')
	    {
             #$% compute longitude bias error rate and save
	     nav$longituderate$f = rec[pnt+1] * .0005
	     putnav$longituderate$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at LTHFX
	 else if (rec[pnt] == 'LTHFX')
	    {
             #$% compute fixed human error component of latitude and save
	     nav$lathumanfixed$f = rec[pnt+1] * .0005
	     putnav$lathumanfixed$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at LGHFX
	 else if (rec[pnt] == 'LGHFX')
	    {
             #$% compute fixed human error component of longitude and save
	     nav$lonhumanfixed$f = rec[pnt+1] * .0005
	     putnav$lonhumanfixed$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at
	 else if (rec[pnt] == 'LTHSD')
	    {
             #$% compute random human error component of latitude and save
	     nav$lathumanrandom$f = rec[pnt+1] * .0005
	     putnav$lathumanrandom$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at LGHSD
	 else if (rec[pnt] == 'LGHSD')
	    {
             #$% compute random human error component of longitude and save
	     nav$lonhumanrandom$f = rec[pnt+1] * .0005
	     putnav$lonhumanrandom$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at LTESD
	 else if (rec[pnt] == 'LTESD')
	    {
             #$% compute latitude bias error and save
	     nav$latitudeerror$f = rec[pnt+1] * .0005
	     putnav$latitudeerror$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
         #$% else if pointer is at LGESD
	 else if (rec[pnt] == 'LGESD')
	    {
             #$% compute longitude bias error and save
	     nav$longitudeerror$f = rec[pnt+1] * .0005
	     putnav$longitudeerror$f
 
             #$% increment pointer
	     pnt = pnt + 2
	    }
 
        else if  ( rec [ pnt ] == 'MNFAL' )
          {
            #$% update blackboard with Mean time between failure data
            #$%from commNAVte record
            NAV$MTBF$I = rec [ pnt + 1 ]
 
            putNAV$MTBF$I
 
            pnt = pnt + 2
          }
 
        else if  ( rec [ pnt ] == 'MNRPR' )
          {
            #$% update blackboard with Pulse value from commNAVte record
            NAV$TimeToRepair$I = rec [ pnt + 1 ]
            putNAV$TimeToRepair$I
 
            pnt = pnt + 2
          }
 
         else if(rec[pnt] == 'NOMEN')  # jb E2209  11/29/00
           {
           NAV$Fullname$V = ""
           kk = 0
           call vmovh (rec[pnt+1], 24, NAV$Fullname$V, kk)
           putNAV$Fullname$V
           pnt = pnt + 4
           }
         else if(rec[pnt] == 'UDB')  # jb E2209  11/29/00
           {
           if      (rec[pnt+1] == 'YES') putNAV$UDB$i ($YES)
           else if (rec[pnt+1] != 'NO') putNAV$UDB$i (!$NO)
           pnt = pnt + 2
           }
 
         #$% else if pointer is not at any of the above
	 else
	    {
             #$% display unknown field warning message to user
	     call badfld('Navaid    ',rec[3],rec[pnt])
 
	     pnt = pnt + 1
	    }
 
	}                                       #end for each word in record
 
    }                                           #end for each record
 
 return
 end
 
 
