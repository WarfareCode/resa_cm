 
include "bbctl.inc"
include "bbcode.inc"
 
include "bbbml.inc"
include "bbshc.inc"
include "bbunt.inc"
 
define (err, -3)   # alsp.inc undefines it - who_am_i uses it
 
define (number_args, 1)
define (output_unit, 10)
 
 
define (BBImplicit, Implicit None)
 
undefine write   # use the standard fortran write statement
 
program BB2BOAT
#########################################################################
#$%
#$% Purpose:    This program is intended to tap into the RESA blackboard
#$%             to create Launch orders for all available boats.
#$%             The event name is the boat name. The course is every
#$%             45 degree around the horn.  The speed is cruise speed.
#$%$            The sortie plan is
#$%                 ACTIVATE EMITTERS, STATION <course> <launching platform>
#$%                 <cruise range/ 50)
#$% Calls:      initr4         <rlib.olb>
#$%             read_arguments
#$%             ctoi
#$%             who_am_i
#$%             bbmap
#$%             check_version
#$%             remark
#$%             exit
#$%             Init_Collection_File
#$%             delay
#$%             Game_DTG
#$%             smov..
#$%             echo..
#$%             write
#$%             close
#$%
#$% Tables:     global variables
#$%
#$% Date:       Aug 2002
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
BBcommon
 
integer   ctoi        # integer function
integer   Game_DTG    # integer function
 
integer          arg_len[number_args], k
vaxcharacter*80  args[number_args], params
 
integer   game_number
character  msg[ARB]
VMSCHAR*ARB bbname
integer   error
integer   next_cycle, delay_time, next_record_interval
integer nl
integer   msg1_len
character msg1[MAXCARD]
vaxcharacter*MAXCARD  v_msg1
Equivalence  (msg1, v_msg1)
 
  call initR4
  game_number = 0
  call who_am_i (game_number, bbname)
  BBmap (bbname)
  call check_version (error, msg)
 
  if (msg[1] != EOS)
    call remark (msg)
  if (error == YES)
    call exit
 
  call help_pgm(0,
              "bb2boat: Create missions for all available boats",
              "bb2boat Tags: load_test. blackboard, orders",
              "Usage: bb2boat",
              "",
              "",
              "",
              "",
              "Example: bb2boat")
  call Init_Collection_File
 
  call write_Boat_Launch(nl)
 
  call echov ("Launch Boat Orders = ")
  call echoi (nl)
  call echor
 
  close (output_unit)
 
end
 

 
subroutine who_am_i (igame, bbname)
###########################################################
#$%
#$% Purpose:   WHO_AM_I allows user to start a game using
#$%            a command line input
#$%
###########################################################
 
character  buf[30]
integer    k,ic, igame, CTOI # jb E2145  6/1/00
VMSCHAR*(*) BBname             # jb E2144  (Re: BBSmap & MAKE_..) 8/3/00
 
igame = 0
call make_CSF_bb_name (igame,$$BBNAME,bbname)
 
end
 

 
Subroutine Init_Collection_File
#########################################################################
#$%
#$% Purpose:    Init_Collection_File will open the data collection file
#$%             and write the scenario information.
#$%
#$% Called By:  collect_load_stats
#$%
#$% Calls:      smov..
#$%             open
#$%             echo..
#$%             exit
#$%             write
#$%
#$% Tables:     global variables
#$%
#$% Date:       Aug 2002
#$%
#$% Author:     James O. Allen
#$%
#########################################################################
BBcommon
 
integer  interval    # interval at which data is to be collected
integer  Game_DTG    # integer function
integer  record_interval # Interval at which data is to be recorded
integer    name_len
character  file_name[ARB]
vmschar*ARB  file_name_v
equivalence (file_name, file_name_v)
integer    return_val, msg_len
character  msg[MAXCARD]
vaxcharacter*MAXCARD v_msg
 
Equivalence  (msg, v_msg)
 
name_len = 0
call smovhn (Scenario$Name, $$MaxLit, file_name, name_len)
call smovv  ("_bb2boat.cmd", file_name, name_len)
call smov   (EOS, file_name, name_len)
open (unit   = output_unit,  file   = file_name_v,
      iostat = return_val, recl = 120*4,   status = 'unknown')
if (return_val != 0)
{
 call echov ("Output file not opened")
 call echor
 call exit
}
 
call echov ("Output file is ")
call echohn (file_name, 20)
call echor
 
return
end

Subroutine write_Boat_Launch(nl)
BBcommon
 
literal cstrip8, reportcode2text
vmschar vstrip*ARB
integer nl
integer bml$pointer
integer shc$pointer
integer unt$pointer
integer iview
integer course
integer msg_len
character msg[MAXCARD]
vaxcharacter*MAXCARD  v_msg
Equivalence  (msg, v_msg)
 
    course = 0
    nl = 0
 
    for (BML$pointer$first; BML$pointer$ok; BML$Pointer$next)
    {
        if (Xbml$Status$i != $OnDeck$code) next
 
        unt$pointer$to Xbml$OwnerIndx$i
        if (Xunt$Status$i == $BeingDeleted$code) next
 
        nl = nl + 1
 
        course = course + 45
        if (course >= 360) course = 0
 
        shc$pointer = Xbml$ShcPntr$i
 
        msg_len = 0
 
        call smovv ("FOR ", msg, msg_len)
        call smovhn (Xunt$name$c, 8, msg, msg_len)
 
        call smovv (" LAUNCH BOAT 1 ", msg, msg_len)
 
        call smovhn (Xshc$Type$c, 8, msg, msg_len)
 
        call smovv (" ", msg, msg_len)
 
        call smovhn (Xbml$Name$c, 8, msg, msg_len)
 
        write (output_unit, fmt=*)  v_msg[1:msg_len]
 
        msg_len = 0
        call smovv ("ACTIVATE EMITTER", msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
 
        msg_len = 0
        call smovv ("SPEED ", msg, msg_len)
        call smovi (Xshc$CruiseSpeed$i, msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
 
        msg_len = 0
        call smovv ("STATION ", msg, msg_len)
        call smoviz (course, 3, msg, msg_len)
        call smovv (" ", msg, msg_len)
        call smovhn (Xunt$name$c, 8, msg, msg_len)
        call smovv (" ", msg, msg_len)
        call smovi (20, msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
 
        msg_len = 0
        call smovv ("STOP", msg, msg_len)
        write (output_unit, fmt=*)  v_msg[1:msg_len]
    }
 
 
return
end
