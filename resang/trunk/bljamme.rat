 
#####   version 3.1  dated-  7apr81
 
 
#####   version 3.0  dated- 22dec80
 
 
# 
 
      include    "ascii.inc"
      include    "macros.inc"
 
      subroutine jamme
 
      ##################################################
      #$%
      #$% Purpose:   JAMME allows the user to
      #$%            interact with the jammer
      #$%            characteristics data.
      #$%
      #$% Called By: BUILD
      #$%
      #$% Calls:     None
      #$%
      #$% Tables:    None
      #$%
      #$% Date:      NOV 79
      #$%
      #$% Author:    Dana Wills
      #$%
      #$% Modified:  Robert Hundt    6/23/89
      #$%            changed power range from 0-25000 to 0-90, units
      #$%            are dB//Watt
      #$%
      #$%            changed antenna gain range from 0-25000 to 0-50 dB
      #$%
      ##################################################
 
#
#     New JAMMER
#
##      IMPLICIT INTEGER (A-Q,S-Z)
      IMPLICIT  NONE        # jb    E2145   4/4/00
 
##############################################################################
####
####  MODULE DEPENDENT DIMENISIONS
####
##############################################################################
 
define (zdccom, 12)     # The number of entries in the defCOM table. - JFR 8/1/94 (was 8)
define (zdctyp,  8)     # The size of the defTYP table.
define (zdcfld,114)     # The size of the defFLD table.
define (zdsarg, 8)      # The size of entries in the defARG table. reh, was 4,9/13/89
define (zdcarg, 15)    # The number of entries in the defARG table. #(7) 5/4/89 9Was 10 - JFR 8/1/94
define (zdcfmt,  5)     # The number of entries in the defFMT table.
 
define (dccom,zdccom)
define (dctyp,zdctyp)
define (dcfld,zdcfld)
define (dsarg,zdsarg)
define (dcarg,zdcarg)
define (dcfmt,zdcfmt)
 
##############################################################################
####
####  BASIC DATA DECLARATIONS
####
##############################################################################
 
      include    "blmain.inc"
 
      LitCharEquiv(defcom, 2, zdccom)
      LitCharEquiv(deftyp, zdctyp)
      LitCharEquiv(deffld, zdcfld)
      LitCharEquiv(defarg, zdsarg, zdcarg)
      LitCharEquiv(deffmt, 5, zdcfmt)
      LitCharEquiv(object, 4)
      LitCharEquiv(irtn,  80)
      LitCharEquiv(args,  40)
 
      literal    argcnt,qfld,qarg,arg1
 
 
      Integer    frqcnt,  istat, m
 
      character  line[ARB]
 
 
##############################################################################
####
####   MODULE DEPENDENT DEFINITIONS
####
##############################################################################
 
 DATA$object("       R","adar Jam","mers"," ")
 
 $set (Data_Count,0)
 DATA$com("NAME ",  1)      # Name of Jammer
 DATA$com("POWER",  1)      # Power, DB//watt (see 2-57)
 DATA$com("RANGE",  1)      # Maximum effective range
 DATA$com("GAIN ",  1)      # Antenna Gain in DB (see 2-57)
 DATA$com("NOMEN",- 1)      # Full name/Nomenclature of device
 DATA$com("UDB  ",- 1)      # Universal DB Flag
 DATA$com("SSECT", -1)      # jamming sector for orientable radar - JFR 8/1/94
 DATA$com("JCAT ", -1)      # Category of jammer (radar/comm/both) - JFR 8/1/94
 DATA$com("FREQ ",-10)      # Center freq and bdwth of jammer
 DATA$com("MODUL",- 1)      # modulation type for transmitter
 DATA$com("MNFAL",- 1)      # Mean time between failures
 DATA$com("MNRPR",- 1)      # Mean time to repair
 
 
 $set (Data_Count,0)
 DATA$typ("     ",  0)      # rec type 1
 DATA$typ("     ",  1)      #
 DATA$typ("     ",  0)      # rec type 2
 DATA$typ("     ",  1)      #
 
 
 $set (Data_Count,0)
 DATA$fld1("NAME ", 1, 1,"NAME ", 1,"Name of ","jammer  ","        ","      ")
 DATA$fld1("POWER", 1, 2,"dBW  ", 1,"Power dB","W       ","        ","      ")
 DATA$fld1("RANGE", 1, 2,"MILES", 1,"Maximum ","effectiv","e range ","      ")
 DATA$fld3("NOMEN", 3,-5,"Text ", 1,"...  ", 1,"...  ", 1,"Full dev","ice nome","nclature","      ")
 DATA$fld1("UDB  ", 1, 1,"Ucode", 1,"Universa","l Data B","ase Flag",", ALSP")
 DATA$fld1("MNFAL", 1, 2,"MINUT", 1,"Mean tim","e betwee","n failur","es    ")
 DATA$fld1("MNRPR", 1, 2,"MINUT", 1,"Mean tim","e to rep","air     ","      ")
 DATA$fld1("GAIN ", 1, 2,"dB   ", 1,"Antenna ","Gain  dB","        ","      ")
 DATA$fld1("MODUL", 1, 1,"NAME ", 1,"Transmit","ter Modu","lation T","ype   ")
 DATA$fld2("FREQ ", 2, 3,"MHz  ", 1,"MHz1 ", 1,"Center f","req and ","bdwth of"," jammr")
 DATA$fld1("SSECT", 1, 2,"DEG  ", 1,"Jamming ","Sector i","n Degree","s     ")
 DATA$fld1("JCAT ", 1, 1,"JCAT ", 1,"Jammer C","ategory(","rad/comm","/both)")
 
 
 $set (Data_Count,0)
 DATA$arg8N("NAME ",6000,0,0)             # Alphanumeric -- Anything
 DATA$arg8N("MILES",2002, 0,    500)      # Numeric Range 0 -> 500
 DATA$arg8N("MINUT",2002, 0,    300)      # Numeric Range 0 -> 300
 DATA$arg8N("SPEC ",6000)                 # Alphanumeric -- Anything
 DATA$arg8N("dBW  ",2002, 0,     90)      # Numeric Range 0 -> 90  # 6/89 reh
 DATA$arg8N("dB   ",2002,-200,  200)      # Numeric Range -200 -> 200  # 6/91 reh
 DATA$arg8N("MHz  ",2002, 1,  32393)      # Numeric Range 1 -> 32393  ##6/22/83
 DATA$arg8N("MHz1 ",2002, 1,   2000)      # Numeric Range 1 -> 2000 MHz 5/04/89
                                          # MHz1 > 2147 will cause Integer
                                          # overflow in System Init
 DATA$arg8C("GENRL",8006, "ANLOG","FILTR","MLTPX","PHASE","PULSE","VOICE")
 DATA$arg8N("Text ",9024)                 # Alphanumeric string (24 bytes)
 DATA$arg8N("...  ",9000)                 # Alphanumeric string filler
 DATA$arg8C("Ucode",8003,"NO   ", "YES  ","DEFLT")
 DATA$arg8N("Hz   ",2002, 1,  32393)      # Numeric Range 1 -> 32393 hz 8/23/84
 DATA$arg8N("DEG  ",2002, 1,    360)      # numeric range 1 -> 360 # JFR 8/1/94
 DATA$arg8C("JCAT ",8003, "RADAR","COMM","BOTH")
 
#
#     The carriage control for the format statements will be
#     generated as "(' ',".
 
 $set (Data_Count,0)
 DATA$fmt( 2,"A5,A7)  "," "," "," ")
 DATA$fmt( 2,"A5,I9)  "," "," "," ")
 DATA$fmt( 3,"A5,2I9) "," "," "," ")
 DATA$fmt( 3,"A5,A7,A7",")"," "," ")
 DATA$fmt( 4,"A5,3A8) "," "," "," ")
 
##############################################################################
####
####   MODULE DEPENDENT INFORMATION
####
##############################################################################
#
#  SPECIAL CODE REQUIRED
#  =====================
#
#      INPUT VALIDATION:   NONE
#
#      SAVE VALIDATION:    There must be one occurrence of FREQ
#
#
#
#
#
#  MODIFICATIONS TO STANDARD CODE REQUIRED
#  =======================================
#
#               NONE
#
#
#
##############################################################################
 
      include "blsub1.rin"                         # calls in main logic
 
 
 
                  #***********************************************************
                  #***********************************************************
                  if (argtyp<=0)          #*** SPECIAL ***
                   {
                   #
                   # increment PTRCNT for each additional input word processed
                   #
                   # on error: increment VERR and NEXT to the next loop
                   #
                    #*********************************************************
                    if (argn==1)                          # Special Test 1
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==2)                     # Special Test 2
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    else if (argn==3)                     # Special Test 3
                     {
                      continue   # insert code as needed
                     }
                    #*********************************************************
                    #*********************************************************
 
                    next
                   }
##############################################################################
 
      include "blsub2.rin"                          # calls in other test
 
 
      #*****************************************************************
      #**************                                   ****************
      #*************  S P E C I A L   T E S T   C O D E  ***************
      #************                                       **************
      #*****************************************************************
 
 
#
 8000  serr = 0                            # clear error counter
#
#    Insert any special code needed for validation of the input data
#    in WORK prior to it being written to disk......
#
#    Increment SERR by one for each error found.
#
# set counters to zip....
 
  frqcnt = 0
 
# scan the work area looking at all fields....
 
 for (ptr=2;ptr < work[1];ptr=nxtwrk(ptr))
    {
    if (lcomp_v(work[ptr],"FREQ ") == 0)                # Any FREQ ?
        {
        if (lcomp_v(work[ptr+2], "*REQ*") != 0)         #     is it filled in?
            {
            frqcnt = frqcnt + 1
            }
        }
    #$% if this field is Jammer modulation
    else if (work[ptr] == 'MODUL')          # reh 10/24/89
        {
        if (lcomp_v(work[ptr+2], "*REQ*   ") != 0)
            {
            call validate_modulation(work[ptr+2], istat)
 
            #$% if modulation not to international standard
            IF (istat != 1)
                {
                serr = serr + 1
                call echor
                call echov ('Invalid Modulation Type ')
                call echoh ( work[ptr+2], 5 )
                call echov ('. Reference International Standard')
                call echor
                }
            }
        }
    }
 
 
 
 
 
# test results ......
 
 
 if (frqcnt< 1)
   {
    call echor
    call echov (' FREQ is required to have AT LEAST ONE entry.')
    serr = serr + 1
   }
 
 
 
 
#******************************** exit special code section *********
 8990  go to zsave
 
 
#********************************************************************
 
      end
