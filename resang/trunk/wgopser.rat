####    FILE:   WGOPSER.rat
 
####    Modified:  James Allen - 12/97 (E1824)
####               Removed routines oserces, spawn_rtu and kill_rtu -
####               commands dropped from version 6.3
 
include "csf.inc"                       # clf - for serces spawn      7/9/92
include "macros.inc"
include "bbctl.inc"
include "bbcode.inc"
include "bbdeq.inc"                                             # clf   8/17/92
include "bbirc.inc"                                             # clf   8/17/92
include "bbird.inc"                                             # clf   9/10/92
include "bbrmt.inc"                                             # clf   8/17/92
include "bbunt.inc"                                             # clf   8/17/92
include "orders.inc"
include "plplay.inc"
include "ssdef.inc"
 
define(BBImplicit, Implicit NONE)                          # MJC 5/4/2000 (E2145)
 

integer function get_ir_pointer(UNT$Pointer, DEQ$Pointer)
##################################################################
#$%
#$% Purpose:    get_ir_pointer finds the DEQ pointer and IRC pointer
#$%             for a given unit. If the unit does not have a FLIR
#$%             $NO is returned for the IRC pointer.
#$%
#$% Called By:  olook  ozoom  oscan oabil
#$%
#$% Calls:      None
#$%
#$% Tables:     IRC  DEQ  UNT
#$%
#$% Date:       Aug 1992
#$%
#$% Author:     Charlie Farbstein
#$%
##################################################################
BBcommon
 
integer         IRC$Pointer, DEQ$Pointer, UNT$Pointer           # MJC 5/4/2000 (E2145)
 
IRC$Pointer = $NO
for_DEQ_Chain
  {
  if (xDEQ$Ident$I == $EOIR$code)
    {
    IRC$Pointer = xDEQ$Pntr$I
    break
    }
  }
 
return (IRC$Pointer)
end

 
subroutine ozoom(nord, UNT$Pointer, nargs, args)
##################################################################
#$%
#$% Purpose:    ozoom processes the ZOOM order to change the
#$%             field of view of a flir sensor.
#$%
#$% Called By:  exeord
#$%
#$% Calls:      Smovv
#$%
#$% Tables:     IRC  DEQ  RMT
#$%
#$% Date:       Aug 1992
#$%
#$% Author:     Charlie Farbstein
#$%
##################################################################
BBcommon
 
integer         NARGS,I,KK,NORD,
                IRC$Pointer, IRC$FOV$Index,
                UNT$Pointer, IRD$Pointer,
                DEQ$Pointer, DEQ$Horizsect$I,
                DEQ$Vertsect$I                                  # MJC 5/4/2000 (E2145)
literal         CSTRIP8                                         # MJC 5/4/2000 (E2145)
character       work[ARB]
literal         args[nargs]
real            Dazimuth, Delevation
integer         get_ir_pointer, get_ir_trk, trk_no, ctoi
 
IRC$Pointer = get_ir_pointer(UNT$Pointer, DEQ$Pointer)
 
if (IRC$Pointer$Valid)
  {
  IRC$FOV$Index = xDEQ$FieldOfView$I
  Dazimuth = xDEQ$HorizSect$I * xIRC$FOV$AzHfAng$F
  Delevation = xDEQ$VertSect$I * xIRC$FOV$ElHfAng$F
 
  if (args[2] == $lex$in$)
    IRC$FOV$Index = IRC$FOV$Index + 1
  else
    IRC$FOV$Index = IRC$FOV$Index - 1
 
  i = 0
  call smovv  ("IR sensor for ", work, i)
  call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
  call smovv  (" is at ", work, i)
  if (IRC$FOV$Index < 1 | IRC$FOV$Index > xIRC$FieldsOfView$I)
    {
    call smovv  ("maximum zoom.", work, i)
    }
  else
    {
    if (IRC$FOV$Index == $FOV_Wide)
      call smovv  ("WIDE", work, i)
    else if (IRC$FOV$Index == $FOV_Medium)
      call smovv  ("MEDIUM", work, i)
    else #  (IRC$FOV$Index == $FOV_Narrow)
      call smovv  ("NARROW", work, i)
    call smovv  (" field of view.", work, i)
    putDEQ$FieldOfView$I (IRC$FOV$Index)
    putDEQ$Scan$I ($NO)
    if (nargs > 2)
      {
      IRD$Pointer = 0
      kk = 3
      trk_no = ctoi(args[3],kk)
      IRD$Pointer = get_ir_trk( UNT$Pointer,       # locate track
                                trk_no)            # pass track number
      if (IRD$Pointer == 0)
        {
        call send_   (xUNT$View$I, 0, i, work)
        i = 0
        call smovv  ("Unable to direct IR sensor to track ", work, i)
        call smovhn (args[3], $$MaxName, work, i) # SMM 8/99 E2141
        call smovv  ("; track not found.", work, i)
        }
      else
        {
        putUNT$IRtrkIndx$I (xIRD$Target$I)
        }
      }
    else
      {
      putUNT$IRtrkIndx$I ($NO)
      DEQ$HorizSect$I = Dazimuth / xIRC$FOV$AzHfAng$F
      DEQ$VertSect$I = Delevation / xIRC$FOV$ElHfAng$F
      putDEQ$HorizSect$I
      putDEQ$VertSect$I
      }
    }
  }
else
  {
  i = 0
  call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
  call smovv  (" does not have an IR sensor.", work, i)
  }
 
call send_   (xUNT$View$I, 0, i, work)
 
return
end
 

subroutine olook(nord, UNT$Pointer, nargs, args)
##################################################################
#$%
#$% Purpose:    olook processes the LOOK order to change the center
#$%             point of the field of view of a flir sensor.
#$%
#$% Called By:  exeord
#$%
#$% Calls:      Smovv
#$%
#$% Tables:     IRC  DEQ
#$%
#$% Date:       Aug 1992
#$%
#$% Author:     Charlie Farbstein
#$%
##################################################################
BBcommon
 
integer         NARGS,I,NORD,
                IRC$Pointer, IRC$FOV$Index,
                DEQ$Pointer, DEQ$Horizsect$I,
                DEQ$Vertsect$I,
                UNT$Pointer                         # MJC 5/4/2000 (E2145)
literal         CSTRIP8                             # MJC 5/4/2000 (E2145)
character       work[ARB]
literal         args[nargs]
real            Dazimuth, Delevation
integer         get_ir_pointer
 
IRC$Pointer = get_ir_pointer(UNT$Pointer, DEQ$Pointer)
 
if (IRC$Pointer$Valid)
  {
  IRC$FOV$Index = xDEQ$FieldOfView$I
  Dazimuth = xDEQ$HorizSect$I * xIRC$FOV$AzHfAng$F
  Delevation = xDEQ$VertSect$I * xIRC$FOV$ElHfAng$F
 
  if (args[2] == $lex$home$)
    {
    putDEQ$VertSect$I (0)
    putDEQ$HorizSect$I (0)
    putDEQ$Scan$I ($NO)
    putDEQ$ScanDir$I     ($SD_Right)
    putDEQ$FieldOfView$I ($FOV_Wide)
    putUNT$IRtrkIndx$I ($NO)
    }
  else if (args[2] == $lex$left$)
    {
    DEQ$HorizSect$I = xDEQ$HorizSect$I - 1
    if (DEQ$HorizSect$I * xIRC$FOV$AzHfAng$F + xIRC$Azimuth$F < xIRC$LeftAng$F)
      {
      i = 0
      call smovv  ("IR sensor for ", work, i)
      call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
      call smovv  (" is at maximum left azimuth.", work, i)
      call send_   (xUNT$View$I, 0, i, work)
      }
    else putDEQ$HorizSect$I
    }
  else if (args[2] == $lex$right$)
    {
    DEQ$HorizSect$I = xDEQ$HorizSect$I + 1
    if (DEQ$HorizSect$I * xIRC$FOV$AzHfAng$F + xIRC$Azimuth$F > xIRC$RightAng$F)
      {
      i = 0
      call smovv  ("IR sensor for ", work, i)
      call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
      call smovv  (" is at maximum right azimuth.", work, i)
      call send_   (xUNT$View$I, 0, i, work)
      }
    else putDEQ$HorizSect$I
    }
 
  else if (args[2] == $lex$down$)
    {
    DEQ$VertSect$I = xDEQ$VertSect$I - 1
    if (DEQ$VertSect$I * xIRC$FOV$ElHfAng$F + xIRC$Elevation$F < xIRC$DownAng$F)
      {
      i = 0
      call smovv  ("IR sensor for ", work, i)
      call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
      call smovv  (" is at minimum elevation.", work, i)
      call send_   (xUNT$View$I, 0, i, work)
      }
    else putDEQ$VertSect$I
    }
  else if (args[2] == $lex$up$)
    {
    DEQ$VertSect$I = xDEQ$VertSect$I + 1
    if (DEQ$VertSect$I * xIRC$FOV$ElHfAng$F + xIRC$Elevation$F > xIRC$UpAng$F)
      {
      i = 0
      call smovv  ("IR sensor for ", work, i)
      call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
      call smovv  (" is at maximum elevation.", work, i)
      call send_   (xUNT$View$I, 0, i, work)
      }
    else putDEQ$VertSect$I
    }
  }
else
  {
  i = 0
  call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
  call smovv  (" does not have an IR sensor.", work, i)
  call send_   (xUNT$View$I, 0, i, work)
  }
 
return
end
 

subroutine oabil(nord, UNT$Pointer, nargs, args)
##################################################################
#$%
#$% Purpose:    oabil processes the ABILITY order to change the
#$%             the ability of the IR operator.
#$%
#$% Called By:  exeord
#$%
#$% Calls:      Smovv
#$%
#$% Tables:     UNT
#$%
#$% Date:       Sept 1992
#$%
#$% Author:     Charlie Farbstein
#$%
##################################################################
BBcommon
 
integer         NARGS,I,NORD,
                UNT$Pointer,
                DEQ$Pointer                 # MJC 5/4/2000 (E2145)
literal         CSTRIP8                     # MJC 5/4/2000 (E2145)
character       work[ARB]
literal         args[nargs]
real            prob
integer         get_ir_pointer
 
if (get_ir_pointer(UNT$Pointer, DEQ$Pointer) != $NO)
  {
  prob = args[3] / 100.0                        # change percent to probability
  if (args[2] == $LEX$DETECTION$)
    putUNT$IRopDetFct$F (prob)
  else if (args[2] == $LEX$CLASSIFICATION$)
    putUNT$IRopClaFct$F (prob)
  else if (args[2] == $LEX$IDENTIFICATION$)
    putUNT$IRopIdFct$F (prob)
  }
 
else
  {
  i = 0
  call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
  call smovv  (" does not have an IR sensor.", work, i)
  call send_   (xUNT$View$I, 0, i, work)
  }
 
return
end
 

subroutine oscan(nord, UNT$Pointer, nargs, args)
##################################################################
#$%
#$% Purpose:    oscan processes the SCAN rate order to change the
#$%             the scan rate of the IR sensor.
#$%
#$% Called By:  exeord
#$%
#$% Calls:      Smovv
#$%
#$% Tables:     UNT
#$%
#$% Date:       Sept 1992
#$%
#$% Author:     Charlie Farbstein
#$%
##################################################################
BBcommon
 
integer         NARGS,I,NORD,
                UNT$Pointer,
                IRC$Pointer, IRC$FOV$Index,
                DEQ$Pointer, DEQ$Scan$I,
                DEQ$Horizsect$I, DEQ$Vertsect$I         # MJC 5/4/2000 (E2145)
real            DEQ$Scanrate$F                          # MJC 5/4/2000 (E2145)
literal         CSTRIP8                                 # MJC 5/4/2000 (E2145)
character       work[ARB]
literal         args[nargs]
real            Dazimuth, Delevation   # Delta from Home position
integer         get_ir_pointer
 
IRC$Pointer = get_ir_pointer(UNT$Pointer, DEQ$Pointer)
i = 0
call smovhn (xUNT$Name$C, $$MaxName, work, i) # SMM 8/99 E2141
if (IRC$Pointer$OK)
  {
  IRC$FOV$Index = xDEQ$FieldOfView$I
  Dazimuth = xDEQ$HorizSect$I * xIRC$FOV$AzHfAng$F
  Delevation = xDEQ$VertSect$I * xIRC$FOV$ElHfAng$F
 
  putDEQ$ScanDir$I     ($SD_Right)
  DEQ$ScanRate$F = args[2]
  if (args[2] == 0.0)
    {
    DEQ$Scan$I = $NO
    DEQ$HorizSect$I = 0
    DEQ$VertSect$I = 0
    call smovv  (" is not scanning.", work, i)
    }
  else
    {
    DEQ$Scan$I = $YES
    if (args[2] == $LEX$CONTINUE$)
      {
      DEQ$ScanRate$F = xDEQ$ScanRate$F
      if (DEQ$ScanRate$F == 0.0)
        {
        call smovv  (" was not scanning.", work, i)
        }
      else
        {
        call smovv  (" is scanning at ", work, i)
        call smovf  (DEQ$ScanRate$F, 201, work, i)
        call smovv  (" deg/sec.", work, i)
        }
      Dazimuth = 0
      Delevation = 0
      }
    else
      {
      DEQ$ScanRate$F = args[2]
      call smovv  (" is scanning at ", work, i)
      call smovf  (DEQ$ScanRate$F, 201, work, i)
      call smovv  (" deg/sec.", work, i)
      }
    IRC$FOV$Index = $FOV_Wide
    putDEQ$FieldOfView$I (IRC$FOV$Index)
    DEQ$HorizSect$I = Dazimuth / xIRC$FOV$AzHfAng$F
    DEQ$VertSect$I = Delevation / xIRC$FOV$ElHfAng$F
    }
  putDEQ$HorizSect$I
  putDEQ$VertSect$I
  putDEQ$Scan$I
  putDEQ$ScanRate$F
  putUNT$IRtrkIndx$I ($NO)
  }
 
else
  call smovv  (" does not have an IR sensor.", work, i)
 
call send_   (xUNT$View$I, 0, i, work)
return
end
 

integer function get_ir_trk( UNT$Pointer,       # locate track
                             trk_no)            # pass track number
 
bbcommon
integer unt_index, trk_no
 
integer UNT$Pointer, IRD$Pointer                # MJC 5/4/2000 (E2145)
 
get_ir_trk = 0
unt_index = UNT$Pointer$index
for (IRD$Pointer$first; IRD$Pointer$ok; IRD$Pointer$next)
  {
  if (xIRD$Detector$I == unt_index & xIRD$TrackSEQ$I == trk_no)
    {
    get_ir_trk = IRD$Pointer
    break
    }
  }
return
end
