include "rgctl.inc"
include "rgcode.inc"
include "rgmsg.inc"
include "ascii.inc"
include "bbcode.inc"
 
subroutine RGSMap (wname,kpages)
########################################################################
#$%
#$% Purpose:    RGMAP maps/unmaps the Message Delay Data Base.
#$%
#$% Author:     J. Kvederis
#$%
#$% Date:       August 1985
#$%
##########################################################################
implicit none
RGCommon
 
character 	fname[ARB], sname[ARB],section_name[60]
VMSchar*(*) wname
integer 	kpages, npages
integer		ilen, i, lenf, length, seg$jfn, ierr
 
#$% get number of pages
npages = kpages
 
#$% move name into fname array and add a null
ilen = 0
call smovvn (wname,         fname,ilen)
call smov   (EOS,           fname,ilen)
 
#_____________________________________________________________________________
# Generate a logical name that is unique for this directory (or sub directory)
 
call defdir (sname,99)		# get the default directory, i.e. [xxx.xxx]
 
#$% initialize string length
ilen = 0
 
#$% get name one character at a time
for (i=1; sname[i] != EOS;i=i+1)
    {
    if (sname[i] == $LBRACK |		# ignore the [ and ]
        sname[i] == $RBRACK  ) next
 
    #$% if a sub directory keep only the characters after the "."
                                                      # ie. xxx if YYY.XXX
    if (sname[i] == $PERIOD) 		
    	{
    	ilen = 0			# so reset current length
    	next	
    	}
    #$% move what is left into the section_name array
    call smov (sname[i],section_name,ilen)
    }
 
if (ilen != 0) call smovv ('$',section_name,ilen)	# seperate dir & fname
 
lenf = length(fname)
 
while (ilen > 0 & (ilen + lenf) > 15) ilen = ilen - 1	# shorten to max len
 
call smovhn (fname,30,section_name,ilen)	# add on the file name
call smov   (EOS,     section_name,ilen)	# terminate the string
 
#____________________________________________________________
 
#$% if section length is still too long, send error message and stop
if (length(section_name) > 15)
    {
    call echor
    call echov ("RAINFORM Delay Data Base Logical Name is too long...")
    call echor
    call echov ("...Must not exceed 15 characters")
    call echor
    call echor
    call echov ("Name entered is: ")
    call echoh (section_name,90)
    call echor
    call echor
    stop
    }
 
if (npages <= 0)                        # if called to unmap....
   {
    return
   }
 
npages = $$RGPages
 
#$% open data base file
call FOPENM (SEG$JFN,fname,npages,ierr)
 
#$% if error, display error message and stop program
if (ierr != 0)
   {
    call echor
    call echov ("Error on opening RAINFORM Delay data base file...")
    call echor
    call typerr (ierr)
    call echor
    call echor
    stop
   }
 
#$% map the RAINFORM Delay data base
call FPMAP (SEG$JFN,section_name,npages,irg,0,ierr)        # map all of RG
 
#$% if error, display error message and stop
if (ierr == 0)
   {
    call echor
    call echov ("Error on Mapping RAINFORM Delay data base: ")
    call echor
    call typerr (ierr)
    call echor
    call echor
    stop
   }
 
return
end
 

 
subroutine RGaloc ($$tbl,jname,Nseg,islots,ientry)      # allocate $$tbl
#########################################################################
#$%
#$% Purpose:    RGALOC sets up a table ($$tbl) in the blackboard
#$%
#$% Author:     J. Kvederis
#$%
#$% Date:       August 1985
#$%
########################################################################
implicit none
RGcommon
 
integer lsttbl,Nseg,islots,ientry,iname
VMSchar*3   jname
integer k, ktbln
 
#$% move table name (jname) into iname array
k=0 * nseg                  # use Nseg (not meaningful)
iname = $BLANKI4
call smovvn (jname,iname,k)
 
if (Max$RG$Words < $$RG$BeginTables) Max$RG$Words = $$RG$BeginTables
 
if ($$tbl < 1) return
 
#$% get data for the table
tbl$Len  = ientry                # basic table entry size (negative if varbl)
tbl$Size = islots * iabs(ientry) # number of words to allocate
tbl$Name = iname                 # table mnemonic
tbl$Used = 0
tbl$Base = Max$RG$Words
 
#$% make Max$RG$Words to include all table slots
Max$RG$Words = Max$RG$Words + tbl$size
 
#$% set lsttbl to the last table entered
lsttbl = $$tbl
 
return
end
 

 
subroutine rgzapt ($$tbl)
 
#########################################################################
#$%
#$% Purpose:    RGZAPT enters zeros into a RAINFORM data base table.
#$%
#$% Author:     Jim Kvederis
#$%
#$% Date:       October 1985
#$%
########################################################################
implicit none
RGcommon
integer ktbln, ipnt
 
#$% if table is invalid
if (tbl$base > Max$RG$Words | tbl$name == 0)
   {
    #$% display error message
    call echor
    call echov ("Error on Zapping table #")
    call echoi ($$tbl)
    call echov (" (")
    call echohn(tbl$name,5)
    call echov (").  ")
    if (tbl$name == 0)           call echov ("Not Defined.  ")
    if (tbl$base > Max$RG$Words) call echov ("Not Mapped.")
    stop
   }
#$% Zap the table (enter zeros)
for (ipnt = 0; ipnt < tbl$size; ipnt = ipnt + 1) irg[tbl$base+ipnt] = 0
 
return
end
