#$%    FILE  WILDSWB.RAT
 
define  (DEBUG,#)
define  (DEBUGL,)
include "bbctl.inc"
include "bbcode.inc"
Include "ascii.inc"
include "bbswb.inc"
include "bbswd.inc"
 
define(BBImplicit, Implicit NONE)           # MJC 5/1/2000
 
Subroutine WGLSWB (rec_count, rec_size, rec)
 
########################################################
#$%
#$% Purpose:   WGLSWB initializes the SWB blackboard
#$%            tables for the SWABS detection routines.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     ECHOV      ECHOR      GETSR
#$%
#$% Tables:    SWB
#$%
#$% Date:      March 1991
#$%
#$% Author:    Carol Kropp and Susan Miller
#$%
########################################################
 
BBcommon
 
Integer  rec_count, rec_size
Literal  rec[1500]
Integer  region_not_defined
 
integer  LOOP,ISTAT,I,
         SWB$Side$I,
         SWB$Pointer,
         SWB$VER$Index,
         SWB$SUB$Index,
         SWB$Nbrvertices$I,
         SWB$Regionnumber$I,
         SWB$Locationerror$I,
         SWB$Stddevlength$I         # MJC 5/1/2000 (E-2145)
real     SWB$VER$latitude$F,
         SWB$VER$longitude$F,
         SWB$SUB$probat5$F,
         SWB$SUB$probat10$F,
         SWB$SUB$probat15$F,
         SWB$SUB$probat20$F,
         SWB$SUB$probat25$F,
         SWB$SUB$probat30$F,
         DMS2RAD                    # MJC 5/1/2000 (E-2145)
literal  SWB$SUB$class$C            # MJC 5/1/2000 (E-2145)
 
DEBUG call echov ("<WGLSWB:")
 
  #$% if file is empty (no record count)
  If (rec_count <= 1)
    {
     #$% display warning message to user and return
     call echov ("SWABS data file empty.")
     call echor
     return
    }
 
  #$% for each SWABS entry in the record
  for (Loop = 2; Loop <= rec_count; )
    {
     #$% get scenerio record
     call getsr (loop, rec_size, rec)
 
     #$% if array word is REG (first section of SWABS data)
     if (rec[2] == 'REG')
       {
        if (rec[4] == $no)   # if the region is not defined - next
          {
           region_not_defined = rec[3]
           next
          }
 
        call GSLOTM (SWB$Pointer, $$SWB, SWB$entry, istat)
        if(istat == $no)
          {
           call echov ("Regions ")
           call echoi (int(rec[3]))
           call echov (" and on are not loaded.")
           call echor
           return
          }
 
        #$% get ID number of identifying region
        #$% (1-50 for Blue and 51-100 for Orange) & save
        if (rec[3] > 50)   # Orange SWABS region
          {
           swb$RegionNumber$I = rec[3] - 50
           PUTswb$RegionNumber$I
           swb$Side$I = $orange$code
           PUTswb$Side$I
          }
        else    # Blue SWABS region
          {
           swb$RegionNumber$I = rec[3]
           PUTswb$RegionNumber$I
           swb$Side$I =$blue$code
           PUTswb$Side$I
          }
 
        #$% get location error (miles) & save
        swb$LocationError$I = rec[5]
        PUTswb$LocationError$I
 
        #$% get standard deviation of axis lengths (miles) & save
        swb$StdDevLength$I = rec[6]
        PUTswb$StdDevLength$I
 
        i = 8
        #$% for each vertex entry of the region
        for (swb$ver$index = 1 ; swb$ver$index <= swb$ver$slots ;
                                 swb$ver$index = swb$ver$index + 1)
          {
           #$% if number of vertices exceeded, break
           if (rec[i] == 99)  # if latitude == 99
             break
 
           swb$NbrVertices$I = swb$ver$index
 
           #$% get vertex position and save
           swb$ver$latitude$F = DMS2rad(rec[i])
           PUTswb$ver$latitude$F
           swb$ver$longitude$F = DMS2rad(rec[i+1])
           PUTswb$ver$longitude$F
           #$% increment index
           i = i + 2
          }
 
        PUTswb$NbrVertices$I
        swb$sub$index = 0
       }
 
     #$% else if it is a submarine entry
     else if (rec[2] == 'SUB')
       {
        if (rec[3] == region_not_defined)
          next
 
        swb$sub$index = swb$sub$index + 1
 
        #$% get submarine data
        swb$sub$class$C = rec[4]
        PUTswb$sub$class$C
        swb$sub$ProbAt5$F = Rec[5]
        PUTswb$sub$ProbAt5$F
        swb$sub$ProbAt10$F = Rec[6]
        PUTswb$sub$ProbAt10$F
        swb$sub$ProbAt15$F = Rec[7]
        PUTswb$sub$ProbAt15$F
        swb$sub$ProbAt20$F = Rec[8]
        PUTswb$sub$ProbAt20$F
        swb$sub$ProbAt25$F = Rec[9]
        PUTswb$sub$ProbAt25$F
        swb$sub$ProbAt30$F = Rec[10]
        PUTswb$sub$ProbAt30$F
       }
 
     else
       next                        # bum record
    }
 
Return
End

 
subroutine SWDINT
 
#######################################################
#$%
#$% Purpose:   SWDINT initializes the SWD table.
#$%
#$% Called By: WGLOAD
#$%
#$% Calls:     None
#$%
#$% Tables:    SWD
#$%
#$% Date:      March 1991
#$%
#$% Author:    Carol Kropp and Susan Miller
#$%
#######################################################
 
BBcommon
 
integer NSWD,SWD$Pointer            # MJC 5/1/2000
 
  nSWD = SWD$Size / SWD$Entry
 
  #$% initialize all values
  SWABS$First$Track = 0
  SWABS$Last$Track = 0
  SWABS$First$Free = 1
  SWABS$Last$Free = nSWD
 
  SWD$Pointer$First
 
  Repeat
    {
     #$% if index has exceeded the number of slots, break
     if (SWD$Pointer$Index > nSWD)
       break
 
     #$% increment next index and save
     putSWD$NextIndx$I (SWD$Pointer$Index + 1)
     SWD$Pointer$Next
    }
 
  #$% set pointer to number of slots
  SWD$Pointer$to nSWD
  putSWD$NextIndx$I (1)
 
Return
End
