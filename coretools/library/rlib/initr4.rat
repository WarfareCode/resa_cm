define (linux,1)
#define (vms,1)

 ## initr4 - initialize variables for software tools programs

 subroutine initr4

 character input(FILENAMESIZE), output(FILENAMESIZE), erout(FILENAMESIZE)
 character buf(MAXLINE)
 integer getarg3, assign, insub, outsub, i, open
 integer done
integer outacc,erracc

 include carg    

 include io    

 include cexith			# common block for VMS exit handler
 external endr4

 #initialize default files for standard input, output, and erout

 data outacc /WRITE/
 data erracc /WRITE/

 data done /NO/
 
 if (done == YES)		#make sure routine executed only once
	return
 done = YES
 
 #initialize default standard files
 call termin(input)
 call trmout(output)
 call trmout(erout)
 
 #initialize /carg/ common block
 nbrarg = 0

#
# set up exit handler for all processes which spawn subtasks
#
 call c_atexit (endr4)

 #	set up list of command arguments
 call makarg

#	initialize /io/ common block variables

	for (i=1; i<=NNFILES; i=i+1)
	    lfn(i) = NODEVICE
 #pick up file substitutions for standard files
 for (i=1; getarg3(i, buf, MAXLINE) != EOF; )
	{
	if ( (insub(buf,input) == YES) |
	     (outsub(GREATER, buf,output, outacc) == YES) |
	     (outsub(QMARK, buf, erout, erracc) == YES) )
		call delarg (i)
	else
		i = i + 1
	}

 #open files
ifdef(vms,
  if (assign(erout, ERROUT, erracc) == ERR)
	call endr4
  if (assign(input, STDIN, READ) == ERR)
	call cant(input)
  if (assign(output, STDOUT, outacc) == ERR)
	call cant(output)
)
# Linux Fortran automatically redirects <input and >output to unit 5 and 6
# Arguments are removed from the command line before the fortran command line
# processing.


 return
 end
