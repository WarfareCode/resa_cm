##############################################################################
# Filename: FIXREF.
#
# This include file is required by the ALPHA version of BEES in order to force
#   the linker to refer to literal strings by reference.  The ALPHA seems to 
#   default to thinking the values are passed by descriptor.
# 
# Created: 
#   11/93 Dane Wills - Computer Sciences Corp.
# 
# Modifications:
#   11/93 Tom Smith - Computer Sciences Corp.
#       Defined more prototypes.
#
##############################################################################

# character function almostequal(c1,c2)
define(almostequal,a%lmostequal%(%%ref(@1),%%ref(@2)))
# character function baderr(msg)
define(baderr,b%aderr%(%%ref(@1)))
# character function clower(c)
define(clower,c%lower%(%%ref(@1)))
# character function cmatch(c, array)
# character function cupper(c)
define(cupper,c%upper%(%%ref(@1)))
# character function equal(c1,c2)
define(equal,e%qual%(%%ref(@1),%%ref(@2)))
# character function getc(c)
# character function getch(c, f)
# character function getrln(buf, unit, trmara)
# character function inmap (c)
# character function outmap(c)
# character function rgetch(c, chan)
# integer function addset (c, str, j, maxsiz)
define(addset,a%ddset%(%%ref(@1),%%ref(@2),@3,@4))

# integer function alldig (str)
# integer function assign (ext, int, access)
# integer function cputim(start)
# integer function cre8at(ext,access,int)
# integer function create(ext, access)
# integer function crembx(buf, uniqit, descr, unit)
# integer function ctoi(in, i)
# integer function cwdir(in)
# integer function dclout(lin, start, stop, args)
# integer function exetim(start)
# integer function fmttim(string, intime, buf)
# integer function fsize (name)
# integer function gdrprm(desc, file)
# integer function getarg (n, array, maxsiz)
# integer function getfdb(int)
# integer function getlin (line, f)
# integer function getmsg(buf)
# integer function getpdb(offset, wait)
# integer function gettyp (int, type)
# integer function getwrd (in, i, out)
# integer function gtftok(buf, i, token)
# integer function htoi(buf)
# integer function index(str, c)
# integer function insub (arg, file)
# integer function itoc(int, str, size)
# integer function kill(buf)
# integer function loccom(comand, spath, path)
# integer function nxtlun(free)
# integer function open (ext, access)
# integer function opena(ext, int, access)
# integer function opendr(direct, desc)
# integer function openn(ext, int, access)
# integer function openp(ext, int, access)
# integer function openr(ext, int, access)
# integer function opens(ext, int, access)
# integer function openw(ext, int, access)
# integer function outsub(c, arg, file, access)
# integer function pgflts(start)
# integer function prompt(pbuf, line, int)
# integer function pstat(buf)
# integer function pwait(nprocs, pids, pinfo, lstpid, flag)
# integer function rawmod(unit, type)
# integer function real_device(path)
# integer function resume(buf)
# integer function rtopen(chan)
# integer function spawn(proces, args, desc, inwait)
# integer function strcmp (str1, str2)
# integer function suspnd(buf)
# integer function tran1(in, out)
# integer function trnlog(in, out)
define(trnlog,t%rnlog%(%%ref(@1),@2))

# integer function tty(int)
# integer function type (c)
# subroutine acopy (fdi, fdo, size)
# subroutine adrfil(file)
# subroutine amove(name1, name2)
# subroutine appstr(temp, string)
# subroutine arggen(pname, bname)
# subroutine auxfmt(qdate, group, member, protect, eof, free, aux, date)
# subroutine badarg(arg)
# subroutine bubble(v, n)
# subroutine cant (file)
# subroutine closdr(desc)
# subroutine close(int)
# subroutine copyit(in, start, stop, out)
# subroutine cvt_dtop(in, out)
# subroutine defdir(direct)
# subroutine delarg (n)
# subroutine dirfil(dpath, file, direc)
# subroutine dirout(direct, out, i)
# subroutine dopack(word, nxtcol, rightm, buf, unit)
# subroutine draw_text(hook,string,flag)
define(draw_text,d%raw_text%(@1,%%ref(@2),@3)) 
# subroutine drop_priority
# subroutine dscbld(dsc, string)
define(dscbld,d%scbld%(@1,%%ref(@2))) 

# subroutine echo(s)
define(echo,e%cho%(%%ref(@1))) 
# subroutine echop(s)
define(echop,e%chop%(%%ref(@1))) 
# subroutine echost(s)
define(echost,e%chost%(%%ref(@1))) 
# subroutine echov(s)
define(echov,e%chov%(%%ref(@1))) 
# subroutine echoh(s,l)
define(echoh,e%choh%(%%ref(@1),@2)) 
# subroutine enbint
# subroutine endr4
# subroutine error (line)
define(error,e%rror%(%%ref(@1)))

# subroutine exith
# subroutine explog(in, out)
define(explog,e%xplog%(%%ref(@1),@2))

# subroutine exppid(in, out)
# subroutine exppth(path, depth, ptrs, temp)
# subroutine fcopy (in, out)
# subroutine fgenr8(node, device, direct, file, out)
# subroutine filnfo(int, name, access)
# subroutine flpack(nxtcol, rightm, buf, unit)
# subroutine fmtuic(grp, mem, uic)
# subroutine fold (token)
# subroutine fpmap (jfn,name,pages,igc,offset,istat)        
define(fpmap,f%pmap%(@1,%%ref(@2),@3,@4,@5,@6))
# subroutine fskip (fd, n)
# subroutine gdate(buf)
# subroutine gdraux(desc, file, aux, date)
# subroutine gendir(path, out)

# subroutine Generate_eng_rec (event_str,reason_str,unit_name)
define(generate_eng_rec,g%enerate_eng_rec%(%%ref(@1),%%ref(@2),@3))

# subroutine genpnm(proces, wait, offset)
# subroutine getdir(key, type, buf)
# subroutine get_log_names (tname,name,max,oname,onum)
define(get_log_names,g%et_log_names%(%%ref(@1),%%ref(@2),@3,@4,@5))
# subroutine getown(mypid, ownid)
# subroutine getpid(pid)
# subroutine getpnm(proces)
# subroutine getuic(uic)
# subroutine gtddev(device)
# subroutine gtdflt(node, device, direct)
# subroutine gtdpth(dir)
# subroutine gtime(buf)
# subroutine gwdir(buf, dtype)
# subroutine hostnm(tstr)
# subroutine impath(path)
# subroutine initr4
# subroutine inpack(nxtcol, rightm, buf, unit)
# subroutine instal(name,defn)
define(instal,i%nstal%(%%ref(@1),%%ref(@2)))
# subroutine intsrv
# subroutine itoczf(n, tbuf, width)
# subroutine makarg
# subroutine make_rid_name (node,scen,time,name)
define(make_rid_name,m%ake_rid_name%(%%ref(@1),%%ref(@2),@3,%%ref(@4)))
# subroutine markl (int, addr)
# subroutine mklocl(in, out)
# subroutine mkpath(in, path)
# subroutine ndaloc (tbl,name,seg,slot,entry)
define(ndaloc,n%daloc%(@1,%%ref(@2),@3,@4,@5))
# subroutine notify_csf (str, v)
define(notify_csf,n%otify_csf%(%%ref(@1),@2))
# subroutine parsef(in, node, device, direct, file)
# subroutine prcdon
# subroutine putc (c)
# subroutine put_console_err (c,rc)
define(put_console_err,p%ut_console_err%(%%ref(@1),@2))
# subroutine putch(c, f)
# subroutine putdec(n,w)
# subroutine puthex(n, buf)
# subroutine putint(n, w, fd)
# subroutine putlin (b, f)
define(putlin,p%utlin%(%%ref(@1),@2))

# subroutine putpdb(offset)
# subroutine putstr(str, w, fd)
# subroutine query_disk_info (str,f,g)
define(query_disk_info,q%uery_disk_info%(%%ref(@1),@2,@3))
# subroutine quotas(wait)
# subroutine rdtmbx
# subroutine remark (line)
define(remark,r%emark%(%%ref(@1)))

# subroutine remove(buf)
# subroutine res_tilde(path, out)
# subroutine resdef(cpath, dpath)
# subroutine resuic(uic, value)
# subroutine rputch(c, n, chan)
# subroutine saveBB (iname,str,igame,jstat)
define(savebb,s%avebb%(@1,%%ref(@2),@3,@4))
# subroutine scopy(from, i, to, j)
define(scopy,s%copy%(%%ref(@1),@2,@3,@4))

# subroutine scratf(start, target)
# subroutine seek(offset,int)
# subroutine send(view, str1, len, msg)
define(send,s%end%(@1,%%ref(@2),@3,%%ref(@4)))
# subroutine set_exit_msg(msg)
define(set_exit_msg,s%et_exit_msg%(%%ref(@1)))
# subroutine shell (v, n)
# subroutine skipbl(lin, i)
# subroutine sleep(secnds)
# subroutine smov(in, out, j)
define(smov,s%mov%(%%ref(@1),@2,@3))
# subroutine smovh(in, i, out, j)
define(smovh,s%movh%(%%ref(@1),@2,@3,@4))
# subroutine smovll(ll, str, msg, ilen)
define(smovll,s%movll%(@1,%%ref(@2),@3,@4))
# subroutine smovv(in, out, l)
define(smovv,s%movv%(%%ref(@1),@2,@3))
# subroutine srttim(date, out)
# subroutine stcopy(in, i, out, j)
define(stcopy,s%tcopy%(%%ref(@1),@2,@3,@4))
# subroutine synerr(msg)
define(synerr,s%ynerr%(%%ref(@1)))
# subroutine synerr2(msg)
define(synerr2,s%ynerr2%(%%ref(@1),%%ref(@2)))

# subroutine stdflt(host, device, direct)
# subroutine stdpth(path)
# subroutine str_host(buf, temp)
# subroutine termin(buf)
# subroutine termnl(string)
define(termnl,t%ermnl%(%%ref(@1)))
# subroutine trace_parallel_mapping(id,string)
define(trace_parallel_mapping,t%race_parallel_mapping%(@1,%%ref(@2)))

# subroutine trmout(buf)
# subroutine unique(buf)
# subroutine upper (token)
# subroutine usage(buf)
define(usage,u%sage%(%%ref(@1)))
# subroutine vmovh(in, len, out, n)
define(vmovh,v%movh%(%%ref(@1),@2,@3,@4))
# subroutine vmov(in, out, l)
define(vmov,v%mov%(%%ref(@1),@2,@3))
# subroutine vmovv(in, out, l)
define(vmovv,v%movv%(%%ref(@1),@2,@3))
# subroutine votan_out (chan,str,num)
define(votan_out,v%otan_out%(@1,%%ref(@2),@3))
# subroutine wgoerr (iview,iaddr,nord,nargs,args,str)
define(wgoerr,w%goerr%(@1,@2,@3,@4,@5,%%ref(@6)))
# subroutine wgpaus(stat,str,len)
define(wgpaus,w%gpaus%(@1,%%ref(@2),@3))
# subroutine wtmsec(n)
# subroutine xxdat(y_n, buf, kk, val, str)
define(xxdat,x%xdat%(@1,@2,@3,@4,%%ref(@5)))

#-----------------------------------------------------------------------------
# str$element (temp, 0, ".", CI_Name )
define(str$element,s%tr$element%(@1,@2,%%ref(@3),@4))
# lib$do_command (cmd)
define(lib$do_command,l%ib$do_command%(%%ref(@1)))
# lib$delete_logical (cmd,)
define(lib$delete_logical,l%ib$delete_logical%(%%ref(@1),@2))
# lib$set_logical (log,val,,,)
define(lib$set_logical,l%ib$set_logical%(%%ref(@1),@2,@3,@4,@5))

#-----------------------------------------------------------------------------
# subroutine xc_set_title(hndl, title)
define(xc_set_title,x%c_set_title%(@1,%%ref(@2)))
# subroutine xc_add_ordinate_label(hndl, label)
define(xc_add_ordinate_label,x%c_add_ordinate_label%(@1,%%ref(@2)))
# subroutine xc_add_abscissa_label(hndl, label)
define(xc_add_abscissa_label,x%c_add_abscissa_label%(@1,%%ref(@2)))
# subroutine xc_draw_point_label(hndl,x,y,label)
define(xc_draw_point_label,x%c_draw_point_label%(@1,@2,@3,%%ref(@4)))
# subroutine xc_draw_point_label(hndl,x,y,label)
define(xc_draw_point_label,x%c_draw_point_label%(@1,@2,@3,%%ref(@4)))
# subroutine xc_draw_string(hndl,ind,bottom,left,text)
define(xc_draw_string,x%c_draw_string%(@1,@2,@3,@4,%%ref(@5)))
# subroutine xc_draw_image_string(hndl,bottom,left,text)
define(xc_draw_image_string,x%c_draw_image_string%(@1,@2,@3,%%ref(@4)))
# subroutine xc_draw_string_at_pixel(hndl,x,y,text)
define(xc_draw_string_at_pixel,x%c_draw_string_at_pixel%(@1,@2,@3,%%ref(@4)))

