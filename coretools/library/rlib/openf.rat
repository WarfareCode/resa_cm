	
integer function openf (ext, ftype, ccontrol, access, age, rab)
implicit none
character ext[100]  # array with file name (assumed in lower case)
integer ftype       # file type -- character(0) or binary(1)
integer ccontrol    # list(0) or fort(1)
integer access      # read(1), write(2), readwrite(3), append(4)
integer age         # old(-1), unk(0), or new(1)
integer rab         # descriptor to be used with all file prims

integer lun, getlun, i, length, ic
integer iostat

vaxcharacter*20 agestr
vaxcharacter*20 ftypestr
vaxcharacter*100 cext


#   status returned:    err     if error
#                       ftype   if successful

define (isold,-1)
define (isunk,0)
define (isnew, 1)

define (ischaracter,0)
define (isbinary,1)

if      (age == isold) agestr = "OLD"
else if (age == isunk) agestr = "UNKNOWN"
else if (age == isnew) agestr = "NEW"
else return (ERR)

if      (ftype == ischaracter) ftypestr = "FORMATTED"
else if (ftype == isbinary)    ftypestr = "UNFORMATTED"
else return (ERR)

# Convert c-like string to fortran string
call rs2fs (ext, cext)

lun = getlun()                  #   get next available lun
rab = lun  # Record Access Block (rab) is logical unit number (lun)

open (unit=lun,
      status=agestr,
      file=cext,
      access='SEQUENTIAL',
      form=ftypestr,
      recl=512,
      %blank%='NULL',
      iostat=iostat)

if (iostat == 0)
    return(lun)
else
    return(ERR)
end

integer function getlun()
# get next available logical unit number (lun)
implicit none
integer i
logical isopened
integer iostat

for (i=13; i <= 100; i=i+1)
{
    inquire (unit=i, opened=isopened, iostat=iostat)
    if (iostat != 0) return(ERR)            # No available lun 
    if (!isopened)	break
}

return(i)
end
