Command procedures

buildmap.com - accept window filter file and assign to map$window
             - run readwin
             - @csect
             - run mapit

csect.com   - assign file name to mmi$worldg
            - run csect

Fortran programs (rat files missing)

utof.for - convert unformmatted map into formatted map
           askis for input and output files
           Point has header for #points and rank

ftou.for - convert formatted file into unformatted file

csect.for - read formatted map file and create binary file in global section
          - window file contains name of input file

mapit.for - print points in global section to screen

exam.for - read specific file check first record for 7777, 8888, or 9999
           as number of points

readwin.for - open window file to select window and granularity from world map
              open map$window which contains:
                output file name
				repeat following set of lines
                {
				input file name with extension (.dat = land, .riv = rivers, .bdy = political boundary)
				granularity of window
				number of windows, loop count(??)
				sw lat
				sw lon
				ne lat
				ne lon
				}
              print window statatics to screen
			  Output file format
				header record = 9999 (land) or 8888 (rivers) or 7777 (political boundaries) or count of number of points in segment
				lat   lon


rworld.for - read tape of points and write to unformatted file

Data files

ptworld10.dat  - world wide map
win*.dat       - select window(s) from ptworld10.dat, *.riv and *.bdy
                  with selected granularity
*.riv          - rivers
*.bdy          - political boundaries

Data files to port
*f.dat
win*.dat
*f.riv
*f.bdy


Command procedures to port

buildmap.com
csect.com

Programs to port (need to reverse engineer into rat4)

utof.for
ftou.for
readwin.for
csect.for
mapit.for

Plot program getting map before port

plot program (ptmain.rat) 
	draw_new_map
draw_new_map (dwdraw.rat)
	call lib$Set_Logical ("MMI$WORLDG",new_name[1:kk],,,)
	call getmap
getmap (~/resa88/lbmap.rat)
GPHcommon
GPH2common

Integer*4       Size, Max_Pages, Actual_Pages, Status, length, kk
VMSchar         errmsg*400
external        nwiss$_mapinsuff

Size = %%loc(buffer_end) - %%loc(buffer_start)  # get size of section (bytes)

Max_Pages = (Size + 511) / 512

Call Map_RO_Section ($map$Name,         # Name of the file to map (In)
                     buffer_Start,      # Where to map it (In)
                     Max_Pages,         # How much to map (In)
                     Actual_Pages,      # What was mapped (Out)
                     Status)            # True = good, else error (Out)
releasemap (lbmap.rat)
Call unMap_Section ($map$Name)       # Name of the file mapped (In)

Plot gettng map after port

create environment variable MMI$WORLDG = korea_area_map.dat

In clbmap.c add routine c_map_geomap and c_unmap_geomap
	The geomap_loc = 0x16000000

In lbmap.rat add routine map_geomap (similar to bbsmap or map_dted)
map_geomap calls fopenm and c_map_geomap

In draw_new_map call map_geomap (name, pages, ok_to_write)

replace releasemap with c_unmap_geomap

define($MAP_PAGES,???) in a ptgraph.inc file

In dwmain.lnk add symdef for labele common gph2


