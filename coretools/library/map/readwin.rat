include "ptgraph.inc"
undefine read
undefine write
define ($max$windows,10)
define ($max$points$per$equence,100000)
define (MAPcommon,
real buflat[$max$points$per$equence],buflong[$max$points$per$equence],   
     rlat[$max$points$per$equence],rlong[$max$points$per$equence]
integer kount,noseq,total_points
character check_max
common/map/buflat,buflong,kount,noseq,total_points,check_max
equivalence(buflat,rlat),(buflong,rlong)
)

program readwin
implicit none
MAPcommon
vmschar outfile*35,infile*35
real wlat1[$max$windows],wlat2[$max$windows],wlong1[$max$windows],
     wlong2[$max$windows]
integer window_pt[$max$windows]
integer i, j num_windows, mygran, loop_count, inwin
integer calc_granularity, granularity, mypts, rank, ireadct
integer iskip, limit, kk, idiff, mm, n, j, jj, num_windows, file_total_points
integer         open_, getarg3
character       buf[50]
vmschar*50		win_file
equivalence     (buf, win_file)

call initr4

call help_pgm(1,
              "readwin: Create shared map file given window file input",
              "readwin Tags: geomap",
              "Usage: readwin <window file>",
              "",
              "",
              "",
              "",
              "Example: readwin windmap6c.dat")

n = getarg3(1, buf, 50)

open(unit=1,file=win_file,status='OLD',form='formatted')
read(1,20)outfile
print 15,outfile
open(unit=3,file=outfile,status='unknown',form='formatted')
file_total_points = 0
repeat
{
    read(1,20,end=8888)infile
    print 16,infile
    for (i = 1; i<= 30; i = i + 1)
    {
        if(infile[i:i] == ".")
        {        
            if(infile[i+1:i+3] == 'BDY' | infile[i+1:i+3] == 'bdy')
            {
                j=7777
                write(3,18) j
            }
            else if(infile[i+1:i+3] == 'RIV' | infile[i+1:i+3] == 'riv')
            {
                j=8888
                write(3,18)j
            }
            else
            {
                j=9999
                write(3,18)j
            }
			break
        }
    }
    ireadct = 0
    open(unit=2,file=infile,status='OLD',form='formatted')
    read(1,18)mygran
    print 25,mygran
    read(1,19)num_windows,loop_count
    print 17,num_windows,loop_count
    if(num_windows > $max$windows)
    {
        print*,'Illegal number of windows.'
        stop
    }
    if(loop_count < 1 | loop_count >2)
    {        
        print *,'Illegal loop count specified.'
        stop
    }
    for (i = 1; i <= num_windows; i = i + 1)
    {
        read(1,40) wlat1[i]
        read(1,40) wlong1[i]
        read(1,40) wlat2[i]
        read(1,40) wlong2[i]
        if(wlat1[i] > wlat2[i] | wlong1[i] > wlong2[i])
        {
            print *,'Invalid lat/long'
            print *,'If you are crossing the Intl Date Line you must make 2 windows.'
            stop
        }
        print 33,i,wlat1[i],wlong1[i],wlat2[i],wlong2[i]
    }

    for (i = 1; i <= $max$windows; i = i + 1)
    {
        window_pt[i]=0
    }
    granularity=1
    limit=$max$map$points
    if(mygran > 0) granularity=mygran
	noseq=0
	total_points=0
	repeat
    {
        read(2,19,end=300)mypts,rank
		ireadct = ireadct + 1
		if (mypts > $max$points$per$equence)
			print *, "max points per sequence exceeded on line ",  ireadct
        iskip=0
        kount=0
        for (j = 1; j <= mypts; j = j + 1)
        {
            read(2,40,end=3000)rlat[j],rlong[j]
        }
        ireadct = ireadct + mypts

        for (mm = 1; mm <= mypts; mm = mm + 1)
        {
			inwin = 0
            for (n = 1; n <= num_windows; n = n + 1)
            {
                if(rlat[mm]  < wlat1[n])  next
                if(rlat[mm]  > wlat2[n])  next
                if(rlong[mm] < wlong1[n]) next
                if(rlong[mm] > wlong2[n]) next
				inwin = 1
            }
			if (inwin == 0) next				# Point outside window

            if(mm != 1 & mm != mypts)
            {
                iskip=iskip+1
                if(iskip >= granularity)		# Keep points based on granularity 
					iskip=0
				else
					next
            }
            if(abs(rlat[mm]) <= 75)
            {        
                kount=kount+1
                buflat[kount]=rlat[mm]
                buflong[kount]=rlong[mm]
            }
        }
        if(kount > 1)
            call write_pts
    } # input file
300     continue
	close(unit=2)
	ireadct=0
	print 400,noseq,total_points
	file_total_points = file_total_points + total_points
} # window file

8888 continue
close(unit=1)
close(unit=2)
close(unit=3)
print 420, file_total_points
if(file_total_points > $max$map$points)
{
    idiff=file_total_points-$max$map$points
    print 415,idiff
}
stop
3000	 continue
print 3500,j,mypts
stop
5     format(' Terminate if $max$map$points retrieved (Y/N):',$)
6     format(a1)
10    format(' Input file name where windows are defined:',$)
15    format(' Output formatted file name:',a35)
16    format(/' Processing formatted data file name:',a35)
17    format(' Number of high resolution windows for map =',i4/,' Number of passes thru this file =',i4)
18    format(i4)
19    format(2i4)
20    format(a35)
25    format(' Granularity for this file =',i3)
33    format(' Window ',i3,2(' lat ',f8.2,' long ',f8.2,3x))
40    format(2f12.6)
100   format(' My points = ',i5,' Rank = ',i4)
200   format(' Count = ',i6,' Lat = ',f12.6,' Long = ',f12.6)
250   format(' Read Count = ',i10,' Number Lines = ',i6,' Total Points = ',i7)
340   format(' Window ',i4,' has ',i6,' points.')
350   format(' Total points for windows + extras = ',i8)
400   format(' Number of sequences =',i6,' Total points = ',i8)
415   format(' Total points exceeds $max$map$points by ',i8)
420   format(' Total points in output file ',i6)
425   format(' New granularity =',i6)
1500  format(' The maximum number of map points that may be defined =',i6)
2500  format(' Count =',i6)
2700  format(' Lat =',f12.6,' Long =',f12.6)
3500  format(' Pre-mature EOD - looking at ',i6,'th value of ',i6,' points.')
      end

subroutine write_pts
MAPcommon

total_points=total_points + kount

if(kount == 2)
{
    if(buflat[1] == buflat[2] & buflong[1] == buflong[2])
    {
        total_points=total_points - kount
        return
    }
}

write(3,1000) kount
noseq = noseq + 1
for (j=1; j <= kount; j = j + 1)
{
    write(3,2000)buflat[j],buflong[j]
}
return
1000  format(i4)
2000  format(2f12.6)
end
