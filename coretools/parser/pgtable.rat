%      PROGRAM PGTABLE
%      CALL INITR4
       call setchtype(RAW, STDOUT)
	   call setchfd(STDOUT, STDOUT)
       call setchtype(RAW, ERROUT)
	   call setchfd(ERROUT, ERROUT)
%      CALL INIT
%      CALL BLDTOKENS
%      CALL BLDNODES
%      CALL DUMP
%      CALL GENOUTPUT
%      CALL ENDR4
%      END
%      SUBROUTINE INIT
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER MODE_BITS
%      INTEGER MODE_BYTES
%      COMMON /PG_MODE / MODE_BITS,MODE_BYTES
%      INTEGER GETARG3,OPEN_,CLOSE,CTOI,K,MM
%      LOGICAL*1 ARG(100),ARGNAME(100),KFILE(100),TFILE(100),IFILE(100),S
%     *FILE(100),RFILE(100)
%      EXTERNAL SCOPY
%      LOGICAL*1 KTYPE(5)
%      LOGICAL*1 TTYPE(5)
%      LOGICAL*1 ITYPE(5)
%      LOGICAL*1 STYPE(5)
%      LOGICAL*1 RTYPE(5)
%      DATA KTYPE(1)/46/,KTYPE(2)/107/,KTYPE(3)/101/,KTYPE(4)/121/,KTYPE(
%     *5)/0/
%      DATA TTYPE(1)/46/,TTYPE(2)/116/,TTYPE(3)/120/,TTYPE(4)/116/,TTYPE(
%     *5)/0/
%      DATA ITYPE(1)/46/,ITYPE(2)/105/,ITYPE(3)/110/,ITYPE(4)/99/,ITYPE(5
%     *)/0/
%      DATA STYPE(1)/46/,STYPE(2)/115/,STYPE(3)/112/,STYPE(4)/99/,STYPE(5
%     *)/0/
%      DATA RTYPE(1)/46/,RTYPE(2)/114/,RTYPE(3)/105/,RTYPE(4)/110/,RTYPE(
%     *5)/0/
		mode_bits = 32
		mode_bytes = 4
%      NODE$COUNT =1
%      TOKEN$COUNT =0
%      TEXT$COUNT =0
%      HAND$COUNT =0
%      INCLUDEDFLAG =0
%      TOKEN$INDEX =0
%      TOKEN$ARRAY(1,TOKEN$INDEX)=4
%      TOKEN$ARRAY(2,TOKEN$INDEX)=INSTALLTEXT_V ('<carriage-return>')
%      NODE$INDEX =1
%      NODE$ARRAY(1,NODE$INDEX)=0
%      NODE$ARRAY(2,NODE$INDEX)=0
%      NODE$ARRAY(3,NODE$INDEX)=0
%      NODE$ARRAY(4,NODE$INDEX)=0
%      NODE$ARRAY(5,NODE$INDEX)=0
%      NODE$ARRAY(6,NODE$INDEX)=0
%      NODE$ARRAY(7,NODE$INDEX)=0
%      IF(.NOT.(GETARG3(1,ARG,100).EQ.-1.OR.ARG(1).EQ.45))GOTO 23000
%      CALL USAGE_V ('Default file name missing (MUST be argument #1).')
%23000 CONTINUE
%      K =LENGTH(ARG)+1
%      CALL SCOPY(ARG,1,KFILE,1)
%      CALL SCOPY(KTYPE,1,KFILE,K)
%      CALL SCOPY(ARG,1,TFILE,1)
%      CALL SCOPY(TTYPE,1,TFILE,K)
%      CALL SCOPY(ARG,1,IFILE,1)
%      CALL SCOPY(ITYPE,1,IFILE,K)
%      CALL SCOPY(ARG,1,SFILE,1)
%      CALL SCOPY(STYPE,1,SFILE,K)
%      CALL SCOPY(ARG,1,RFILE,1)
%      CALL SCOPY(RTYPE,1,RFILE,K)
%      EXTRACTFLAG =-1
%      I=2
%23002 IF(.NOT.(GETARG3(I,ARG,100).NE.-1))GOTO 23004
%      IF(.NOT.(ARG(1).NE.0))GOTO 23004
%      IF(.NOT.(ARG(1).EQ.45))GOTO 23005
%      I =I +1
%      IF(.NOT.(GETARG3(I,ARGNAME,100).EQ.-1))GOTO 23007
%      CALL USAGE_V('Insufficient arguments!')
%23007 CONTINUE
%      IF(.NOT.(ARG(2).EQ.75))GOTO 23009
%      CALL SCOPY(ARGNAME,1,KFILE,1)
%      GOTO 23010
%23009 CONTINUE
%      IF(.NOT.(ARG(2).EQ.84))GOTO 23011
%      CALL SCOPY(ARGNAME,1,TFILE,1)
%      GOTO 23012
%23011 CONTINUE
%      IF(.NOT.(ARG(2).EQ.73))GOTO 23013
%      CALL SCOPY(ARGNAME,1,IFILE,1)
%      GOTO 23014
%23013 CONTINUE
%      IF(.NOT.(ARG(2).EQ.83))GOTO 23015
%      CALL SCOPY(ARGNAME,1,SFILE,1)
%      GOTO 23016
%23015 CONTINUE
%      IF(.NOT.(ARG(2).EQ.82))GOTO 23017
%      CALL SCOPY(ARGNAME,1,RFILE,1)
%      GOTO 23018
%23017 CONTINUE
%      IF(.NOT.(ARG(2).EQ.88))GOTO 23019
%      EXTRACTFLAG =0
%      K=1
%23021 IF(.NOT.(ARGNAME(K).GE.65.AND.ARGNAME(K).LE.90))GOTO 23023
%      NBIT =ARGNAME(K) -65
%      EXTRACTFLAG=IOR(IAND(EXTRACTFLAG,NOT(ISHFT(1,NBIT))),ISHFT(IAND(1,
%     *1),NBIT))
%23022 K=K+1
%      GOTO 23021
%23023 CONTINUE
%      GOTO 23020
%23019 CONTINUE
%      IF(.NOT.(ARG(2).EQ.77))GOTO 23024
%      K =1
%      MM =CTOI (ARGNAME,K)
%      IF(.NOT.(MM.EQ.16.OR.MM.EQ.32))GOTO 23026
%      MODE_BITS =MM
%      GOTO 23027
%23026 CONTINUE
%      CALL USAGE_V ('Invalid Mode selection')
%23027 CONTINUE
%      MODE_BYTES =MODE_BITS / 8
%      GOTO 23025
%23024 CONTINUE
%      CALL USAGE_V ('Invalid option ??????')
%23025 CONTINUE
%23020 CONTINUE
%23018 CONTINUE
%23016 CONTINUE
%23014 CONTINUE
%23012 CONTINUE
%23010 CONTINUE
%      GOTO 23006
%23005 CONTINUE
%      CALL USAGE_V ('garbage argument ??????')
%23006 CONTINUE
%23003 I=I+1
%      GOTO 23002
%23004 CONTINUE
       CALL PUTBIN (EXTRACTFLAG,MODE_BITS -1,ERROUT)
%      CALL REMARK_V (' is the extract flag')
%      FD$KEYWD =OPEN_(KFILE,1)
%      IF(.NOT.(FD$KEYWD.EQ.-3))GOTO 23028
%      CALL CANT (KFILE)
%23028 CONTINUE

%      FD$SYNTAX =OPEN_(TFILE,1)
%      IF(.NOT.(FD$SYNTAX.EQ.-3))GOTO 23030
%      CALL CANT (TFILE)
%23030 CONTINUE
       call setchtype(RAW, FD$SYNTAX)
%      FD$INCLUDE=OPEN_(IFILE,2)
%      IF(.NOT.(FD$INCLUDE.EQ.-3))GOTO 23032
%      CALL CANT (IFILE)
%23032 CONTINUE
       call setchtype(RAW, FD$INCLUDE)
%      FD$SPECIAL=OPEN_(SFILE,2)
%      IF(.NOT.(FD$SPECIAL.EQ.-3))GOTO 23034
%      CALL CANT (SFILE)
%23034 CONTINUE
       call setchtype(RAW, FD$SPECIAL)
%      FD$DATA =OPEN_(RFILE,2)
%      IF(.NOT.(FD$DATA.EQ.-3))GOTO 23036
%      CALL CANT (RFILE)
%23036 CONTINUE
       call setchtype(RAW, FD$DATA)
%      RETURN
%      END
%      SUBROUTINE USAGE_V (MSG)
%      CHARACTER *(*) MSG
%      CALL REMARK_V(MSG)
%      CALL REMARK_V('usage:  pgtable name [-{kt} name.ext] [-{isr} name.
%     *ext] [-x ABC..XYZ] [-m 99]')
%      CALL REMARK_V(
%     *'   Where:   name  Is the default file name to use...')
%      CALL REMARK_V(
%     *'                  i.e.  Input is from NAME.KEY & NAME.TXT')
%      CALL REMARK_V('                  and Output is to NAME.INC,NAME.SP
%     *C & NAME.RIN')
%      CALL REMARK_V(
%     *'   The options: -k, -t, -i, -s, & -r can overide the ')
%      CALL REMARK_V('                default name and extension.')
%      CALL ERROR_V ('   The option:  -x is to select only the order grou
%     *ps specified.')
%      CALL ERROR_V ('   The option:  -m is to select output mode: 16 or
%     *32 (default is 32)')
%      RETURN
%      END
%      SUBROUTINE ERROR (MSG)
%      LOGICAL*1 MSG(100)
%      CALL REMARK (MSG)
%      CALL ENDR4
%      RETURN
%      END
%      FUNCTION IFINDTEXT (TEXT)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 TEXT(100)
%      INTEGER EQUAL
%      I=1
%23038 IF(.NOT.(I.LT.TEXT$COUNT))GOTO 23040
%      IF(.NOT.(EQUAL(TEXT,TEXT$ARRAY(I)).EQ.1))GOTO 23041
%      IFINDTEXT=(I)
%      RETURN
%23041 CONTINUE
%23039 I=I+LENGTH(TEXT$ARRAY(I))+1
%      GOTO 23038
%23040 CONTINUE
%      IFINDTEXT=(0)
%      RETURN
%      END
%      FUNCTION INSTALLTEXT_V (TEXT)
%      CHARACTER *(*) TEXT
%      INTEGER INSTALLTEXT
       INSTALLTEXT_V =INSTALLTEXT(%%REF(TEXT))
%      RETURN
%      END
%      FUNCTION INSTALLTEXT (TEXT)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER MODE_BITS
%      INTEGER MODE_BYTES
%      COMMON /PG_MODE / MODE_BITS,MODE_BYTES
%      LOGICAL*1 TEXT(100)
%      INTEGER IFINDTEXT,MM
%      EXTERNAL SCOPY
%      INSTALLTEXT =IFINDTEXT(TEXT)
%      IF(.NOT.(INSTALLTEXT.NE.0))GOTO 23043
%      RETURN
%23043 CONTINUE
%      LEN =LENGTH(TEXT)+1
%      MM =MOD(LEN,MODE_BYTES)
%      IF(.NOT.(MM.NE.0))GOTO 23045
%      LEN =LEN +(MODE_BYTES -MM)
%23045 CONTINUE
%      IF(.NOT.(TEXT$COUNT+LEN.GE.50000))GOTO 23047
       CALL PUTLIN_V ('Text Array Overflow, with: ',ERROUT)
%      CALL ERROR (TEXT)
%23047 CONTINUE
%      INSTALLTEXT =TEXT$COUNT +1
%      CALL SCOPY (TEXT,1,TEXT$ARRAY,INSTALLTEXT)
%      TEXT$COUNT =TEXT$COUNT+LEN
%      RETURN
%      END
%      FUNCTION INSTALLHAND (TEXT)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 TEXT(100)
%      EXTERNAL SCOPY
%      LEN =LENGTH(TEXT)+1
%      IF(.NOT.(HAND$COUNT+LEN.GE.500))GOTO 23049
%      CALL PUTLIN_V ('Hand Array Overflow, with: ',ERROUT)
		call putch (BLANK, ERROUT)
%      CALL ERROR (TEXT)
%23049 CONTINUE
%      INSTALLHAND =HAND$COUNT +1
%      CALL SCOPY (TEXT,1,HAND$ARRAY,INSTALLHAND)
%      HAND$COUNT =HAND$COUNT+LEN
%      RETURN
%      END
%      SUBROUTINE BLDTOKENS
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 LINE(1024)
%      EOFFLAG =0
%23051 CONTINUE
%      CALL GETLINE (FD$KEYWD,LINE)
%      IF(.NOT.(EOFFLAG.EQ.1))GOTO 23054
%      GOTO 23053
%23054 CONTINUE
%      CALL EATKEYWORD (LINE)
%23052 GOTO 23051
%23053 CONTINUE
%      RETURN
%      END
%      SUBROUTINE EATKEYWORD (STR)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 STR(1024),CODE,WORK(100)
%      INTEGER SINDEX_V,EQUAL,CTOI
%      IX =SINDEX_V(STR,'>-')
%      IF(.NOT.(IX.GT.0))GOTO 23056
%      STR(IX+1) =0
%      TOKEN$INDEX=1
%23058 IF(.NOT.(TOKEN$INDEX.LE.TOKEN$COUNT))GOTO 23060
%      IF(.NOT.(EQUAL(STR, TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX))).NE.1)
%     *)GOTO 23061
%      GOTO 23059
%23061 CONTINUE
%      STR(IX+1) =45
%      CODE =STR(IX+2)
%      IP =INDEXX(STR,40)
%      IF(.NOT.(CODE.EQ.83))GOTO 23063
%       TOKEN$ARRAY(1,TOKEN$INDEX)=3
%      TOKEN$ARRAY(3,TOKEN$INDEX)=0
%      IF(.NOT.(IP.GT.0))GOTO 23065
%      K=1
%      CALL STCOPY (STR,IP+1,WORK,K)
%      IF(.NOT.(WORK(K-1).EQ.41))GOTO 23067
%      WORK(K-1) =0
%23067 CONTINUE
%      IF(.NOT.(LENGTH(WORK).GT.0))GOTO 23069
%      TOKEN$ARRAY(3,TOKEN$INDEX)=INSTALLHAND (WORK)
%23069 CONTINUE
%23065 CONTINUE
%      IF(.NOT.(TOKEN$ARRAY(3,TOKEN$INDEX).EQ.0))GOTO 23071
%       TOKEN$ARRAY(1,TOKEN$INDEX)=1
%23071 CONTINUE
%      GOTO 23064
%23063 CONTINUE
%      IF(.NOT.(CODE.EQ.78))GOTO 23073
%       TOKEN$ARRAY(1,TOKEN$INDEX)=2
%      IF(.NOT.(IP.GT.0))GOTO 23075
%      K =IP +1
%      N1 =CTOI (STR,K)
%      TOKEN$ARRAY(3,TOKEN$INDEX)=N1
%      K =K +1
%      N2 =CTOI (STR,K)
%      TOKEN$ARRAY(4,TOKEN$INDEX)=N2
%23075 CONTINUE
%      GOTO 23074
%23073 CONTINUE
%      IF(.NOT.(CODE.EQ.82))GOTO 23077
%       TOKEN$ARRAY(1,TOKEN$INDEX)=5
%      TOKEN$ARRAY(3,TOKEN$INDEX)=0
%      TOKEN$ARRAY(4,TOKEN$INDEX)=999999
%      IF(.NOT.(IP.GT.0))GOTO 23079
%      K =IP +1
%      IF(.NOT.(STR(K).EQ.45))GOTO 23081
%      ISIGN =-1
%      K=K+1
%      GOTO 23082
%23081 CONTINUE
%      ISIGN =1
%23082 CONTINUE
%      N1 =CTOI (STR,K)
%      TOKEN$ARRAY(3,TOKEN$INDEX)=N1 *ISIGN
%      K =K +1
%      IF(.NOT.(STR(K).EQ.45))GOTO 23083
%      ISIGN =-1
%      K=K+1
%      GOTO 23084
%23083 CONTINUE
%      ISIGN =1
%23084 CONTINUE
%      N2 =CTOI (STR,K)
%      TOKEN$ARRAY(4,TOKEN$INDEX)=N2 *ISIGN
%23079 CONTINUE
%23077 CONTINUE
%23074 CONTINUE
%23064 CONTINUE
%      GOTO 23060
%23059 TOKEN$INDEX=TOKEN$INDEX+1
%      GOTO 23058
%23060 CONTINUE
%      GOTO 23057
%23056 CONTINUE
%      IF(.NOT.(TOKEN$COUNT.GE.2000))GOTO 23085
%      CALL PUTLIN_V ('Token Table Overflow, with: ',ERROUT)
		call putch (BLANK, ERROUT)
%      CALL ERROR (STR)
%23085 CONTINUE
%      TOKEN$COUNT =TOKEN$COUNT +1
%      TOKEN$INDEX =TOKEN$COUNT
%      TOKEN$ARRAY(2,TOKEN$INDEX)=INSTALLTEXT (STR)
%      IF(.NOT.( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)).EQ.60))GOTO 2308
%     *7
%       TOKEN$ARRAY(1,TOKEN$INDEX)=1
%      GOTO 23088
%23087 CONTINUE
%       TOKEN$ARRAY(1,TOKEN$INDEX)=4
%23088 CONTINUE
%      TOKEN$ARRAY(3,TOKEN$INDEX)=0
%      TOKEN$ARRAY(4,TOKEN$INDEX)=9999999
%23057 CONTINUE
%      RETURN
%      END
%      SUBROUTINE GETLINE(FD,STR)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 STR(1024)
%      INTEGER FD,GETLIN,ISTAT
%      ISTAT =GETLIN (STR,FD)
%      IF(.NOT.(ISTAT.EQ.-1))GOTO 23089
%      EOFFLAG =1
%      STR(1) =0
%      GOTO 23090
%23089 CONTINUE
%      IF(.NOT.(STR(ISTAT).EQ.10))GOTO 23091
%      STR(ISTAT) =0
%23091 CONTINUE
%23090 CONTINUE
%      RETURN
%      END
%      INTEGER FUNCTION SINDEX_V (STR,MASK)
%      LOGICAL*1 STR(100)
%      CHARACTER *(*) MASK
       vmschar*200 str_v
	   call rs2fs(str, str_v)
%      SINDEX_V = INDEX(str_v,MASK)
%      RETURN
%      END
%      SUBROUTINE BLDNODES
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 LINE(1024)
%      EOFFLAG =0
%23093 CONTINUE
%      CALL GETLINE (FD$SYNTAX,LINE)
%      IF(.NOT.(EOFFLAG.EQ.1))GOTO 23096
%      GOTO 23095
%23096 CONTINUE
%      CALL EATCOMMAND (LINE)
%23094 GOTO 23093
%23095 CONTINUE
%      RETURN
%      END
%      SUBROUTINE GENOUTPUT
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      CALL PUTINCS (FD$INCLUDE)
%      CALL PUTDATA (FD$DATA)
%      CALL PUTSPC (FD$SPECIAL)
%      RETURN
%      END
%      SUBROUTINE PUTINCS (INT)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 CHAR,NUM(20)
%      INTEGER INT,WORK
%      TOKEN$INDEX=1
%23098 IF(.NOT.(TOKEN$INDEX.LE.TOKEN$COUNT))GOTO 23100
%      CALL PUTLIN_V ('define($LEX$',INT)
%      I_SWITCH_1=( TOKEN$ARRAY(1,TOKEN$INDEX))
%      GOTO 23101
%23103 CONTINUE
%      CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),INT)
%      GOTO 23102
%23104 CONTINUE
%      CALL PUTCH (36,INT)
%      WORK = TOKEN$ARRAY(2,TOKEN$INDEX)
%23105 CONTINUE
%      WORK =WORK +1
%      CHAR =TEXT$ARRAY(WORK)
%      IF(.NOT.(CHAR.EQ.62))GOTO 23108
%      GOTO 23107
%23108 CONTINUE
%      IF(.NOT.(CHAR.EQ.45))GOTO 23110
%      CALL PUTCH (36,INT)
%      GOTO 23111
%23110 CONTINUE
%      CALL PUTCH (CHAR ,INT)
%23111 CONTINUE
%23106 GOTO 23105
%23107 CONTINUE
%      GOTO 23102
%23101 CONTINUE
%      IF(I_SWITCH_1.EQ.4)GOTO 23103
%      GOTO 23104
%23102 CONTINUE
%      CALL PUTLIN_V ('$,-',INT)
%      CALL PUTINT (TOKEN$INDEX+20000,1,INT)
%      CALL PUTCH (41,INT)
%      K =LENGTH( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)))
%23112 IF(.NOT.(K.LT.20))GOTO 23114
%      CALL PUTCH (32,INT)
%23113 K=K+1
%      GOTO 23112
%23114 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.4))GOTO 23115
%      CALL PUTLIN_V ('# Keyword',INT)
%      GOTO 23116
%23115 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.2))GOTO 23117
%      CALL PUTLIN_V (' # Numeric (',INT)
%      CALL PUTINT ( TOKEN$ARRAY(3,TOKEN$INDEX),1,INT)
%      CALL PUTCH_V (':',INT)
%      CALL PUTINT ( TOKEN$ARRAY(4,TOKEN$INDEX),1,INT)
%      CALL PUTCH (41,INT)
%      GOTO 23118
%23117 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.5))GOTO 23119
%      CALL PUTLIN_V (' # Real (',INT)
%      CALL PUTINT ( TOKEN$ARRAY(3,TOKEN$INDEX),1,INT)
%      CALL PUTCH_V (':',INT)
%      CALL PUTINT ( TOKEN$ARRAY(4,TOKEN$INDEX),1,INT)
%      CALL PUTCH (41,INT)
%      GOTO 23120
%23119 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.3))GOTO 23121
%      CALL PUTLIN_V (' # Special',INT)
%      GOTO 23122
%23121 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.1))GOTO 23123
%      CALL PUTLIN_V (' # Alpha',INT)
%      GOTO 23124
%23123 CONTINUE
%      CALL PUTLIN_V (' # ????',INT)
%23124 CONTINUE
%23122 CONTINUE
%23120 CONTINUE
%23118 CONTINUE
%23116 CONTINUE
%      CALL PUTCH (10,INT)
%23099 TOKEN$INDEX=TOKEN$INDEX+1
%      GOTO 23098
%23100 CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTDATA (INT)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      M =0
%      CALL PUTDATA1 (INT,M,IOFF)
%      CALL PUTDATA2 (INT,M,IOFF)
%      CALL PUTDATA3 (INT,M,IOFF)
%      CALL PUTDATA4 (INT,M,IOFF)
%      RETURN
%      END
%      SUBROUTINE PUTDATA1 (INT,M,IOFF)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER MODE_BITS
%      INTEGER MODE_BYTES
%      COMMON /PG_MODE / MODE_BITS,MODE_BYTES
%      ISIZ_TOKEN =2
%      ISIZ_NODE =7
%      INFO =10
%      MIN =INFO+((TOKEN$COUNT+1)*ISIZ_TOKEN)+(TEXT$COUNT/MODE_BYTES)
%      MAX =MIN +(NODE$COUNT *ISIZ_NODE)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTLIN_V ('define	parse$short	',INT)
		call putch (BLANK, int)						# putlin_v trailing blanks eliminated
%      CALL PUTINT (MIN,1,INT)
%      CALL PUTCH (10,INT)                                         
%      CALL PUTLIN_V ('define	parse$long	',INT)
		call putch (BLANK, int)
		call putch (BLANK, int)				
%      CALL PUTINT (MAX,1,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTLIN_V ('integer*',INT)
%      CALL PUTINT (MODE_BYTES,1,INT)
%      CALL PUTLIN_V ('	parse$table[parse$table$size]',INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      CALL START_DATA (M,1,INT)
%      CALL PUTINT (INFO+1,1,INT)
%      CALL PUTLIN_V ('/ 	# Pointer to Tokens',INT)
%      CALL PUTCH (10,INT)
%      CALL START_DATA (M,1,INT)
%      CALL PUTINT (TOKEN$COUNT,1,INT)
%      CALL PUTLIN_V ('/ 	# Number of Tokens (Rel 0)',INT)
%      CALL PUTCH (10,INT)
%      CALL START_DATA (M,1,INT)
%      CALL PUTINT (ISIZ_TOKEN,1,INT)
%      CALL PUTLIN_V ('/ 	# Size of each Token',INT)
%      CALL PUTCH (10,INT)
%      CALL START_DATA (M,1,INT)
%      CALL PUTINT (MIN+1,1,INT)
%      CALL PUTLIN_V ('/ 	# Pointer to Order Nodes',INT)
%      CALL PUTCH (10,INT)
%      CALL START_DATA (M,1,INT)
%      CALL PUTINT (NODE$COUNT,1,INT)
%      CALL PUTLIN_V ('/ 	# Number of Order Nodes',INT)
%      CALL PUTCH (10,INT)
%      CALL START_DATA (M,1,INT)
%      CALL PUTINT (ISIZ_NODE,1,INT)
%      CALL PUTLIN_V ('/ 	# Size of each Order Node',INT)
%      CALL PUTCH (10,INT)
%      CALL START_DATA (M,1,INT)
       CALL PUTLIN_V ('2%',INT)
%      CALL PUTBIN (INCLUDEDFLAG,MODE_BITS -1,INT)
%      CALL PUTLIN_V ('/ 	# Order Groups Included',INT)
%      CALL PUTCH (10,INT)
%      M =INFO
%      IOFF =(TOKEN$COUNT+1) *ISIZ_TOKEN +M +1
%      RETURN
%      END
%      SUBROUTINE START_DATA (M,LEN,INT)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      M=M+1
%      IF(.NOT.(LEN.EQ.1))GOTO 23125
%      CALL PUTLIN_V ('Data  parse$table[',INT)
%      CALL PUTINT (M,3,INT)
%      CALL PUTLIN_V (']          	/',INT)
%      GOTO 23126
%23125 CONTINUE
%      CALL PUTLIN_V ('Data (parse$table[m],m=',INT)
%      CALL PUTINT (M,3,INT)
%      CALL PUTCH (44,INT)
%      M=M+LEN-1
%      CALL PUTINT (M,3,INT)
%      CALL PUTLIN_V (') 	/',INT)
%23126 CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTDATA2 (INT,M,OFF)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER MODE_BITS
%      INTEGER MODE_BYTES
%      COMMON /PG_MODE / MODE_BITS,MODE_BYTES
%      INTEGER OFF
%      CALL PUTCH (12,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTLIN_V ('#			Token Array',INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      TOKEN$INDEX=0
%23127 IF(.NOT.(TOKEN$INDEX.LE.TOKEN$COUNT))GOTO 23129
%      CALL START_DATA (M,2,INT)
%      CALL PUTCH (36,INT)
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.1))GOTO 23130
%      CALL PUTLIN_V ('Alpha$Test  ',INT)
%      GOTO 23131
%23130 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.4))GOTO 23132
%      CALL PUTLIN_V ('Keyword$Test',INT)
%      GOTO 23133
%23132 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.2))GOTO 23134
%      IF(.NOT.( TOKEN$ARRAY(3,TOKEN$INDEX).EQ.0.AND. TOKEN$ARRAY(4,TOKEN
%     *$INDEX).EQ.9999999))GOTO 23136
%      CALL PUTLIN_V ('Number$Test ',INT)
%      GOTO 23137
%23136 CONTINUE
%      CALL PUTLIN_V ('Special$Test',INT)
%23137 CONTINUE
%      GOTO 23135
%23134 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.5))GOTO 23138
%      CALL PUTLIN_V ('Special$Test',INT)
%      GOTO 23139
%23138 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.3))GOTO 23140
%      IF(.NOT.(TOKEN$ARRAY(3,TOKEN$INDEX).EQ.0))GOTO 23142
%      CALL PUTLIN_V ('Alpha$Test  ',INT)
%      GOTO 23143
%23142 CONTINUE
%      CALL PUTLIN_V ('Special$Test',INT)
%23143 CONTINUE
%      GOTO 23141
%23140 CONTINUE
%      CALL PUTINT ( TOKEN$ARRAY(1,TOKEN$INDEX),12,INT)
%23141 CONTINUE
%23139 CONTINUE
%23135 CONTINUE
%23133 CONTINUE
%23131 CONTINUE
%      CALL PUTCH (44,INT)
%      CALL PUTINT ( TOKEN$ARRAY(2,TOKEN$INDEX)/MODE_BYTES+OFF,4,INT)
%      CALL PUTLIN_V ('/	#',INT)
%      CALL PUTINT (TOKEN$INDEX,4,INT)
%      CALL PUTCH (32,INT)
%      CALL PUTCH (32,INT)
%      CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),INT)
%      CALL PUTCH (10,INT)
%23128 TOKEN$INDEX=TOKEN$INDEX+1
%      GOTO 23127
%23129 CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTDATA3 (INT,M,IOFF)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER MODE_BITS
%      INTEGER MODE_BYTES
%      COMMON /PG_MODE / MODE_BITS,MODE_BYTES
%      LOGICAL*1 C1,C2
%      INTEGER KK,NN,JJ,COL
%      CALL PUTCH (12,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTLIN_V ('#			Text Array',INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      I=1
%23144 IF(.NOT.(I.LT.TEXT$COUNT))GOTO 23146
%      LEN =LENGTH(TEXT$ARRAY(I))+1
%      IF(.NOT.(LEN.EQ.1))GOTO 23147
%      GOTO 23145
%23147 CONTINUE
%      LEN2 =(LEN+MODE_BYTES-1)/MODE_BYTES
%      CALL START_DATA (M,LEN2,INT)
%      CNT =0
%      COL =0
%      JJ =LEN -1
%      NN =MODE_BYTES
%      K=1
%23149 IF(.NOT.(K.LE.LEN2))GOTO 23151
%      IF(.NOT.(K.EQ.LEN2))GOTO 23152
%      NN =JJ
%      GOTO 23153
%23152 CONTINUE
%      CALL PUTCH (34,INT)
%      KK =0
%23154 IF(.NOT.(KK.LT.NN))GOTO 23156
%      C1 =TEXT$ARRAY(I+(K-1)*MODE_BYTES+KK)
%      CALL PUTCH (C1,INT)
%      JJ =JJ -1
%23155 KK=KK+1
%      GOTO 23154
%23156 CONTINUE
%      CALL PUTCH (34,INT)
%      COL =COL +2 +NN
%23153 CONTINUE
%      IF(.NOT.(K.LT.LEN2))GOTO 23157
%      CALL PUTCH (44,INT)
%      COL =COL +1
%23157 CONTINUE
%      IF(.NOT.(K.EQ.LEN2))GOTO 23159
       CALL PUTLIN_V ('16%',INT)
%      CALL PUTHEX (TEXT$ARRAY(I+(K-1)*MODE_BYTES),NN*2+1,INT)
%      COL =COL +3 +NN*2 +1
%23159 CONTINUE
%      CNT =CNT +1
%23150 K=K+1
%      GOTO 23149
%23151 CONTINUE
%      CALL PUTCH (47,INT)
%      COL =COL +1
%      IF(.NOT.(CNT.LE.8))GOTO 23161
%      LIM =(MODE_BYTES+3) *8
%      GOTO 23162
%23161 CONTINUE
%      LIM =(MODE_BYTES+3) *12
%23162 CONTINUE
%      J=COL
%23163 IF(.NOT.(J.LT.LIM))GOTO 23165
%      CALL PUTCH (32,INT)
%23164 J=J+1
%      GOTO 23163
%23165 CONTINUE
%      CALL PUTLIN_V ('	# ',INT)
	   call putch (BLANK, int)
%      CALL PUTLIN (TEXT$ARRAY(I),INT)
%      CALL PUTCH (10,INT)
%23145 I=I+LEN
%      GOTO 23144
%23146 CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTDATA4 (INT,M,IOFF)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER MODE_BITS
%      INTEGER MODE_BYTES
%      COMMON /PG_MODE / MODE_BITS,MODE_BYTES
%      CALL PUTCH (12,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      CALL PUTLIN_V ('#			Order Nodes Array',INT)
%      CALL PUTCH (10,INT)
%      CALL PUTCH (10,INT)
%      NODE$INDEX=1
%23166 IF(.NOT.(NODE$INDEX.LE.NODE$COUNT))GOTO 23168
%      CALL PUTLIN_V ('$PG_ALL ',INT)
		call putch (BLANK, int)
%      CALL START_DATA (M,7,INT)
%      CALL PUTINT (NODE$ARRAY(1,NODE$INDEX),3,INT)
%      CALL PUTCH (44,INT)
%      CALL PUTINT ( NODE$ARRAY(2,NODE$INDEX),3,INT)
%      CALL PUTCH (44,INT)
%      IF(.NOT.( NODE$ARRAY(3,NODE$INDEX).NE.0))GOTO 23169
%      K = NODE$ARRAY(3,NODE$INDEX)/MODE_BYTES+IOFF
%      GOTO 23170
%23169 CONTINUE
%      K =0
%23170 CONTINUE
%      CALL PUTINT (K,3,INT)
%      CALL PUTCH (44,INT)
%      CALL PUTINT (NODE$ARRAY(4,NODE$INDEX),3,INT)
%      CALL PUTCH (44,INT)
%      CALL PUTINT ( NODE$ARRAY(5,NODE$INDEX),3,INT)
       CALL PUTLIN_V (',2%',INT)
%      CALL PUTBIN ( NODE$ARRAY(6,NODE$INDEX),MODE_BITS-1,INT)
       CALL PUTLIN_V (',2%',INT)
%      CALL PUTBIN (NODE$ARRAY(7,NODE$INDEX),MODE_BITS-1,INT)
%      CALL PUTLIN_V ('/	#',INT)
%      CALL PUTINT (NODE$INDEX,4,INT)
%      TOKEN$INDEX = NODE$ARRAY(2,NODE$INDEX)
%      CALL PUTCH (41,INT)
%      CALL PUTCH (32,INT)
%      CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),INT)
%      IF(.NOT.( NODE$ARRAY(3,NODE$INDEX).NE.0))GOTO 23171
%      CALL PUTCH (32,INT)
%      CALL PUTLIN ( TEXT$ARRAY( NODE$ARRAY(3,NODE$INDEX)),INT)
%23171 CONTINUE
%      CALL PUTCH (10,INT)
%23167 NODE$INDEX=NODE$INDEX+1
%      GOTO 23166
%23168 CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTSPC (INT)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER MODE_BITS
%      INTEGER MODE_BYTES
%      COMMON /PG_MODE / MODE_BITS,MODE_BYTES
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('include ''$PARSE_TOOLS/parser.inc''' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('include ''$PARSE_TOOLS/parser' ,INT)
%      CALL PUTINT (MODE_BITS,2 ,INT)
%      CALL PUTLIN_V ('.int''' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V (
%     *'subroutine parse_test_special (stat,token$index)' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('implicit none' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('integer stat, token$index' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('     ' ,INT)
		call putch (BLANK, int)
		call putch (BLANK, int)
		call putch (BLANK, int)
		call putch (BLANK, int)
		call putch (BLANK, int)
%      TOKEN$INDEX=0
%23173 IF(.NOT.(TOKEN$INDEX.LE.TOKEN$COUNT))GOTO 23175
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.1.OR. TOKEN$ARRAY(1,TOKEN$
%     *INDEX).EQ.4))GOTO 23176
%      GOTO 23174
%23176 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.2))GOTO 23178
%      IF(.NOT.( TOKEN$ARRAY(3,TOKEN$INDEX).EQ.0.AND. TOKEN$ARRAY(4,TOKEN
%     *$INDEX).EQ.9999999))GOTO 23180
%      GOTO 23174
%23180 CONTINUE
%      GOTO 23179
%23178 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.5))GOTO 23182
%      CONTINUE
%      GOTO 23183
%23182 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).NE.3))GOTO 23184
%      GOTO 23174
%23184 CONTINUE
%23183 CONTINUE
%23179 CONTINUE
%23177 CONTINUE
%      CALL PUTLIN_V ('if (token$index ==' ,INT)
%      CALL PUTINT (TOKEN$INDEX ,3,INT)
%      CALL PUTLIN_V (') call parse_test_' ,INT)
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.2))GOTO 23186
%      CALL PUTLIN_V ('range (stat,' ,INT)
%      CALL PUTINT ( TOKEN$ARRAY(3,TOKEN$INDEX),1,INT)
%      CALL PUTLIN_V (',' ,INT)
%      CALL PUTINT ( TOKEN$ARRAY(4,TOKEN$INDEX),1,INT)
%      GOTO 23187
%23186 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.5))GOTO 23188
%      CALL PUTLIN_V ('real (stat,' ,INT)
%      CALL PUTINT ( TOKEN$ARRAY(3,TOKEN$INDEX),1,INT)
%      CALL PUTLIN_V (',' ,INT)
%      CALL PUTINT ( TOKEN$ARRAY(4,TOKEN$INDEX),1,INT)
%      GOTO 23189
%23188 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.3.AND.TOKEN$ARRAY(3,TOKEN$
%     *INDEX).NE.0))GOTO 23190
%      IF(.NOT.(LENGTH( HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX))).EQ.1.AND.
%     * HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)).EQ.42))GOTO 23192
%      CALL PUTLIN_V ('alpha (stat' ,INT)
%      GOTO 23193
%23192 CONTINUE
%      IF(.NOT.( HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)).EQ.42))GOTO 23194
%      CALL PUTLIN (HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)+1) ,INT)
%      GOTO 23195
%23194 CONTINUE
%      CALL PUTLIN ( HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)),INT)
%23195 CONTINUE
%      CALL PUTLIN_V (' (stat' ,INT)
%23193 CONTINUE
%      GOTO 23191
%23190 CONTINUE
%      CALL PUTLIN_V ('alpha (stat' ,INT)
%23191 CONTINUE
%23189 CONTINUE
%23187 CONTINUE
%      CALL PUTLIN_V (')	# ' ,INT)
		call putch (BLANK, int)
%      CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('else ' ,INT)
		call putch (BLANK, int)
%23174 TOKEN$INDEX=TOKEN$INDEX+1
%      GOTO 23173
%23175 CONTINUE
%      CALL PUTLIN_V ('	call parse_test_alpha (stat)' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('return' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('end' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('integer function parse_space (token$index)' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('implicit none' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('integer  token$index' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('pr_common' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
#      CALL PUTLIN_V ('     ' ,INT)
		call putch (BLANK, int)
		call putch (BLANK, int)
		call putch (BLANK, int)
		call putch (BLANK, int)
		call putch (BLANK, int)
%      TOKEN$INDEX=0
%23196 IF(.NOT.(TOKEN$INDEX.LE.TOKEN$COUNT))GOTO 23198
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).NE.3))GOTO 23199
%      GOTO 23197
%23199 CONTINUE
%      IF(.NOT.( HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)).NE.42))GOTO 23201
%      GOTO 23197
%23201 CONTINUE
%      CALL PUTLIN_V ('if (token$index ==' ,INT)
%      CALL PUTINT (TOKEN$INDEX ,3,INT)
%      CALL PUTLIN_V (') parse_space = $TRUE    # ' ,INT)
		call putch (BLANK, int)
%      CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('else ' ,INT)
		call putch (BLANK, int)
%23197 TOKEN$INDEX=TOKEN$INDEX+1
%      GOTO 23196
%23198 CONTINUE
%      CALL PUTLIN_V ('parse_space = $FALSE' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('return' ,INT)
%      CALL PUTCH(10,INT)
%      CALL PUTLIN_V ('end' ,INT)
%      CALL PUTCH(10,INT)
%      RETURN
%      END
%      SUBROUTINE DUMP
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      CALL DUMPTOKEN
%      CALL PUTC (12)
%      CALL DUMPTEXT
%      CALL PUTC (12)
%      CALL DUMPNODES
%      CALL PUTC (12)
%      CALL DUMPTREE
%      RETURN
%      END
%      SUBROUTINE DUMPNODES
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      CALL PUTC (10)
%      CALL PUTC (10)
%      CALL PUTLIN_V ('Node Array',2)
%      CALL PUTC (10)
%      CALL PUTC (10)
       CALL PUTLIN_V (' Node# Ord#  Tok  Prmt  Sib Child         Group  NotFor',STDOUT)
%      CALL PUTC (10)
%      NODE$INDEX=1
%23203 IF(.NOT.(NODE$INDEX.LE.NODE$COUNT))GOTO 23205
%      CALL PUTDEC (NODE$INDEX,6)
%      CALL PUTDEC (NODE$ARRAY(1,NODE$INDEX),5)
%      CALL PUTDEC ( NODE$ARRAY(2,NODE$INDEX),5)
%      CALL PUTDEC ( NODE$ARRAY(3,NODE$INDEX),6)
%      CALL PUTDEC (NODE$ARRAY(4,NODE$INDEX),5)
%      CALL PUTDEC ( NODE$ARRAY(5,NODE$INDEX),6)
%      CALL PUTC (32)
%      CALL PUTC (32)
       CALL PUTBIN ( NODE$ARRAY(6,NODE$INDEX),12,STDOUT)
%      CALL PUTC (32)
%      CALL PUTC (32)
       CALL PUTBIN (NODE$ARRAY(7,NODE$INDEX),12,STDOUT)
%      TOKEN$INDEX = NODE$ARRAY(2,NODE$INDEX)
%      CALL PUTC (32)
       CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),STDOUT)
%      IF(.NOT.( NODE$ARRAY(3,NODE$INDEX).NE.0))GOTO 23206
%      CALL PUTC (32)
       CALL PUTLIN ( TEXT$ARRAY( NODE$ARRAY(3,NODE$INDEX)),STDOUT)
%23206 CONTINUE
%      CALL PUTC (10)
%23204 NODE$INDEX=NODE$INDEX+1
%      GOTO 23203
%23205 CONTINUE
%      RETURN
%      END
%      SUBROUTINE DUMPTOKEN
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      CALL PUTC (10)
%      CALL PUTC (10)
       CALL PUTLIN_V ('Token Array',STDOUT)
%      CALL PUTC (10)
%      CALL PUTC (10)
       CALL PUTLIN_V ('  Token#  type     Lo-Hi             Indx, Text',STDOUT)
%      CALL PUTC (10)
%      TOKEN$INDEX=0
%23208 IF(.NOT.(TOKEN$INDEX.LE.TOKEN$COUNT))GOTO 23210
%      CALL PUTDEC (TOKEN$INDEX,8)
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.1))GOTO 23211
%      CALL PUTLIN_V ('  Alpha  ',2)
%      GOTO 23212
%23211 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.2))GOTO 23213
       CALL PUTLIN_V ('  Number ',STDOUT)
		call putch (BLANK, STDOUT)
%      GOTO 23214
%23213 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.5))GOTO 23215
       CALL PUTLIN_V ('  Real   ',STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
%      GOTO 23216
%23215 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.3))GOTO 23217
       CALL PUTLIN_V ('  Special',STDOUT)
%      GOTO 23218
%23217 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.4))GOTO 23219
       CALL PUTLIN_V ('  Keyword',STDOUT)
%      GOTO 23220
%23219 CONTINUE
%      CALL PUTDEC ( TOKEN$ARRAY(1,TOKEN$INDEX),8)
%23220 CONTINUE
%23218 CONTINUE
%23216 CONTINUE
%23214 CONTINUE
%23212 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.2))GOTO 23221
%      CALL PUTDEC ( TOKEN$ARRAY(3,TOKEN$INDEX),4)
%      CALL PUTDEC ( TOKEN$ARRAY(4,TOKEN$INDEX),8)
       CALL PUTLIN_V ('    ',STDOUT)
%      GOTO 23222
%23221 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.5))GOTO 23223
%      CALL PUTDEC ( TOKEN$ARRAY(3,TOKEN$INDEX),4)
%      CALL PUTDEC ( TOKEN$ARRAY(4,TOKEN$INDEX),8)
       CALL PUTLIN_V ('    ',STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
%      GOTO 23224
%23223 CONTINUE
%      IF(.NOT.( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.3.AND.TOKEN$ARRAY(3,TOKEN$
%     *INDEX).NE.0))GOTO 23225
%      CALL PUTDEC (TOKEN$ARRAY(3,TOKEN$INDEX),4)
%      CALL PUTC (32)
       CALL PUTLIN ( HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)),STDOUT)
%      K =LENGTH( HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)))
%23227 IF(.NOT.(K.LT.11))GOTO 23229
%      CALL PUTC (32)
%23228 K=K+1
%      GOTO 23227
%23229 CONTINUE
%      GOTO 23226
%23225 CONTINUE
       CALL PUTLIN_V ('                ',STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
%23226 CONTINUE
%23224 CONTINUE
%23222 CONTINUE
%      CALL PUTDEC ( TOKEN$ARRAY(2,TOKEN$INDEX),8)
%      CALL PUTC (32)
%      CALL PUTC (32)
       CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),STDOUT)
%      CALL PUTC (10)
%23209 TOKEN$INDEX=TOKEN$INDEX+1
%      GOTO 23208
%23210 CONTINUE
%      RETURN
%      END
%      SUBROUTINE DUMPTEXT
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      CALL PUTC (10)
%      CALL PUTC (10)
       CALL PUTLIN_V ('Text Array',STDOUT)
%      CALL PUTC (10)
%      I=1
%23230 IF(.NOT.(I.LT.TEXT$COUNT))GOTO 23232
%      LEN =LENGTH(TEXT$ARRAY(I))
%      IF(.NOT.(LEN.EQ.0))GOTO 23233
%      GOTO 23231
%23233 CONTINUE
%      CALL PUTDEC (I,8)
       CALL PUTLIN_V (' for ',STDOUT)
		call putch (BLANK, STDOUT)
%      CALL PUTDEC (LEN,2)
       CALL PUTLIN_V ('  ''',STDOUT)
       CALL PUTLIN (TEXT$ARRAY(I),STDOUT)
%      CALL PUTC (39)
%      CALL PUTC (10)
%23231 I=I+LEN+1
%      GOTO 23230
%23232 CONTINUE
%      CALL PUTC (10)
%      CALL PUTC (10)
%      RETURN
%      END
%      SUBROUTINE DUMPTREE
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER STK_PNT,STACK(50)
%      CALL PUTC (10)
%      CALL PUTC (10)
       CALL PUTLIN_V ('Order Tree',STDOUT)
%      CALL PUTC (10)
%      CALL PUTC (10)
%      STK_PNT =0
%      IN =0
%      NODE$INDEX=1
%23235 CONTINUE
%      K=1
%23238 IF(.NOT.(K.LE.IN))GOTO 23240
       CALL PUTLIN_V('    ',STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
		call putch (BLANK, STDOUT)
%23239 K=K+1
%      GOTO 23238
%23240 CONTINUE
%      TOKEN$INDEX = NODE$ARRAY(2,NODE$INDEX)
       CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),STDOUT)
%      IF(.NOT.( NODE$ARRAY(3,NODE$INDEX).NE.0))GOTO 23241
%      CALL PUTC (32)
       CALL PUTLIN ( TEXT$ARRAY( NODE$ARRAY(3,NODE$INDEX)),STDOUT)
%23241 CONTINUE
%      CALL PUTC (10)
%      IF(.NOT.( NODE$ARRAY(5,NODE$INDEX).NE.0))GOTO 23243
%      IN =IN +1
%      STK_PNT =STK_PNT +1
%      STACK(STK_PNT) =NODE$INDEX
%      NODE$INDEX = NODE$ARRAY(5,NODE$INDEX)
%      GOTO 23236
%23243 CONTINUE
%      IF(.NOT.(NODE$ARRAY(4,NODE$INDEX).NE.0))GOTO 23245
%      NODE$INDEX =NODE$ARRAY(4,NODE$INDEX)
%      GOTO 23236
%23245 CONTINUE
%23247 IF(.NOT.(STK_PNT.NE.0))GOTO 23248
%      NODE$INDEX =STACK(STK_PNT)
%      STK_PNT =STK_PNT -1
%      IN =IN -1
%      IF(.NOT.(NODE$ARRAY(4,NODE$INDEX).EQ.0))GOTO 23249
%      GOTO 23247
%23249 CONTINUE
%      NODE$INDEX =NODE$ARRAY(4,NODE$INDEX)
%      GOTO 23236
%23248 CONTINUE
%      GOTO 23237
%23236 GOTO 23235
%23237 CONTINUE
%      RETURN
%      END
%      SUBROUTINE EATCOMMAND (LINE)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 LINE(1024),TOKEN(1024),CHAR
%      INTEGER GETTOK
%      IF(.NOT.(LINE(1).NE.123))GOTO 23251
%      CALL PUTLIN_V ('Syntax Error (missing left Brace), on: ', ERROUT)
		call putch (BLANK, ERROUT)
%      CALL ERROR (LINE)
%23251 CONTINUE
%      CUR$TOKENINDX =0
%      CUR$ORDERNUMBER =0
%      CUR$PROMPTINDX =0
%      CUR$SIBLINGINDX =0
%      CUR$CHILDINDX =0
%      CUR$GROUPFLAGS =0
%      CUR$NOTFORFLAGS =0
%      I =2
%      CALL GETORDNUM (CUR$ORDERNUMBER,LINE,I)
%      CALL GETGRPCD (CUR$GROUPFLAGS,LINE,I)
%      CALL GETNOTFOR (CUR$NOTFORFLAGS,LINE,I)
%      K =CUR$GROUPFLAGS .AND.EXTRACTFLAG
%      IF(.NOT.(K.EQ.0))GOTO 23253
%      RETURN
%23253 CONTINUE
%      NODE$INDEX =0
%      CUR$NODE =0
%      NODE_PARENT =0
%      NODE_FIRST =1
%      ITOK =GETTOK(TOKEN,LINE,I)
%23255 CONTINUE
%      IF(.NOT.(ITOK.LT.0))GOTO 23258
%      IF(.NOT.(TOKEN(1).EQ.123))GOTO 23260
%      K =1
%      CALL GETNOTFOR (CUR$NOTFORFLAGS,TOKEN,K)
%      GOTO 23261
%23260 CONTINUE
%      CALL PUTLIN_V ('Syntax Error with the Term: ''',ERROUT)
%      CALL PUTLIN (TOKEN,ERROUT)
%      CALL REMARK_V ('''.  The line was.....')
%      CALL ERROR (LINE)
%23261 CONTINUE
%      ITOK =GETTOK(TOKEN,LINE,I)
%      GOTO 23256
%23258 CONTINUE
%      CALL GETNODE (ITOK,NODE_FIRST,NODE_PARENT,NODE$INDEX)
%      IF(.NOT.(ITOK.EQ.0))GOTO 23262
%      GOTO 23257
%23262 CONTINUE
%      NODE_PARENT =NODE$INDEX
%      NODE_FIRST = NODE$ARRAY(5,NODE$INDEX)
%      ITOK =GETTOK(TOKEN,LINE,I)
%      IF(.NOT.(ITOK.GE.0))GOTO 23264
%      GOTO 23256
%23264 CONTINUE
%      IF(.NOT.(TOKEN(1).EQ.40))GOTO 23266
%      IF(.NOT.( NODE$ARRAY(3,NODE$INDEX).NE.0))GOTO 23268
%      CONTINUE
%      GOTO 23269
%23268 CONTINUE
%       NODE$ARRAY(3,NODE$INDEX)=INSTALLTEXT(TOKEN)
%23269 CONTINUE
%      ITOK =GETTOK(TOKEN,LINE,I)
%23266 CONTINUE
%23256 GOTO 23255
%23257 CONTINUE
%      RETURN
%      END
%      SUBROUTINE GETORDNUM (IVAL,LINE,I)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER IVAL,I
%      LOGICAL*1 CHAR,LINE(1024)
%23270 IF(.NOT.(LINE(I).NE.44))GOTO 23272
%      CHAR =LINE(I)
%      IF(.NOT.(CHAR.EQ.125.OR.CHAR.EQ.0))GOTO 23273
%      GOTO 23272
%23273 CONTINUE
%      IF(.NOT.(CHAR.LT.48.OR.CHAR.GT.57))GOTO 23275
%      GOTO 23271
%23275 CONTINUE
%      IVAL =IVAL *10 +CHAR -48
%23271 I=I+1
%      GOTO 23270
%23272 CONTINUE
%      IF(.NOT.(LINE(I).EQ.44))GOTO 23277
%      I=I+1
%23277 CONTINUE
%      RETURN
%      END
%      SUBROUTINE GETGRPCD (IVAL,LINE,I)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER WORK,IVAL,I
%      LOGICAL*1 CHAR,LINE(1024),CLOWER
%      WORK =IVAL
%23279 IF(.NOT.(LINE(I).NE.44))GOTO 23281
%      CHAR =LINE(I)
%      IF(.NOT.(CHAR.EQ.125.OR.CHAR.EQ.0))GOTO 23282
%      GOTO 23281
%23282 CONTINUE
%      CHAR =CLOWER(CHAR)
%      IF(.NOT.(CHAR.LT.97.OR.CHAR.GT.122))GOTO 23284
%      GOTO 23280
%23284 CONTINUE
%      LBIT =CHAR -97
%      WORK=IOR(IAND(WORK,NOT(ISHFT(1,LBIT))),ISHFT(IAND(1,1),LBIT))
%23280 I=I+1
%      GOTO 23279
%23281 CONTINUE
%      IF(.NOT.(LINE(I).EQ.44))GOTO 23286
%      I=I+1
%23286 CONTINUE
%      IVAL =WORK
%      INCLUDEDFLAG =INCLUDEDFLAG .OR.(WORK .AND.EXTRACTFLAG)
%      RETURN
%      END
%      SUBROUTINE GETNOTFOR (IVAL,LINE,I)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER WORK,IVAL,I
%      LOGICAL*1 CHAR,LINE(1024),CLOWER
%      WORK =IVAL
%23288 IF(.NOT.(LINE(I).NE.125))GOTO 23290
%      CHAR =LINE(I)
%      IF(.NOT.(CHAR.EQ.125.OR.CHAR.EQ.0))GOTO 23291
%      GOTO 23290
%23291 CONTINUE
%      CHAR =CLOWER(CHAR)
%      IF(.NOT.(CHAR.LT.97.OR.CHAR.GT.122))GOTO 23293
%      GOTO 23289
%23293 CONTINUE
%      LBIT =CHAR -97
%      WORK=IOR(IAND(WORK,NOT(ISHFT(1,LBIT))),ISHFT(IAND(1,1),LBIT))
%23289 I=I+1
%      GOTO 23288
%23290 CONTINUE
%      IF(.NOT.(LINE(I).EQ.125))GOTO 23295
%      I=I+1
%23295 CONTINUE
%      IVAL =WORK
%      RETURN
%      END
%      SUBROUTINE GETNODE (ITOK,NODE_FIRST,NODE_PARENT,NODE$INDEX)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      NODE_PRIOR =0
%      NODE2$INDEX =NODE_FIRST
%23297 IF(.NOT.(NODE_FIRST.NE.0))GOTO 23299
%      IF(.NOT.( NODE$ARRAY(2,NODE2$INDEX).EQ.ITOK))GOTO 23300
%      NODE$INDEX =NODE2$INDEX
%      NODE$ARRAY(6,NODE$INDEX)= NODE$ARRAY(6,NODE$INDEX).OR. CUR$GROUPFL
%     *AGS
%      NODE$ARRAY(7,NODE$INDEX)=NODE$ARRAY(7,NODE$INDEX).AND. CUR$NOTFORF
%     *LAGS
%      IF(.NOT.(NODE$ARRAY(1,NODE$INDEX).EQ.0))GOTO 23302
%      NODE$ARRAY(1,NODE$INDEX)=CUR$ORDERNUMBER
%23302 CONTINUE
%      RETURN
%23300 CONTINUE
%      IF(.NOT.(ICOMP_TOK( NODE$ARRAY(2,NODE2$INDEX),ITOK).GT.0))GOTO 233
%     *04
%      GOTO 23299
%23304 CONTINUE
%      NODE_PRIOR =NODE2$INDEX
%      IF(.NOT.(NODE$ARRAY(4,NODE2$INDEX).EQ.0))GOTO 23306
%      GOTO 23299
%23306 CONTINUE
%      NODE2$INDEX =NODE$ARRAY(4,NODE2$INDEX)
%23298 GOTO 23297
%23299 CONTINUE
%      IF(.NOT.(NODE$COUNT.GE.80000))GOTO 23308
%      CALL ERROR_V ('Node Array Overflow.')
%23308 CONTINUE
%      NODE$COUNT =NODE$COUNT +1
%      NODE$INDEX =NODE$COUNT
%      NODE3$INDEX =NODE_PRIOR
%      NODE$ARRAY(2,NODE$INDEX)=ITOK
%      NODE$ARRAY(1,NODE$INDEX)=CUR$ORDERNUMBER
%      NODE$ARRAY(3,NODE$INDEX)=0
%      NODE$ARRAY(4,NODE$INDEX)=0
%      NODE$ARRAY(5,NODE$INDEX)=0
%      NODE$ARRAY(6,NODE$INDEX)=CUR$GROUPFLAGS
%      NODE$ARRAY(7,NODE$INDEX)=CUR$NOTFORFLAGS
%      IF(.NOT.(NODE_PRIOR.EQ.0))GOTO 23310
%      IF(.NOT.(NODE_PARENT.EQ.0))GOTO 23312
%      CALL ERROR_V ('Impossible Error: Add Under Node 0')
%23312 CONTINUE
%      NODE3$INDEX =NODE_PARENT
%      NODE$ARRAY(4,NODE$INDEX)= NODE$ARRAY(5,NODE3$INDEX)
%      NODE$ARRAY(5,NODE3$INDEX)=NODE$INDEX
%      GOTO 23311
%23310 CONTINUE
%      IF(.NOT.(ICOMP_TOK(ITOK, NODE$ARRAY(2,NODE2$INDEX)).LT.0))GOTO 233
%     *14
%      NODE$ARRAY(4,NODE3$INDEX)=NODE$INDEX
%      NODE$ARRAY(4,NODE$INDEX)=NODE2$INDEX
%      GOTO 23315
%23314 CONTINUE
%      IF(.NOT.(NODE$ARRAY(4,NODE2$INDEX).EQ.0))GOTO 23316
%      NODE$ARRAY(4,NODE2$INDEX)=NODE$INDEX
%      GOTO 23317
%23316 CONTINUE
%      CALL ERROR_V ('Impossible error in adding node to chain.')
%23317 CONTINUE
%23315 CONTINUE
%23311 CONTINUE
%      RETURN
%      END
%      FUNCTION ISTOKEN (TOKEN)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 TOKEN(1024)
%      INTEGER EQUAL
%      IF(.NOT.(TOKEN(1).EQ.0))GOTO 23318
%      ISTOKEN=(0)
%      RETURN
%23318 CONTINUE
%      TOKEN$INDEX=1
%23320 IF(.NOT.(TOKEN$INDEX.LE.TOKEN$COUNT))GOTO 23322
%      IF(.NOT.(EQUAL(TOKEN, TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX))).EQ.
%     *1))GOTO 23323
%      ISTOKEN=(TOKEN$INDEX)
%      RETURN
%23323 CONTINUE
%23321 TOKEN$INDEX=TOKEN$INDEX+1
%      GOTO 23320
%23322 CONTINUE
%      ISTOKEN=(-1)
%      RETURN
%      END
%      INTEGER FUNCTION GETTOK (TOKEN,LINE,I)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      LOGICAL*1 LINE(1024),TOKEN(1024),CHAR
%      INTEGER I,J
%23325 IF(.NOT.(LINE(I).EQ.32))GOTO 23327
%23326 I=I+1
%      GOTO 23325
%23327 CONTINUE
%      CHAR =LINE(I)
%      J=1
%23328 CONTINUE
%      TOKEN(J) =LINE(I)
%      I=I+1
%      J=J+1
%      IF(.NOT.(LINE(I-1).EQ.0))GOTO 23331
%      GOTO 23330
%23331 CONTINUE
%      IF(.NOT.(TOKEN(1).EQ.40))GOTO 23333
%      IF(.NOT.(TOKEN(J-1).EQ.41))GOTO 23335
%      GOTO 23330
%23335 CONTINUE
%      GOTO 23334
%23333 CONTINUE
%      IF(.NOT.(TOKEN(1).EQ.91))GOTO 23337
%      IF(.NOT.(TOKEN(J-1).EQ.93))GOTO 23339
%      GOTO 23330
%23339 CONTINUE
%      GOTO 23338
%23337 CONTINUE
%      IF(.NOT.(LINE(I).EQ.32))GOTO 23341
%      GOTO 23330
%23341 CONTINUE
%23338 CONTINUE
%23334 CONTINUE
%23332 CONTINUE
%23329 GOTO 23328
%23330 CONTINUE
%      TOKEN(J) =0
%      GETTOK=(ISTOKEN(TOKEN))
%      RETURN
%      END
%      INTEGER FUNCTION ICOMP_TOK (TOK1,TOK2)
%      INTEGER FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,EXTRACTFL
%     *AG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT,HAND$COU
%     *NT,NODE$ARRAY(7,80000 ),TOKEN$ARRAY(4,0:2000),CUR$NODE,CUR$ORDERNU
%     *MBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,CU
%     *R$GROUPFLAGS,CUR$NOTFORFLAGS
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$SYNTAX,FD$INCLUDE,FD$SPECIAL,FD$DATA,
%     *EXTRACTFLAG,INCLUDEDFLAG,EOFFLAG,NODE$COUNT,TOKEN$COUNT,TEXT$COUNT
%     *,HAND$COUNT,NODE$ARRAY,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY,CUR$ORDER
%     *NUMBER,CUR$TOKENINDX,CUR$PROMPTINDX,CUR$SIBLINGINDX,CUR$CHILDINDX,
%     *CUR$GROUPFLAGS,CUR$NOTFORFLAGS,CUR$NODE
%      INTEGER NODE$INDEX,TOKEN$INDEX
%      INTEGER TOK1,TOK2,PNT1,PNT2,COMP
%      IF(.NOT.(TOK1.EQ.0.AND.TOK2.EQ.0))GOTO 23343
%      ICOMP_TOK=(0)
%      RETURN
%23343 CONTINUE
%      IF(.NOT.(TOK1.EQ.0))GOTO 23345
%      ICOMP_TOK=(-1)
%      RETURN
%23345 CONTINUE
%      IF(.NOT.(TOK2.EQ.0))GOTO 23347
%      ICOMP_TOK=(+1)
%      RETURN
%23347 CONTINUE
%23346 CONTINUE
%23344 CONTINUE
%      TOKEN$INDEX =TOK1
%      PNT1 = TOKEN$ARRAY(2,TOKEN$INDEX)
%      TOKEN$INDEX =TOK2
%      PNT2 = TOKEN$ARRAY(2,TOKEN$INDEX)
%      IRESULT =COMP(TEXT$ARRAY,PNT1,TEXT$ARRAY,PNT2)
%      I_SWITCH_1=(IRESULT)
%      GOTO 23349
%23351 CONTINUE
%      ICOMP_TOK =-1
%      GOTO 23350
%23352 CONTINUE
%      ICOMP_TOK =0
%      GOTO 23350
%23353 CONTINUE
%      ICOMP_TOK =+1
%      GOTO 23350
%23349 CONTINUE
%      I_SWITCH_1=I_SWITCH_1-59
%      IF(I_SWITCH_1.LT.1.OR.I_SWITCH_1.GT.3)GOTO 23350
%      GOTO(23351,23352,23353),I_SWITCH_1
%23350 CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTBIN (N,W,FD)
%      INTEGER N,W,FD,K
%      K=N
%      I=W-1
%23354 IF(.NOT.(I.GE.0))GOTO 23356
%      CALL PUTCH (48+IAND(ISHFT(K,-I),1),FD)
%23355 I=I-1
%      GOTO 23354
%23356 CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTHEX (N,W,FD)
%      INTEGER N,W,FD,K,I,MM
%      K=N
%      I=MIN(W-1,7)
%23357 IF(.NOT.(I.GE.0))GOTO 23359
%      K =IAND (ISHFT(N,-4*I),15)
%      IF(.NOT.(K.LT.10))GOTO 23360
%      CALL PUTCH (48+K,FD)
%      GOTO 23361
%23360 CONTINUE
%      CALL PUTCH (65+K -10,FD)
%23361 CONTINUE
%23358 I=I-1
%      GOTO 23357
%23359 CONTINUE
%      RETURN
%      END
%      INTEGER FUNCTION COMP(STR1,P1,STR2,P2)
%      LOGICAL*1 STR1(1),STR2(1)
%      INTEGER P1,P2,I,J
%      I=P1
%      J=P2
%23362 IF(.NOT.(STR1(I).NE.0.OR.STR2(J).NE.0))GOTO 23363
%      IF(.NOT.(STR1(I).GT.STR2(J)))GOTO 23364
%      COMP =62
%      RETURN
%23364 CONTINUE
%      IF(.NOT.(STR1(I).LT.STR2(J)))GOTO 23366
%      COMP =60
%      RETURN
%23366 CONTINUE
%23365 CONTINUE
%      I=I+1
%      J=J+1
%      GOTO 23362
%23363 CONTINUE
%      COMP=61
%      RETURN
%      END
%      SUBROUTINE PUTCH_V(V_STR,INT)
%      CHARACTER *(*) V_STR
%      INTEGER INT
       CALL PUTCH(%%REF(V_STR),INT)
%      RETURN
%      END
subroutine putlin_v (vline, f)
implicit none
VMScharacter*(*) vline
integer     f
integer kk
character local_str[200]
kk = 0
call smovvt(vline, local_str, kk)
call smov  (EOS, local_str, kk)

call putlin (local_str, f)

return
end
subroutine remark_v (vline)
implicit none
VMScharacter*(*) vline
integer kk
character local_str[200]
kk = 0
call smovvt(vline, local_str, kk)
call smov  (EOS, local_str, kk)
call remark (local_str)

return
end
subroutine error_v (line)
IMPLICIT NONE           # jb  4/22/98
 
VMScharacter*(*) line
 
call remark_v (line)
call endr4
end
Subroutine smovvt (vaxchar,dest,len2)
##############################################################
#$%
#$% Purpose:   smovVT moves a VaxCharacter string
#$%            until a null is encountered, or trailing blanks.
#$%
#$% Calls:     ECHOVT
#$%
#$% Tables:    None
#$%
#$% Date:      Sep 2000
#$%
#$% Author:    Dane Wills
#$%
##############################################################
IMPLICIT NONE           # jb    7/7/98

VMSChar*(*) vaxchar
integer     KK, len2
character   dest[ARB]

KK = len_trim(vaxchar)

call smovv (vaxchar[1:kk],dest,len2)


return
end


Subroutine smovV (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   SMOVV builds a vax character string into
#$%            a buffer.
#$%
#$% Called By: 
#$%
#$% Calls:     SMOV      
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                      # jb 6/29/98

 integer            i,LEN,ilen,len2 # jb 6/29/98
 vaxcharacter*(*)   vaxchar
 character          dest[ARB], a_char

 ilen = len(vaxchar)

 #$% for each character in the string
 for (i=1; i <= ilen; i=i+1)
   {
    a_char = ichar ( vaxchar[i:i] )
    IF (a_char == EOS) break

    call smov ( a_char, dest, len2 )
   }

 end

Subroutine smov(i,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
##########################################################
#$%
#$% Purpose:   SMOV builds a single character into
#$%            a buffer.
#$%
#$%
#$% Calls:     IPBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98

 Integer len2               # jb 6/29/98
 character i,dest[ARB]      # jb i is character??? 6/29/98

 len2 = len2 + 1
 dest[len2] = i
 return
 end


