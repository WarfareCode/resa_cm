%      PROGRAM PGUPDAT
%      CALL INITR4
       call setchtype(RAW, STDOUT)
	   call setchfd(STDOUT, STDOUT)
%      CALL INIT
%      CALL BLDTOKENS
%      CALL ADDTOKENS
%      CALL GENOUTPUT
%      CALL ENDR4
%      END
%      SUBROUTINE INIT
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      INTEGER GETARG,OPEN_,CLOSE
%      LOGICAL*1 ARG(100),ARGNAME(100),KFILE(100),UFILE(100)
%      TOKEN$COUNT =0
%      TEXT$COUNT =0
%      HAND$COUNT =0
%      IF (GETARG3(1,KFILE,100).EQ.-1) THEN
%          CALL USAGE_V (
%     *'Master file name missing (MUST be argument #1).')
%        END IF
        IF (KFILE(1) == QUEST)
		{
			CALL USAGE_V (' ')
		}
%      IF (GETARG3(2,UFILE,100).EQ.-1) THEN
%          CALL USAGE_V (
%     *'Update file name missing (MUST be argument #2).')
%        END IF
%      FD$KEYWD =OPEN_(KFILE,1)
%      IF (FD$KEYWD.EQ.-3) THEN
%        CALL CANT (KFILE)
%        END IF
%      FD$UPDATES=OPEN_(UFILE,1)
%      IF (FD$UPDATES.EQ.-3) THEN
%        CALL CANT (UFILE)
%        END IF
       FD$OUTPUT = STDOUT
%      RETURN
%      END
%      SUBROUTINE USAGE_V (MSG)
%      CHARACTER *(*) MSG
%      CALL REMARK_V(MSG)
%      CALL REMARK_V('usage:  pgupdat name1 name2 ')
%      CALL REMARK_V('   Where:   name1  is the current master keyword fi
%     *le name to use,')
%      CALL REMARK_V(
%     *'   and      name2  is the updated list to merge in with them.')
%      CALL REMARK_V(' ')
%      CALL ERROR_V ('   Output is to the Standard Output.')
%      RETURN
%      END
%      SUBROUTINE ERROR (MSG)
%      LOGICAL*1 MSG(100)
%      CALL REMARK (MSG)
%      CALL ENDR4
%      RETURN
%      END
%      FUNCTION IFINDTEXT (TEXT)
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 TEXT(100)
%      INTEGER EQUAL
%      I=1
%      DO WHILE (I.LT.TEXT$COUNT)
%          IF (EQUAL(TEXT,TEXT$ARRAY(I)).EQ.1) THEN
%            IFINDTEXT=(I)
%            RETURN
%            END IF
%23011   I=I+LENGTH(TEXT$ARRAY(I))+1
%        END DO
%23012   CONTINUE
%      IFINDTEXT=(0)
%      RETURN
%      END
%      FUNCTION INSTALLTEXT (TEXT)
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 TEXT(100)
%      INTEGER IFINDTEXT
%      EXTERNAL SCOPY
%      INSTALLTEXT =IFINDTEXT(TEXT)
%      IF (INSTALLTEXT.NE.0) THEN
%        RETURN
%        END IF
%      LEN =LENGTH(TEXT)+1
%      IF (MOD(LEN,2).NE.0) THEN
%        LEN =LEN +1
%        END IF
%      IF (TEXT$COUNT+LEN.GE.50000) THEN
           CALL PUTLIN_V ('Text Array Overflow, with: ',ERROUT)
%          CALL ERROR (TEXT)
%        END IF
%      INSTALLTEXT =TEXT$COUNT +1
%      CALL SCOPY (TEXT,1,TEXT$ARRAY,INSTALLTEXT)
%      TEXT$COUNT =TEXT$COUNT+LEN
%      RETURN
%      END
%      FUNCTION INSTALLHAND (TEXT)
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 TEXT(100)
%      EXTERNAL SCOPY
%      LEN =LENGTH(TEXT)+1
%      IF (HAND$COUNT+LEN.GE.500) THEN
          CALL PUTLIN_V ('Hand Array Overflow, with: ',ERROUT)
%          CALL ERROR (TEXT)
%        END IF
%      INSTALLHAND =HAND$COUNT +1
%      CALL SCOPY (TEXT,1,HAND$ARRAY,INSTALLHAND)
%      HAND$COUNT =HAND$COUNT+LEN
%      RETURN
%      END
%      SUBROUTINE BLDTOKENS
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 LINE(400)
%      EOFFLAG =0
%      MSGFLAG =0
%23023 CONTINUE
%          CALL GETLINE (FD$KEYWD,LINE)
%          IF (EOFFLAG.EQ.1) THEN
%            GOTO 23025 ! BREAK
%            END IF
%          CALL EATKEYWORD (LINE)
%23024   GOTO 23023
%23025   CONTINUE
%      RETURN
%      END
%      SUBROUTINE ADDTOKENS
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 LINE(400)
%      EOFFLAG =0
%      MSGFLAG =1
%23028 CONTINUE
%          CALL GETLINE (FD$UPDATES,LINE)
%          IF (EOFFLAG.EQ.1) THEN
%            GOTO 23030 ! BREAK
%            END IF
%          CALL EATKEYWORD (LINE)
%23029   GOTO 23028
%23030   CONTINUE
%      RETURN
%      END
%      SUBROUTINE EATKEYWORD (STR)
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 STR(400),CODE,WORK(100)
%      INTEGER SINDEX_V,EQUAL,CTOI
%      IX =SINDEX_V(STR,'>-')
%      IF (IX.GT.0) THEN
%          STR(IX+1) =0
%        END IF
%      TOKEN$INDEX=1
%      DO WHILE (TOKEN$INDEX.LE.TOKEN$COUNT)
%          IF (EQUAL(STR, TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX))).NE.1)
%     *THEN
%            GOTO 23036 ! NEXT
%            END IF
%          IF (IX.GT.0) THEN
%              STR(IX+1) =45
%              CODE =STR(IX+2)
%              IP =INDEXX(STR,40)
%              IF (CODE.EQ.83) THEN
%                   TOKEN$ARRAY(1,TOKEN$INDEX)=3
%                  TOKEN$ARRAY(3,TOKEN$INDEX)=0
%                  IF (IP.GT.0) THEN
%                    K=1
%                    CALL STCOPY (STR,IP+1,WORK,K)
%                    IF (WORK(K-1).EQ.41) THEN
%                     WORK(K-1) =0
%                     END IF
%                    IF (LENGTH(WORK).GT.0) THEN
%                     TOKEN$ARRAY(3,TOKEN$INDEX)=INSTALLHAND (WORK)
%                     END IF
%                   END IF
%                  IF (TOKEN$ARRAY(3,TOKEN$INDEX).EQ.0) THEN
%                    TOKEN$ARRAY(1,TOKEN$INDEX)=1
%                   END IF
%                ELSE IF (CODE.EQ.78) THEN
%                   TOKEN$ARRAY(1,TOKEN$INDEX)=2
%                  IF (IP.GT.0) THEN
%                    K =IP +1
%                    N1 =CTOI (STR,K)
%                    TOKEN$ARRAY(3,TOKEN$INDEX)=N1
%                    K =K +1
%                    N2 =CTOI (STR,K)
%                    TOKEN$ARRAY(4,TOKEN$INDEX)=N2
%                   END IF
%                ELSE IF (CODE.EQ.82) THEN
%                   TOKEN$ARRAY(1,TOKEN$INDEX)=5
%                  TOKEN$ARRAY(3,TOKEN$INDEX)=0
%                  TOKEN$ARRAY(4,TOKEN$INDEX)=999999
%                  IF (IP.GT.0) THEN
%                    K =IP +1
                     IF (STR(K) == MINUS)
					 {
                       ISIGN =-1
                       K=K+1
					 }
                     ELSE
					 {
                       ISIGN =1
					 }
%                    N1 =CTOI (STR,K)
%                    TOKEN$ARRAY(3,TOKEN$INDEX)=N1 *ISIGN
%                    K =K +1
                     IF (STR(K) == MINUS)
					 {
                       ISIGN =-1
                       K=K+1
					 }
                     ELSE
					 {
                       ISIGN =1
					 }
%                    N2 =CTOI (STR,K)
%                    TOKEN$ARRAY(4,TOKEN$INDEX)=N2 *ISIGN
%                   END IF
%                END IF
%            ELSE
%                IF ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)).EQ.60) THEN
%                   TOKEN$ARRAY(1,TOKEN$INDEX)=1
%                  ELSE
%                   TOKEN$ARRAY(1,TOKEN$INDEX)=4
%                  END  IF
%                TOKEN$ARRAY(3,TOKEN$INDEX)=0
%                TOKEN$ARRAY(4,TOKEN$INDEX)=9999999
%            END  IF
%          RETURN
%23036   TOKEN$INDEX=TOKEN$INDEX+1
%        END DO
%23037   CONTINUE
%      IF (TOKEN$COUNT.GE.800) THEN
           CALL PUTLIN_V ('Token Table Overflow, with: ',ERROUT)
%          CALL ERROR (STR)
%        END IF
%      TOKEN$COUNT =TOKEN$COUNT +1
%      TOKEN$INDEX =TOKEN$COUNT
%      TOKEN$ARRAY(2,TOKEN$INDEX)=INSTALLTEXT (STR)
%      IF ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)).EQ.60) THEN
%         TOKEN$ARRAY(1,TOKEN$INDEX)=1
%        ELSE
%          TOKEN$ARRAY(1,TOKEN$INDEX)=4
%        END  IF
%      TOKEN$ARRAY(3,TOKEN$INDEX)=0
%      TOKEN$ARRAY(4,TOKEN$INDEX)=9999999
%      IF (MSGFLAG.EQ.1) THEN
           CALL PUTLIN_V ('Adding Keyword: ',ERROUT)
%          CALL REMARK ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)))
%        END IF
%      RETURN
%      END
%      SUBROUTINE GETLINE(FD,STR)
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 STR(400)
%      INTEGER FD,GETLIN,ISTAT
%      ISTAT =GETLIN (STR,FD)
%      IF (ISTAT.EQ.-1) THEN
%          EOFFLAG =1
%          STR(1) =0
%        ELSE IF (STR(ISTAT).EQ.10) THEN
%          STR(ISTAT) =0
%        END IF
%      RETURN
%      END
%      INTEGER FUNCTION SINDEX_V (STR,MASK)
%      LOGICAL*1 STR(100)
%      CHARACTER *(*) MASK
       vmschar*200 str_v
	   call rs2fs(str, str_v)
%      SINDEX_V = INDEX(str_v,MASK)
%      RETURN
%      END
%      SUBROUTINE GENOUTPUT
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      CALL PUTKEYS (FD$OUTPUT)
%      RETURN
%      END
%      SUBROUTINE PUTKEYS (INT)
%      INTEGER FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOKEN$COUNT,
%     *TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY(4,0:800 )
%      LOGICAL*1 TEXT$ARRAY(50000),HAND$ARRAY(500)
%      COMMON /PCOMMON/ FD$KEYWD,FD$UPDATES,FD$OUTPUT,EOFFLAG,MSGFLAG,TOK
%     *EN$COUNT,TEXT$COUNT,HAND$COUNT,TOKEN$ARRAY,TEXT$ARRAY,HAND$ARRAY
%      INTEGER TOKEN$INDEX
%      LOGICAL*1 CHAR,NUM(20),LINE(100)
%      INTEGER INT,WORK
%      TOKEN$INDEX=1
%      DO WHILE (TOKEN$INDEX.LE.TOKEN$COUNT)
           CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),INT)
           CALL PUTCH (NEWLINE,INT)
%          IF ( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.4.OR. TOKEN$ARRAY(1,TOKEN$I
%     *NDEX).EQ.1) THEN
%            GOTO 23077 ! NEXT
%            END IF
           CALL PUTLIN ( TEXT$ARRAY( TOKEN$ARRAY(2,TOKEN$INDEX)),INT)
           CALL PUTCH (MINUS,INT)
%          IF ( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.2) THEN
%              CALL PUTLIN_V ('Numeric',INT)
%              IF ( TOKEN$ARRAY(3,TOKEN$INDEX).NE.0.OR. TOKEN$ARRAY(4,TOK
%     *EN$INDEX).NE.9999999) THEN
                   CALL PUTCH (LPAREN,INT)
                   CALL PUTINT ( TOKEN$ARRAY(3,TOKEN$INDEX),1,INT)
                   CALL PUTCH (MINUS,INT)
                   CALL PUTINT ( TOKEN$ARRAY(4,TOKEN$INDEX),1,INT)
                   CALL PUTCH (RPAREN,INT)
%                END IF
%            ELSE IF ( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.5) THEN
               CALL PUTLIN_V ('Real',INT)
               CALL PUTCH (LPAREN,INT)
               CALL PUTINT ( TOKEN$ARRAY(3,TOKEN$INDEX),1,INT)
               CALL PUTCH (MINUS,INT)
               CALL PUTINT ( TOKEN$ARRAY(4,TOKEN$INDEX),1,INT)
               CALL PUTCH (RPAREN,INT)
%            ELSE IF ( TOKEN$ARRAY(1,TOKEN$INDEX).EQ.3) THEN
               CALL PUTLIN_V ('Special',INT)
%              IF (TOKEN$ARRAY(3,TOKEN$INDEX).NE.0) THEN
                   CALL PUTCH (LPAREN,INT)
                   CALL PUTLIN ( HAND$ARRAY(TOKEN$ARRAY(3,TOKEN$INDEX)),INT)
                   CALL PUTCH (RPAREN,INT)
%                END IF
%            END IF
          CALL PUTCH (NEWLINE,INT)
%23077   TOKEN$INDEX=TOKEN$INDEX+1
%        END DO
%23078   CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUTCH_V(V_STR,INT)
%      CHARACTER *(*) V_STR
%      INTEGER INT
       CALL PUTCH(%%REF(V_STR),INT)
%      RETURN
%      END
subroutine putlin_v (vline, f)
implicit none
VMScharacter*(*) vline
integer     f
integer kk
character local_str[200]
kk = 0
call smovvt(vline, local_str, kk)
call smov  (EOS, local_str, kk)

call putlin (local_str, f)

return
end
subroutine remark_v (vline)
implicit none
VMScharacter*(*) vline
integer kk
character local_str[200]
kk = 0
call smovvt(vline, local_str, kk)
call smov  (EOS, local_str, kk)
call remark (local_str)

return
end
subroutine error_v (line)
IMPLICIT NONE           # jb  4/22/98
 
VMScharacter*(*) line
 
call remark_v (line)
call endr4
end
Subroutine smovvt (vaxchar,dest,len2)
##############################################################
#$%
#$% Purpose:   smovVT moves a VaxCharacter string
#$%            until a null is encountered, or trailing blanks.
#$%
#$% Calls:     ECHOVT
#$%
#$% Tables:    None
#$%
#$% Date:      Sep 2000
#$%
#$% Author:    Dane Wills
#$%
##############################################################
IMPLICIT NONE           # jb    7/7/98

VMSChar*(*) vaxchar
integer     KK, len2
character   dest[ARB]

KK = len_trim(vaxchar)

call smovv (vaxchar[1:kk],dest,len2)


return
end


Subroutine smovV (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   SMOVV builds a vax character string into
#$%            a buffer.
#$%
#$% Called By: 
#$%
#$% Calls:     SMOV      
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                      # jb 6/29/98

 integer            i,LEN,ilen,len2 # jb 6/29/98
 vaxcharacter*(*)   vaxchar
 character          dest[ARB], a_char

 ilen = len(vaxchar)

 #$% for each character in the string
 for (i=1; i <= ilen; i=i+1)
   {
    a_char = ichar ( vaxchar[i:i] )
    IF (a_char == EOS) break

    call smov ( a_char, dest, len2 )
   }

 end

Subroutine smov(i,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
##########################################################
#$%
#$% Purpose:   SMOV builds a single character into
#$%            a buffer.
#$%
#$%
#$% Calls:     IPBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98

 Integer len2               # jb 6/29/98
 character i,dest[ARB]      # jb i is character??? 6/29/98

 len2 = len2 + 1
 dest[len2] = i
 return
 end


