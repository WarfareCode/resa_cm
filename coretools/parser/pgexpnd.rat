%      PROGRAM MAIN
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      EOFFLAG =.FALSE.
%      CALL INITR4
		call setchtype(RAW, STDOUT)
		call setchfd (STDIN, STDIN)
		call setchfd(STDOUT, STDOUT)
		call setchtype(RAW, ERROUT)
		call setchfd(ERROUT, ERROUT)
%      CALL ORDGEN
%      CALL ENDR4
%      END
%      SUBROUTINE ORDGEN
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      LOGICAL*1 STR(4096)
%23000 CONTINUE
%          CALL GETLINE(STR)
%          IF (EOFFLAG) THEN
%            GOTO 23002 ! BREAK
%            END IF
%          CALL EATLINE(STR)
%23001   GOTO 23000
%23002   CONTINUE
%      RETURN
%      END
%      SUBROUTINE EATLINE(STR)
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      LOGICAL*1 STR(4096)
       IF (STR[1] != LBRACE)
         RETURN

%      CALL FORLINE(STR)
%      RETURN
%      END
%      SUBROUTINE FORLINE(STR)
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      LOGICAL*1 STR(4096),WORK(4096)
%      INTEGER SINDEX_V
		integer sindx

       sindx = SINDEX_V(STR, ' FOR <addressee>')
%      IF (sindx.GT.0) THEN
%          CALL SBEF_AFT_V (STR,' FOR <addressee>',WORK)
%          CALL TIMLINE (WORK)
%          IFLG =0
%          I=1
%          DO WHILE (STR(I).NE.125)
%              IF (STR(I).EQ.44) THEN
%                  IF (IFLG.EQ.1) THEN
%                   GOTO 23011 ! BREAK
%                   END IF
%                  IFLG =1
%                  GOTO 23010 ! NEXT
%                END IF
%              IF (STR(I).EQ.67) THEN
%                STR(I) =32
%                END IF
%23010       I=I+1
%            END DO
%23011       CONTINUE
%        END IF
%      CALL TIMLINE(STR)
%      RETURN
%      END
%      SUBROUTINE TIMLINE(STR)
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      LOGICAL*1 STR(4096),WORK(4096)
%      INTEGER SINDEX_V
		integer sindx
        sindx = SINDEX_V(STR,' TIME <delay-minutes>')
%      IF (sindx.GT.0) THEN
%          CALL SBEF_AFT_V (STR,' TIME <delay-minutes>',WORK)
%          CALL EXPLINE (WORK)
%        END IF
%      CALL EXPLINE(STR)
%      RETURN
%      END
%      SUBROUTINE EXPLINE(STR)
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      LOGICAL*1 STR(4096),WORK(4096),BLD(4096),CHAR,LSTR(4096),MSTR(4096
%     *),RSTR(4096)
%      INTEGER SINDEX_V,SPOINT,PNT1,PNT2,PNT3,OR_BAR(128),NBARS
%      LOGICAL*1 NULL_STRING(2)
%      DATA NULL_STRING(1)/0/,NULL_STRING(2)/0/
%      SPOINT =0
%      CALL PUSH_STR (STR,SPOINT)
%      DO WHILE (SPOINT.GT.0)
%          CALL POP_STR (WORK,SPOINT)
%          IF (WORK(1).EQ.0) THEN
%            GOTO 23020 ! NEXT
%            END IF
%          IXLB =SINDEX_V(WORK,'[')
%          IF (IXLB.GT.0) THEN
%              CALL SBEFORE_V(WORK,'[',LSTR)
%              PNT1 =IXLB
%              PNT2 =0
%              PNT3 =0
%              NBARS =1
%              OR_BAR(NBARS) =PNT2 +1
%              NLB =1
%              DO WHILE (NLB.GE.1)
%                  PNT1 =PNT1 +1
%                  CHAR =WORK(PNT1)
%                  IF (CHAR.EQ.0) THEN
%                   GOTO 23027 ! BREAK
%                   ELSE IF (CHAR.EQ. 91) THEN
%                   NLB =NLB +1
%                   ELSE IF (CHAR.EQ.93.AND.NLB.EQ.1) THEN
%                   GOTO 23027 ! BREAK
%                   ELSE IF (CHAR.EQ.93) THEN
%                   NLB =NLB -1
%                   ELSE IF (CHAR.EQ.124.AND.NLB.EQ.1) THEN
%                    PNT2 =PNT2 +1
%                    MSTR(PNT2) =0
%                    NBARS =NBARS +1
%                    IF (NBARS.LE.128) THEN
%                      OR_BAR(NBARS) =PNT2 +1
%                     ELSE IF (NBARS.EQ.128+1) THEN
                       CALL PUTLIN_V ('Too many ORs for ',ERROUT)
                       CALL PUTLIN (LSTR,ERROUT)
                       CALL PUTLIN_V (' (after ',ERROUT)
                       CALL PUTLIN (MSTR (OR_BAR (128) ),ERROUT)
%                      CALL REMARK_V (')')
%                     END IF
%                    GOTO 23026 ! NEXT
%                   END IF
%                  PNT2 =PNT2 +1
%                  MSTR(PNT2) =CHAR
%23026           END DO
%23027           CONTINUE
%              PNT2 =PNT2 +1
%              MSTR(PNT2) =0
%              ILENW =LENGTH(WORK)
%              J =0
%              I =PNT1+1
%              DO WHILE (I.LE.ILENW)
%                  J =J +1
%                  RSTR(J) =WORK(I)
%23043           I=I+1
%                END DO
%23044           CONTINUE
%              J =J +1
%              RSTR(J) =0
%              K=1
%              DO WHILE (K.LE.MIN(NBARS,128))
%                  IPOS =OR_BAR(K)
%                  J =1
%                  CALL STCOPY (LSTR,1,BLD,J)
%                  CALL STCOPY (MSTR,IPOS,BLD,J)
%                  CALL STCOPY (RSTR,1,BLD,J)
%                  CALL PUSH_STR (BLD,SPOINT)
%23046           K=K+1
%                END DO
%23047           CONTINUE
%            ELSE
%                CALL PUTLINE(WORK)
%            END  IF
%23020   END DO
%23021   CONTINUE
%      RETURN
%      END
%      SUBROUTINE PUSH_STR(STR,POINT)
%      LOGICAL*1 STR(4096),BUF(16383)
%      INTEGER POINT
%      ILEN =LENGTH(STR)+1
%      IF (POINT+ILEN.GE.16383) THEN
%          CALL REMARK_V ('String Buffer Overflow !!!!')
%          CALL REMARK (STR)
%          CALL REMARK_V ('.... was one line too many.')
%          PAUSE
%          RETURN
%        END IF
%      I =ILEN
%      DO WHILE (I.GT.0)
%          POINT =POINT +1
%          BUF(POINT) =STR(I)
%23051   I=I-1
%        END DO
%23052   CONTINUE
%      RETURN
%      ENTRY POP_STR(STR,POINT)
%      STR(1) =0
%      I =0
%      DO WHILE (POINT.GT.0)
%          I =I +1
%          STR(I) =BUF(POINT)
%          IF (STR(I).EQ.0) THEN
%            GOTO 23055 ! BREAK
%            END IF
%23054   POINT=POINT-1
%        END DO
%23055   CONTINUE
%      POINT =POINT -1
%      RETURN
%      END


%      SUBROUTINE PUTLINE(STR)
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      LOGICAL*1 STR(4096)
%      INTEGER P
%      P =1
%      DO WHILE (STR(P).NE.0)
%          IF (STR(P).EQ.32.AND.STR(P-1).EQ.32) THEN
%            GOTO 23059 ! NEXT
%            END IF
%          CALL PUTC (STR(P))
%23059   P=P+1
%        END DO
%23060   CONTINUE
%      CALL PUTC (10)
%      RETURN
%      END

%      SUBROUTINE GETLINE(STR)
%      LOGICAL EOFFLAG
%      COMMON /ORDGEN_COMMON/ EOFFLAG
%      LOGICAL*1 STR(4096)
%      LOGICAL*1 C,GETC
%      LOGICAL COMMNT
%      INTEGER P
%      P =0
%      COMMNT =.FALSE.
%23063 CONTINUE
%          C =GETC(C)
%          IF (C.EQ.-1) THEN
%            GOTO 23065 ! BREAK
%            END IF
%          I_SWITCH_1=(C)
%          GOTO 23068
%23070       CONTINUE
%            COMMNT =.TRUE.
%            GOTO 23069
%23071       CONTINUE
%              COMMNT =.FALSE.
%              C =32
%            GOTO 23069
%23072       CONTINUE
%            C =32
%            GOTO 23069
%23068       CONTINUE
%            IF(I_SWITCH_1.EQ.9)GOTO 23072
%            IF(I_SWITCH_1.EQ.10)GOTO 23071
%            IF(I_SWITCH_1.EQ.35)GOTO 23070
%23069       CONTINUE
%          IF (COMMNT) THEN
%            C =32
%            END IF
%23064   IF(.NOT.(C.EQ.123))GOTO 23063
%23065   CONTINUE
%      DO WHILE (C.NE.-1.AND.C.NE.59)
%          I_SWITCH_1=(C)
%          GOTO 23078
%23080       CONTINUE
%            COMMNT =.TRUE.
%            GOTO 23079
%23081       CONTINUE
%              COMMNT =.FALSE.
%              C =32
%            GOTO 23079
%23082       CONTINUE
%            C =32
%            GOTO 23079
%23078       CONTINUE
%            IF(I_SWITCH_1.EQ.9)GOTO 23082
%            IF(I_SWITCH_1.EQ.10)GOTO 23081
%            IF(I_SWITCH_1.EQ.35)GOTO 23080
%23079       CONTINUE
%          IF (COMMNT.OR.(C.EQ.32.AND.STR(P).EQ.32)) THEN
%            CONTINUE
%            ELSE
%                P =P +1
%                STR(P) =C
%            END  IF
%23076   C=GETC(C)
%        END DO
%23077   CONTINUE
%      P =P +1
%      STR(P) =0
%      IF (C.EQ.-1) THEN
%        EOFFLAG =.TRUE.
%        END IF
%      RETURN
%      END


       INTEGER FUNCTION SINDEX_V (STR,MASK_v)
       character STR[4096]
       vmschar*(*) MASK_v
       vmschar*4096 str_v
		integer slen, mlen
		str_v = ""
	    call rs2fs(str, str_v)
		slen = len_trim(str_v)
		mlen = len_trim(mask_v)
       SINDEX_V = %INDEX%(str_v[1:slen],MASK_v[1:mlen])
       RETURN
       END

       INTEGER FUNCTION SINDEX (STR,MASK)
        character STR[4096],MASK[4096]
		vmschar*4096 str_v
		vmschar*4096 mask_v
		str_v = ""
		call rs2fs(str, str_v)
		mask_v = ""
		call rs2fs(mask, mask_v)
       SINDEX = %index%(str_v[1:len_trim(str_v)], mask_v[1:len_trim(mask_v)])
       RETURN
       END
%      SUBROUTINE SBEFORE_V (STR,VMASK,DEST)
%      LOGICAL*1 STR(4096),DEST(4096)
%      CHARACTER *(*) VMASK
	character mask[4096]
	call fs2rs(vmask, mask)
       CALL SBEFORE(STR,mask,DEST)
%      RETURN
%      END
%      SUBROUTINE SBEFORE (STR,MASK,DEST)
%      LOGICAL*1 STR(100),MASK(100),DEST(100)
%      INTEGER SINDEX
%      IDX =SINDEX(STR,MASK)
%      J =1
%      DO WHILE (J.LT.IDX)
%        DEST(J) =STR(J)
%23088   J=J+1
%        END DO
%23089   CONTINUE
%      DEST(J) =0
%      RETURN
%      END
%      SUBROUTINE SAFTER_V (STR,MASK_v,DEST)
%      LOGICAL*1 STR(4096),DEST(4096)
%      CHARACTER *(*) MASK_v
	   character mask[4096]
	   call fs2rs(mask_v, mask)
       CALL SAFTER (STR,MASK,DEST)
%      RETURN
%      END
%      SUBROUTINE SAFTER (STR,MASK,DEST)
%      LOGICAL*1 STR(100),MASK(100),DEST(100)
%      INTEGER SINDEX,LENGTH
%      IDX =SINDEX(STR,MASK)
%      ILENS =LENGTH(STR)
%      ILENM =LENGTH(MASK)
%      IF (IDX.EQ.0) THEN
%        I =1
%        ELSE
%          I =IDX +ILENM
%        END  IF
%      J =0
%      DO WHILE (STR(I).NE.0)
%          J =J +1
%          DEST(J) =STR(I)
%23093   I=I+1
%        END DO
%23094   CONTINUE
%      J =J +1
%      DEST(J) =0
%      RETURN
%      END
%      SUBROUTINE SBEF_AFT_V (STR,MASK_v,DEST)
%      LOGICAL*1 STR(200),DEST(200)
%      CHARACTER *(*) MASK_v
		character mask[100]
		call fs2rs(mask_v, mask)
       CALL SBEF_AFT (STR,MASK,DEST)
%      RETURN
%      END
%      SUBROUTINE SBEF_AFT (STR,MASK,DEST)
%      LOGICAL*1 STR(100),MASK(100),DEST(100)
%      CALL SBEFORE (STR,MASK,DEST)
%      ILEN =LENGTH(DEST)
%      CALL SAFTER (STR,MASK,DEST(ILEN+1))
%      RETURN
%      END
subroutine putlin_v (vline, f)
implicit none
VMScharacter*(*) vline
integer     f
integer kk
character local_str[200]
kk = 0
call smovvt(vline, local_str, kk)
call smov  (EOS, local_str, kk)

call putlin (local_str, f)

return
end
subroutine remark_v (vline)
implicit none
VMScharacter*(*) vline
integer kk
character local_str[200]
kk = 0
call smovvt(vline, local_str, kk)
call smov  (EOS, local_str, kk)
call remark (local_str)

return
end
subroutine error_v (line)
IMPLICIT NONE           # jb  4/22/98
 
VMScharacter*(*) line
 
call remark_v (line)
call endr4
end
Subroutine smovvt (vaxchar,dest,len2)
##############################################################
#$%
#$% Purpose:   smovVT moves a VaxCharacter string
#$%            until a null is encountered, or trailing blanks.
#$%
#$% Calls:     ECHOVT
#$%
#$% Tables:    None
#$%
#$% Date:      Sep 2000
#$%
#$% Author:    Dane Wills
#$%
##############################################################
IMPLICIT NONE           # jb    7/7/98

VMSChar*(*) vaxchar
integer     KK, len2
character   dest[ARB]

KK = len_trim(vaxchar)

call smovv (vaxchar[1:kk],dest,len2)


return
end


Subroutine smovV (vaxchar,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
###########################################################
#$%
#$% Purpose:   SMOVV builds a vax character string into
#$%            a buffer.
#$%
#$% Called By: 
#$%
#$% Calls:     SMOV      
#$%
#$% Tables:    None
#$%
#$% Date:      APR 90
#$%
#$% Author:    Dane Wills
#$%
###########################################################
 IMPLICIT NONE                      # jb 6/29/98

 integer            i,LEN,ilen,len2 # jb 6/29/98
 vaxcharacter*(*)   vaxchar
 character          dest[ARB], a_char

 ilen = len(vaxchar)

 #$% for each character in the string
 for (i=1; i <= ilen; i=i+1)
   {
    a_char = ichar ( vaxchar[i:i] )
    IF (a_char == EOS) break

    call smov ( a_char, dest, len2 )
   }

 end

Subroutine smov(i,dest,len2)
    # WARNING:  arguments may contain CONSTANTS:  DONT CHANGE!
##########################################################
#$%
#$% Purpose:   SMOV builds a single character into
#$%            a buffer.
#$%
#$%
#$% Calls:     IPBYTE
#$%
#$% Tables:    None
#$%
#$% Date:      NOV 80
#$%
#$% Author:    Dana Wills
#$%
##########################################################
 IMPLICIT NONE              # jb 6/29/98

 Integer len2               # jb 6/29/98
 character i,dest[ARB]      # jb i is character??? 6/29/98

 len2 = len2 + 1
 dest[len2] = i
 return
 end


