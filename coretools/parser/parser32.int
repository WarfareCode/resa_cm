define($cat,arith(@1,:,@2))

define($dropit,#)
define($parse$max$args,40)
define($parse$max$grps,25)
define($parse$table$int,integer*4)


############################################################################
#
#   parse$common$load       (name, file)    or   
#   parse$common$load$short (name, file)
#
#   Where:	NAME is the symbolic name to be given the parse table.
#          	FILE is the filename for the parser data (excluding extension).
#
#
#   PARSE$COMMON$LOAD will load the complete parse table set;  Tokens, Text, 
#   and Command nodes.  While PARSE$COMMON$LOAD$SHORT will load only the 
#   Tokens and Text tables.
#

define (parse$common$load,
    $cat(d e f i n e (parse $ table $ size,parse$long))
    $cat(d e f i n e ($ P G _ A L L,))

    $cat(d e f i n e (parse $ table,p_tbl_@1))
%CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
%C
%C	Loading @2 parse table
%C

    common $cat(/p_common_ @1/) parse$table  

    $cat (i n c l u d e " @2 .RIN ")
    )

define (parse$common$load$short,
    $cat(d e f i n e (parse $ table $ size,parse$short))
    $cat(d e f i n e ($ P G _ A L L,$ D R O P I T % %))

    $cat(d e f i n e (parse $ table,p_tbl_@1))
%CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
%C
%C	Loading @2 parse table (tokens and text only)
%C

    common $cat(/p_common_ @1/) parse$table  

    $cat (i n c l u d e " @2 .RIN ")
    )

#############################################################################
#
#   parse$common (name)
#
#   Where:	NAME is the symbolic name of the parse table.
#

define (parse$common,
    $parse$table$int p_tbl_@1[ARB]
    common /p_common_@1/ p_tbl_@1
    )

############################################################################
#
#   parse$set$group (arg)
#
#   Where:	ARG is a variable/constant of the group number (0-N).
#

define (parse$set$group,
    call parse_grp (@1)
    )

############################################################################
#
#   parse$read$group (arg)
#
#   Where:	ARG is a variable to return the group number (0-N).
#

define (parse$read$group,
    call parse_grp_read (@1)
    )

############################################################################
#
#   parse$set$recall (handle)
#
#   Where:	HANDLE is the value returned by RECALL_INIT
#

define (parse$set$Recall,
    call parse_recall (@1)
    )

############################################################################
#
#   parse$read$recall (handle)
#
#   Where:	HANDLE is returned with the value specified to PARSE$SET$RECALL
#

define (parse$read$recall,
    call parse_recall_read (@1)
    )

############################################################################
#
#   parse$set$NotFor (arg)
#
#   Where:	ARG is a variable/constant of the NotFor code number (0-N).
#		the value of -1 resets back to FOR-ALL.
#

define (parse$set$NotFor,
    call parse_not_for (@1)
    )


############################################################################
#
#   parse$Read$NotFor (arg)
#
#   Where:	ARG is a variable to recieve the NotFor code number (0-N),
#		or -1, which indicates FOR-ALL.
#

define (parse$Read$NotFor,
    call parse_not_for_read (@1)
    )


############################################################################
#
#   parse$command (name, nargs, args, nord, [time], [prompt])
#
#   Where:	NAME is the symbolic name used in PARSE$LOAD or PARSE$COMMON.
#		NARGS is the variable to receive the argument count.
#		ARGS is a Literal array to receive the arguments
#		NORD is the variable to to receive the Order Code Number.
#		TIME is the time in seconds to return in if no input is given.
#		PROMPT is the string to display prior to input.
#
#

define (parse$command,
    
    call parse_cmd (p_tbl_@1,		# address of parse table
    		    @2,			# argument count
    		    @3,			# argument Array
    		    @4,			# Order number
    		    $parse$max$args,	# Size of argument array
    		    ifelse(@5,,0,@5),	# response time
    		    ifelse(@6,,0,@6))	# Prompt
    )

############################################################################
#
#	token test codes
#

define($NO$TEST,0)
define($ALPHA$TEST,1)
define($NUMBER$TEST,2)
define($SPECIAL$TEST,3)
define($KEYWORD$TEST,4)

############################################################################
