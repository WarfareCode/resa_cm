include 'ddmain.inc'

define ($Fill$to, {
    call putlin (@1,int)
    for (kfillfor = @2 - length(@1); kfillfor > 0; kfillfor=kfillfor-1)
        call putch (BLANK,int)    
    })




subroutine ddl_header (in,int)
d_common
character       line[MAXLINE]
integer         mark[2], getlin, tty, ctoi
data            mark/0,0/

current_fd = int

if (tty(in) == NO)
    {
    call seek (mark,in)

    while (getlin(line,in) != EOF)
        {
        call putlin ("/* ",int)
        call putlin (line,int)
        }

    call putch (NEWLINE,int)
    call putlin ("/*****************************************************/",int)
    call putch (NEWLINE,int)
    call putch (12,int)         # Formfeed
    call putch (NEWLINE,int)
    }

call putch (NEWLINE,int)
call putch (NEWLINE,int)


for (itbl = 1; itbl <= sys$tbl_count; itbl = itbl+1)
    {
    tbl$Pointer$to itbl

    i = tbl$alternate
    if (i == 0) ialt = 1
    else        ialt = ctoi (ddl_text,i)+1

    if (tbl$record == YES) call head_record (int,ialt,tbl$Pointer)
    else                   call head_table (int,ialt,tbl$Pointer)

    for (tbl$sub$Index = 1; tbl$sub$Index <= tbl$sub_count; 
        tbl$sub$Index=tbl$sub$Index+1)
        {
        call head_subtbl (int,ialt,tbl$Pointer,tbl$sub$Index)
        }

    for (tbl$def$Index = 1; tbl$def$Index <= tbl$def_count; 
        tbl$def$Index=tbl$def$Index+1)
        {
        call head_macro (int,ialt,tbl$Pointer,tbl$def$Index)
        }

    for (tbl$fld$Index = 1; tbl$fld$Index <= tbl$fld_count; 
        tbl$fld$Index=tbl$fld$Index+1)
        {
        call head_field (int,ialt,tbl$Pointer,tbl$fld$Index)
        }
    }

return
end


subroutine head_record (int,ialt,tbl$Pointer)
d_common
character       tblname[10],
                tblnameXXX[10],
                work[1000],
                number[10]


call scopy (ddl_text[tbl$id],1,tblname,1)

no_floating = YES

for (tbl$fld$Index = 1; tbl$fld$Index <= tbl$fld_count; 
    tbl$fld$Index=tbl$fld$Index+1)
    {
    if (ddl_text[tbl$fld$Type] != BIGF) next

    no_floating = NO
    break
    }

################################################# define_pointer_constants


if (tbl$Variable == YES) 
    {
    #   define(tbl$entB,xxxxxxxx)

        call put_head_start (tblname,"$entB")
        call put_head_text (tbl$Entry)
        call put_head_end 


    #   define(tbl$entS,xxxxxxxx)

        call put_head_start (tblname,"$entS")
        call put_head_text (tbl$Var_size)
        call put_head_end


    #   define(tbl$MaxSub,xxxxxxxx)

        call put_head_start (tblname,"$MaxSub")
        call put_head_text (tbl$Var_max)
        call put_head_end

    #   define(tbl$MaxLength,arith(tbl$entB,+,arith(tbl$entS,*,tbl$MaxSub)))

        call put_head_start (tblname,"$MaxLength")
        call put_head_string_v ("arith(")
        call put_head_string (tblname)
        call put_head_string_v ("$entB,+,arith(")
        call put_head_string (tblname)
        call put_head_string_v ("$entS,*,")
        call put_head_string (tblname)
        call put_head_string_v ("$MaxSub))")
        call put_head_end
    }
else 
    {
    #   define(tbl$MaxLength,$$_tbl $entry)

        call put_head_start (tblname,"$MaxLength")
        call put_head_text (tbl$Entry)
        call put_head_end
    }    


######################################### define_record_macros .....   
######################################### Once, plus once for each alternate.


for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1                             # Build name of alternate record
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
        {
        call itoc (nalt,number,2)
        call stcopy (number,1,tblnameXXX,len)
        }
    
    call put_head_char (NEWLINE)


    if (tbl$Variable == YES) 
        {
        #   define($$_tblx $entN,$$_entn)
    
            call put_head_start (tblnameXXX,"$entN")
            call put_head_text_replace (tbl$Var_name,tblname,tblnameXXX)
            call put_head_end
    
    
        #   define($$_tblx $Length,($$_tbl $entB + 
        #                          $$_tblx $entN*$$_tbl $entS))
    
            call put_head_start (tblnameXXX,"$Length")
            call put_head_string_v ("(")
            call put_head_string (tblname)
            call put_head_string_v ("$entB+")
            call put_head_string (tblnamexxx)
            call put_head_string_v ("$entN*")
            call put_head_string (tblname)
            call put_head_string_v ("$entS)")
            call put_head_end
        }
    else 
        {
        #   define($$_tblx $Length,$$_tbl $entry)

            call put_head_start (tblnameXXX,"$Length")
            call put_head_text (tbl$Entry)
            call put_head_end
        }    


    #   define(tbl$Record,Isys_tbl)

        call put_head_start (tblnameXXX,"$Record")
        call put_head_string_v ("I")
        call put_head_text (sys$id)
        call put_head_char_v ('_')
        call put_head_string (tblnameXXX)
        call put_head_end


    #   define(tbl$Record$Definition,

        call put_head_start (tblnameXXX,"$Record$Definition")
        call put_head_char (NEWLINE)


    #       Dimension   Isys_tbl[tbl$MaxLength]

#       call put_head_string_v ("    Dimension   I")
        call put_head_string_v ("    Integer*4   I")
        call put_head_text (sys$id)
        call put_head_char_v ('_')
        call put_head_string (tblnameXXX)
        call put_head_char_v ('[')
        call put_head_string (tblname)
        call put_head_string_v ("$MaxLength]")
        call put_head_char (NEWLINE)


    if (No_floating == NO)
        {
        #       Dimension   Fsys_tbl[tbl$MaxLength]

#           call put_head_string_v ("    Dimension   F")
            call put_head_string_v ("    Real*4      F")
            call put_head_text (sys$id)
            call put_head_char_v ('_')
            call put_head_string (tblnameXXX)
            call put_head_char_v ('[')
            call put_head_string (tblname)
            call put_head_string_v ("$MaxLength]")
            call put_head_char (NEWLINE)


        #       equivalence (Isys_tbl,Fsys_tbl)

            call put_head_string_v ("    Equivalence (I")
            call put_head_text (sys$id)
            call put_head_char_v ('_')
            call put_head_string (tblnameXXX)
            call put_head_string_v (",F")
            call put_head_text (sys$id)
            call put_head_char_v ('_')
            call put_head_string (tblnameXXX)
            call put_head_char_v (')')
            call put_head_char (NEWLINE)
        }

    #       )

        call put_head_string_v ("    ")
        call put_head_end


    if (tbl$zero == YES)                        # Zero..... 
        {
        #   define(dyn2$zero,{

        call put_head_start (tblnameXXX,"$Zero")
        call put_head_string_v ("{")
        call put_head_char (NEWLINE)


        for (tbl$sav$Index=1; tbl$sav$Index <= tbl$sav_count;
             tbl$sav$Index=tbl$sav$Index+1)
            {
            #    isave_dyn_nbreq_i=xdyn2$nbreq$i

            j = length (ddl_text[tbl$sav$name])
            call put_head_string_v ("    ")
            call put_head_char (ddl_text[tbl$sav$name+j-1])
            call put_head_string_v ("save_")
            call copy_no_dollar (ddl_text[tbl$sav$name],work)
            call put_head_string (work)
            call put_head_string_v ("=x")
            call put_head_text_replace (tbl$sav$name,tblname,tblnamexxx)
            call put_head_char (NEWLINE)
            }

#       #    jzent=dyn$MaxLength
#       #    for (jz=1;jz<=jzent;jz=jz+1) ibb_tbl2[jz]=0

        #    call LIB$MOVC5(0,0,0,dyn$MaxLength,IBB_tbl2[1])

        call put_head_string_v ("    call LIB$MOVC5(0,0,0,")
        call put_head_string (tblname)
        call put_head_string_v ("$MaxLength*4,")
        call put_head_string_v ("i")
        call put_head_text (sys$id)
        call put_head_string_v ("_")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("[1])")
        call put_head_char (NEWLINE)

        for (tbl$sav$Index=1; tbl$sav$Index <= tbl$sav_count;
             tbl$sav$Index=tbl$sav$Index+1)
            {
            #    putdyn2$nbreq$i(isave_dyn_nbreq_i)

            j = length (ddl_text[tbl$sav$name])
            call put_head_string_v ("    put")
            call put_head_text_replace (tbl$sav$name,tblname,tblnamexxx)
            call put_head_string_v ("(")
            call put_head_char (ddl_text[tbl$sav$name+j-1])
            call put_head_string_v ("save_")
            call copy_no_dollar (ddl_text[tbl$sav$name],work)
            call put_head_string (work)
            call put_head_string_v (")")
            call put_head_char (NEWLINE)
            }


        #   })

        call put_head_string_v ("   }")
        call put_head_end
        } # end of ZERO


    if (tbl$duplicate == YES & nalt > 1)        # Duplicate..... 
        {
        #   define(unt$Duplicate$UNT2,{

        call put_head_start2 (tblname,"$Duplicate$",tblnameXXX)
        call put_head_string_v ("{")
        call put_head_char (NEWLINE)

#       #    for (itbldup= 1; itbldup <= unt$length; itbldup = itbldup + 1)
#       #       ibb_tbl[itbldup] = ibb_tbl2[itbldup]

        #    call LIB$MOVC3(UNT$Length*4,iBB_tbl2[1],iBB_tbl[1])

        call put_head_string_v ("    call LIB$MOVC3(")
        call put_head_string (tblname)
        call put_head_string_v ("$Length*4,i")
        call put_head_text (sys$id)
        call put_head_string_v ("_")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("[1],i")
        call put_head_text (sys$id)
        call put_head_string_v ("_")
        call put_head_string (tblname)
        call put_head_string_v ("[1])")
        call put_head_char (NEWLINE)

        #   })

        call put_head_string_v ("   }")
        call put_head_end

        } # end of DUPLICATE

    }

return
end


subroutine head_table (int,ialt,tbl$Pointer)
d_common
character       tblname[10],
                tblnameXXX[10],
                number[10],
                work[100]

call scopy (ddl_text[tbl$id],1,tblname,1)


################################################# define_pointer_constants


#   define(tbl$Slots,xxxxxxxx)

    call put_head_start (tblname,"$Slots") 
    call put_head_text (tbl$Slots)
    call put_head_end 


 if (tbl$Variable == YES) 
    {
    #   define(tbl$entB,xxxxxxxx)

        call put_head_start (tblname,"$entB")
        call put_head_text (tbl$Entry)
        call put_head_end 


    #   define(tbl$entS,xxxxxxxx)

        call put_head_start (tblname,"$entS")
        call put_head_text (tbl$Var_size)
        call put_head_end


    #   define(tbl$MaxSub,xxxxxxxx)

        call put_head_start (tblname,"$MaxSub")
        call put_head_text (tbl$Var_max)
        call put_head_end

    #   define(tbl$MaxEntry,arith(tbl$entB,+,arith(tbl$entS,*,tbl$MaxSub)))
    #   #define tbl$MaxEntry (tbl$entB+tbl$entS*tbl$MaxSub) 

        call put_head_start (tblname,"$MaxEntry")
        call put_head_string_v ("(")
        call put_head_string (tblname)
        call put_head_string_v ("$entB+")
        call put_head_string (tblname)
        call put_head_string_v ("$entS*")
        call put_head_string (tblname)
        call put_head_string_v ("$MaxSub)")
        call put_head_end
    }


#   define(tbl$Size, I $$_sys P[$$PTRSize,$$ tbl])

    call put_head_start (tblname,"$Size") 
    call put_head_string_v ("I" )
    call put_head_text (sys$id)
    call put_head_string_v ("P[$$PtrSize,$$" )
    call put_head_text (tbl$id)
    call put_head_string_v ("]" )
    call put_head_end


#   define(tbl$Used, I $$_sys P[$$PTRUsed,$$ tbl ])

    call put_head_start (tblname,"$Used") 
    call put_head_string_v ("I" )
    call put_head_text (sys$id)
    call put_head_string_v ("P[$$PtrUsed,$$" )
    call put_head_text (tbl$id)
    call put_head_string_v ("]" )
    call put_head_end


##   define(tbl$Seg,  I $$_sys P[$$PTRSeg,$$ tbl ])
#
#    call put_head_start (tblname,"$Slots") 
#    call put_head_text (tbl$Slots)
#    call put_head_end


#   define($$_tbl $Base,I $$_sys P[$$PTRABase,$$ tbl ])
##   define($$_tbl $ABase,I $$_sys P[$$PTRABase,$$ $$_tbl ])
##   define(tbl$Base, ($$_tbl $Cbase+$$_tbl $ABase-$$_tbl $SBase))

    call put_head_start (tblname,"$Base") 
    call put_head_string_v ("I" )
    call put_head_text (sys$id)
    call put_head_string_v ("P[$$PtrBase,$$" )
    call put_head_text (tbl$id)
    call put_head_string_v ("]" )
    call put_head_end


#   define(tbl$Last, ($$_tbl $Base+$$_tbl $Used-1))

    call put_head_start (tblname,"$Last") 
    call put_head_string_v ("(" )
    call put_head_text (tbl$id)
    call put_head_string_v ("$Base+" )
    call put_head_text (tbl$id)
    call put_head_string_v ("$Used-1)" )
    call put_head_end


#   define(tbl$Last$to,$$_tbl $Used=1-$$_tbl $Base+)

    call put_head_start (tblname,"$Last$to") 
    call put_head_text (tbl$id)
    call put_head_string_v ("$Used=1-" )
    call put_head_text (tbl$id)
    call put_head_string_v ("$Base+" )
    call put_head_end


if (tbl$Flag_Updates != NO) 
    {    
    #   define(tbl$FlagTable,)

        call put_head_start (tblname,"$FlagTable") 
        call put_head_end
    }


######################################### define_pointer_macros .....   
######################################### Once, plus once for each alternate.


for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1                                     # Build name of alternate table
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
        {
        call itoc (nalt,number,2)
        call stcopy (number,1,tblnameXXX,len)
        }
    
    call put_head_char (NEWLINE)

#    #   define($$_tblx $Pointer,k $$_tblx )                    # DEW 19-JUN-92
#
#        call put_head_start (tblnameXXX,"$Pointer") 
#        call put_head_string_v ("kPoint_" )
#        call put_head_string (tblnameXXX)
#        call put_head_end

        call put_head_start_comment (tblnameXXX,"$Pointer")     # DEW 19-JUN-92
        call put_head_end_comment

    if (tbl$Variable == YES) 
        {
        #   define($$_tblx $entN,$$_entn)
    
            call put_head_start (tblnameXXX,"$entN")
            call put_head_text_replace (tbl$Var_name,tblname,tblnameXXX)
            call put_head_end
    
    
        #   define($$_tblx $entry,($$_tbl $entB + 
        #                          $$_tblx $entN*$$_tbl $entS))
    
            call put_head_start (tblnameXXX,"$Entry")
            call put_head_string_v ("(")
            call put_head_string (tblname)
            call put_head_string_v ("$entB+")
            call put_head_string (tblnamexxx)
            call put_head_string_v ("$entN*")
            call put_head_string (tblname)
            call put_head_string_v ("$entS)")
            call put_head_end
        }
    else 
        {
        #   define($$_tblx $entry,$$_tbl $entry)

            call put_head_start (tblnameXXX,"$Entry")
            call put_head_text (tbl$Entry)
            call put_head_end
        }    

                
    #   define($$_tblx $Pointer$first,$$_tblx $Pointer=$$_tbl $Base)

        call put_head_start (tblnameXXX,"$Pointer$First")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer=")
        call put_head_string (tblname)
        call put_head_string_v ("$Base")
        call put_head_end


    #   define($$_tblx $Pointer$next,$$_tblx $Pointer=$$_tblx $Pointer + 
    #                                                 $$_tblx $entry)

        call put_head_start (tblnameXXX,"$Pointer$Next")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer=")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer+")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Entry")
        call put_head_end


    #   define($$_tblx $Pointer$Ok,($$_tblx $Pointer>=$$_tbl $Base && 
    #                               $$_tblx $Pointer<=$$_tbl $Last))

        call put_head_start (tblnameXXX,"$Pointer$Ok")
        call put_head_string_v ("(")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer>=")
        call put_head_string (tblname)
        call put_head_string_v ("$Base && ")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer<=")
        call put_head_string (tblname)
        call put_head_string_v ("$Last)")
        call put_head_end


    #   define($$_tblx $Pointer$valid,($$_tblx $Pointer>=$$_tbl $Base && 
    #                   $$_tblx $Pointer<($$_tbl $Base+$$_tbl $Size)))

        call put_head_start (tblnameXXX,"$Pointer$Valid")
        call put_head_string_v ("(")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer>=")
        call put_head_string (tblname)
        call put_head_string_v ("$Base && ")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer<(")
        call put_head_string (tblname)
        call put_head_string_v ("$Base+")
        call put_head_string (tblname)
        call put_head_string_v ("$Size))")
        call put_head_end


    if (tbl$Variable == YES)
        {
        #   define($$_tblx $Pointer$Index,$$$ $$_tblx $Pointer$Index_Invalid)

        call put_head_start (tblnameXXX,"$Pointer$Index")
        call put_head_string_v ("$$$ ")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer$Index_Invalid")
        call put_head_end

        #   define($$_tblx $Pointer$Index,$$$ $$_tblx $Pointer$to_Invalid))

        call put_head_start (tblnameXXX,"$Pointer$To")
        call put_head_string_v ("$$$ ")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer$To_Invalid")
        call put_head_end
        }
    else
        {
        #   define($$_tblx $Pointer$Index,(($$_tblx $Pointer-$$_tbl $Base) / 
        #                                   $$_tblx $entry+1))

        call put_head_start (tblnameXXX,"$Pointer$Index")
        call put_head_string_v ("((")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer-")
        call put_head_string (tblname)
        call put_head_string_v ("$Base)/")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Entry+1)")
        call put_head_end


        #   define($$_tblx $Pointer$to,$$_tblx $Pointer$first - 
        #                              $$_tblx $entry + $$_tblx $entry*)

        call put_head_start (tblnameXXX,"$Pointer$To")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer$First-")
        call put_head_string (tblnameXXX)
#       call put_head_string_v ("$Entry+")
        call put_head_string_v ("$Entry+ZEXT(")
        call put_head_string (tblnameXXX)
#       call put_head_string_v ("$Entry*")
        call put_head_string_v ("$Entry)*")
        call put_head_end
        }

    if (tbl$zero == YES)                        # Zero..... 
        {
        #   define(dyn2$zero,{

        call put_head_start (tblnameXXX,"$Zero")
        call put_head_string_v ("{")
        call put_head_char (NEWLINE)


        for (tbl$sav$Index=1; tbl$sav$Index <= tbl$sav_count;
             tbl$sav$Index=tbl$sav$Index+1)
            {
            #    isave_dyn_nbreq_i=xdyn2$nbreq$i

            j = length (ddl_text[tbl$sav$name])
            call put_head_string_v ("    ")
            call put_head_char (ddl_text[tbl$sav$name+j-1])
            call put_head_string_v ("save_")
            call copy_no_dollar (ddl_text[tbl$sav$name],work)
            call put_head_string (work)
            call put_head_string_v ("=x")
            call put_head_text_replace (tbl$sav$name,tblname,tblnamexxx)
            call put_head_char (NEWLINE)
            }

#       #    jzent=dyn2$entry
#       #    for (jz=0;jz<jzent;jz=jz+1) ibb[dyn2$Pointer+jz]=0

        #    call LIB$MOVC5(0,0,0,dyn2$entry*4,IBB[dyn2$Pointer])

        call put_head_string_v ("    call LIB$MOVC5(0,0,0,")
        call put_head_string (tblnamexxx)
        call put_head_string_v ("$Entry*4,i")
        call put_head_text (sys$id)
        call put_head_string_v ("[")
        call put_head_string (tblnamexxx)
        call put_head_string_v ("$Pointer])")
        call put_head_char (NEWLINE)

        for (tbl$sav$Index=1; tbl$sav$Index <= tbl$sav_count;
             tbl$sav$Index=tbl$sav$Index+1)
            {
            #    putdyn2$nbreq$i(isave_dyn_nbreq_i)

            j = length (ddl_text[tbl$sav$name])
            call put_head_string_v ("    put")
            call put_head_text_replace (tbl$sav$name,tblname,tblnamexxx)
            call put_head_string_v ("(")
            call put_head_char (ddl_text[tbl$sav$name+j-1])
            call put_head_string_v ("save_")
            call copy_no_dollar (ddl_text[tbl$sav$name],work)
            call put_head_string (work)
            call put_head_string_v (")")
            call put_head_char (NEWLINE)
            }


        #   })

        call put_head_string_v ("   }")
        call put_head_end
        } # end of ZERO


    if (tbl$duplicate == YES & nalt > 1)        # Duplicate..... 
        {
        #   define(unt$Duplicate$UNT2,{

        call put_head_start2 (tblname,"$Duplicate$",tblnameXXX)
        call put_head_string_v ("{")
        call put_head_char (NEWLINE)

#       #    for (itbldup= 0; itbldup < unt$entry; itbldup = itbldup + 1)
#       #       ibb[unt$Pointer+itbldup] = ibb[unt2$Pointer+itbldup]

        #    call LIB$MOVC3(unt2$Entry*4,iBB[unt2$Pointer],iBB[unt$Pointer])

        call put_head_string_v ("    call LIB$MOVC3(")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Entry*4,i")
        call put_head_text (sys$id)
        call put_head_string_v ("[")
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer],i")
        call put_head_text (sys$id)
        call put_head_string_v ("[")
        call put_head_string (tblname)
        call put_head_string_v ("$Pointer])")
        call put_head_char (NEWLINE)

        #   })

        call put_head_string_v ("   }")
        call put_head_end

        } # end of DUPLICATE

    if (tbl$Flag_Updates != NO)                 # Flag Fields
        {    
        #   define(dyn2$FlagField,{

        call put_head_start (tblnameXXX,"$FlagField")
        call put_head_string_v ("{")
        call put_head_char (NEWLINE)

        #    PUTdyn2$modified$i(ior(ifelse(@1,,,$bit@1|)$bit0 , Xdyn2$modified$i))

        call put_head_string_v ("    PUT")
        call put_head_text_replace (tbl$Flag_Updates,tblname,tblnameXXX)
        call put_head_string_v ("(ior(ifelse(@1,,,$bit@1|)$bit0")
        call put_head_string_v (",X")
        call put_head_text_replace (tbl$Flag_Updates,tblname,tblnameXXX)
        call put_head_string_v ("))")
        call put_head_char (NEWLINE)


        #    dyn$FlagTable

        call put_head_string_v ("    ")
        call put_head_string (tblname)
        call put_head_string_v ("$FlagTable")
        call put_head_char (NEWLINE)


        #   })

        call put_head_string_v ("   }")
        call put_head_end

        } # end of FLAGFIELD

    }

return
end


subroutine put_head_start (str1,str2)
d_common
character str1[ARB], str2[ARB]

if ( 1 == 2 )                                               # DEW 19-JUN-92
    {
    entry put_head_start_comment (str1,str2)
    call putlin ("/* ",current_fd)                          
    }
else
    {
    call putlin ("#define ",current_fd)                     # DEW 19-JUN-92
    }

call putlin (str1,current_fd)
call putlin (str2,current_fd)
call putch (' ',current_fd)                                 # DEW 19-JUN-92

return
end


subroutine put_head_start2 (str1,str2,str3)
d_common
character str1[ARB], str2[ARB], str3[ARB]

if ( 1 == 2 )                                               # DEW 19-JUN-92
    {
    entry put_head_start2_comment (str1,str2,str3)
    call putlin ("/* ",current_fd)                          
    }
else
    {
    call putlin ("#define ",current_fd)                     # DEW 19-JUN-92
    }
call putlin (str1,current_fd)
call putlin (str2,current_fd)
call putlin (str3,current_fd)
call putch (' ',current_fd)                                 # DEW 19-JUN-92

return
end


subroutine put_head_text (ipnt)
d_common
integer*2       ipnt

if (ipnt != 0) 
    call putlin (ddl_text[ipnt],current_fd)

return
end


subroutine put_head_text_replace (ipnt,str1,str2)
d_common
integer         EqualLen, pnt
integer*2       ipnt
character       str1[ARB],
                str2[ARB],
                work1[ARB],
                work2[ARB]

if (ipnt == 0) return

len1=1
call stcopy (str1,1,work1,len1)
call stcopy_vh ("$", 1,work1,len1)

len2=1
call stcopy (str2,1,work2,len2)
call stcopy_vh ("$", 1,work2,len2)

for (pnt = ipnt; ddl_text[pnt] != EOS; pnt = pnt + 1)
    {
    if (EqualLen(work1,ddl_text[pnt]) == YES)
        {
        call putlin (work2,current_fd)
        pnt = pnt + len1 - 2
        }
    else 
        {
        call putch (ddl_text[pnt],current_fd)
        }
    }

return
end


subroutine put_head_string (str1)
d_common
character str1[ARB]

call putlin (str1,current_fd)

return
end


subroutine put_head_string_v (str1)
d_common
VMSchar*(*) str1

call putlin_v (str1,current_fd)

return
end


subroutine put_head_char (char)
d_common
character       char

call putch (char,current_fd)

return
end


subroutine put_head_char_v (char)
d_common
VMSchar*(*)       char

call putch (%%ref(char),current_fd)

return
end


subroutine put_head_val (ival)
d_common
integer         ival

call putint (ival,1,current_fd)

return
end


subroutine put_head_end 
d_common

# call putch (RPAREN,current_fd)                        # DEW 19-JUN-92

if ( 1 == 2 )                                               # DEW 19-JUN-92
    {
    entry put_head_end_comment
    call putlin (" */",current_fd)                          
    }

call putch (NEWLINE,current_fd)

return
end


subroutine head_subtbl (int,ialt,tbl$Pointer,tbl$sub$Index)
d_common
character       tblname[10],
                subname[10],
                subname2[10],
                tblnameXXX[10],
                number[10]

string index_str "$Index"
string slots_str "$Slots"
string index_ok_str "$Index$Ok"
string index_valid_str "$Index$Valid"
string address_str "$Address"
string position_str "$Position"

k = 1
call scopy (ddl_text[tbl$id],1,tblname,k)
subname[1] = DOLLAR
k = 2
call scopy (ddl_text[tbl$sub$id],1,subname,k)
call copy_no_dollar (subname,subname2)

for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1                                     # Build name of alternate table
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
        {
        call itoc (nalt,number,3)
        call stcopy (number,1,tblnameXXX,len)
        }
    
    call put_head_char (NEWLINE)

#    #   define(dyn$eq$Index,Index_DYN2_EQ)                     # DEW 19-JUN-92
#
#    call put_head_start2 (tblnameXXX,subname,Index_str) 
#    call put_head_string_v ("Index_")
#    call put_head_String (TblnameXXX)
#    call put_head_String (SubName2)
#    call put_head_end

    call put_head_start2_Comment (tblnameXXX,subname,Index_str)  # DEW 19-JUN-92
    call put_head_end_comment


    #   define(dyn$eq$Slots,xdyn$nbreq$i)

    call put_head_start2 (tblnameXXX,subname,Slots_str) 
    call put_head_text_replace (tbl$sub$Slots,tblname,tblnameXXX)
    call put_head_end


    #   define(dyn$eq$Index$Ok,(dyn$eq$Index>0&&dyn$eq$Index<=dyn$eq$Slots))

    call put_head_start2 (tblnameXXX,subname,Index_Ok_str) 
    call put_head_string_v ("(")
    call put_head_string (tblnameXXX)
    call put_head_string (subname)
    call put_head_string_v ("$Index>0 && ")
    call put_head_string (tblnameXXX)
    call put_head_string (subname)
    call put_head_string_v ("$Index<=")
    call put_head_string (tblnameXXX)
    call put_head_string (subname)
    call put_head_string_v ("$Slots)")
    call put_head_end


    #   define(dyn$eq$Index$valid,(dyn$eq$Index>0 && dyn$eq$Index<=100))

    call put_head_start2 (tblnameXXX,subname,Index_Valid_str) 
    call put_head_string_v ("(")
    call put_head_string (tblnameXXX)
    call put_head_string (subname)
    call put_head_string_v ("$Index>0 && ")
    call put_head_string (tblnameXXX)
    call put_head_string (subname)
    call put_head_string_v ("$Index<=")
    call put_head_string_v ("100)")
    #call put_head_string (tblnameXXX)
    #call put_head_string (subname)
    #call put_head_string_v ("$Slots)")
    call put_head_end

    
    if (tbl$sub$Add != 0)
        {
        #   define(dyn$eq$Address,xxxxxxxx)

        call put_head_start2 (tblnameXXX,subname,address_str) 
        call put_head_text_replace (tbl$sub$Add,tblname,tblnameXXX)
        call put_head_end
        }


    if (tbl$sub$Pos != 0)
        {
        #   define(dyn$eq$Position,xxxxxxxx)

        call put_head_start2 (tblnameXXX,subname,Position_str) 
        call put_head_text_replace (tbl$sub$Pos,tblname,tblnameXXX)
        call put_head_end
        }
    }

return
end


subroutine head_macro (int,ialt,tbl$Pointer,tbl$def$Index)
d_common

call putch (NEWLINE,int)
call putlin ("define",int)
call putlin (ddl_text[tbl$def$Indx],int)

return
end


subroutine head_field (int,ialt,tbl$Pointer,tbl$fld$Index)
d_common
integer         type, 
                ctoi,
                equal_hv, equal,
                exempt,         # exempt from FLAGing (YES/NO)
                lo_sign,
                hi_sign
logical     prange      # the range is in parens....        

character       tblname[10],
                fldname[ARB],
                fldname2[ARB],
                tblnameXXX[10],
                number[10],
                work1[40],
                work2[40]
string size_str  "$Size_"
string usize_str "_Size"
string lo_str    "$Lo_"
string ulo_str   "_Lo"
string hi_str    "$Hi_"
string uhi_str   "_Hi"
string x_str     "x"
string put_str   "put"

call scopy (ddl_text[tbl$id],1,tblname,1)

number[1] = ddl_text[tbl$fld$Type]
number[2] = EOS

len = 1
call stcopy_vh('$'                   ,1,fldname,len)
call stcopy (ddl_text[tbl$fld$name],1,fldname,len)
call stcopy_vh ('$'                   ,1,fldname,len)
call stcopy (number                ,1,fldname,len)

call copy_no_dollar (ddl_text[tbl$fld$name],fldname2)

if (tbl$Flag_Updates != NO)             # Flag Fields
    {
    kk = 1
    call stcopy (tblname,1, work1,kk)
    call stcopy (fldname,1, work1,kk)
    call fold (work1)

    call scopy (ddl_text[tbl$Flag_Updates],1, work2,1)
    call fold (work2)

    exempt = equal (work1,work2)
    }

for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1                                     # Build name of alternate table
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
        {
        call itoc (nalt,number,3)
        call stcopy (number,1,tblnameXXX,len)
        }
    
    if (nalt == 1 & ddl_text[tbl$fld$Type] == BIGV )
        {
        call put_head_char (NEWLINE)

        #   define(tbl$field$V_Size,<char length>)
        # or
        #   define($Size_tbl$field$V,<char length>)

        if (opt_prefix) 
            {
            call put_head_start2 (Size_str,tblnamexxx,fldname)
            }
        else 
            {
            call put_head_start2 (tblnamexxx,fldname,uSize_str)
            }

        call put_head_text (tbl$fld$Size)
        call put_head_char_v (')')
        }

#   if (nalt == 1 & tbl$fld$Range != 0 & ddl_text[tbl$fld$range] != LPAREN)
    if (tbl$Gen_Ranges != NO & nalt == 1 & tbl$fld$Range != 0 )
        {
        i = tbl$fld$Range 

        prange = ddl_text[tbl$fld$range] == LPAREN

        if (prange)
            {
            i = i + 1
            }

        call put_head_char (NEWLINE)

        #   define(tbl$field$I_Lo,<lowest value>)
        # or
        #   define($Lo_tbl$field$I,<lowest value>)

        if (opt_prefix) 
            {
            call put_head_start2 (Lo_str,tblnamexxx,fldname)
            }
        else 
            {
            call put_head_start2 (tblnamexxx,fldname,uLo_str)
            }
            
        if (prange) call put_head_char_v ("(")

        repeat
            {
            if (ddl_text[i] == EOS) break

            if (prange & ddl_text[i] == RPAREN & ddl_text[i+1] == EOS) break

            call put_head_char (ddl_text[i])
            i = i + 1

            if (ddl_text[i] == MINUS) 
                {
                i = i + 1
                break
                }
            }

        if (prange) call put_head_char_v (")")
        #call put_head_char_v (')')

        call put_head_char (NEWLINE)

        #    define(tbl$field$I_Hi,<highest value>)
        # or 
        #    define($Hi_tbl$field$I,<highest value>)

        if (opt_prefix) 
            {
            call put_head_start2 (Hi_str,tblnamexxx,fldname)
            }
        else 
            {
            call put_head_start2 (tblnamexxx,fldname,uHi_str)
            }
            
        if (prange) call put_head_char_v ("(")

        repeat
            {
            if (ddl_text[i] == EOS) break

            if (prange & ddl_text[i] == RPAREN & ddl_text[i+1] == EOS) break

            call put_head_char (ddl_text[i])
            i = i + 1

            if (ddl_text[i] == MINUS) 
                {
                i = i + 1
                break
                }
            }

        if (prange) call put_head_char_v (")")
        # call put_head_char_v (')')
        }

    call put_head_char (NEWLINE)

#    #   define(tbl$field$i,i_tbl_field)                    # DEW 19-JUN-92
#
#    call put_head_start (tblnamexxx,fldname)
#    call put_head_char (ddl_text[tbl$fld$Type])
#    call put_head_char_v ('_')
#    call put_head_string (tblnameXXX)
#    call put_head_char_v ('_')
#    call put_head_string (FldName2)
#    call put_head_end 
#

    call put_head_start_comment (tblnamexxx,fldname)        # DEW 19-JUN-92
    call put_head_end_comment


    #   #define xTBL$Field$I ?????? 

    call put_head_start2 (x_str,tblnamexxx,fldname)

    if (ddl_text[tbl$fld$type] == BIGC)                    # Character Type
        {
        call put_head_ext_Name  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }
    else if (ddl_text[tbl$fld$type] == BIGV)               # Vax Character Type
        {
        call put_head_ext_Vaxc  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }
    else if (type(ddl_text[tbl$fld$Size]) == LETTER)      # Full Word Size
        {
        call put_head_ext_word  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }
    else                                                  # Bit Packed 
        {
        call put_head_ext_Bits  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }

    call put_head_end 


    #   #define putTBL$Field$I ?????? 

    call put_head_start2 (put_str,tblnamexxx,fldname)

    if (exempt == NO & (tbl$Flag_All == YES | tbl$fld$Flag != NO))
        {
        # {tbl2$FlagField(??)

        call put_head_char_v ('{')
        }

    if (ddl_text[tbl$fld$type] == BIGC)                    # Character Type
        {
        call put_head_ins_Name  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }
    else if (ddl_text[tbl$fld$type] == BIGV)               # Vax Character 
        {
        call put_head_ins_VaxC  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }
    else if (type(ddl_text[tbl$fld$Size]) == LETTER)      # Full Word Size
        {
        call put_head_ins_word  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }
    else                                                  # Bit Packed 
        {
        call put_head_ins_Bits  (tbl$Pointer,
                                tbl$fld$Index,
                                tblnameXXX,
                                fldname)
        }

    if (exempt == NO & (tbl$Flag_All == YES | tbl$fld$Flag != NO))
        {
        call put_head_char_v (';')

        call put_head_string (tblnameXXX)
        call put_head_string_v ("$FlagField")

        kk = tbl$fld$Flag - 1
        if (kk > 0)
            {
            call put_head_char_v ('(')
            call put_head_val  (kk)
            call put_head_char_v (')')
            }

        #  }

        call put_head_char_v ('}')
        }

    call put_head_end 
    }

return
end


subroutine put_head_text_Word (tbl$Pointer,tbl$fld$Index,tblnameXXX)
d_common
integer         ctoi
character       tblnameXXX[10], 
                tblname[ARB],
                number[ARB]

if (tbl$record == YES)
    {
    call scopy (ddl_text[tbl$fld$word],1,number,1)
    }
else 
    {
    number[1] = EOS

    if (tbl$fld$word != 0)
        {
        i = tbl$fld$word     
        n = ctoi (ddl_text,i) - 1

        if (tbl$fld$SubTbl != 0) n=n+1

        if (n > 0) 
            {
            number[1] = PLUS
            call itoc (n,number[2],5)
            }
        }
    }

call put_head_char_v ("[")

if (tbl$record     != YES & 
    tbl$fld$Signed == YES  )
    {
    j = 1; isize = ctoi (ddl_text[tbl$fld$Size],j)
    j = 1; ipos  = ctoi (ddl_text[tbl$fld$Pos], j)
    if (j == 1) ipos = -1

    if (isize == 8 & mod(ipos,8) == 0)
        {
        call put_head_val(ipos/8 + 1)
        call put_head_char_v(",")
        }

    else if (isize == 16 & mod(ipos,16) == 0)
        {
        call put_head_val(ipos/16 + 1)
        call put_head_char_v(",")
        }
    }

if (tbl$fld$indir != NO)
    {
    call scopy (ddl_text[tbl$id],1,tblname,1)

    call put_head_char_v ("x")
    call put_head_text_replace (tbl$fld$indir,tblname,tblnameXXX)
    }
else if (tbl$fld$SubTbl != 0)
    {
    call put_head_string (tblnameXXX)
    call put_head_char_v ("$")
    call put_head_text (tbl$fld$SubTbl)
    call put_head_string_v ("$Address")
    call put_head_string (number)
    }
else 
    {
    if (tbl$record != YES)
        {
        call put_head_string (tblnameXXX)
        call put_head_string_v ("$Pointer")
        }

    call put_head_string (number)
    }

call put_head_char_v ("]")

return
end


subroutine put_head_text_Value (tbl$Pointer,tbl$fld$Index,
                               tblnameXXX,fldname)
d_common
character       fldname[ARB],
                tblnameXXX[10]

#
# 'ifelse(@1,,tbl$field$i,@1)'
#

#call put_head_string_v ("ifelse(@1,,")                       # DEW 19-JUN-92
call put_head_string (tblnameXXX)
call put_head_string (fldname)
#call put_head_string_v (",@1)")                              # DEW 19-JUN-92

return
end


subroutine put_head_text_Pos$Mask (tbl$Pointer,tbl$fld$Index,tblnameXXX)
d_common
character       tblnameXXX[10]

#
#   formats:   ',XXX,M999Bits'
#
#       where XXX is the value of the position
#       and   999 is the number of bits
#
#   or:   ',XXX,999'
#
#       where XXX is the value of the position
#       and   999 is the number of bits
#

call put_head_text_Pos (tbl$Pointer,tbl$fld$Index,tblnameXXX)
if (opt_mask)
    {
    call put_head_string_v (",M")
    call put_head_text (tbl$fld$Size)
    call put_head_string_v ("bits")
    }
else 
    {
    call put_head_string_v (",")
    call put_head_text (tbl$fld$Size)
    }

return
end


subroutine put_head_text_Pos (tbl$Pointer,tbl$fld$Index,tblnameXXX)
d_common
character       tblnameXXX[10],
                number[30]

integer     ctoi

#
#   formats:   ',999'
#        or:   ',tbl$XXXXXX$Position+99'
#
#       where 999 is the value of position if numeric
#       and   XXXXXX is the sub-tbl reference

number[1] = EOS

j1 = tbl$fld$name               # these are here for debugging only
j2 = tbl$fld$pos                #   "
j3 = tbl$fld$PosSub             #   "

if (tbl$fld$pos != 0)
    {
    i = tbl$fld$pos
    n = ctoi (ddl_text,i) - 1

    if (tbl$fld$PosSub != 0) n=n+1

    if (n > 0) 
        {
        number[1] = PLUS
        call itoc (n,number[2],5)
        }
    }

call put_head_char (COMMA)

if (tbl$fld$PosSub != 0)
    {
    call put_head_string (tblnameXXX)
    call put_head_char_v ("$")
    call put_head_text (tbl$fld$PosSub)
    call put_head_string_v ("$Position")
    call put_head_string (number)
    }
#if (ddl_text[tbl$fld$pos] > '9')
#    {
#    call put_head_string (tblnameXXX)
#    call put_head_char_v ('$')
#    call put_head_text (tbl$fld$pos)
#    call put_head_string_v ("$Position")
#    }
else
    {
    call put_head_text (tbl$fld$pos)
    }

return
end


subroutine put_head_text_Sys (tbl$Pointer,tblnameXXX)
d_common
character       tblnameXXX[10]

if (tbl$record == YES)
    {
    call put_head_text (sys$id)
    call put_head_char_v ("_")
    call put_head_string (tblnameXXX)
    }
else
    {
    call put_head_text (sys$id)
    }

return
end


subroutine put_head_ext_Name  (tbl$Pointer,tbl$fld$Index,
                              tblnameXXX,fldname)
d_common
character       fldname[ARB],
                tblnameXXX[10]


call put_head_string_v ("$$ExtLit(I")
call put_head_text_Sys (tbl$Pointer,tblnameXXX)
call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_text_Pos (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_char_v (',')
call put_head_text (tbl$fld$Size)
call put_head_char_v (')')

return
end


subroutine put_head_ext_VaxC  (tbl$Pointer,tbl$fld$Index,
                              tblnameXXX,fldname)
d_common
character       fldname[ARB],
                tblnameXXX[10]


call put_head_string_v ("$$ExtVaxC(I")
call put_head_text_Sys (tbl$Pointer,tblnameXXX)
call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_text_Pos (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_char_v (',')
call put_head_text (tbl$fld$Size)
call put_head_char_v (')')

return
end


subroutine put_head_ext_Word    (tbl$Pointer,tbl$fld$Index,
                                tblnameXXX,fldname)
d_common
integer         equal_hv
character       fldname[ARB],
                tblnameXXX[10]

if (tbl$fld$Scale != 0                              |
    equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES |
    tbl$fld$Off   != 0                                  )
    {
    call put_head_char_v ('(')
    iparen = YES
    }
else
    {
    iparen = NO
    }

call put_head_char (ddl_text[tbl$fld$type])             # 'I' or 'F'

call put_head_text_Sys (tbl$Pointer,tblnameXXX)
call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)

if (tbl$fld$Scale != 0)
    {
    call put_head_char_v ('*')

    call put_head_text (tbl$fld$Scale)
    }

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_head_char_v ('+')
    call put_head_text (tbl$fld$CDesc)
    call put_head_string_v ("$Base")
    }

if (tbl$fld$Off != 0)
    {
    if (ddl_text[tbl$fld$Off] != MINUS) 
        call put_head_char_v ('+')

    call put_head_text (tbl$fld$Off)
    }

if (iparen == YES)
    {
    call put_head_char_v (')')
    }

return
end


subroutine put_head_ext_Bits    (tbl$Pointer,tbl$fld$Index,
                                tblnameXXX,fldname)
d_common
integer         equal_hv, ctoi
character       fldname[ARB],
                tblnameXXX[10],
                bb_suffix

bb_suffix = NO

call put_head_string_v ("(")
j = 1; isize = ctoi (ddl_text[tbl$fld$Size],j)
j = 1; ipos  = ctoi (ddl_text[tbl$fld$Pos], j)
if (j == 1) ipos = -1

if (tbl$record     != YES & 
    tbl$fld$Signed == YES  )
    {
    if (isize == 8 & mod(ipos,8) == 0)
        bb_suffix = LETB
    else if (isize == 16 & mod(ipos,16) == 0)
       bb_suffix = LETW
    }

if (bb_suffix == NO)
    {
    call put_head_string_v ("$$extract")

    if (isize+ipos > 32)
        call put_head_string_v ("_s")

    if (tbl$fld$Signed == YES)
        call put_head_string_v ("_x")
    }

call put_head_string_v ("(I")

call put_head_text_Sys (tbl$Pointer,tblnameXXX)

if (bb_suffix != NO)
    call put_head_char(bb_suffix)

call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)

if (bb_suffix == NO)
    call put_head_text_Pos$Mask (tbl$Pointer,tbl$fld$Index,tblnameXXX)

call put_head_char_v (')')

if (ddl_text[tbl$fld$Type]== BIGF)
    {
    call put_head_string_v ("*1.0")
    }

if (tbl$fld$Scale != 0)
    {
    call put_head_char_v ('*')

    call put_head_text (tbl$fld$Scale)
    }

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_head_char_v ('+')
    call put_head_text (tbl$fld$CDesc)
    call put_head_string_v ("$Base")
    }

if (tbl$fld$Off != 0)
    {
    if (ddl_text[tbl$fld$Off] != MINUS) 
        call put_head_char_v ('+')

    call put_head_text (tbl$fld$Off)
    }

call put_head_char_v (')')

return
end


subroutine put_head_ins_Name  (tbl$Pointer,tbl$fld$Index,
                              tblnameXXX,fldname)
d_common
character       fldname[ARB],
                tblnameXXX[10]


call put_head_string_v ("$$InsLit(")
call put_head_text_value (tbl$Pointer,tbl$fld$Index,tblnameXXX,fldname)
call put_head_string_v (",I")
call put_head_text_Sys (tbl$Pointer,tblnameXXX)
call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_text_Pos (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_char_v (',')
call put_head_text (tbl$fld$Size)
call put_head_char_v (')')

return
end


subroutine put_head_ins_VaxC  (tbl$Pointer,tbl$fld$Index,
                              tblnameXXX,fldname)
d_common
character       fldname[ARB],
                tblnameXXX[10]


call put_head_string_v ("$$InsVaxC(")
call put_head_text_value (tbl$Pointer,tbl$fld$Index,tblnameXXX,fldname)
call put_head_string_v (",I")
call put_head_text_Sys (tbl$Pointer,tblnameXXX)
call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_text_Pos (tbl$Pointer,tbl$fld$Index,tblnameXXX)
call put_head_char_v (',')
call put_head_text (tbl$fld$Size)
call put_head_char_v (')')

return
end


subroutine put_head_ins_Word    (tbl$Pointer,tbl$fld$Index,
                                tblnameXXX,fldname)
d_common
integer         equal_hv
character       fldname[ARB],
                tblnameXXX[10]


call put_head_char (ddl_text[tbl$fld$type])             # 'I' or 'F'

call put_head_text_Sys (tbl$Pointer,tblnameXXX)
call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)

call put_head_string_v ("=(")

call put_head_text_value (tbl$Pointer,tbl$fld$Index,tblnameXXX,fldname)

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_head_char_v ('-')
    call put_head_text (tbl$fld$CDesc)
    call put_head_string_v ("$Base")
    }

if (tbl$fld$Off != 0)
    {
    call put_head_char_v ('-')

    call put_head_text (tbl$fld$Off)
    }

call put_head_char_v (')')

if (tbl$fld$Scale != 0)
    {
    call put_head_char_v ('/')

    call put_head_text (tbl$fld$Scale)
    }

return
end


subroutine put_head_ins_Bits    (tbl$Pointer,tbl$fld$Index,
                                tblnameXXX,fldname)
d_common
integer         equal_hv, ctoi
character       fldname[ARB],
                tblnameXXX[10],
                bb_suffix

j = 1; isize = ctoi (ddl_text[tbl$fld$Size],j)
j = 1; ipos  = ctoi (ddl_text[tbl$fld$Pos], j)
if (j == 1) ipos = -1

bb_suffix = NO

if (tbl$record     != YES & 
    tbl$fld$Signed == YES  )
    {
    if (isize == 8 & mod(ipos,8) == 0)
        bb_suffix = LETB
    else if (isize == 16 & mod(ipos,16) == 0)
        bb_suffix = LETW
    }

if (bb_suffix != NO)
    {
    call put_head_string_v ("I")

    call put_head_text_Sys (tbl$Pointer,tblnameXXX)
    call put_head_char(bb_suffix)

    call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)

    call put_head_string_v ("=")
    }

if (bb_suffix == NO)
    {
    call put_head_string_v ("$$insert")

    if (isize+ipos > 32)
        call put_head_string_v ("_s")
    }

call put_head_string_v ("(")

if (ddl_text[tbl$fld$Type]== BIGF)
    call put_head_string_v ("int(0.5+")

call put_head_char_v ('(')

call put_head_text_value (tbl$Pointer,tbl$fld$Index,tblnameXXX,fldname)

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_head_char_v ('-')
    call put_head_text (tbl$fld$CDesc)
    call put_head_string_v ("$Base")
    }

if (tbl$fld$Off != 0)
    {
    call put_head_char_v ('-')

    call put_head_text (tbl$fld$Off)
    }

call put_head_char_v (')')

if (tbl$fld$Scale != 0)
    {
    call put_head_char_v ('/')
    call put_head_text (tbl$fld$Scale)
    }

if (ddl_text[tbl$fld$Type]== BIGF)
    call put_head_char_v (')')

if (bb_suffix == NO)
    {
    call put_head_string_v (",I")

    call put_head_text_Sys (tbl$Pointer,tblnameXXX)
    call put_head_text_word (tbl$Pointer,tbl$fld$Index,tblnameXXX)
    call put_head_text_Pos$Mask (tbl$Pointer,tbl$fld$Index,tblnameXXX)
    }

call put_head_char_v (')')

return
end
