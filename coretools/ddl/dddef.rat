include 'ddmain.inc'

define ($Fill$to, {
    call putlin (@1,int)
    for (kfillfor = @2 - length(@1); kfillfor > 0; kfillfor=kfillfor-1)
    	call putch (BLANK,int)    
    })


subroutine ddl_VerLst (in,int)		# output list of field names only
d_common
character	line[MAXLINE]
integer		mark[2], getlin, tty, equal_hv
data		mark/0,0/

for (itbl = 1; itbl <= sys$tbl_count; itbl = itbl+1)
    {
    tbl$pointer$to itbl

    for (tbl$fld$index = 1; tbl$fld$index <= tbl$fld_count; 
    	tbl$fld$index=tbl$fld$index+1)
    	{
        call putlin (ddl_text[tbl$Id],int)
    	call putch (DOLLAR,int)
        call putlin (ddl_text[tbl$fld$Name],int)
    	call putch (DOLLAR,int)
        call putch (ddl_text[tbl$fld$Type],int)

        if (ddl_text[tbl$fld$Class] != 0                       & 
       	    (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES | 
    	     equal_hv(ddl_text[tbl$fld$Class],"INDEX")   == YES  ) )
            {
            j = length (ddl_text[tbl$fld$Name]) + 5
            for (k = 1; k <= 30 - j; k = k + 1)
                call putch (' ',int)

            call putch (SHARP,int)
            call putch (BLANK,int)
            call putlin (ddl_text[tbl$fld$CDesc],int)
            call putch (BLANK,int)
            call putlin (ddl_text[tbl$fld$Class],int)
            call putlin_v (' (size: ',int)
            call putlin (ddl_text[tbl$fld$size],int)
            call putch (RPAREN,int)
            }

    	call putch (NEWLINE,int)
    	}
    }

return
end


subroutine ddl_defines (in,int)
d_common
character	line[MAXLINE]
integer		mark[2], getlin, tty, ctoi
data		mark/0,0/

current_fd = int

if (tty(in) == NO)
    {
    call seek (mark,in)

    while (getlin(line,in) != EOF)
        {
        call putlin_v ("# "//char(0),int)
        call putlin (line,int)
        }

    call putch (NEWLINE,int)
    call putch (12,int)		# Formfeed
    call putch (NEWLINE,int)
    }

call putch (NEWLINE,int)
call putch (NEWLINE,int)


for (itbl = 1; itbl <= sys$tbl_count; itbl = itbl+1)
    {
    tbl$pointer$to itbl

    i = tbl$alternate
    if (i == 0) ialt = 1
    else        ialt = ctoi (ddl_text,i)+1

    if (tbl$record == YES) call def_record (int,ialt,tbl$pointer)
    else                   call def_table (int,ialt,tbl$pointer)


    for (tbl$sub$index = 1; tbl$sub$index <= tbl$sub_count; 
    	tbl$sub$index=tbl$sub$index+1)
    	{
        call def_subtbl (int,ialt,tbl$pointer,tbl$sub$index)
    	}

    for (tbl$def$index = 1; tbl$def$index <= tbl$def_count; 
    	tbl$def$index=tbl$def$index+1)
    	{
        call def_macro (int,ialt,tbl$pointer,tbl$def$index)
    	}

    for (tbl$fld$index = 1; tbl$fld$index <= tbl$fld_count; 
    	tbl$fld$index=tbl$fld$index+1)
    	{
        call def_field (int,ialt,tbl$pointer,tbl$fld$index)
    	}
    }

return
end


subroutine def_record (int,ialt,tbl$pointer)
d_common
character	tblname[10],
    		tblnameXXX[10],
    		work[1000],
    		number[10]
string duplicate_str "$Duplicate$"
string base_and_str  "$Base & "
call scopy (ddl_text[tbl$id],1,tblname,1)

no_floating = YES

for (tbl$fld$index = 1; tbl$fld$index <= tbl$fld_count; 
    tbl$fld$index=tbl$fld$index+1)
    {
    if (ddl_text[tbl$fld$Type] != BIGF) next

    no_floating = NO
    break
    }

################################################# define_pointer_constants


if (tbl$Variable == YES) 
    {
    #   define(tbl$entB,xxxxxxxx)

        call put_def_start (tblname,"$entb")
        call put_def_text (tbl$Entry)
        call put_def_end 


    #   define(tbl$entS,xxxxxxxx)

        call put_def_start (tblname,"$ents")
        call put_def_text (tbl$Var_size)
        call put_def_end


    #   define(tbl$MaxSub,xxxxxxxx)

        call put_def_start (tblname,"$MaxSub")
        call put_def_text (tbl$Var_max)
        call put_def_end

    #   define(tbl$MaxLength,arith(tbl$entB,+,arith(tbl$entS,*,tbl$MaxSub)))

        call put_def_start (tblname,"$MaxLength")
        call put_def_String_v ("arith(")
        call put_def_string (tblname)
        call put_def_String_v ("$entB,+,arith(")
        call put_def_string (tblname)
        call put_def_String_v ("$entS,*,")
        call put_def_string (tblname)
        call put_def_String_v ("$MaxSub))")
        call put_def_end
    }
else 
    {
    #   define(tbl$MaxLength,$$_tbl $entry)

        call put_def_start (tblname,"$MaxLength")
        call put_def_text (tbl$Entry)
        call put_def_end
    }    


######################################### define_record_macros .....   
######################################### Once, plus once for each alternate.


for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1				# Build name of alternate record
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
    	{
    	call itoc (nalt,number,2)
    	call stcopy (number,1,tblnameXXX,len)
    	}
    
    call put_def_char (NEWLINE)


    if (tbl$Variable == YES) 
        {
        #   define($$_tblx $entN,$$_entn)
    
            call put_def_start (tblnameXXX,"$entN")
            call put_def_text_replace (tbl$Var_name,tblname,tblnameXXX)
            call put_def_end
    
    
        #   define($$_tblx $Length,($$_tbl $entB + 
    	#			   $$_tblx $entN*$$_tbl $entS))
    
            call put_def_start (tblnameXXX,"$Length")
            call put_def_String_v ("(")
            call put_def_string (tblname)
            call put_def_String_v ("$entB+")
            call put_def_string (tblnamexxx)
            call put_def_String_v ("$entN*")
            call put_def_string (tblname)
            call put_def_String_v ("$entS)")
            call put_def_end
        }
    else 
        {
        #   define($$_tblx $Length,$$_tbl $entry)

            call put_def_start (tblnameXXX,"$Length")
            call put_def_text (tbl$Entry)
            call put_def_end
        }    


    #   define(tbl$Record,Isys_tbl)

        call put_def_start (tblnameXXX,"$Record")
        call put_def_string_v ("I")
        call put_def_text (sys$id)
        call put_def_char_v ('_')
        call put_def_string (tblnameXXX)
        call put_def_end


    #   define(tbl$Record$Definition,

        call put_def_start (tblnameXXX,"$Record$Definition")
        call put_def_char (NEWLINE)


    #       Dimension   Isys_tbl[tbl$MaxLength]

#       call put_def_String_v ("    Dimension   I")
        call put_def_String_v ("    Integer*4   I")
        call put_def_text (sys$id)
        call put_def_char_v ('_')
        call put_def_string (tblnameXXX)
        call put_def_char_v ('[')
        call put_def_string (tblname)
        call put_def_String_v ("$MaxLength]")
        call put_def_char (NEWLINE)


    if (No_floating == NO)
    	{
        #       Dimension   Fsys_tbl[tbl$MaxLength]

#           call put_def_String_v ("    Dimension   F")
            call put_def_String_v ("    Real*4      F")
            call put_def_text (sys$id)
            call put_def_char_v ('_')
            call put_def_string (tblnameXXX)
            call put_def_char_v ('[')
            call put_def_string (tblname)
            call put_def_String_v ("$MaxLength]")
            call put_def_char (NEWLINE)


        #       equivalence (Isys_tbl,Fsys_tbl)

            call put_def_String_v ("    Equivalence (I")
            call put_def_text (sys$id)
            call put_def_char_v ('_')
            call put_def_string (tblnameXXX)
            call put_def_String_v (",F")
            call put_def_text (sys$id)
            call put_def_char_v ('_')
            call put_def_string (tblnameXXX)
            call put_def_char_v (')')
            call put_def_char (NEWLINE)
    	}

    #	    )

        call put_def_String_v ("    ")
        call put_def_end


    if (tbl$zero == YES)			# Zero..... 
    	{
        #   define(dyn2$zero,{

        call put_def_start (tblnameXXX,"$Zero")
        call put_def_String_v ("{")
    	call put_def_char (NEWLINE)


    	for (tbl$sav$index=1; tbl$sav$index <= tbl$sav_count;
    	     tbl$sav$Index=tbl$sav$index+1)
    	    {
            #    isave_dyn_nbreq_i=xdyn2$nbreq$i

    	    j = length (ddl_text[tbl$sav$name])
    	    call put_def_String_v ("    ")
    	    call put_def_char (ddl_text[tbl$sav$name+j-1])
    	    call put_def_String_v ("save_")
    	    call copy_no_dollar (ddl_text[tbl$sav$name],work)
    	    call put_def_string (work)
    	    call put_def_String_v ("=x")
    	    call put_def_text_replace (tbl$sav$name,tblname,tblnamexxx)
            call put_def_char (NEWLINE)
    	    }

#       #    jzent=dyn$MaxLength
#       #    for (jz=1;jz<=jzent;jz=jz+1) ibb_tbl2[jz]=0

        #    call LIB$MOVC5(0,0,0,dyn$MaxLength,IBB_tbl2[1])

    	call put_def_String_v ("    call LIB$MOVC5(0,0,0,")
    	call put_def_string (tblname)
    	call put_def_String_v ("$MaxLength*4,")
        call put_def_String_v ("i")
        call put_def_text (sys$id)
        call put_def_String_v ("_")
        call put_def_string (tblnameXXX)
    	call put_def_String_v ("[1])")
        call put_def_char (NEWLINE)

    	for (tbl$sav$index=1; tbl$sav$index <= tbl$sav_count;
    	     tbl$sav$Index=tbl$sav$index+1)
    	    {
            #    putdyn2$nbreq$i(isave_dyn_nbreq_i)

    	    j = length (ddl_text[tbl$sav$name])
    	    call put_def_String_v ("    put")
    	    call put_def_text_replace (tbl$sav$name,tblname,tblnamexxx)
    	    call put_def_String_v ("(")
    	    call put_def_char (ddl_text[tbl$sav$name+j-1])
    	    call put_def_String_v ("save_")
    	    call copy_no_dollar (ddl_text[tbl$sav$name],work)
    	    call put_def_string (work)
    	    call put_def_String_v (")")
            call put_def_char (NEWLINE)
    	    }
        call put_def_String_v ("   }")
        call put_def_end

		call put_def_start (tblnameXXX, "$Zero$Declare")
        call put_def_String_v ("{")
    	call put_def_char (NEWLINE)
	
    	for (tbl$sav$index=1; tbl$sav$index <= tbl$sav_count;
    	     tbl$sav$Index=tbl$sav$index+1)
    	    {
            #    $Zero$Declare

    	    j = length (ddl_text[tbl$sav$name])
    	    call put_def_String_v ("BBdeclare(")
    	    call put_def_char (ddl_text[tbl$sav$name+j-1])
    	    call put_def_String_v ("save_")
    	    call copy_no_dollar (ddl_text[tbl$sav$name],work)
    	    call put_def_string (work)
    	    call put_def_String_v (")")
            call put_def_char (NEWLINE)
    	    }

        #   })

        call put_def_String_v ("   }")
        call put_def_end
    	} # end of ZERO


    if (tbl$duplicate == YES & nalt > 1)	# Duplicate..... 
    	{
        #   define(unt$Duplicate$UNT2,{

        call put_def_start2 (tblname,Duplicate_str,tblnameXXX)
        call put_def_String_v ("{")
    	call put_def_char (NEWLINE)

#       #    for (itbldup= 1; itbldup <= unt$length; itbldup = itbldup + 1)
#       #       ibb_tbl[itbldup] = ibb_tbl2[itbldup]

        #    call LIB$MOVC3(UNT$Length*4,iBB_tbl2[1],iBB_tbl[1])

        call put_def_String_v ("    call LIB$MOVC3(")
        call put_def_string (tblname)
        call put_def_String_v ("$Length*4,i")
        call put_def_text (sys$id)
        call put_def_String_v ("_")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("[1],i")
        call put_def_text (sys$id)
        call put_def_String_v ("_")
        call put_def_string (tblname)
        call put_def_String_v ("[1])")
    	call put_def_char (NEWLINE)

        #   })

        call put_def_String_v ("   }")
        call put_def_end

    	} # end of DUPLICATE

    }

return
end


subroutine copy_no_dollar (source,dest)
d_common
character	source[ARB],
    		dest[ARB]

for (k = 1; source[k] != 0; k=k+1)
    {
    if (source[k] == DOLLAR) dest[k] = UNDERLINE
    else                  dest[k] = source[k]
    }

dest[k] = 0

return
end


subroutine def_table (int,ialt,tbl$pointer)
d_common
character	tblname[10],
    		tblnameXXX[10],
    		number[10],
            work[100]
string duplicate_str "$Duplicate$"
string base_and_str  "$Base & "

call scopy (ddl_text[tbl$id],1,tblname,1)


################################################# define_pointer_constants


#   define(tbl$slots,xxxxxxxx)

    call put_def_start (tblname,"$slots") 
    call put_def_text (tbl$slots)
    call put_def_end 


 if (tbl$Variable == YES) 
    {
    #   define(tbl$entB,xxxxxxxx)

        call put_def_start (tblname,"$entb")
        call put_def_text (tbl$Entry)
        call put_def_end 


    #   define(tbl$entS,xxxxxxxx)

        call put_def_start (tblname,"$ents")
        call put_def_text (tbl$Var_size)
        call put_def_end


    #   define(tbl$MaxSub,xxxxxxxx)

        call put_def_start (tblname,"$MaxSub")
        call put_def_text (tbl$Var_max)
        call put_def_end

    #   define(tbl$MaxEntry,arith(tbl$entB,+,arith(tbl$entS,*,tbl$MaxSub)))

        call put_def_start (tblname,"$MaxEntry")
        call put_def_String_v ("arith(")
        call put_def_string (tblname)
        call put_def_String_v ("$entB,+,arith(")
        call put_def_string (tblname)
        call put_def_String_v ("$entS,*,")
        call put_def_string (tblname)
        call put_def_String_v ("$MaxSub))")
        call put_def_end
    }


#   define(tbl$Size, I $$_sys P[$$PTRSize,$$ tbl])

    call put_def_start (tblname,"$size") 
    call put_def_String_v ("I")
    call put_def_text (sys$id)
    call put_def_String_v ("P[$$PtrSize,$$")
    call put_def_text (tbl$id)
    call put_def_String_v ("]")
    call put_def_end


#   define(tbl$Used, I $$_sys P[$$PTRUsed,$$ tbl ])

    call put_def_start (tblname,"$used") 
    call put_def_String_v ("I")
    call put_def_text (sys$id)
    call put_def_String_v ("P[$$PtrUsed,$$")
    call put_def_text (tbl$id)
    call put_def_String_v ("]" )
    call put_def_end


##   define(tbl$Seg,  I $$_sys P[$$PTRSeg,$$ tbl ])
#
#    call put_def_start (tblname,"$slots") 
#    call put_def_text (tbl$slots)
#    call put_def_end


#   define($$_tbl $Base,I $$_sys P[$$PTRABase,$$ tbl ])
##   define($$_tbl $ABase,I $$_sys P[$$PTRABase,$$ $$_tbl ])
##   define(tbl$Base, ($$_tbl $Cbase+$$_tbl $ABase-$$_tbl $SBase))

    call put_def_start (tblname,"$base") 
    call put_def_String_v ("I")
    call put_def_text (sys$id)
    call put_def_String_v ("P[$$PtrBase,$$")
    call put_def_text (tbl$id)
    call put_def_String_v ("]")
    call put_def_end


#   define(tbl$Last, ($$_tbl $Base+$$_tbl $Used-1))

    call put_def_start (tblname,"$last") 
    call put_def_String_v ("(")
    call put_def_text (tbl$id)
    call put_def_String_v ("$Base+")
    call put_def_text (tbl$id)
    call put_def_String_v ("$Used-1)")
    call put_def_end


#   define(tbl$Last$to,$$_tbl $Used=1-$$_tbl $Base+)

    call put_def_start (tblname,"$Last$to") 
    call put_def_text (tbl$id)
    call put_def_String_v ("$Used=1-")
    call put_def_text (tbl$id)
    call put_def_String_v ("$Base+")
    call put_def_end


if (tbl$Flag_Updates != NO) 
    {    
    #   define(tbl$FlagTable,)

        call put_def_start (tblname,"$FlagTable") 
        call put_def_end
    }


######################################### define_pointer_macros .....   
######################################### Once, plus once for each alternate.


for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1					# Build name of alternate table
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
    	{
    	call itoc (nalt,number,2)
    	call stcopy (number,1,tblnameXXX,len)
    	}
    
    call put_def_char (NEWLINE)

    #   define($$_tblx $pointer,k $$_tblx )

        call put_def_start (tblnameXXX,"$Pointer") 
        call put_def_String_v ("kPoint_")
        call put_def_string (tblnameXXX)
        call put_def_end


    if (tbl$Variable == YES) 
        {
        #   define($$_tblx $entN,$$_entn)
    
            call put_def_start (tblnameXXX,"$entN")
            call put_def_text_replace (tbl$Var_name,tblname,tblnameXXX)
            call put_def_end
    
    
        #   define($$_tblx $entry,($$_tbl $entB + 
    	#			   $$_tblx $entN*$$_tbl $entS))
    
            call put_def_start (tblnameXXX,"$Entry")
            call put_def_String_v ("(")
            call put_def_string (tblname)
            call put_def_String_v ("$entB+")
            call put_def_string (tblnamexxx)
            call put_def_String_v ("$entN*")
            call put_def_string (tblname)
            call put_def_String_v ("$entS)")
            call put_def_end
        }
    else 
        {
        #   define($$_tblx $entry,$$_tbl $entry)

            call put_def_start (tblnameXXX,"$Entry")
            call put_def_text (tbl$Entry)
            call put_def_end
        }    

        	
    #   define($$_tblx $pointer$first,$$_tblx $pointer=$$_tbl $base)

        call put_def_start (tblnameXXX,"$Pointer$First")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$pointer=")
        call put_def_string (tblname)
        call put_def_String_v ("$Base")
        call put_def_end


    #   define($$_tblx $pointer$next,$$_tblx $pointer=$$_tblx $pointer + 
    #						      $$_tblx $entry)

        call put_def_start (tblnameXXX,"$Pointer$Next")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$pointer=")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$pointer+")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Entry")
        call put_def_end


    #   define($$_tblx $pointer$ok,($$_tblx $pointer>=$$_tbl $base & 
    #	                            $$_tblx $pointer<=$$_tbl $last))

        call put_def_start (tblnameXXX,"$Pointer$Ok")
        call put_def_String_v ("(")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer>=")
        call put_def_string (tblname)
        call put_def_String (base_and_str)
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer<=")
        call put_def_string (tblname)
        call put_def_String_v ("$Last)")
        call put_def_end


    #   define($$_tblx $pointer$valid,($$_tblx $pointer>=$$_tbl $base & 
    #			$$_tblx $pointer<($$_tbl $base+$$_tbl $size)))

        call put_def_start (tblnameXXX,"$Pointer$Valid")
        call put_def_String_v ("(")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer>=")
        call put_def_string (tblname)
        call put_def_String (base_and_str)
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer<(")
        call put_def_string (tblname)
        call put_def_String_v ("$Base+")
        call put_def_string (tblname)
        call put_def_String_v ("$Size))")
        call put_def_end


    if (tbl$Variable == YES)
    	{
        #   define($$_tblx $pointer$index,$$$ $$_tblx $pointer$index_Invalid)

        call put_def_start (tblnameXXX,"$Pointer$Index")
        call put_def_String_v ("$$$ "//char(0))
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer$index_Invalid")
        call put_def_end

        #   define($$_tblx $pointer$index,$$$ $$_tblx $pointer$to_Invalid))

        call put_def_start (tblnameXXX,"$Pointer$To")
        call put_def_String_v ("$$$ "//char(0))
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer$To_Invalid")
        call put_def_end
    	}
    else
    	{
        #   define($$_tblx $pointer$index,(($$_tblx $pointer-$$_tbl $base) / 
    	#				    $$_tblx $entry+1))

        call put_def_start (tblnameXXX,"$Pointer$Index")
        call put_def_String_v ("((")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer-")
        call put_def_string (tblname)
        call put_def_String_v ("$Base)/")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Entry+1)")
        call put_def_end


        #   define($$_tblx $pointer$to,$$_tblx $pointer$first - 
    	#			       $$_tblx $entry + $$_tblx $entry*)

        call put_def_start (tblnameXXX,"$Pointer$To")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer$First-")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Entry+(")
#       call put_def_String_v ("$Entry+ZEXT(")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Entry)*")
#       call put_def_String_v ("$Entry)*")
        call put_def_end
    	}

    if (tbl$zero == YES)			# Zero..... 
    	{
        #   define(dyn2$zero,{

        call put_def_start (tblnameXXX,"$Zero")
        call put_def_String_v ("{")
    	call put_def_char (NEWLINE)


    	for (tbl$sav$index=1; tbl$sav$index <= tbl$sav_count;
    	     tbl$sav$Index=tbl$sav$index+1)
    	    {
            #    isave_dyn_nbreq_i=xdyn2$nbreq$i

    	    j = length (ddl_text[tbl$sav$name])
    	    call put_def_String_v ("    "//char(0))
    	    call put_def_char (ddl_text[tbl$sav$name+j-1])
    	    call put_def_String_v ("save_")
    	    call copy_no_dollar (ddl_text[tbl$sav$name],work)
    	    call put_def_string (work)
    	    call put_def_String_v ("=x")
    	    call put_def_text_replace (tbl$sav$name,tblname,tblnamexxx)
            call put_def_char (NEWLINE)
    	    }

#       #    jzent=dyn2$entry
#       #    for (jz=0;jz<jzent;jz=jz+1) ibb[dyn2$pointer+jz]=0

        #    call LIB$MOVC5(0,0,0,dyn2$entry*4,IBB[dyn2$pointer])

    	call put_def_String_v ("    call LIB$MOVC5(0,0,0,")
    	call put_def_string (tblnamexxx)
    	call put_def_String_v ("$Entry*4,i")
    	call put_def_text (sys$id)
    	call put_def_String_v ("[")
    	call put_def_string (tblnamexxx)
    	call put_def_String_v ("$Pointer])")
        call put_def_char (NEWLINE)

    	for (tbl$sav$index=1; tbl$sav$index <= tbl$sav_count;
    	     tbl$sav$Index=tbl$sav$index+1)
    	    {
            #    putdyn2$nbreq$i(isave_dyn_nbreq_i)

    	    j = length (ddl_text[tbl$sav$name])
    	    call put_def_String_v ("    put")
    	    call put_def_text_replace (tbl$sav$name,tblname,tblnamexxx)
    	    call put_def_String_v ("(")
    	    call put_def_char (ddl_text[tbl$sav$name+j-1])
    	    call put_def_String_v ("save_")
    	    call copy_no_dollar (ddl_text[tbl$sav$name],work)
    	    call put_def_string (work)
    	    call put_def_String_v (")")
            call put_def_char (NEWLINE)
    	    }
        call put_def_String_v ("   }")
        call put_def_end

		call put_def_start (tblnameXXX, "$Zero$Declare")
        call put_def_String_v ("{")
    	call put_def_char (NEWLINE)
	
    	for (tbl$sav$index=1; tbl$sav$index <= tbl$sav_count;
    	     tbl$sav$Index=tbl$sav$index+1)
    	    {
            #    $Zero$Declare

    	    j = length (ddl_text[tbl$sav$name])
    	    call put_def_String_v ("BBdeclare(")
    	    call put_def_char (ddl_text[tbl$sav$name+j-1])
    	    call put_def_String_v ("save_")
    	    call copy_no_dollar (ddl_text[tbl$sav$name],work)
    	    call put_def_string (work)
    	    call put_def_String_v (")")
            call put_def_char (NEWLINE)
    	    }

        #   })

        call put_def_String_v ("   }"//char(0))
        call put_def_end
    	} # end of ZERO


    if (tbl$duplicate == YES & nalt > 1)	# Duplicate..... 
    	{
        #   define(unt$Duplicate$UNT2,{

        call put_def_start2 (tblname,Duplicate_str,tblnameXXX)
        call put_def_String_v ("{")
    	call put_def_char (NEWLINE)

#       #    for (itbldup= 0; itbldup < unt$entry; itbldup = itbldup + 1)
#       #       ibb[unt$pointer+itbldup] = ibb[unt2$pointer+itbldup]

        #    call LIB$MOVC3(unt2$Entry*4,iBB[unt2$pointer],iBB[unt$pointer])

        call put_def_String_v ("    call LIB$MOVC3(")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Entry*4,i")
        call put_def_text (sys$id)
        call put_def_String_v ("[")
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer],i")
        call put_def_text (sys$id)
        call put_def_String_v ("[")
        call put_def_string (tblname)
        call put_def_String_v ("$Pointer])")
    	call put_def_char (NEWLINE)

        #   })

        call put_def_String_v ("   }")
        call put_def_end

    	} # end of DUPLICATE

    if (tbl$Flag_Updates != NO) 		# Flag Fields
        {    
        #   define(dyn2$FlagField,{

        call put_def_start (tblnameXXX,"$FlagField")
        call put_def_String_v ("{")
    	call put_def_char (NEWLINE)

        #    PUTdyn2$modified$i(ior(ifelse(@1,,,$bit@1|)$bit0 , Xdyn2$modified$i))

        call put_def_String_v ("    PUT")
        call put_def_text_replace (tbl$Flag_Updates,tblname,tblnameXXX)
        call put_def_String_v ("(ior(ifelse(@1,,,$bit@1|)$bit0")
        call put_def_String_v (",X")
        call put_def_text_replace (tbl$Flag_Updates,tblname,tblnameXXX)
        call put_def_String_v ("))")
    	call put_def_char (NEWLINE)


        #    dyn$FlagTable

        call put_def_String_v ("    "//char(0))
        call put_def_string (tblname)
        call put_def_String_v ("$FlagTable")
    	call put_def_char (NEWLINE)


        #   })

        call put_def_String_v ("   }")
        call put_def_end

    	} # end of FLAGFIELD

    }

return
end


subroutine put_def_start (str1,str2)
d_common
character str1[ARB]
VMSchar*(*)   str2

call putlin_v ("define(",current_fd)
call putlin (str1,current_fd)
call putlin_v (str2,current_fd)
call putch (COMMA,current_fd)

return
end


subroutine put_def_start2 (str1,str2,str3)
d_common
character str1[ARB], str2[ARB], str3[ARB]

call putlin_v ("define(",current_fd)
call putlin (str1,current_fd)
call putlin (str2,current_fd)
call putlin (str3,current_fd)
call putch (COMMA,current_fd)

return
end


subroutine put_def_text (ipnt)
d_common
integer*2	ipnt

if (ipnt != 0) 
    call putlin (ddl_text[ipnt],current_fd)

return
end


subroutine put_def_text_replace (ipnt,str1,str2)
d_common
integer		EqualLen, pnt
integer*2	ipnt
character	str1[ARB],
    		str2[ARB],
    		work1[ARB],
    		work2[ARB]

if (ipnt == 0) return

len1=1
call stcopy (str1,1,work1,len1)
call stcopy_vh ("$", 1,work1,len1)

len2=1
call stcopy (str2,1,work2,len2)
call stcopy_vh ("$", 1,work2,len2)

for (pnt = ipnt; ddl_text[pnt] != EOS; pnt = pnt + 1)
    {
    if (EqualLen(work1,ddl_text[pnt]) == YES)
    	{
        call putlin (work2,current_fd)
    	pnt = pnt + len1 - 2
    	}
    else 
    	{
        call putch (ddl_text[pnt],current_fd)
    	}
    }

return
end


integer function EqualLen (str1,str2)
character str1[ARB],str2[ARB],clower

for (i=1; clower(str1[i]) == clower(str2[i]); i=i+1) 
    {
    if (str1[i] == EOS | 
    	str2[i] == EOS  ) break
    }

if (str1[i] == EOS) return (YES)

return (NO)
end


subroutine put_def_string (str1)
d_common
character str1[ARB]

call putlin (str1,current_fd)

return
end


subroutine put_def_string_v (str1)
d_common
VMSchar*(*) str1

call putlin_v (str1,current_fd)

return
end


subroutine put_def_char (char)
d_common
character	char

call putch (char,current_fd)

return
end


subroutine put_def_char_v (char)
d_common
VMSchar*(*)	char

call putch (%%ref(char),current_fd)

return
end


subroutine put_def_val (ival)
d_common
integer		ival

call putint (ival,1,current_fd)

return
end


subroutine put_def_end 
d_common

call putch (RPAREN,current_fd)
call putch (NEWLINE,current_fd)

return
end


subroutine def_subtbl (int,ialt,tbl$pointer,tbl$sub$index)
d_common
character	tblname[10],
    		subname[10],
    		subname2[10],
    		tblnameXXX[10],
    		number[10]
integer		equal

string index_str "$index"
string slots_str "$slots"
string a_star "*"
string index_ok_str "$index$ok"
string index_valid_str "$index$Valid"
string address_str "$Address"
string position_str "$Position"
k = 1
call scopy (ddl_text[tbl$id],1,tblname,k)
subname[1] = DOLLAR
k = 2
call scopy (ddl_text[tbl$sub$id],1,subname,k)
call copy_no_dollar (subname,subname2)

for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1					# Build name of alternate table
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
    	{
    	call itoc (nalt,number,3)
    	call stcopy (number,1,tblnameXXX,len)
    	}
    
    call put_def_char (NEWLINE)

    #   define(dyn$eq$slots,xdyn$nbreq$i)

    call put_def_start2 (tblnameXXX,subname,slots_str) 
    call put_def_text_replace (tbl$sub$slots,tblname,tblnameXXX)
    call put_def_end

    #   define(dyn$eq$index,Index_DYN2_EQ)

	if (equal(ddl_text(tbl$Sub$Slots),a_star) == YES)
		{
		call put_def_start2 (tblnameXXX,subname, index_str)
		call put_def_String_v ("1")
  	    call put_def_end 
		}
	else
		{		    
		call put_def_start2 (tblnameXXX,subname,index_str) 
	    call put_def_String_v ("Index_")
	    call put_def_String (TblnameXXX)
	    call put_def_String (SubName2)
 	    call put_def_end

	    #   define(dyn$eq$index$ok,(dyn$eq$index>0&dyn$eq$index<=dyn$eq$slots))

 	    call put_def_start2 (tblnameXXX,subname, index_ok_str) 
	    call put_def_String_v ("(")
	    call put_def_string (tblnameXXX)
	    call put_def_string (subname)
	    call put_def_String_v ("$Index>0&")
	    call put_def_string (tblnameXXX)
	    call put_def_string (subname)
	    call put_def_String_v ("$Index<=")
		call put_def_string (tblnameXXX)
 	    call put_def_string (subname)
 	    call put_def_String_v ("$Slots)")
 	    call put_def_end


	    #   define(dyn$eq$index$valid,(dyn$eq$index>0&dyn$eq$index<=100))

	    call put_def_start2 (tblnameXXX,subname, index_Valid_str) 
	    call put_def_String_v ("(")
	    call put_def_string (tblnameXXX)
	    call put_def_string (subname)
	    call put_def_String_v ("$Index>0&")
	    call put_def_string (tblnameXXX)
	    call put_def_string (subname)
	    call put_def_String_v ("$Index<=")
	    call put_def_String_v ("100)")
	    call put_def_end
		}

    
    if (tbl$sub$Add != 0)
    	{
    	#   define(dyn$eq$ADDRESS,xxxxxxxx)

        call put_def_start2 (tblnameXXX,subname,Address_str) 
        call put_def_text_replace (tbl$sub$Add,tblname,tblnameXXX)
        call put_def_end
    	}


    if (tbl$sub$Pos != 0)
    	{
    	#   define(dyn$eq$POSITION,xxxxxxxx)

        call put_def_start2 (tblnameXXX,subname,Position_str) 
        call put_def_text_replace (tbl$sub$Pos,tblname,tblnameXXX)
        call put_def_end
    	}
    }

return
end


subroutine def_macro (int,ialt,tbl$pointer,tbl$def$index)
d_common

call putch (NEWLINE,int)
call putlin_v ("define",int)
call putlin (ddl_text[tbl$def$Indx],int)

return
end


subroutine def_field (int,ialt,tbl$pointer,tbl$fld$index)
d_common
integer		type, 
    		ctoi,
    		equal_hv, equal,
    		exempt,		# exempt from FLAGing (YES/NO)
    		lo_sign,
    		hi_sign,
			i,
			i_size
logical     prange      # the range is in parens....        

character	tblname[10],
    		fldname[ARB],
    		fldname2[ARB],
    		tblnameXXX[10],
    		number[10],
    		work1[40],
    		work2[40]
VMSchar 	fldname_v*ARB
equivalence (fldname, fldname_v)

string put_str "put"
string x_str   "x"
string hi_str  "_Hi"
string Dhi_str "$Hi_"
string lo_str  "_Lo"
string Dlo_str "$Lo_"
string size_str "_Size"
string Dsize_str "$Size_"

call scopy (ddl_text[tbl$id],1,tblname,1)

number[1] = ddl_text[tbl$fld$Type]
number[2] = EOS

len = 1
call stcopy ('$'                   ,1,fldname,len)
call stcopy (ddl_text[tbl$fld$name],1,fldname,len)
call stcopy ('$'                   ,1,fldname,len)
call stcopy (number                ,1,fldname,len)

call copy_no_dollar (ddl_text[tbl$fld$name],fldname2)

if (tbl$Flag_Updates != NO) 		# Flag Fields
    {
    kk = 1
    call stcopy (tblname,1, work1,kk)
    call stcopy (fldname,1, work1,kk)
    call fold (work1)

    call scopy (ddl_text[tbl$Flag_Updates],1, work2,1)
    call fold (work2)

    exempt = equal (work1,work2)
    }
i_size = 1
for (nalt = 1; nalt <= ialt; nalt=nalt+1)
    {
    len = 1					# Build name of alternate table
    call stcopy (ddl_text[tbl$id],1,tblnameXXX,len)

    if (nalt > 1) 
    	{
    	call itoc (nalt,number,3)
    	call stcopy (number,1,tblnameXXX,len)
    	}

    if (ddl_text[tbl$fld$Type] == BIGV )
        {
		if (nalt == 1)
			{
	        call put_def_char (NEWLINE)

	        #   define(tbl$field$V_Size,<char length>)
	        # or
	        #   define($Size_tbl$field$V,<char length>)

	        if (opt_prefix) 
	            {
	            call put_def_start2 (DSize_str,tblnamexxx,fldname)
	            }
	        else 
	            {
	            call put_def_start2 (tblnamexxx,fldname,Size_str)
	            }

	        call put_def_text (tbl$fld$size)
	        call put_def_char_v (')')
			i = tbl$fld$size
			i_size = (ctoi(ddl_text,i)+3)/4
			}
		call put_def_char (NEWLINE)
		call put_def_string_v ('define($size_v_')
		call put_def_string (tblnamexxx)
		call put_def_char_v ('_')
		call put_def_string (fldname2)
		call put_def_char_v (',')
		if (opt_prefix)
			call put_def_string_v ('$Size_')
		call put_def_string (tblname)
		call put_def_string (fldname)
		if (!opt_prefix)
			call put_def_string_v ('_Size')
		call put_def_end
       }

#   if (nalt == 1 & tbl$fld$Range != 0 & ddl_text[tbl$fld$range] != LPAREN)
    if (tbl$Gen_Ranges != NO & nalt == 1 & tbl$fld$Range != 0 )
        {
        i = tbl$fld$Range 

        prange = ddl_text[tbl$fld$range] == LPAREN

        if (prange)
            {
            i = i + 1
            }

        call put_def_char (NEWLINE)

        #   define(tbl$field$I_Lo,<lowest value>)
        # or
        #   define($Lo_tbl$field$I,<lowest value>)

        if (opt_prefix) 
            {
            call put_def_start2 (DLo_str,tblnamexxx,fldname)
            }
        else 
            {
            call put_def_start2 (tblnamexxx,fldname,Lo_str)
            }
            
        if (prange) call put_def_char_v ("(")

        repeat
            {
            if (ddl_text[i] == EOS) break

            if (prange & ddl_text[i] == RPAREN & ddl_text[i+1] == EOS) break

            call put_def_char (ddl_text[i])
            i = i + 1

            if (ddl_text[i] == MINUS) 
                {
                i = i + 1
                break
                }
            }

        if (prange) call put_def_char_v (")")
        call put_def_char_v (')')

        call put_def_char (NEWLINE)

        #    define(tbl$field$I_Hi,<highest value>)
        # or 
        #    define($Hi_tbl$field$I,<highest value>)

        if (opt_prefix) 
            {
            call put_def_start2 (DHi_str,tblnamexxx,fldname)
            }
        else 
            {
            call put_def_start2 (tblnamexxx,fldname,Hi_str)
            }
            
        if (prange) call put_def_char_v ("(")

        repeat
            {
            if (ddl_text[i] == EOS) break

            if (prange & ddl_text[i] == RPAREN & ddl_text[i+1] == EOS) break

            call put_def_char (ddl_text[i])
            i = i + 1

            if (ddl_text[i] == MINUS) 
                {
                i = i + 1
                break
                }
            }

        if (prange) call put_def_char_v (")")
        call put_def_char_v (')')
        }

    call put_def_char (NEWLINE)

    #   define(tbl$field$i,i_tbl_field)

    call put_def_start (tblnamexxx,fldname_v)
    call put_def_char (ddl_text[tbl$fld$Type])
    call put_def_char_v ('_')
    call put_def_String (tblnameXXX)
    call put_def_char_v ('_')
    call put_def_string (FldName2)
    call put_def_end 


    #   define(xtbl$field$i,??????)

    call put_def_start2 (x_str,tblnamexxx,fldname)

    if (ddl_text[tbl$fld$type] == BIGC)			  # Character Type
    	{
    	call put_def_ext_Name  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
		i_size = 2
    	}
    else if (ddl_text[tbl$fld$type] == BIGV)		  # Vax Character Type
    	{
    	call put_def_ext_Vaxc  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
    	}
    else if (type(ddl_text[tbl$fld$size]) == LETTER)	  # Full Word Size
    	{
    	call put_def_ext_word  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
    	}
    else 						  # Bit Packed 
    	{
    	call put_def_ext_Bits  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
    	}

    call put_def_end 


    #   define(puttbl$field$i,??????)

    call put_def_start2 (put_str,tblnamexxx,fldname)

    if (exempt == NO & (tbl$Flag_All == YES | tbl$fld$Flag != NO))
    	{
    	# {tbl2$FlagField(??)

        call put_def_char_v ('{')
		if (tbl$Flag_Changes != NO)
			{
			call put_def_char (NEWLINE)
			call put_def_string_v ('    '//char(0))
			call put_def_snapshot (tbl$pointer,tbl$fld$index,
                                   tblnamexxx, i_size, 'iSnap_Before')
			call put_def_string_v ('    '//char(0))
			}	
    	}

    if (ddl_text[tbl$fld$type] == BIGC)			  # Character Type
    	{
    	call put_def_ins_Name  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
    	}
    else if (ddl_text[tbl$fld$type] == BIGV)		  # Vax Character 
    	{
    	call put_def_ins_VaxC  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
    	}
    else if (type(ddl_text[tbl$fld$size]) == LETTER)	  # Full Word Size
    	{
    	call put_def_ins_word  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
    	}
    else 						  # Bit Packed 
    	{
    	call put_def_ins_Bits  (tbl$pointer,
    				tbl$fld$index,
    				tblnameXXX,
    				fldname)
    	}

    if (exempt == NO & (tbl$Flag_All == YES | tbl$fld$Flag != NO))
    	{
		if (tbl$Flag_Changes != NO)
			{
			call put_def_char(NEWLINE)
			call put_def_string_v ('    '//char(0))
			call put_def_snapshot (tbl$pointer,tbl$fld$index,
                                   tblnamexxx, i_size,'iSnap_After')
			call put_def_string_v ('    '//char(0))
			call put_def_snapdiff ('iSnap_Before','iSnap_After',i_size)
			}
		else
        	call put_def_char_v (';')

        call put_def_string (tblnameXXX)
        call put_def_String_v ("$FlagField")

    	kk = tbl$fld$Flag - 1
    	if (kk > 0)
    	    {
            call put_def_char_v ('(')
    	    call put_def_val  (kk)
            call put_def_char_v (')')
    	    }
		if (tbl$Flag_Changes != NO)
			{
			call put_def_char (NEWLINE)
			call put_def_string_v ('    '//char(0))
			}

        call put_def_char_v ('}')
    	}

    call put_def_end 
    }

return
end


subroutine put_def_text_Word (tbl$pointer,tbl$fld$index,tblnameXXX)
d_common
integer		ctoi
character	tblnameXXX[10] 

call put_def_char_v ("[")
call put_def_text_Word_wo (tbl$pointer, tbl$fld$index, tblnameXXX)
call put_def_char_v ("]")

return
end

subroutine put_def_text_Word_wo (tbl$pointer,tbl$fld$index,tblnameXXX)
d_common
integer		ctoi
character	tblnameXXX[10], 
    		tblname[ARB],
    		number[ARB]

if (tbl$record == YES)
    {
    call scopy (ddl_text[tbl$fld$word],1,number,1)
    }
else 
    {
    number[1] = EOS

    if (tbl$fld$word != 0)
        {
        i = tbl$fld$word     
        n = ctoi (ddl_text,i) - 1

    	if (tbl$fld$SubTbl != 0)
			{
			i = tbl$fld$word
			n = ctoi (ddl_text,i) - 1
			if (tbl$fld$SubTbl != 0 ) n = n + 1
			}

        if (n > 0) 
            {
            number[1] = PLUS
            call itoc (n,number[2],5)
            }
        }
    }


if (tbl$record     != YES & 
    tbl$fld$Signed == YES  )
    {
    j = 1; isize = ctoi (ddl_text[tbl$fld$size],j)
    j = 1; ipos  = ctoi (ddl_text[tbl$fld$Pos], j)
    if (j == 1) ipos = -1

    if (isize == 8 & mod(ipos,8) == 0)
        {
        call put_def_val(ipos/8 + 1)
        call put_def_char_v(",")
        }

    else if (isize == 16 & mod(ipos,16) == 0)
        {
        call put_def_val(ipos/16 + 1)
        call put_def_char_v(",")
        }
    }

if (tbl$fld$indir != NO)
    {
    call scopy (ddl_text[tbl$id],1,tblname,1)

    call put_def_char_v ("x")
    call put_def_text_replace (tbl$fld$indir,tblname,tblnameXXX)
    }
else if (tbl$fld$SubTbl != 0)
    {
    call put_def_string (tblnameXXX)
    call put_def_char_v ("$")
    call put_def_text (tbl$fld$SubTbl)
    call put_def_String_v ("$Address")
    call put_def_string (number)
    }
else 
    {
    if (tbl$record != YES)
    	{
        call put_def_string (tblnameXXX)
        call put_def_String_v ("$Pointer")
    	}

    call put_def_string (number)
    }

return
end


subroutine put_def_text_Value (tbl$pointer,tbl$fld$index,
    			       tblnameXXX,fldname)
d_common
character	fldname[ARB],
    		tblnameXXX[10]

#
# 'ifelse(@1,,tbl$field$i,@1)'
#

call put_def_String_v ("ifelse(@1,,")
call put_def_string (tblnameXXX)
call put_def_string (fldname)
call put_def_String_v (",@1)")

return
end


subroutine put_def_text_Pos$Mask (tbl$pointer,tbl$fld$index,tblnameXXX)
d_common
character	tblnameXXX[10]

#
#   formats:   ',XXX,M999Bits'
#
#	where XXX is the value of the position
#	and   999 is the number of bits
#
#   or:   ',XXX,999'
#
#	where XXX is the value of the position
#	and   999 is the number of bits
#

call put_def_text_Pos (tbl$pointer,tbl$fld$index,tblnameXXX)
if (opt_mask)
    {
    call put_def_String_v (",M")
    call put_def_text (tbl$fld$size)
    call put_def_String_v ("bits")
    }
else 
    {
    call put_def_String_v (",")
    call put_def_text (tbl$fld$size)
    }

return
end


subroutine put_def_text_Pos (tbl$pointer,tbl$fld$index,tblnameXXX)
d_common
character	tblnameXXX[10],
                number[30]

integer     ctoi

#
#   formats:   ',999'
#	 or:   ',tbl$XXXXXX$POSITION+99'
#
#	where 999 is the value of position if numeric
# 	and   XXXXXX is the sub-tbl reference

number[1] = EOS

j1 = tbl$fld$name               # these are here for debugging only
j2 = tbl$fld$pos                #   "
j3 = tbl$fld$PosSub             #   "

if (tbl$fld$pos != 0)
    {
    i = tbl$fld$pos
    n = ctoi (ddl_text,i) - 1

    if (tbl$fld$PosSub != 0) n=n+1

    if (n > 0) 
        {
        number[1] = PLUS
        call itoc (n,number[2],5)
        }
    }

call put_def_char (COMMA)

if (tbl$fld$PosSub != 0)
    {
    call put_def_string (tblnameXXX)
    call put_def_char_v ("$")
    call put_def_text (tbl$fld$PosSub)
    call put_def_String_v ("$Position")
    call put_def_string (number)
    }
#if (ddl_text[tbl$fld$pos] > '9')
#    {
#    call put_def_string (tblnameXXX)
#    call put_def_char_v ('$')
#    call put_def_text (tbl$fld$pos)
#    call put_def_String_v ("$Position")
#    }
else
    {
    call put_def_text (tbl$fld$pos)
    }

return
end


subroutine put_def_text_Sys (tbl$pointer,tblnameXXX)
d_common
character	tblnameXXX[10]

if (tbl$record == YES)
    {
    call put_def_text (sys$id)
    call put_def_char_v ("_")
    call put_def_string (tblnameXXX)
    }
else
    {
    call put_def_text (sys$id)
    }

return
end


subroutine put_def_ext_Name  (tbl$pointer,tbl$fld$index,
    			      tblnameXXX,fldname)
d_common
character	fldname[ARB],
    		tblnameXXX[10]


call put_def_String_v ("$$ExtLit(I")
call put_def_text_Sys (tbl$pointer,tblnameXXX)
call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_text_Pos (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_char_v (',')
call put_def_text (tbl$fld$size)
call put_def_char_v (')')

return
end


subroutine put_def_ext_VaxC  (tbl$pointer,tbl$fld$index,
    			      tblnameXXX,fldname)
d_common
character	fldname[ARB],
    		tblnameXXX[10]


call put_def_String_v ("$$ExtVaxC(I")
call put_def_text_Sys (tbl$pointer,tblnameXXX)
call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_text_Pos (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_char_v (',')
call put_def_text (tbl$fld$size)
call put_def_char_v (')')

return
end


subroutine put_def_ext_Word    (tbl$pointer,tbl$fld$index,
    				tblnameXXX,fldname)
d_common
integer		equal_hv
character	fldname[ARB],
    		tblnameXXX[10]

if (tbl$fld$Scale != 0 				    |
    equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES |
    tbl$fld$Off   != 0					)
    {
    call put_def_char_v ('(')
    iparen = YES
    }
else
    {
    iparen = NO
    }

call put_def_char (ddl_text[tbl$fld$type])		# 'I' or 'F'

call put_def_text_Sys (tbl$pointer,tblnameXXX)
call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)

if (tbl$fld$Scale != 0)
    {
    call put_def_char_v ('*')

    call put_def_text (tbl$fld$Scale)
    }

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_def_char_v ('+')
    call put_def_text (tbl$fld$CDesc)
    call put_def_String_v ("$base")
    }

if (tbl$fld$Off != 0)
    {
    if (ddl_text[tbl$fld$Off] != MINUS) 
    	call put_def_char_v ('+')

    call put_def_text (tbl$fld$Off)
    }

if (iparen == YES)
    {
    call put_def_char_v (')')
    }

return
end


subroutine put_def_ext_Bits    (tbl$pointer,tbl$fld$index,
    				tblnameXXX,fldname)
d_common
integer		equal_hv, ctoi
character	fldname[ARB],
    		tblnameXXX[10],
    		bb_suffix

bb_suffix = NO

call put_def_String_v ("(")
j = 1; isize = ctoi (ddl_text[tbl$fld$size],j)
j = 1; ipos  = ctoi (ddl_text[tbl$fld$Pos], j)
if (j == 1) ipos = -1

if (tbl$record     != YES & 
    tbl$fld$Signed == YES  )
    {
    if (isize == 8 & mod(ipos,8) == 0)
        bb_suffix = LETB
    else if (isize == 16 & mod(ipos,16) == 0)
       bb_suffix = LETW
    }

if (bb_suffix == NO)
    {
    call put_def_String_v ("$$extract")

    if (isize+ipos > 32)
        call put_def_String_v ("_s")

    if (tbl$fld$Signed == YES)
        call put_def_String_v ("_x")
    }

call put_def_String_v ("(I")

call put_def_text_Sys (tbl$pointer,tblnameXXX)

if (bb_suffix != NO)
    call put_def_char(bb_suffix)

call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)

if (bb_suffix == NO)
    call put_def_text_Pos$Mask (tbl$pointer,tbl$fld$index,tblnameXXX)

call put_def_char_v (')')

if (ddl_text[tbl$fld$Type]== BIGF)
    {
    call put_def_String_v ("*1.0")
    }

if (tbl$fld$Scale != 0)
    {
    call put_def_char_v ('*')

    call put_def_text (tbl$fld$Scale)
    }

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_def_char_v ('+')
    call put_def_text (tbl$fld$CDesc)
    call put_def_String_v ("$base")
    }

if (tbl$fld$Off != 0)
    {
    if (ddl_text[tbl$fld$Off] != MINUS) 
    	call put_def_char_v ('+')

    call put_def_text (tbl$fld$Off)
    }

call put_def_char_v (')')

return
end


subroutine put_def_ins_Name  (tbl$pointer,tbl$fld$index,
    			      tblnameXXX,fldname)
d_common
character	fldname[ARB],
    		tblnameXXX[10]


call put_def_String_v ("$$InsLit(")
call put_def_text_value (tbl$pointer,tbl$fld$index,tblnameXXX,fldname)
call put_def_String_v (",I")
call put_def_text_Sys (tbl$pointer,tblnameXXX)
call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_text_Pos (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_char_v (',')
call put_def_text (tbl$fld$size)
call put_def_char_v (')')

return
end


subroutine put_def_ins_VaxC  (tbl$pointer,tbl$fld$index,
    			      tblnameXXX,fldname)
d_common
character	fldname[ARB],
    		tblnameXXX[10]


call put_def_String_v ("$$InsVaxC(")
call put_def_text_value (tbl$pointer,tbl$fld$index,tblnameXXX,fldname)
call put_def_String_v (",I")
call put_def_text_Sys (tbl$pointer,tblnameXXX)
call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_text_Pos (tbl$pointer,tbl$fld$index,tblnameXXX)
call put_def_char_v (',')
call put_def_text (tbl$fld$size)
call put_def_char_v (')')

return
end


subroutine put_def_ins_Word    (tbl$pointer,tbl$fld$index,
    				tblnameXXX,fldname)
d_common
integer		equal_hv
character	fldname[ARB],
    		tblnameXXX[10]


call put_def_char (ddl_text[tbl$fld$type])		# 'I' or 'F'

call put_def_text_Sys (tbl$pointer,tblnameXXX)
call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)

call put_def_String_v ("=(")

call put_def_text_value (tbl$pointer,tbl$fld$index,tblnameXXX,fldname)

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_def_char_v ('-')
    call put_def_text (tbl$fld$CDesc)
    call put_def_String_v ("$base")
    }

if (tbl$fld$Off != 0)
    {
    call put_def_char_v ('-')

    call put_def_text (tbl$fld$Off)
    }

call put_def_char_v (')')

if (tbl$fld$Scale != 0)
    {
    call put_def_char_v ('/')

    call put_def_text (tbl$fld$Scale)
    }

return
end


subroutine put_def_ins_Bits    (tbl$pointer,tbl$fld$index,
    				tblnameXXX,fldname)
d_common
integer		equal_hv, ctoi
character	fldname[ARB],
    		tblnameXXX[10],
    		bb_suffix

j = 1; isize = ctoi (ddl_text[tbl$fld$size],j)
j = 1; ipos  = ctoi (ddl_text[tbl$fld$Pos], j)
if (j == 1) ipos = -1

bb_suffix = NO

if (tbl$record     != YES & 
    tbl$fld$Signed == YES  )
    {
    if (isize == 8 & mod(ipos,8) == 0)
        bb_suffix = LETB
    else if (isize == 16 & mod(ipos,16) == 0)
    	bb_suffix = LETW
    }

if (bb_suffix != NO)
    {
    call put_def_String_v ("I")

    call put_def_text_Sys (tbl$pointer,tblnameXXX)
    call put_def_char(bb_suffix)

    call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)

    call put_def_String_v ("=")
    }

if (bb_suffix == NO)
    {
    call put_def_String_v ("$$insert")

    if (isize+ipos > 32)
        call put_def_String_v ("_s")
    }

call put_def_String_v ("(")

if (ddl_text[tbl$fld$Type]== BIGF)
    call put_def_String_v ("int(0.5+")

call put_def_char_v ('(')

call put_def_text_value (tbl$pointer,tbl$fld$index,tblnameXXX,fldname)

if (equal_hv(ddl_text[tbl$fld$Class],"POINTER") == YES)
    {
    call put_def_char_v ('-')
    call put_def_text (tbl$fld$CDesc)
    call put_def_String_v ("$base")
    }

if (tbl$fld$Off != 0)
    {
    call put_def_char_v ('-')

    call put_def_text (tbl$fld$Off)
    }

call put_def_char_v (')')

if (tbl$fld$Scale != 0)
    {
    call put_def_char_v ('/')
    call put_def_text (tbl$fld$Scale)
    }

if (ddl_text[tbl$fld$Type]== BIGF)
    call put_def_char_v (')')

if (bb_suffix == NO)
    {
    call put_def_String_v (",I")

    call put_def_text_Sys (tbl$pointer,tblnameXXX)
    call put_def_text_word (tbl$pointer,tbl$fld$index,tblnameXXX)
    call put_def_text_Pos$Mask (tbl$pointer,tbl$fld$index,tblnameXXX)
    }

call put_def_char_v (')')

return
end

subroutine put_def_snapshot (tbl$pointer,tbl$fld$index,tblnamexxx,isize,snap_var)
d_common
character tblnamexxx[10]
vmschar*(*) snap_var
integer isize

call put_def_string_v ('$$SnapShot(I')
call put_def_text_sys (tbl$pointer,tblnamexxx)
call put_def_string_v (',')
call put_def_text_word_wo (tbl$pointer,tbl$fld$index,tblnamexxx)
call put_def_string_v (',')
call put_def_val (isize)
call put_def_string_v (',')
call put_def_string_v (snap_var)
call put_def_string_v (')')
call put_def_char (NEWLINE)

return
end

subroutine put_def_snapdiff (snap_var1, snap_var2, isize)
d_common

vmschar*(*) snap_var1, snap_var2
integer isize

call put_def_string_v ('$$SnapDiff(')
call put_def_string_v (snap_var1)
call put_def_string_v (',')
call put_def_string_v (snap_var2)
call put_def_string_v (',')
call put_def_val (isize)
call put_def_string_v (')')

return
end
